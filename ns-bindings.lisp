(in-package :abstract-os)
(named-readtables:in-readtable :objc-readtable)


(defun NS::|fp__ivarDescriptionForClass:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(fp__ivarDescriptionForClass:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|fp__methodDescriptionForClass:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(fp__methodDescriptionForClass:) ((:POINTER)
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|fp_ivarDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fp_ivarDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|fp_methodDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fp_methodDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|fp_shortMethodDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fp_shortMethodDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|stringValueSafe:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringValueSafe:) (((:POINTER :INT)) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|utf8ValueSafe:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(utf8ValueSafe:) (((:POINTER :INT)) :STRING)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|boolValueSafe| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(boolValueSafe) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|boolValueSafe:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(boolValueSafe:) (((:POINTER :INT)) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|int64ValueSafe| (thing)
  (let ((message-lambda 
         (make-message-lambda @(int64ValueSafe) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|int64ValueSafe:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(int64ValueSafe:) (((:POINTER :INT)) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|doubleValueSafe| (thing)
  (let ((message-lambda 
         (make-message-lambda @(doubleValueSafe) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|doubleValueSafe:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(doubleValueSafe:) (((:POINTER :INT)) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|stringValueSafe| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringValueSafe) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|utf8ValueSafe| (thing)
  (let ((message-lambda 
         (make-message-lambda @(utf8ValueSafe) (NIL :STRING)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityOverriddenAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityOverriddenAttributes) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityReplaceRange:withText:| (thing _ with-text)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityReplaceRange:withText:) (((:STRUCT
                                                                        NS::|_NSRange|)
                                                                       :POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-text)))) nil t))

(defun NS::|accessibilityVisibleArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleArea) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityArrayAttributeCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityArrayAttributeCount:) ((:POINTER)
                                                                    :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityIndexOfChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIndexOfChild:) ((:POINTER)
                                                             :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_accessibilityValueForAttribute:clientError:| (thing _ client-error)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityValueForAttribute:clientError:) ((:POINTER
                                                                                (:POINTER
                                                                                 :INT))
                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr client-error))))

(defun NS::|accessibilityArrayAttributeValues:index:maxCount:| (thing _ index max-count)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityArrayAttributeValues:index:maxCount:) ((:POINTER
                                                                                     :UNSIGNED-LONG-LONG
                                                                                     :UNSIGNED-LONG-LONG)
                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) index max-count)))

(defun NS::|accessibilityParameterizedAttributeNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityParameterizedAttributeNames) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityAttributeValue:forParameter:| (thing _ for-parameter)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributeValue:forParameter:) ((:POINTER
                                                                             :POINTER)
                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-parameter))))

(defun NS::|accessibilityIndexForChildUIElementAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIndexForChildUIElementAttributeForParameter:) ((:POINTER)
                                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityAttributedValueForStringAttributeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributedValueForStringAttributeAttributeForParameter:) ((:POINTER)
                                                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityTemporaryChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTemporaryChildren) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityAttributeNamesClientError:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityAttributeNamesClientError:) (((:POINTER
                                                                             :INT))
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_accessibilityCanSetValueForAttribute:clientError:| (thing _ client-error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_accessibilityCanSetValueForAttribute:clientError:) ((:POINTER
                                                                                      (:POINTER
                                                                                       :INT))
                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr client-error)))) nil t))

(defun NS::|_accessibilityIndexOfChild:clientError:| (thing _ client-error)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityIndexOfChild:clientError:) ((:POINTER
                                                                           (:POINTER
                                                                            :INT))
                                                                          :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr client-error))))

(defun NS::|_accessibilityArrayAttributeCount:clientError:| (thing _ client-error)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityArrayAttributeCount:clientError:) ((:POINTER
                                                                                  (:POINTER
                                                                                   :INT))
                                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr client-error))))

(defun NS::|_accessibilityArrayAttributeValues:index:maxCount:clientError:| (thing _ index max-count client-error)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityArrayAttributeValues:index:maxCount:clientError:) ((:POINTER
                                                                                                  :UNSIGNED-LONG-LONG
                                                                                                  :UNSIGNED-LONG-LONG
                                                                                                  (:POINTER
                                                                                                   :INT))
                                                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) index max-count (ns-object-ptr client-error))))

(defun NS::|_accessibilityActionDelegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityActionDelegate) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityPerformShowMenuOfChild:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformShowMenuOfChild:) ((:POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_accessibilityUseConvenienceAPI| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_accessibilityUseConvenienceAPI) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_accessibilitySetUseConvenienceAPI:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySetUseConvenienceAPI:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_isAccessibilityContentSectionCandidate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAccessibilityContentSectionCandidate) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isAccessibilityContentNavigatorSectionCandidate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAccessibilityContentNavigatorSectionCandidate) (NIL
                                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isAccessibilityTopLevelNavigatorSectionCandidate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAccessibilityTopLevelNavigatorSectionCandidate) (NIL
                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isAccessibilityContainerSectionCandidate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAccessibilityContainerSectionCandidate) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isAccessibilityCandidateForSection:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAccessibilityCandidateForSection:) ((:POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_shouldSearchChildrenForSection| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldSearchChildrenForSection) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityPresenterProcessIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPresenterProcessIdentifier) (NIL
                                                                          :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityUIElementSpecifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityUIElementSpecifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityShouldUseUniqueId| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityShouldUseUniqueId) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySupportsOverriddenAttributes| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilitySupportsOverriddenAttributes) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySupportsNotifications| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilitySupportsNotifications) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityShouldSendNotification:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityShouldSendNotification:) ((:POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_accessibilityUIElementSpecifierRegisterIfNeeded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityUIElementSpecifierRegisterIfNeeded:) ((:CHAR)
                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityAllowsOverriddenAttributesWhenIgnored| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityAllowsOverriddenAttributesWhenIgnored) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySetOverrideValue:forAttribute:| (thing _ for-attribute)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetOverrideValue:forAttribute:) ((:POINTER
                                                                               :POINTER)
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-attribute)))) nil t))

(defun NS::|_accessibilitySetOverrideValue:forAttribute:| (thing _ for-attribute)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySetOverrideValue:forAttribute:) ((:POINTER
                                                                                :POINTER)
                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-attribute)))) nil t))

(defun NS::|_accessibilitySetOverrideHandler:forAttribute:| (thing _ for-attribute)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySetOverrideHandler:forAttribute:) ((:POINTER
                                                                                  :POINTER)
                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-attribute)))) nil t))

(defun NS::|_accessibilitySetOverrideIsAccessibilityElement:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySetOverrideIsAccessibilityElement:) ((:CHAR)
                                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0)))) nil t))

(defun NS::|_accessibilitySetOverrideCustomActions:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySetOverrideCustomActions:) ((:POINTER)
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|accessibilityEncodeOverriddenAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityEncodeOverriddenAttributes:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityDecodeOverriddenAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDecodeOverriddenAttributes:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_accessibilityChildUIElementForSpecifierComponent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityChildUIElementForSpecifierComponent:) ((:LONG-LONG)
                                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_accessibilitySpecifierComponentForChildUIElement:registerIfNeeded:| (thing _ register-if-needed)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySpecifierComponentForChildUIElement:registerIfNeeded:) ((:POINTER
                                                                                                       :CHAR)
                                                                                                      :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if register-if-needed 1 0))))

(defun NS::|accessibilitySupportsCustomElementData| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilitySupportsCustomElementData) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_accessibilityCustomDataBlob| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityCustomDataBlob) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityIsTableViewDescendant| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_accessibilityIsTableViewDescendant) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_accessibilityUIElementSpecifierForChild:registerIfNeeded:| (thing _ register-if-needed)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityUIElementSpecifierForChild:registerIfNeeded:) ((:POINTER
                                                                                              :CHAR)
                                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if register-if-needed 1 0))))

(defun NS::|bind:toObject:withKeyPath:options:| (thing _ to-object with-key-path options)
  (let ((message-lambda 
         (make-message-lambda @(bind:toObject:withKeyPath:options:) ((:POINTER
                                                                      :POINTER
                                                                      :POINTER
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-object) (ns-object-ptr with-key-path) (ns-object-ptr options))))

(defun NS::|awakeFromNib| (thing)
  (let ((message-lambda 
         (make-message-lambda @(awakeFromNib) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|userInterfaceItemIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userInterfaceItemIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setUserInterfaceItemIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUserInterfaceItemIdentifier:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_bindingAdaptor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_bindingAdaptor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invokeSelector:withArguments:onKeyPath:| (thing _ with-arguments on-key-path)
  (let ((message-lambda 
         (make-message-lambda @(_invokeSelector:withArguments:onKeyPath:) ((:POINTER
                                                                            :POINTER
                                                                            :POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-arguments) (ns-object-ptr on-key-path))))

(defun NS::|unbind:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unbind:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|valueClassForBinding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueClassForBinding:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setBindingAdaptor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setBindingAdaptor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|NS_observationForKeyPath:options:block:| (thing _ options block)
  (let ((message-lambda 
         (make-message-lambda @(NS_observationForKeyPath:options:block:) ((:POINTER
                                                                           :UNSIGNED-LONG-LONG
                                                                           :POINTER)
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) options (ns-object-ptr block))))

(defun NS::|_releaseBindingAdaptor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_releaseBindingAdaptor) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|NS_observationForKeyPaths:options:block:| (thing _ options block)
  (let ((message-lambda 
         (make-message-lambda @(NS_observationForKeyPaths:options:block:) ((:POINTER
                                                                            :UNSIGNED-LONG-LONG
                                                                            :POINTER)
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) options (ns-object-ptr block))))

(defun NS::|_isAXConnector| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAXConnector) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_binderForBinding:withBinders:createAutoreleasedInstanceIfNotFound:| (thing _ with-binders create-autoreleased-instance-if-not-found)
  (let ((message-lambda 
         (make-message-lambda @(_binderForBinding:withBinders:createAutoreleasedInstanceIfNotFound:) ((:POINTER
                                                                                                       :POINTER
                                                                                                       :CHAR)
                                                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-binders) (if create-autoreleased-instance-if-not-found 1 0))))

(defun NS::|optionDescriptionsForBinding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(optionDescriptionsForBinding:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|exposedBindings| (thing)
  (let ((message-lambda 
         (make-message-lambda @(exposedBindings) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_binderClassForBinding:withBinders:| (thing _ with-binders)
  (let ((message-lambda 
         (make-message-lambda @(_binderClassForBinding:withBinders:) ((:POINTER
                                                                       :POINTER)
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-binders))))

(defun NS::|_binderWithClass:withBinders:createAutoreleasedInstanceIfNotFound:| (thing _ with-binders create-autoreleased-instance-if-not-found)
  (let ((message-lambda 
         (make-message-lambda @(_binderWithClass:withBinders:createAutoreleasedInstanceIfNotFound:) ((:POINTER
                                                                                                      :POINTER
                                                                                                      :CHAR)
                                                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-binders) (if create-autoreleased-instance-if-not-found 1 0))))

(defun NS::|infoForBinding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(infoForBinding:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_optionDescriptionsForBinding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_optionDescriptionsForBinding:) ((:POINTER)
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_addOptionValue:toArray:withKey:type:| (thing _ to-array with-key type)
  (let ((message-lambda 
         (make-message-lambda @(_addOptionValue:toArray:withKey:type:) ((:POINTER
                                                                         :POINTER
                                                                         :POINTER
                                                                         :UNSIGNED-LONG-LONG)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-array) (ns-object-ptr with-key) type)))

(defun NS::|_placeSuggestionsInDictionary:acceptableControllers:boundBinders:binder:binding:| (thing _ acceptable-controllers bound-binders binder binding)
  (let ((message-lambda 
         (make-message-lambda @(_placeSuggestionsInDictionary:acceptableControllers:boundBinders:binder:binding:) ((:POINTER
                                                                                                                    :POINTER
                                                                                                                    :POINTER
                                                                                                                    :POINTER
                                                                                                                    :POINTER)
                                                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr acceptable-controllers) (ns-object-ptr bound-binders) (ns-object-ptr binder) (ns-object-ptr binding))))

(defun NS::|_addPlaceholderOptionValue:isDefault:toArray:withKey:binder:binding:| (thing _ is-default to-array with-key binder binding)
  (let ((message-lambda 
         (make-message-lambda @(_addPlaceholderOptionValue:isDefault:toArray:withKey:binder:binding:) ((:POINTER
                                                                                                        :CHAR
                                                                                                        :POINTER
                                                                                                        :POINTER
                                                                                                        :POINTER
                                                                                                        :POINTER)
                                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if is-default 1 0) (ns-object-ptr to-array) (ns-object-ptr with-key) (ns-object-ptr binder) (ns-object-ptr binding))))

(defun NS::|_cleanupBindingsWithExistingNibConnectors:exception:| (thing _ exception)
  (let ((message-lambda 
         (make-message-lambda @(_cleanupBindingsWithExistingNibConnectors:exception:) ((:POINTER
                                                                                        :POINTER)
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr exception))))

(defun NS::|_suggestedControllerKeyForController:binding:| (thing _ binding)
  (let ((message-lambda 
         (make-message-lambda @(_suggestedControllerKeyForController:binding:) ((:POINTER
                                                                                 :POINTER)
                                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr binding))))

(defun NS::|_bindingInformationWithExistingNibConnectors:availableControllerChoices:| (thing _ available-controller-choices)
  (let ((message-lambda 
         (make-message-lambda @(_bindingInformationWithExistingNibConnectors:availableControllerChoices:) ((:POINTER
                                                                                                            :POINTER)
                                                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr available-controller-choices))))

(defun NS::|_bind:toController:withKeyPath:valueTransformerName:options:existingNibConnectors:connectorsToRemove:connectorsToAdd:| (thing _ to-controller with-key-path value-transformer-name options existing-nib-connectors connectors-to-remove connectors-to-add)
  (let ((message-lambda 
         (make-message-lambda @(_bind:toController:withKeyPath:valueTransformerName:options:existingNibConnectors:connectorsToRemove:connectorsToAdd:) ((:POINTER
                                                                                                                                                         :POINTER
                                                                                                                                                         :POINTER
                                                                                                                                                         :POINTER
                                                                                                                                                         :POINTER
                                                                                                                                                         :POINTER
                                                                                                                                                         :POINTER
                                                                                                                                                         :POINTER)
                                                                                                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-controller) (ns-object-ptr with-key-path) (ns-object-ptr value-transformer-name) (ns-object-ptr options) (ns-object-ptr existing-nib-connectors) (ns-object-ptr connectors-to-remove) (ns-object-ptr connectors-to-add))))

(defun NS::|_unbind:existingNibConnectors:connectorsToRemove:connectorsToAdd:| (thing _ existing-nib-connectors connectors-to-remove connectors-to-add)
  (let ((message-lambda 
         (make-message-lambda @(_unbind:existingNibConnectors:connectorsToRemove:connectorsToAdd:) ((:POINTER
                                                                                                     :POINTER
                                                                                                     :POINTER
                                                                                                     :POINTER)
                                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr existing-nib-connectors) (ns-object-ptr connectors-to-remove) (ns-object-ptr connectors-to-add))))

(defun NS::|prepareForInterfaceBuilder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(prepareForInterfaceBuilder) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityAddTemporaryChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAddTemporaryChild:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityRemoveTemporaryChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRemoveTemporaryChild:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|NSLifeguard_autorelease| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NSLifeguard_autorelease) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilitySetPresenterProcessIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetPresenterProcessIdentifier:) ((:INT)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|NS_tiledLayerVisibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_tiledLayerVisibleRect) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|NS_addTiledLayerDescendent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_addTiledLayerDescendent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|NS_removeTiledLayerDescendent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_removeTiledLayerDescendent:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|CA_addValue:multipliedBy:| (thing _ multiplied-by)
  (let ((message-lambda 
         (make-message-lambda @(CA_addValue:multipliedBy:) ((:POINTER :INT)
                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) multiplied-by)))

(defun NS::|CA_interpolateValue:byFraction:| (thing _ by-fraction)
  (let ((message-lambda 
         (make-message-lambda @(CA_interpolateValue:byFraction:) ((:POINTER
                                                                   :FLOAT)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) by-fraction)))

(defun NS::|CA_distanceToValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_distanceToValue:) ((:POINTER) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|CA_roundToIntegerFromValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_roundToIntegerFromValue:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|CA_prepareRenderValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CA_prepareRenderValue) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|CA_copyRenderValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CA_copyRenderValue) (NIL
                                                     (:POINTER
                                                      (:STRUCT NS::|Object|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|CA_copyRenderValueWithColorspace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_copyRenderValueWithColorspace:) (((:POINTER
                                                                      (:STRUCT
                                                                       NS::|CGColorSpace|)))
                                                                    (:POINTER
                                                                     (:STRUCT
                                                                      NS::|Object|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|CA_copyNumericValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_copyNumericValue:) (((:ARRAY :DOUBLE 20))
                                                       :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|CAMLTypeForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CAMLTypeForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|CAMLTypeSupportedForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(CAMLTypeSupportedForKey:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|CA_validateValue:forKey:| (thing _ for-key)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(CA_validateValue:forKey:) ((:POINTER :POINTER)
                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key)))) nil t))

(defun NS::|encodeWithCAMLWriter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(encodeWithCAMLWriter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|CA_interpolateValues:::interpolator:| (thing _ g806 g807 interpolator)
  (let ((message-lambda 
         (make-message-lambda @(CA_interpolateValues:::interpolator:) ((:POINTER
                                                                        :POINTER
                                                                        :POINTER
                                                                        (:POINTER
                                                                         (:STRUCT
                                                                          NS::|ValueInterpolator|)))
                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr g806) (ns-object-ptr g807) (ns-object-ptr interpolator))))

(defun NS::|CAMLType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CAMLType) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|CA_archivingValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_archivingValueForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|supportsRBSXPCSecureCoding| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(supportsRBSXPCSecureCoding) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|RBSIsXPCObject| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(RBSIsXPCObject) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|NSRepresentation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NSRepresentation) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|supportsBSXPCSecureCoding| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(supportsBSXPCSecureCoding) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|bs_isPlistableType| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(bs_isPlistableType) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|bs_secureEncoded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bs_secureEncoded) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|bs_encoded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bs_encoded) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|classForCoder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classForCoder) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|replacementObjectForCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replacementObjectForCoder:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|awakeAfterUsingCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(awakeAfterUsingCoder:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_allowsDirectEncoding| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsDirectEncoding) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|implementsSelector:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(implementsSelector:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|setObservationInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setObservationInfo:) (((:POINTER :VOID)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forKey:) ((:POINTER :POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))

(defun NS::|_notifyObserversOfChangeFromValuesForKeys:toValuesForKeys:| (thing _ to-values-for-keys)
  (let ((message-lambda 
         (make-message-lambda @(_notifyObserversOfChangeFromValuesForKeys:toValuesForKeys:) ((:POINTER
                                                                                              :POINTER)
                                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-values-for-keys))))

(defun NS::|replacementObjectForPortCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replacementObjectForPortCoder:) ((:POINTER)
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|willChangeValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(willChangeValueForKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|didChangeValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(didChangeValueForKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_willChangeValuesForKeys:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_willChangeValuesForKeys:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_didChangeValuesForKeys:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_didChangeValuesForKeys:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|valueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|valueForUndefinedKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueForUndefinedKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|addObserver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addObserver:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|classForKeyedArchiver| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classForKeyedArchiver) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|replacementObjectForKeyedArchiver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replacementObjectForKeyedArchiver:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|dictionaryWithValuesForKeys:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dictionaryWithValuesForKeys:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|valueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueForKeyPath:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|objectSpecifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(objectSpecifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|replacementObjectForArchiver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replacementObjectForArchiver:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|classForArchiver| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classForArchiver) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|attributeKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributeKeys) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|toOneRelationshipKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toOneRelationshipKeys) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|toManyRelationshipKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toManyRelationshipKeys) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|inverseForRelationshipKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(inverseForRelationshipKey:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|classDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_scriptingSetOfObjectsForSpecifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingSetOfObjectsForSpecifier:) ((:POINTER)
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|copyScriptingValue:forKey:withProperties:| (thing _ for-key with-properties)
  (let ((message-lambda 
         (make-message-lambda @(copyScriptingValue:forKey:withProperties:) ((:POINTER
                                                                             :POINTER
                                                                             :POINTER)
                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key) (ns-object-ptr with-properties))))

(defun NS::|_scriptingAddObjectsFromSet:toValueForKey:| (thing _ to-value-for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingAddObjectsFromSet:toValueForKey:) ((:POINTER
                                                                              :POINTER)
                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-value-for-key))))

(defun NS::|_scriptingArrayOfObjectsForSpecifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingArrayOfObjectsForSpecifier:) ((:POINTER)
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scriptingCanAddObjectsToValueForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scriptingCanAddObjectsToValueForKey:) ((:POINTER)
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_scriptingCanInsertBeforeOrReplaceObjectsAtIndexes:inValueForKey:| (thing _ in-value-for-key)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scriptingCanInsertBeforeOrReplaceObjectsAtIndexes:inValueForKey:) ((:POINTER
                                                                                                     :POINTER)
                                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-value-for-key)))) nil t))

(defun NS::|_scriptingAddObjectsFromArray:toValueForKey:| (thing _ to-value-for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingAddObjectsFromArray:toValueForKey:) ((:POINTER
                                                                                :POINTER)
                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-value-for-key))))

(defun NS::|_scriptingReplaceObjectAtIndex:withObjects:inValueForKey:| (thing _ with-objects in-value-for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingReplaceObjectAtIndex:withObjects:inValueForKey:) ((:UNSIGNED-LONG-LONG
                                                                                             :POINTER
                                                                                             :POINTER)
                                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-objects) (ns-object-ptr in-value-for-key))))

(defun NS::|_scriptingInsertObjects:atIndexes:inValueForKey:| (thing _ at-indexes in-value-for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingInsertObjects:atIndexes:inValueForKey:) ((:POINTER
                                                                                    :POINTER
                                                                                    :POINTER)
                                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr at-indexes) (ns-object-ptr in-value-for-key))))

(defun NS::|_scriptingIndexesOfObjectsForSpecifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingIndexesOfObjectsForSpecifier:) ((:POINTER)
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scriptingObjectsAtIndexes:inValueForKey:| (thing _ in-value-for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingObjectsAtIndexes:inValueForKey:) ((:POINTER
                                                                             :POINTER)
                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-value-for-key))))

(defun NS::|methodDescriptionForSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(methodDescriptionForSelector:) ((:POINTER)
                                                                (:POINTER
                                                                 (:STRUCT
                                                                  NS::|objc_method_description|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_conformsToProtocolNamed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_conformsToProtocolNamed:) ((:STRING) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_scriptingObjectCountInValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingObjectCountInValueForKey:) ((:POINTER)
                                                                      :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scriptingValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingValueForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scriptingCountNonrecursively| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingCountNonrecursively) (NIL
                                                                :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_scriptingCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingCount) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_scriptingCountOfValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingCountOfValueForKey:) ((:POINTER)
                                                                :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:| (thing _ for-value-for-key with-contents-value properties)
  (let ((message-lambda 
         (make-message-lambda @(newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:) ((:POINTER
                                                                                                          :POINTER
                                                                                                          :POINTER
                                                                                                          :POINTER)
                                                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-value-for-key) (ns-object-ptr with-contents-value) (ns-object-ptr properties))))

(defun NS::|_scriptingInsertObject:inValueForKey:| (thing _ in-value-for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingInsertObject:inValueForKey:) ((:POINTER
                                                                         :POINTER)
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-value-for-key))))

(defun NS::|_scriptingRemoveAllObjectsFromValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingRemoveAllObjectsFromValueForKey:) ((:POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scriptingCanSetValue:forSpecifier:| (thing _ for-specifier)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scriptingCanSetValue:forSpecifier:) ((:POINTER
                                                                       :POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-specifier)))) nil t))

(defun NS::|_scriptingSetValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingSetValue:forKey:) ((:POINTER
                                                              :POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))

(defun NS::|_scriptingRemoveObjectsAtIndexes:fromValueForKey:| (thing _ from-value-for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingRemoveObjectsAtIndexes:fromValueForKey:) ((:POINTER
                                                                                     :POINTER)
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-value-for-key))))

(defun NS::|_scriptingRemoveValueForSpecifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingRemoveValueForSpecifier:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|handleQueryWithUnboundKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleQueryWithUnboundKey:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|handleTakeValue:forUnboundKey:| (thing _ for-unbound-key)
  (let ((message-lambda 
         (make-message-lambda @(handleTakeValue:forUnboundKey:) ((:POINTER
                                                                  :POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-unbound-key))))

(defun NS::|storedValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(storedValueForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|takeStoredValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(takeStoredValue:forKey:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))

(defun NS::|takeValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(takeValue:forKey:) ((:POINTER :POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))

(defun NS::|takeValue:forKeyPath:| (thing _ for-key-path)
  (let ((message-lambda 
         (make-message-lambda @(takeValue:forKeyPath:) ((:POINTER :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key-path))))

(defun NS::|_createKeyValueBindingForKey:name:bindingType:| (thing _ name binding-type)
  (let ((message-lambda 
         (make-message-lambda @(_createKeyValueBindingForKey:name:bindingType:) ((:POINTER
                                                                                  :STRING
                                                                                  :UNSIGNED-LONG-LONG)
                                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) name binding-type)))

(defun NS::|_oldValueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_oldValueForKeyPath:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|valuesForKeys:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valuesForKeys:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|takeValuesFromDictionary:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeValuesFromDictionary:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|unableToSetNilForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unableToSetNilForKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_oldValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_oldValueForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|keyValueBindingForKey:typeMask:| (thing _ type-mask)
  (let ((message-lambda 
         (make-message-lambda @(keyValueBindingForKey:typeMask:) ((:POINTER
                                                                   :UNSIGNED-LONG-LONG)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) type-mask)))

(defun NS::|createKeyValueBindingForKey:typeMask:| (thing _ type-mask)
  (let ((message-lambda 
         (make-message-lambda @(createKeyValueBindingForKey:typeMask:) ((:POINTER
                                                                         :UNSIGNED-LONG-LONG)
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) type-mask)))

(defun NS::|_localClassNameForClass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_localClassNameForClass) (NIL :STRING)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|validateValue:forKeyPath:error:| (thing _ for-key-path error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateValue:forKeyPath:error:) (((:POINTER
                                                                    :POINTER)
                                                                   :POINTER
                                                                   (:POINTER
                                                                    :POINTER))
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key-path) (ns-object-ptr error)))) nil t))

(defun NS::|setValue:forKeyPath:| (thing _ for-key-path)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forKeyPath:) ((:POINTER :POINTER)
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key-path))))

(defun NS::|mutableArrayValueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableArrayValueForKeyPath:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|mutableOrderedSetValueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableOrderedSetValueForKeyPath:) ((:POINTER)
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|mutableSetValueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableSetValueForKeyPath:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|addObserver:forObservableKeyPath:| (thing _ for-observable-key-path)
  (let ((message-lambda 
         (make-message-lambda @(addObserver:forObservableKeyPath:) ((:POINTER
                                                                     :POINTER)
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-observable-key-path))))

(defun NS::|removeObservation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeObservation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|receiveObservedValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(receiveObservedValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|receiveObservedError:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(receiveObservedError:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|finishObserving| (thing)
  (let ((message-lambda 
         (make-message-lambda @(finishObserving) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isToManyChangeInformation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isToManyChangeInformation) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_receiveBox:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_receiveBox:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setObservation:forObservingKeyPath:| (thing _ for-observing-key-path)
  (let ((message-lambda 
         (make-message-lambda @(setObservation:forObservingKeyPath:) ((:POINTER
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-observing-key-path))))

(defun NS::|addObserver:forKeyPath:options:context:| (thing _ for-key-path options context)
  (let ((message-lambda 
         (make-message-lambda @(addObserver:forKeyPath:options:context:) ((:POINTER
                                                                           :POINTER
                                                                           :UNSIGNED-LONG-LONG
                                                                           (:POINTER
                                                                            :VOID))
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key-path) options (ns-object-ptr context))))

(defun NS::|observeValueForKeyPath:ofObject:change:context:| (thing _ of-object change context)
  (let ((message-lambda 
         (make-message-lambda @(observeValueForKeyPath:ofObject:change:context:) ((:POINTER
                                                                                   :POINTER
                                                                                   :POINTER
                                                                                   (:POINTER
                                                                                    :VOID))
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr of-object) (ns-object-ptr change) (ns-object-ptr context))))

(defun NS::|removeObserver:forKeyPath:context:| (thing _ for-key-path context)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:forKeyPath:context:) ((:POINTER
                                                                      :POINTER
                                                                      (:POINTER
                                                                       :VOID))
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key-path) (ns-object-ptr context))))

(defun NS::|removeObservation:forObservableKeyPath:| (thing _ for-observable-key-path)
  (let ((message-lambda 
         (make-message-lambda @(removeObservation:forObservableKeyPath:) ((:POINTER
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-observable-key-path))))

(defun NS::|className| (thing)
  (let ((message-lambda 
         (make-message-lambda @(className) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_destroyObserverList| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_destroyObserverList) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_observerStorageOfSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_observerStorageOfSize:) ((:UNSIGNED-LONG-LONG)
                                                          (:POINTER :VOID))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_observerStorage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_observerStorage) (NIL (:POINTER :POINTER))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_overrideUseFastBlockObservers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_overrideUseFastBlockObservers) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|addChainedObservers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addChainedObservers:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|addObserverBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addObserverBlock:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|addObservationTransformer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addObservationTransformer:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setValue:forUndefinedKey:| (thing _ for-undefined-key)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forUndefinedKey:) ((:POINTER :POINTER)
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-undefined-key))))

(defun NS::|setNilValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNilValueForKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|validateValue:forKey:error:| (thing _ for-key error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateValue:forKey:error:) (((:POINTER
                                                                :POINTER)
                                                               :POINTER
                                                               (:POINTER
                                                                :POINTER))
                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key) (ns-object-ptr error)))) nil t))

(defun NS::|mutableArrayValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableArrayValueForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|mutableOrderedSetValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableOrderedSetValueForKey:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|mutableSetValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableSetValueForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setValuesForKeysWithDictionary:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setValuesForKeysWithDictionary:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|willChange:valuesAtIndexes:forKey:| (thing _ values-at-indexes for-key)
  (let ((message-lambda 
         (make-message-lambda @(willChange:valuesAtIndexes:forKey:) ((:UNSIGNED-LONG-LONG
                                                                      :POINTER
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr values-at-indexes) (ns-object-ptr for-key))))

(defun NS::|didChange:valuesAtIndexes:forKey:| (thing _ values-at-indexes for-key)
  (let ((message-lambda 
         (make-message-lambda @(didChange:valuesAtIndexes:forKey:) ((:UNSIGNED-LONG-LONG
                                                                     :POINTER
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr values-at-indexes) (ns-object-ptr for-key))))

(defun NS::|willChangeValueForKey:withSetMutation:usingObjects:| (thing _ with-set-mutation using-objects)
  (let ((message-lambda 
         (make-message-lambda @(willChangeValueForKey:withSetMutation:usingObjects:) ((:POINTER
                                                                                       :UNSIGNED-LONG-LONG
                                                                                       :POINTER)
                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) with-set-mutation (ns-object-ptr using-objects))))

(defun NS::|didChangeValueForKey:withSetMutation:usingObjects:| (thing _ with-set-mutation using-objects)
  (let ((message-lambda 
         (make-message-lambda @(didChangeValueForKey:withSetMutation:usingObjects:) ((:POINTER
                                                                                      :UNSIGNED-LONG-LONG
                                                                                      :POINTER)
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) with-set-mutation (ns-object-ptr using-objects))))

(defun NS::|observationInfo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(observationInfo) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isKVOA| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isKVOA) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_changeValueForKey:key:key:usingBlock:| (thing _ key keyx using-block)
  (let ((message-lambda 
         (make-message-lambda @(_changeValueForKey:key:key:usingBlock:) ((:POINTER
                                                                          :POINTER
                                                                          :POINTER
                                                                          :POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr key) (ns-object-ptr keyx) (ns-object-ptr using-block))))

(defun NS::|_willBeginKeyValueObserving| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_willBeginKeyValueObserving) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_didEndKeyValueObserving| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_didEndKeyValueObserving) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addObserver:forProperty:options:context:| (thing _ for-property options context)
  (let ((message-lambda 
         (make-message-lambda @(_addObserver:forProperty:options:context:) ((:POINTER
                                                                             :POINTER
                                                                             :UNSIGNED-LONG-LONG
                                                                             (:POINTER
                                                                              :VOID))
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-property) options (ns-object-ptr context))))

(defun NS::|removeObserver:forKeyPath:| (thing _ for-key-path)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:forKeyPath:) ((:POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key-path))))

(defun NS::|_removeObserver:forProperty:| (thing _ for-property)
  (let ((message-lambda 
         (make-message-lambda @(_removeObserver:forProperty:) ((:POINTER
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-property))))

(defun NS::|_changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:| (thing _ count maybe-old-values-dict maybe-new-values-dict using-block)
  (let ((message-lambda 
         (make-message-lambda @(_changeValueForKeys:count:maybeOldValuesDict:maybeNewValuesDict:usingBlock:) (((:POINTER
                                                                                                                :POINTER)
                                                                                                               :UNSIGNED-LONG-LONG
                                                                                                               :POINTER
                                                                                                               :POINTER
                                                                                                               :POINTER)
                                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) count (ns-object-ptr maybe-old-values-dict) (ns-object-ptr maybe-new-values-dict) (ns-object-ptr using-block))))

(defun NS::|_implicitObservationInfo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_implicitObservationInfo) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_notifyObserversForKeyPath:change:| (thing _ change)
  (let ((message-lambda 
         (make-message-lambda @(_notifyObserversForKeyPath:change:) ((:POINTER
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr change))))

(defun NS::|_changeValueForKey:usingBlock:| (thing _ using-block)
  (let ((message-lambda 
         (make-message-lambda @(_changeValueForKey:usingBlock:) ((:POINTER
                                                                  :POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr using-block))))

(defun NS::|_pendingChangeNotificationsArrayForKey:create:| (thing _ create)
  (let ((message-lambda 
         (make-message-lambda @(_pendingChangeNotificationsArrayForKey:create:) ((:POINTER
                                                                                  :CHAR)
                                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if create 1 0))))

(defun NS::|_scriptingObjectWithName:inValueForKey:| (thing _ in-value-for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingObjectWithName:inValueForKey:) ((:POINTER
                                                                           :POINTER)
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-value-for-key))))

(defun NS::|_scriptingIndexOfObjectWithName:inValueForKey:| (thing _ in-value-for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingIndexOfObjectWithName:inValueForKey:) ((:POINTER
                                                                                  :POINTER)
                                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-value-for-key))))

(defun NS::|autoContentAccessingProxy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autoContentAccessingProxy) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_scriptingIndicesOfObjectsAfterValidatingSpecifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingIndicesOfObjectsAfterValidatingSpecifier:) ((:POINTER)
                                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scriptingObjectAtIndex:inValueForKey:| (thing _ in-value-for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingObjectAtIndex:inValueForKey:) ((:UNSIGNED-LONG-LONG
                                                                          :POINTER)
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-value-for-key))))

(defun NS::|_scriptingCoerceValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingCoerceValue:forKey:) ((:POINTER
                                                                 :POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))

(defun NS::|_compatibility_takeValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(_compatibility_takeValue:forKey:) ((:POINTER
                                                                    :POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))

(defun NS::|coerceValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(coerceValue:forKey:) ((:POINTER :POINTER)
                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))

(defun NS::|setScriptingProperties:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScriptingProperties:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scriptingCopyWithProperties:forValueForKey:ofContainer:| (thing _ for-value-for-key of-container)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingCopyWithProperties:forValueForKey:ofContainer:) ((:POINTER
                                                                                            :POINTER
                                                                                            :POINTER)
                                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-value-for-key) (ns-object-ptr of-container))))

(defun NS::|scriptingValueForSpecifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scriptingValueForSpecifier:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|scriptingProperties| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scriptingProperties) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|coerceValueForScriptingProperties:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(coerceValueForScriptingProperties:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scriptingShouldCheckObjectIndexes| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scriptingShouldCheckObjectIndexes) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|valueAtIndex:inPropertyWithKey:| (thing _ in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(valueAtIndex:inPropertyWithKey:) ((:UNSIGNED-LONG-LONG
                                                                   :POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-property-with-key))))

(defun NS::|_supportsGetValueWithNameForKey:perhapsByOverridingClass:| (thing _ perhaps-by-overriding-class)
  (let ((message-lambda 
         (make-message-lambda @(_supportsGetValueWithNameForKey:perhapsByOverridingClass:) ((:POINTER
                                                                                             :POINTER)
                                                                                            :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr perhaps-by-overriding-class))))

(defun NS::|valueWithName:inPropertyWithKey:| (thing _ in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(valueWithName:inPropertyWithKey:) ((:POINTER
                                                                    :POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-property-with-key))))

(defun NS::|_supportsGetValueWithUniqueIDForKey:perhapsByOverridingClass:| (thing _ perhaps-by-overriding-class)
  (let ((message-lambda 
         (make-message-lambda @(_supportsGetValueWithUniqueIDForKey:perhapsByOverridingClass:) ((:POINTER
                                                                                                 :POINTER)
                                                                                                :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr perhaps-by-overriding-class))))

(defun NS::|valueWithUniqueID:inPropertyWithKey:| (thing _ in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(valueWithUniqueID:inPropertyWithKey:) ((:POINTER
                                                                        :POINTER)
                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-property-with-key))))

(defun NS::|_scriptingIndexOfObjectWithUniqueID:inValueForKey:| (thing _ in-value-for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingIndexOfObjectWithUniqueID:inValueForKey:) ((:POINTER
                                                                                      :POINTER)
                                                                                     :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-value-for-key))))

(defun NS::|_scriptingIndexOfObjectForSpecifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingIndexOfObjectForSpecifier:) ((:POINTER)
                                                                       :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scriptingValueForSpecifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingValueForSpecifier:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertValue:atIndex:inPropertyWithKey:| (thing _ at-index in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(insertValue:atIndex:inPropertyWithKey:) ((:POINTER
                                                                          :UNSIGNED-LONG-LONG
                                                                          :POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-index (ns-object-ptr in-property-with-key))))

(defun NS::|replaceValueAtIndex:inPropertyWithKey:withValue:| (thing _ in-property-with-key with-value)
  (let ((message-lambda 
         (make-message-lambda @(replaceValueAtIndex:inPropertyWithKey:withValue:) ((:UNSIGNED-LONG-LONG
                                                                                    :POINTER
                                                                                    :POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-property-with-key) (ns-object-ptr with-value))))

(defun NS::|insertValue:inPropertyWithKey:| (thing _ in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(insertValue:inPropertyWithKey:) ((:POINTER
                                                                  :POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-property-with-key))))

(defun NS::|removeValueAtIndex:fromPropertyWithKey:| (thing _ from-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(removeValueAtIndex:fromPropertyWithKey:) ((:UNSIGNED-LONG-LONG
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-property-with-key))))

(defun NS::|_scriptingIndicesOfObjectsForSpecifier:count:| (thing _ count)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingIndicesOfObjectsForSpecifier:count:) ((:POINTER
                                                                                 (:POINTER
                                                                                  :LONG-LONG))
                                                                                (:POINTER
                                                                                 :LONG-LONG))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr count))))

(defun NS::|_scriptingObjectWithUniqueID:inValueForKey:| (thing _ in-value-for-key)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingObjectWithUniqueID:inValueForKey:) ((:POINTER
                                                                               :POINTER)
                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-value-for-key))))

(defun NS::|_scriptingObjectForSpecifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingObjectForSpecifier:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|classForPortCoder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classForPortCoder) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|performSelector:withObject:afterDelay:inModes:| (thing _ with-object after-delay in-modes)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:withObject:afterDelay:inModes:) ((:POINTER
                                                                                  :POINTER
                                                                                  :DOUBLE
                                                                                  :POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-object) after-delay (ns-object-ptr in-modes))))

(defun NS::|performSelector:withObject:afterDelay:| (thing _ with-object after-delay)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:withObject:afterDelay:) ((:POINTER
                                                                          :POINTER
                                                                          :DOUBLE)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-object) after-delay)))

(defun NS::|performSelector:object:afterDelay:| (thing _ object after-delay)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:object:afterDelay:) ((:POINTER
                                                                      :POINTER
                                                                      :DOUBLE)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr object) after-delay)))

(defun NS::|_scriptingDebugDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingDebugDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_scriptingAlternativeValueRankWithDescriptor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingAlternativeValueRankWithDescriptor:) ((:POINTER)
                                                                                :INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scriptingDescriptorOfComplexType:orReasonWhyNot:| (thing _ or-reason-why-not)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingDescriptorOfComplexType:orReasonWhyNot:) ((:POINTER
                                                                                     (:POINTER
                                                                                      :POINTER))
                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr or-reason-why-not))))

(defun NS::|_scriptingDescriptorOfEnumeratorType:orReasonWhyNot:| (thing _ or-reason-why-not)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingDescriptorOfEnumeratorType:orReasonWhyNot:) ((:POINTER
                                                                                        (:POINTER
                                                                                         :POINTER))
                                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr or-reason-why-not))))

(defun NS::|_scriptingDescriptorOfObjectType:orReasonWhyNot:| (thing _ or-reason-why-not)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingDescriptorOfObjectType:orReasonWhyNot:) ((:POINTER
                                                                                    (:POINTER
                                                                                     :POINTER))
                                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr or-reason-why-not))))

(defun NS::|_scriptingDescriptorOfValueType:orReasonWhyNot:| (thing _ or-reason-why-not)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingDescriptorOfValueType:orReasonWhyNot:) ((:POINTER
                                                                                   (:POINTER
                                                                                    :POINTER))
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr or-reason-why-not))))

(defun NS::|_asScriptTerminologyNameArray| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_asScriptTerminologyNameArray) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_asScriptTerminologyNameString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_asScriptTerminologyNameString) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|classCode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classCode) (NIL :UNSIGNED-INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_scriptingMightHandleCommand:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scriptingMightHandleCommand:) ((:POINTER)
                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_scriptingCanHandleCommand:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scriptingCanHandleCommand:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_scriptingAddToReceiversArray:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingAddToReceiversArray:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scriptingSetValue:forSpecifier:| (thing _ for-specifier)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingSetValue:forSpecifier:) ((:POINTER
                                                                    :POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-specifier))))

(defun NS::|isEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqualTo:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|isLessThanOrEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLessThanOrEqualTo:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|isLessThan:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLessThan:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|isGreaterThanOrEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGreaterThanOrEqualTo:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|isGreaterThan:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGreaterThan:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|isNotEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNotEqualTo:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|doesContain:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(doesContain:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|isLike:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLike:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|isCaseInsensitiveLike:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isCaseInsensitiveLike:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|performSelector:onThread:withObject:waitUntilDone:modes:| (thing _ on-thread with-object wait-until-done modes)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:onThread:withObject:waitUntilDone:modes:) ((:POINTER
                                                                                            :POINTER
                                                                                            :POINTER
                                                                                            :CHAR
                                                                                            :POINTER)
                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr on-thread) (ns-object-ptr with-object) (if wait-until-done 1 0) (ns-object-ptr modes))))

(defun NS::|performSelectorOnMainThread:withObject:waitUntilDone:modes:| (thing _ with-object wait-until-done modes)
  (let ((message-lambda 
         (make-message-lambda @(performSelectorOnMainThread:withObject:waitUntilDone:modes:) ((:POINTER
                                                                                               :POINTER
                                                                                               :CHAR
                                                                                               :POINTER)
                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-object) (if wait-until-done 1 0) (ns-object-ptr modes))))

(defun NS::|performSelectorOnMainThread:withObject:waitUntilDone:| (thing _ with-object wait-until-done)
  (let ((message-lambda 
         (make-message-lambda @(performSelectorOnMainThread:withObject:waitUntilDone:) ((:POINTER
                                                                                         :POINTER
                                                                                         :CHAR)
                                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-object) (if wait-until-done 1 0))))

(defun NS::|performSelector:onThread:withObject:waitUntilDone:| (thing _ on-thread with-object wait-until-done)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:onThread:withObject:waitUntilDone:) ((:POINTER
                                                                                      :POINTER
                                                                                      :POINTER
                                                                                      :CHAR)
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr on-thread) (ns-object-ptr with-object) (if wait-until-done 1 0))))

(defun NS::|performSelectorInBackground:withObject:| (thing _ with-object)
  (let ((message-lambda 
         (make-message-lambda @(performSelectorInBackground:withObject:) ((:POINTER
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-object))))

(defun NS::|classDescriptionForDestinationKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(classDescriptionForDestinationKey:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|entityName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(entityName) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|ownsDestinationObjectsForRelationshipKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ownsDestinationObjectsForRelationshipKey:) ((:POINTER)
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|validateValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(validateValue:forKey:) (((:POINTER :POINTER)
                                                         :POINTER)
                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))

(defun NS::|isToManyKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isToManyKey:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|removeObject:fromPropertyWithKey:| (thing _ from-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(removeObject:fromPropertyWithKey:) ((:POINTER
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-property-with-key))))

(defun NS::|addObject:toPropertyWithKey:| (thing _ to-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(addObject:toPropertyWithKey:) ((:POINTER
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-property-with-key))))

(defun NS::|_setObject:forBothSidesOfRelationshipWithKey:| (thing _ for-both-sides-of-relationship-with-key)
  (let ((message-lambda 
         (make-message-lambda @(_setObject:forBothSidesOfRelationshipWithKey:) ((:POINTER
                                                                                 :POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-both-sides-of-relationship-with-key))))

(defun NS::|validateTakeValue:forKeyPath:| (thing _ for-key-path)
  (let ((message-lambda 
         (make-message-lambda @(validateTakeValue:forKeyPath:) ((:POINTER
                                                                 :POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key-path))))

(defun NS::|addObject:toBothSidesOfRelationshipWithKey:| (thing _ to-both-sides-of-relationship-with-key)
  (let ((message-lambda 
         (make-message-lambda @(addObject:toBothSidesOfRelationshipWithKey:) ((:POINTER
                                                                               :POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-both-sides-of-relationship-with-key))))

(defun NS::|allPropertyKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allPropertyKeys) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|clearProperties| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clearProperties) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|flushKeyBindings| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flushKeyBindings) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|removeObject:fromBothSidesOfRelationshipWithKey:| (thing _ from-both-sides-of-relationship-with-key)
  (let ((message-lambda 
         (make-message-lambda @(removeObject:fromBothSidesOfRelationshipWithKey:) ((:POINTER
                                                                                    :POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-both-sides-of-relationship-with-key))))

(defun NS::|takeStoredValuesFromDictionary:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeStoredValuesFromDictionary:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scriptingExists| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scriptingExists) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isNSString__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSString__) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isNSCFConstantString__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSCFConstantString__) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isNSNumber__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSNumber__) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isNSDate__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSDate__) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_cfTypeID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cfTypeID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isNSArray__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSArray__) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isNSDictionary__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSDictionary__) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isNSSet__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSSet__) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isNSData__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSData__) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isNSObject__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSObject__) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isNSOrderedSet__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSOrderedSet__) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isNSTimeZone__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSTimeZone__) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isNSValue__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSValue__) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|description| (thing)
  (let ((message-lambda 
         (make-message-lambda @(description) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|doesNotRecognizeSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(doesNotRecognizeSelector:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|methodSignatureForSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(methodSignatureForSelector:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_copyDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_copyDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|__dealloc_zombie| (thing)
  (let ((message-lambda 
         (make-message-lambda @(__dealloc_zombie) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|__retain_OA| (thing)
  (let ((message-lambda 
         (make-message-lambda @(__retain_OA) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|__release_OA| (thing)
  (let ((message-lambda 
         (make-message-lambda @(__release_OA) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|__autorelease_OA| (thing)
  (let ((message-lambda 
         (make-message-lambda @(__autorelease_OA) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|___tryRetain_OA| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(___tryRetain_OA) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_associatedUniversalLink| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_associatedUniversalLink) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|retain| (thing)
  (let ((message-lambda 
         (make-message-lambda @(retain) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|release| (thing)
  (let ((message-lambda 
         (make-message-lambda @(release) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|retainCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(retainCount) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|autorelease| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autorelease) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tryRetain| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tryRetain) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isDeallocating| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isDeallocating) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|copy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(copy) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|finalize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(finalize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|dealloc| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dealloc) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isEqual:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqual:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|class| (thing)
  (let ((message-lambda 
         (make-message-lambda @(class) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|self| (thing)
  (let ((message-lambda 
         (make-message-lambda @(self) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|performSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|performSelector:withObject:| (thing _ with-object)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:withObject:) ((:POINTER
                                                               :POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-object))))

(defun NS::|performSelector:withObject:withObject:| (thing _ with-object with-objectx)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:withObject:withObject:) ((:POINTER
                                                                          :POINTER
                                                                          :POINTER)
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-object) (ns-object-ptr with-objectx))))

(defun NS::|isProxy| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isProxy) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isKindOfClass:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isKindOfClass:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|isMemberOfClass:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMemberOfClass:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|conformsToProtocol:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(conformsToProtocol:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|respondsToSelector:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(respondsToSelector:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|zone| (thing)
  (let ((message-lambda 
         (make-message-lambda @(zone) (NIL (:POINTER (:STRUCT NS::|_NSZone|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|hash| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hash) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|superclass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(superclass) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|debugDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(debugDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|init| (thing)
  (let ((message-lambda 
         (make-message-lambda @(init) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|retainWeakReference| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(retainWeakReference) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|allowsWeakReference| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsWeakReference) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|isFault| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFault) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|methodForSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(methodForSelector:) ((:POINTER)
                                                     (:POINTER :POINTER))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|forwardInvocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(forwardInvocation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|forwardingTargetForSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(forwardingTargetForSelector:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|mutableCopy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mutableCopy) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|loadNibNamed:owner:topLevelObjects:| (thing _ owner top-level-objects)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(loadNibNamed:owner:topLevelObjects:) ((:POINTER
                                                                       :POINTER
                                                                       (:POINTER
                                                                        :POINTER))
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr owner) (ns-object-ptr top-level-objects)))) nil t))

(defun NS::|imageForResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(imageForResource:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pathForSoundResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pathForSoundResource:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|contextHelpForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contextHelpForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_newImageForResourceWithProspectiveName:imageClass:| (thing _ image-class)
  (let ((message-lambda 
         (make-message-lambda @(_newImageForResourceWithProspectiveName:imageClass:) (((:POINTER
                                                                                        :POINTER)
                                                                                       :POINTER)
                                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr image-class))))

(defun NS::|URLsForImageResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(URLsForImageResource:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|URLForImageResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(URLForImageResource:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pathForImageResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pathForImageResource:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|loadNibFile:externalNameTable:withZone:| (thing _ external-name-table with-zone)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(loadNibFile:externalNameTable:withZone:) ((:POINTER
                                                                           :POINTER
                                                                           (:POINTER
                                                                            (:STRUCT
                                                                             NS::|_NSZone|)))
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr external-name-table) (ns-object-ptr with-zone)))) nil t))

(defun NS::|loadNibFile:externalNameTable:options:withZone:| (thing _ external-name-table options with-zone)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(loadNibFile:externalNameTable:options:withZone:) ((:POINTER
                                                                                   :POINTER
                                                                                   :POINTER
                                                                                   (:POINTER
                                                                                    (:STRUCT
                                                                                     NS::|_NSZone|)))
                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr external-name-table) (ns-object-ptr options) (ns-object-ptr with-zone)))) nil t))

(defun NS::|localizedStringInDeviceLanguageForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(localizedStringInDeviceLanguageForKey:) ((:POINTER)
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|load| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(load) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|initWithURL:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithURL:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|preferredLocalizations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredLocalizations) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|infoDictionary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(infoDictionary) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|bundleIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bundleIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|bundleURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bundleURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|appStoreReceiptURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(appStoreReceiptURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|executableURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(executableURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_wrappedBundleURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_wrappedBundleURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|objectForInfoDictionaryKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(objectForInfoDictionaryKey:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|loadAndReturnError:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(loadAndReturnError:) (((:POINTER :POINTER))
                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|principalClass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(principalClass) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|bundlePath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bundlePath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|resourceURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resourceURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|pathForResource:ofType:| (thing _ of-type)
  (let ((message-lambda 
         (make-message-lambda @(pathForResource:ofType:) ((:POINTER :POINTER)
                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr of-type))))

(defun NS::|URLForResource:withExtension:| (thing _ with-extension)
  (let ((message-lambda 
         (make-message-lambda @(URLForResource:withExtension:) ((:POINTER
                                                                 :POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-extension))))

(defun NS::|classNamed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(classNamed:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cfBundle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cfBundle) (NIL
                                            (:POINTER
                                             (:STRUCT NS::|__CFBundle|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|URLForResource:withExtension:subdirectory:localization:| (thing _ with-extension subdirectory localization)
  (let ((message-lambda 
         (make-message-lambda @(URLForResource:withExtension:subdirectory:localization:) ((:POINTER
                                                                                           :POINTER
                                                                                           :POINTER
                                                                                           :POINTER)
                                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-extension) (ns-object-ptr subdirectory) (ns-object-ptr localization))))

(defun NS::|URLForResource:withExtension:subdirectory:| (thing _ with-extension subdirectory)
  (let ((message-lambda 
         (make-message-lambda @(URLForResource:withExtension:subdirectory:) ((:POINTER
                                                                              :POINTER
                                                                              :POINTER)
                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-extension) (ns-object-ptr subdirectory))))

(defun NS::|_cfBundleIfPresent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cfBundleIfPresent) (NIL
                                                     (:POINTER
                                                      (:STRUCT
                                                       NS::|__CFBundle|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|unload| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(unload) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|initWithPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithPath:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|localizations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizations) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|localizedInfoDictionary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedInfoDictionary) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isLoaded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLoaded) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|pathForResource:ofType:inDirectory:forLocalization:| (thing _ of-type in-directory for-localization)
  (let ((message-lambda 
         (make-message-lambda @(pathForResource:ofType:inDirectory:forLocalization:) ((:POINTER
                                                                                       :POINTER
                                                                                       :POINTER
                                                                                       :POINTER)
                                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr of-type) (ns-object-ptr in-directory) (ns-object-ptr for-localization))))

(defun NS::|pathsForResourcesOfType:inDirectory:forLocalization:| (thing _ in-directory for-localization)
  (let ((message-lambda 
         (make-message-lambda @(pathsForResourcesOfType:inDirectory:forLocalization:) ((:POINTER
                                                                                        :POINTER
                                                                                        :POINTER)
                                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-directory) (ns-object-ptr for-localization))))

(defun NS::|localizedAttributedStringForKey:value:table:localization:| (thing _ value table localization)
  (let ((message-lambda 
         (make-message-lambda @(localizedAttributedStringForKey:value:table:localization:) ((:POINTER
                                                                                             :POINTER
                                                                                             :POINTER
                                                                                             :POINTER)
                                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr value) (ns-object-ptr table) (ns-object-ptr localization))))

(defun NS::|pathForResource:ofType:inDirectory:| (thing _ of-type in-directory)
  (let ((message-lambda 
         (make-message-lambda @(pathForResource:ofType:inDirectory:) ((:POINTER
                                                                       :POINTER
                                                                       :POINTER)
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr of-type) (ns-object-ptr in-directory))))

(defun NS::|pathsForResourcesOfType:inDirectory:| (thing _ in-directory)
  (let ((message-lambda 
         (make-message-lambda @(pathsForResourcesOfType:inDirectory:) ((:POINTER
                                                                        :POINTER)
                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-directory))))

(defun NS::|findBundleResourceURLsCallingMethod:passingTest:| (thing _ passing-test)
  (let ((message-lambda 
         (make-message-lambda @(findBundleResourceURLsCallingMethod:passingTest:) ((:POINTER
                                                                                    :POINTER)
                                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr passing-test))))

(defun NS::|URLsForResourcesWithExtension:subdirectory:localization:| (thing _ subdirectory localization)
  (let ((message-lambda 
         (make-message-lambda @(URLsForResourcesWithExtension:subdirectory:localization:) ((:POINTER
                                                                                            :POINTER
                                                                                            :POINTER)
                                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr subdirectory) (ns-object-ptr localization))))

(defun NS::|URLsForResourcesWithExtension:subdirectory:| (thing _ subdirectory)
  (let ((message-lambda 
         (make-message-lambda @(URLsForResourcesWithExtension:subdirectory:) ((:POINTER
                                                                               :POINTER)
                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr subdirectory))))

(defun NS::|localizedStringForKey:value:table:| (thing _ value table)
  (let ((message-lambda 
         (make-message-lambda @(localizedStringForKey:value:table:) ((:POINTER
                                                                      :POINTER
                                                                      :POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr value) (ns-object-ptr table))))

(defun NS::|localizedStringForKey:value:table:localization:| (thing _ value table localization)
  (let ((message-lambda 
         (make-message-lambda @(localizedStringForKey:value:table:localization:) ((:POINTER
                                                                                   :POINTER
                                                                                   :POINTER
                                                                                   :POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr value) (ns-object-ptr table) (ns-object-ptr localization))))

(defun NS::|_searchForLocalizedString:foundKey:foundTable:| (thing _ found-key found-table)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_searchForLocalizedString:foundKey:foundTable:) ((:POINTER
                                                                                  (:POINTER
                                                                                   :POINTER)
                                                                                  (:POINTER
                                                                                   :POINTER))
                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr found-key) (ns-object-ptr found-table)))) nil t))

(defun NS::|resourcePath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resourcePath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|executablePath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(executablePath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_wrapperContainerURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_wrapperContainerURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|pathForAuxiliaryExecutable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pathForAuxiliaryExecutable:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|URLForAuxiliaryExecutable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(URLForAuxiliaryExecutable:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|privateFrameworksPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(privateFrameworksPath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|privateFrameworksURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(privateFrameworksURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|sharedFrameworksPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedFrameworksPath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|sharedFrameworksURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedFrameworksURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|sharedSupportPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedSupportPath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|sharedSupportURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedSupportURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|builtInPlugInsPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(builtInPlugInsPath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|builtInPlugInsURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(builtInPlugInsURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|versionNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(versionNumber) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|bundleLanguages| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bundleLanguages) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|invalidateResourceCache| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateResourceCache) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|__static| (thing)
  (let ((message-lambda 
         (make-message-lambda @(__static) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_regionsArray| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_regionsArray) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_pathForResource:ofType:inDirectory:forRegion:| (thing _ of-type in-directory for-region)
  (let ((message-lambda 
         (make-message-lambda @(_pathForResource:ofType:inDirectory:forRegion:) ((:POINTER
                                                                                  :POINTER
                                                                                  :POINTER
                                                                                  :POINTER)
                                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr of-type) (ns-object-ptr in-directory) (ns-object-ptr for-region))))

(defun NS::|_pathsForResourcesOfType:inDirectory:forRegion:| (thing _ in-directory for-region)
  (let ((message-lambda 
         (make-message-lambda @(_pathsForResourcesOfType:inDirectory:forRegion:) ((:POINTER
                                                                                   :POINTER
                                                                                   :POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-directory) (ns-object-ptr for-region))))

(defun NS::|pathForResource:ofType:inDirectory:forLanguage:| (thing _ of-type in-directory for-language)
  (let ((message-lambda 
         (make-message-lambda @(pathForResource:ofType:inDirectory:forLanguage:) ((:POINTER
                                                                                   :POINTER
                                                                                   :POINTER
                                                                                   :POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr of-type) (ns-object-ptr in-directory) (ns-object-ptr for-language))))

(defun NS::|pathsForResourcesOfType:inDirectory:forLanguage:| (thing _ in-directory for-language)
  (let ((message-lambda 
         (make-message-lambda @(pathsForResourcesOfType:inDirectory:forLanguage:) ((:POINTER
                                                                                    :POINTER
                                                                                    :POINTER)
                                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-directory) (ns-object-ptr for-language))))

(defun NS::|developmentLocalization| (thing)
  (let ((message-lambda 
         (make-message-lambda @(developmentLocalization) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|preflightAndReturnError:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(preflightAndReturnError:) (((:POINTER
                                                             :POINTER))
                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|executableArchitectures| (thing)
  (let ((message-lambda 
         (make-message-lambda @(executableArchitectures) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_preferredExecutableArchitecture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_preferredExecutableArchitecture) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|localizedAttributedStringForKey:value:table:| (thing _ value table)
  (let ((message-lambda 
         (make-message-lambda @(localizedAttributedStringForKey:value:table:) ((:POINTER
                                                                                :POINTER
                                                                                :POINTER)
                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr value) (ns-object-ptr table))))

(defun NS::|_localizedStringNoCacheNoMarkdownParsingForKey:value:table:localization:actualTableURL:formatSpecifierConfiguration:| (thing _ value table localization actual-table-u-r-l format-specifier-configuration)
  (let ((message-lambda 
         (make-message-lambda @(_localizedStringNoCacheNoMarkdownParsingForKey:value:table:localization:actualTableURL:formatSpecifierConfiguration:) ((:POINTER
                                                                                                                                                        :POINTER
                                                                                                                                                        :POINTER
                                                                                                                                                        :POINTER
                                                                                                                                                        (:POINTER
                                                                                                                                                         :POINTER)
                                                                                                                                                        (:POINTER
                                                                                                                                                         :POINTER))
                                                                                                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr value) (ns-object-ptr table) (ns-object-ptr localization) (ns-object-ptr actual-table-u-r-l) (ns-object-ptr format-specifier-configuration))))

(defun NS::|setPreservationPriority:forTags:| (thing _ for-tags)
  (let ((message-lambda 
         (make-message-lambda @(setPreservationPriority:forTags:) ((:DOUBLE
                                                                    :POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-tags))))

(defun NS::|setPreservationPriority:forTag:| (thing _ for-tag)
  (let ((message-lambda 
         (make-message-lambda @(setPreservationPriority:forTag:) ((:DOUBLE
                                                                   :POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-tag))))

(defun NS::|preservationPriorityForTag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(preservationPriorityForTag:) ((:POINTER)
                                                              :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|run| (thing)
  (let ((message-lambda 
         (make-message-lambda @(run) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))




(defun NS::|encodeWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(encodeWithCoder:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|initWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithCoder:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|delegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(delegate) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setDelegate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDelegate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHidden) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|.cxx_destruct| (thing)
  (let ((message-lambda 
         (make-message-lambda @(.cxx_destruct) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|menu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(menu) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isActive) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))














(defun NS::|disableAutomaticTermination| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableAutomaticTermination) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|enableAutomaticTermination| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableAutomaticTermination) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isRunning| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRunning) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|context| (thing)
  (let ((message-lambda 
         (make-message-lambda @(context) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_userNotificationCenter:willActivateForNotification:additionalUserInfo:| (thing _ will-activate-for-notification additional-user-info)
  (let ((message-lambda 
         (make-message-lambda @(_userNotificationCenter:willActivateForNotification:additionalUserInfo:) ((:POINTER
                                                                                                           :POINTER
                                                                                                           :POINTER)
                                                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr will-activate-for-notification) (ns-object-ptr additional-user-info))))

(defun NS::|_userNotificationCenter:didActivateWithToken:| (thing _ did-activate-with-token)
  (let ((message-lambda 
         (make-message-lambda @(_userNotificationCenter:didActivateWithToken:) ((:POINTER
                                                                                 :POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr did-activate-with-token))))

(defun NS::|contextID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contextID) (NIL :UNSIGNED-INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|keyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|pushRegistrationDidRegisterWithDeviceToken:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pushRegistrationDidRegisterWithDeviceToken:) ((:POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pushRegistrationDidFailToRegister:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pushRegistrationDidFailToRegister:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pushRegistrationDidReceiveRemotePush:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pushRegistrationDidReceiveRemotePush:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_disableSuddenTermination| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_disableSuddenTermination) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setWindowsNeedUpdate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindowsNeedUpdate:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_enableSuddenTermination| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enableSuddenTermination) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setLaunchTaskMaskBits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setLaunchTaskMaskBits:) ((:UNSIGNED-LONG-LONG)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_appleEventActivationInProgress| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_appleEventActivationInProgress) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_afterBatchOrderingFinishesDo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_afterBatchOrderingFinishesDo:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setAppleEventActivationInProgress:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAppleEventActivationInProgress:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_isFinishLaunchingFromEventHandlersSuppressed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isFinishLaunchingFromEventHandlersSuppressed) (NIL
                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_sendFinishLaunchingNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sendFinishLaunchingNotification) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doHide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doHide) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doUnhideWithoutActivation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doUnhideWithoutActivation) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nextEventMatchingMask:untilDate:inMode:dequeue:| (thing _ until-date in-mode dequeue)
  (let ((message-lambda 
         (make-message-lambda @(nextEventMatchingMask:untilDate:inMode:dequeue:) ((:UNSIGNED-LONG-LONG
                                                                                   :POINTER
                                                                                   :POINTER
                                                                                   :CHAR)
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr until-date) (ns-object-ptr in-mode) (if dequeue 1 0))))

(defun NS::|postEvent:atStart:| (thing _ at-start)
  (let ((message-lambda 
         (make-message-lambda @(postEvent:atStart:) ((:POINTER :CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if at-start 1 0))))

(defun NS::|effectiveAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(effectiveAppearance) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|appearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(appearance) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|activateIgnoringOtherApps:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(activateIgnoringOtherApps:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|windowWithWindowNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(windowWithWindowNumber:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_keyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_keyWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|userInterfaceLayoutDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userInterfaceLayoutDirection) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityParent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilitySetMayContainProtectedContent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetMayContainProtectedContent:) ((:CHAR)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityFocusedUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedUIElement) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityHitTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHitTest:) (((:STRUCT
                                                          NS::|CGPoint|))
                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsIgnored| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsIgnored) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|_voiceOverStatusChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_voiceOverStatusChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_switchControlStatusChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_switchControlStatusChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_accessibilityFullKeyboardAccessStatusChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityFullKeyboardAccessStatusChanged:) ((:POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_registerForAccessibilityNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_registerForAccessibilityNotifications) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unregisterForAccessibilityNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unregisterForAccessibilityNotifications) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|accessibilityAttributeNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributeNames) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityAttributeValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributeValue:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|mainMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mainMenu) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityMayContainProtectedContent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityMayContainProtectedContent) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setCurrentEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCurrentEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|canEnterFullScreenMode| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canEnterFullScreenMode) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|targetForAction:to:from:| (thing _ to from)
  (let ((message-lambda 
         (make-message-lambda @(targetForAction:to:from:) ((:POINTER :POINTER
                                                            :POINTER)
                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to) (ns-object-ptr from))))

(defun NS::|mainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mainWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|presentationOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(presentationOptions) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|windows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|enumerateWindowsWithOptions:usingBlock:| (thing _ using-block)
  (let ((message-lambda 
         (make-message-lambda @(enumerateWindowsWithOptions:usingBlock:) ((:LONG-LONG
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr using-block))))

(defun NS::|validateMenuItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateMenuItem:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|validateUserInterfaceItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateUserInterfaceItem:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|windowsMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowsMenu) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_findMenuItemWithSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_findMenuItemWithSelector:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|closeAll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(closeAll:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|supplementalTargetForAction:sender:| (thing _ sender)
  (let ((message-lambda 
         (make-message-lambda @(supplementalTargetForAction:sender:) ((:POINTER
                                                                       :POINTER)
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr sender))))


(defun NS::|accessibilityRoleAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRoleAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsRoleAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsRoleAttributeSettable) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityRoleDescriptionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRoleDescriptionAttribute) (NIL
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsRoleDescriptionAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsRoleDescriptionAttributeSettable) (NIL
                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityIsAttributeSettable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsAttributeSettable:) ((:POINTER)
                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|accessibilitySetValue:forAttribute:| (thing _ for-attribute)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetValue:forAttribute:) ((:POINTER
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-attribute))))

(defun NS::|accessibilityActionNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityActionNames) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityActionDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityActionDescription:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityPerformAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformAction:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAccessibilityMainThreadIdleNotificationEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMainThreadIdleNotificationEnabled:) ((:CHAR)
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setAccessibilityEventProcessedNotificationEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEventProcessedNotificationEnabled:) ((:CHAR)
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|accessibilityChildrenAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChildrenAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|runModalForWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runModalForWindow:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|endSheet:returnCode:| (thing _ return-code)
  (let ((message-lambda 
         (make-message-lambda @(endSheet:returnCode:) ((:POINTER :LONG-LONG)
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) return-code)))

(defun NS::|stopModalWithCode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stopModalWithCode:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|speakString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(speakString:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|touchBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBar) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_scheduleWindow:forBatchOrdering:relativeTo:| (thing _ for-batch-ordering relative-to)
  (let ((message-lambda 
         (make-message-lambda @(_scheduleWindow:forBatchOrdering:relativeTo:) ((:LONG-LONG
                                                                                :LONG-LONG
                                                                                :LONG-LONG)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ for-batch-ordering relative-to)))

(defun NS::|_terminateOnMemoryPressure:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_terminateOnMemoryPressure:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_finishedBasicLaunch| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_finishedBasicLaunch) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isAppOptedIntoExtendedLaunchSignposts| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAppOptedIntoExtendedLaunchSignposts) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_finishedExtendedLaunch| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_finishedExtendedLaunch) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postSignpostsPossiblyDeferred| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postSignpostsPossiblyDeferred) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postSignpostsForCurrentPhase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postSignpostsForCurrentPhase) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postBasicLaunchSignposts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postBasicLaunchSignposts) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postExtendedLaunchSignposts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postExtendedLaunchSignposts) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_eventBailOutForAppLaunchWillBegin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_eventBailOutForAppLaunchWillBegin) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_eventBailOutForAppLaunchDidEnd| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_eventBailOutForAppLaunchDidEnd) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setNeedsUpdateToReflectAutomaticTerminationState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsUpdateToReflectAutomaticTerminationState) (NIL
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_appHasOpenNSWindowOrPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_appHasOpenNSWindowOrPanel) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setShouldRestoreStateOnNextLaunch:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setShouldRestoreStateOnNextLaunch:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|terminate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(terminate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_canAutoQuitQuietlyAndSafelyWithOptionalExplanation:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canAutoQuitQuietlyAndSafelyWithOptionalExplanation:) ((:POINTER)
                                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|hide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(hide:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_makeSureAutomaticTerminationIsNotInterferingWithLanguagePrefs:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_makeSureAutomaticTerminationIsNotInterferingWithLanguagePrefs:) ((:POINTER)
                                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setSpacesSwitchOnActivation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setSpacesSwitchOnActivation) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setDoubleClickBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setDoubleClickBehavior) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_disableRelaunchOnLoginIfNotLaunchedByLaunchServicesOrBlacklisted| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_disableRelaunchOnLoginIfNotLaunchedByLaunchServicesOrBlacklisted) (NIL
                                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_registerForAppearanceNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_registerForAppearanceNotifications) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_eventBlockingTransitionWillBegin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_eventBlockingTransitionWillBegin) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_eventBlockingTransitionDidEnd| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_eventBlockingTransitionDidEnd) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dockBehaviorChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_dockBehaviorChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_reactToChangeInQuitAlwaysKeepsWindows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_reactToChangeInQuitAlwaysKeepsWindows:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_spacesSwitchOnActivationChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_spacesSwitchOnActivationChanged:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_functionKeyBehaviorChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_functionKeyBehaviorChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_initializeSafeAperture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_initializeSafeAperture) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_initializeLockoutUI| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_initializeLockoutUI) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_registerWithDock| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_registerWithDock) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isActiveApp| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isActiveApp) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setIsActive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsActive:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setIsHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIsHidden:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_startPrefetchingUbiquityContainerURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_startPrefetchingUbiquityContainerURL) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_registerForDisplayChangedNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_registerForDisplayChangedNotifications) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|orderFrontCharacterPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontCharacterPalette:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateCharacterPaletteItemKeyEquivalent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateCharacterPaletteItemKeyEquivalent:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cancelAllUserAttentionRequests| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cancelAllUserAttentionRequests) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setApplicationIconImage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setApplicationIconImage:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeSystemUIModeHandler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeSystemUIModeHandler) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_startBatchWindowAccumulation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_startBatchWindowAccumulation:) ((:LONG-LONG)
                                                                 :INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_performBatchWindowOrdering:release:| (thing _ release)
  (let ((message-lambda 
         (make-message-lambda @(_performBatchWindowOrdering:release:) ((:INT
                                                                        :CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if release 1 0))))

(defun NS::|_deallocHardCore:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_deallocHardCore:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|validRequestorForSendType:returnType:| (thing _ return-type)
  (let ((message-lambda 
         (make-message-lambda @(validRequestorForSendType:returnType:) ((:POINTER
                                                                         :POINTER)
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr return-type))))

(defun NS::|_isRunningAppModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isRunningAppModal) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isFakeHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isFakeHidden) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setFakeHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setFakeHidden:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_makeHODWindowsPerform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_makeHODWindowsPerform:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_doHideMaybeFakingIt:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_doHideMaybeFakingIt:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_doUnhideWithoutActivationMaybeFakingIt:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_doUnhideWithoutActivationMaybeFakingIt:) ((:CHAR)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_switchToSpaceIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_switchToSpaceIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|activationPolicy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(activationPolicy) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_copyBatchWindowOrderingPerformerForToken:release:| (thing _ release)
  (let ((message-lambda 
         (make-message-lambda @(_copyBatchWindowOrderingPerformerForToken:release:) ((:INT
                                                                                      :CHAR)
                                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if release 1 0))))

(defun NS::|unhideWithoutActivation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unhideWithoutActivation) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldRestoreWithFullFidelity| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldRestoreWithFullFidelity) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_orderWindowsAndSwitchToSpaceIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_orderWindowsAndSwitchToSpaceIfNeeded) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_pendingActivationOriginatingDisplayHint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_pendingActivationOriginatingDisplayHint) (NIL
                                                                           :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_bestKeyWindowCandidateOnScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_bestKeyWindowCandidateOnScreen:) ((:POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setKeyWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setKeyWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setMainWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setMainWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_bestMainWindowCandidateOnScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_bestMainWindowCandidateOnScreen:) ((:POINTER)
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_mainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_mainWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_findWindowUsingCache:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_findWindowUsingCache:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_findWindowUsingContextID:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_findWindowUsingContextID:) ((:LONG-LONG)
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setPreviousKeyWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setPreviousKeyWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_doOpenFile:ok:tryTemp:| (thing _ ok try-temp)
  (let ((message-lambda 
         (make-message-lambda @(_doOpenFile:ok:tryTemp:) ((:POINTER
                                                           (:POINTER
                                                            :LONG-LONG)
                                                           :CHAR)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr ok) (if try-temp 1 0))))

(defun NS::|_appCentricOpenPanel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_appCentricOpenPanel) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_findKeyWindowConsideringSpacesWithOriginatingDisplayHint:isAppleEventPending:makeKey:| (thing _ is-apple-event-pending make-key)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_findKeyWindowConsideringSpacesWithOriginatingDisplayHint:isAppleEventPending:makeKey:) ((:INT
                                                                                                                          :CHAR
                                                                                                                          :CHAR)
                                                                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if is-apple-event-pending 1 0) (if make-key 1 0)))) nil t))

(defun NS::|currentSystemPresentationOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentSystemPresentationOptions) (NIL
                                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|updateWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateWindows) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|makeWindowsPerform:inOrder:| (thing _ in-order)
  (let ((message-lambda 
         (make-message-lambda @(makeWindowsPerform:inOrder:) ((:POINTER :CHAR)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if in-order 1 0))))

(defun NS::|_launchTaskMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_launchTaskMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|modalWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(modalWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_reopenWindowsIfNecessaryWithAppleEvent:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(_reopenWindowsIfNecessaryWithAppleEvent:completionHandler:) ((:POINTER
                                                                                              :POINTER)
                                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr completion-handler))))

(defun NS::|_postDidFinishNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postDidFinishNotification) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_emitApplicationLaunchSignpost| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_emitApplicationLaunchSignpost) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_enableAutomaticTerminationIfWhitelisted| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enableAutomaticTerminationIfWhitelisted) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_initializeAutomaticTermination| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_initializeAutomaticTermination) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_registerRequiredAEHandlers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_registerRequiredAEHandlers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldDelayDocumentReopeningUntilAfterFinishLaunching| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldDelayDocumentReopeningUntilAfterFinishLaunching) (NIL
                                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_delayReopening| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_delayReopening) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_continueReopening| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_continueReopening) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_customizeMainMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_customizeMainMenu) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_handleAEPrintDocumentsForURLs:withSettings:showPrintPanels:| (thing _ with-settings show-print-panels)
  (let ((message-lambda 
         (make-message-lambda @(_handleAEPrintDocumentsForURLs:withSettings:showPrintPanels:) ((:POINTER
                                                                                                :POINTER
                                                                                                :CHAR)
                                                                                               :SHORT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-settings) (if show-print-panels 1 0))))

(defun NS::|sendEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sendEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|finishLaunching| (thing)
  (let ((message-lambda 
         (make-message-lambda @(finishLaunching) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_checkForAutomaticTerminationSupportPossiblyEnablingIt| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_checkForAutomaticTerminationSupportPossiblyEnablingIt) (NIL
                                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_installMemoryStatusDispatchSources| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_installMemoryStatusDispatchSources) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_installMemoryPressureDispatchSources| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_installMemoryPressureDispatchSources) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_modalSession:sendEvent:| (thing _ send-event)
  (let ((message-lambda 
         (make-message-lambda @(_modalSession:sendEvent:) (((:POINTER
                                                             (:STRUCT
                                                              NS::|_NSModalSession|))
                                                            :POINTER)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr send-event))))

(defun NS::|beginModalSessionForWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(beginModalSessionForWindow:) ((:POINTER)
                                                              (:POINTER
                                                               (:STRUCT
                                                                NS::|_NSModalSession|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_doModalLoop:peek:| (thing _ peek)
  (let ((message-lambda 
         (make-message-lambda @(_doModalLoop:peek:) (((:POINTER
                                                       (:STRUCT
                                                        NS::|_NSModalSession|))
                                                      :CHAR)
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if peek 1 0))))

(defun NS::|endModalSession:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endModalSession:) (((:POINTER
                                                     (:STRUCT
                                                      NS::|_NSModalSession|)))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|beginModalSessionForWindow:relativeToWindow:| (thing _ relative-to-window)
  (let ((message-lambda 
         (make-message-lambda @(beginModalSessionForWindow:relativeToWindow:) ((:POINTER
                                                                                :POINTER)
                                                                               (:POINTER
                                                                                (:STRUCT
                                                                                 NS::|_NSModalSession|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr relative-to-window))))

(defun NS::|_commonBeginModalSessionForWindow:relativeToWindow:modalDelegate:didEndSelector:contextInfo:| (thing _ relative-to-window modal-delegate did-end-selector context-info)
  (let ((message-lambda 
         (make-message-lambda @(_commonBeginModalSessionForWindow:relativeToWindow:modalDelegate:didEndSelector:contextInfo:) ((:POINTER
                                                                                                                                :POINTER
                                                                                                                                :POINTER
                                                                                                                                :POINTER
                                                                                                                                (:POINTER
                                                                                                                                 :VOID))
                                                                                                                               (:POINTER
                                                                                                                                (:STRUCT
                                                                                                                                 NS::|_NSModalSession|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr relative-to-window) (ns-object-ptr modal-delegate) (ns-object-ptr did-end-selector) (ns-object-ptr context-info))))

(defun NS::|_hiddenOnLaunch| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hiddenOnLaunch) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|requestUserAttention:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(requestUserAttention:) ((:UNSIGNED-LONG-LONG)
                                                        :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_orderFrontModalWindow:relativeToWindow:| (thing _ relative-to-window)
  (let ((message-lambda 
         (make-message-lambda @(_orderFrontModalWindow:relativeToWindow:) ((:POINTER
                                                                            :POINTER)
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr relative-to-window))))

(defun NS::|_makeModalWindowsPerform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_makeModalWindowsPerform:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_isModalUsingCache:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isModalUsingCache:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_hasActiveRequest| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasActiveRequest) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|dockTile| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dockTile) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cancelRequest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cancelRequest:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|cancelUserAttentionRequest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cancelUserAttentionRequest:) ((:LONG-LONG)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_isRunningDocModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isRunningDocModal) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_docController:shouldTerminate:| (thing _ should-terminate)
  (let ((message-lambda 
         (make-message-lambda @(_docController:shouldTerminate:) ((:POINTER
                                                                   :CHAR)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if should-terminate 1 0))))

(defun NS::|_setWaitingForTerminationReply:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWaitingForTerminationReply:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|replyToApplicationShouldTerminate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replyToApplicationShouldTerminate:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_hiddenWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_hiddenWindows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|shouldRestoreStateOnNextLaunch| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRestoreStateOnNextLaunch) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_flushPersistentState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_flushPersistentState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_reopenPersistentState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_reopenPersistentState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|encodeRestorableStateWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(encodeRestorableStateWithCoder:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_persistenceOrderedWindowNumbers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_persistenceOrderedWindowNumbers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|restoreStateWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(restoreStateWithCoder:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_persistentUIWindowID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_persistentUIWindowID) (NIL :UNSIGNED-INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_createDockMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_createDockMenu:) ((:CHAR)
                                                   (:POINTER
                                                    (:STRUCT NS::|__CFArray|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setDockMenuForPersistentState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDockMenuForPersistentState:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_safeApertureCompatibilityMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_safeApertureCompatibilityMode) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_terminateFromSender:askIfShouldTerminate:saveWindows:| (thing _ ask-if-should-terminate save-windows)
  (let ((message-lambda 
         (make-message-lambda @(_terminateFromSender:askIfShouldTerminate:saveWindows:) ((:POINTER
                                                                                          :CHAR
                                                                                          :CHAR)
                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if ask-if-should-terminate 1 0) (if save-windows 1 0))))

(defun NS::|_unsetShouldRestoreStateOnNextLaunch| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unsetShouldRestoreStateOnNextLaunch) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_quitMenuItemShouldKeepWindows:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_quitMenuItemShouldKeepWindows:) ((:POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_pushPersistentStateTerminationGeneration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_pushPersistentStateTerminationGeneration) (NIL
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldTerminate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldTerminate) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_popPersistentStateTerminationGeneration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_popPersistentStateTerminationGeneration) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unregisterForAppearanceNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unregisterForAppearanceNotifications) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasKeyFocus| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasKeyFocus) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|currentEvent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentEvent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_findWindowWithOptions:passingTest:| (thing _ passing-test)
  (let ((message-lambda 
         (make-message-lambda @(_findWindowWithOptions:passingTest:) ((:LONG-LONG
                                                                       :POINTER)
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr passing-test))))

(defun NS::|_spacesSwitchOnActivation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_spacesSwitchOnActivation) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateFullScreenPresentationOptionsForInstance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateFullScreenPresentationOptionsForInstance:) ((:POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setPresentationOptions:instance:flags:| (thing _ instance flags)
  (let ((message-lambda 
         (make-message-lambda @(_setPresentationOptions:instance:flags:) ((:UNSIGNED-LONG-LONG
                                                                           :POINTER
                                                                           :UNSIGNED-LONG-LONG)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr instance) flags)))

(defun NS::|_isTerminating| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isTerminating) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateActiveWindowForSpaceChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateActiveWindowForSpaceChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateFullScreenPresentationOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateFullScreenPresentationOptions) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|activeSpaceChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(activeSpaceChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_requestSpaceChangedNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_requestSpaceChangedNotification) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_activeDisplayChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_activeDisplayChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setMouseActivationInProgress:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setMouseActivationInProgress:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setAmbientOriginatingDisplayHint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAmbientOriginatingDisplayHint:) ((:INT)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_isDeactPending| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isDeactPending) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_declineSpaceChangedNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_declineSpaceChangedNotification) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldClearModalWindowLevelWhenInactive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldClearModalWindowLevelWhenInactive) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_clearModalWindowLevels| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_clearModalWindowLevels) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|quickLookPreviewItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(quickLookPreviewItems:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_resignKeyFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resignKeyFocus) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_getLockedWindowListForCycle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_getLockedWindowListForCycle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unlockWindowListForCycle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unlockWindowListForCycle) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateIconImageFromOriginal| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateIconImageFromOriginal) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setApplicationIconImage:setDockImage:| (thing _ set-dock-image)
  (let ((message-lambda 
         (make-message-lambda @(_setApplicationIconImage:setDockImage:) ((:POINTER
                                                                          :CHAR)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if set-dock-image 1 0))))

(defun NS::|_iconImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_iconImage) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_copyWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_copyWindows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateWindowsUsingCache| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateWindowsUsingCache) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isAlternateQuitMenuItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAlternateQuitMenuItem:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|setMainMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMainMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_addFeedbackMenuItemIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_addFeedbackMenuItemIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_sendDockMenuCommand:withTag:modifierFlags:originatingDisplay:| (thing _ with-tag modifier-flags originating-display)
  (let ((message-lambda 
         (make-message-lambda @(_sendDockMenuCommand:withTag:modifierFlags:originatingDisplay:) ((:UNSIGNED-INT
                                                                                                  :UNSIGNED-LONG-LONG
                                                                                                  :UNSIGNED-LONG-LONG
                                                                                                  :INT)
                                                                                                 :INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ with-tag modifier-flags originating-display)))

(defun NS::|_sendDockMenuCommand:withTag:modifierFlags:| (thing _ with-tag modifier-flags)
  (let ((message-lambda 
         (make-message-lambda @(_sendDockMenuCommand:withTag:modifierFlags:) ((:UNSIGNED-INT
                                                                               :UNSIGNED-LONG-LONG
                                                                               :UNSIGNED-LONG-LONG)
                                                                              :INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ with-tag modifier-flags)))

(defun NS::|_flattenMenu:flatList:| (thing _ flat-list)
  (let ((message-lambda 
         (make-message-lambda @(_flattenMenu:flatList:) ((:POINTER :POINTER)
                                                         (:POINTER
                                                          (:STRUCT
                                                           NS::|__CFArray|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr flat-list))))

(defun NS::|_flattenMenuItem:flatList:| (thing _ flat-list)
  (let ((message-lambda 
         (make-message-lambda @(_flattenMenuItem:flatList:) ((:POINTER
                                                              :POINTER)
                                                             (:POINTER
                                                              (:STRUCT
                                                               NS::|__CFDictionary|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr flat-list))))

(defun NS::|_addWindowsMenu:enabled:| (thing _ enabled)
  (let ((message-lambda 
         (make-message-lambda @(_addWindowsMenu:enabled:) (((:POINTER
                                                             (:STRUCT
                                                              NS::|__CFArray|))
                                                            :CHAR)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if enabled 1 0))))

(defun NS::|_previousKeyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_previousKeyWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_indexOfWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_indexOfWindow:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeWindowFromCache:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeWindowFromCache:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleActivatedEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleActivatedEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleReactivateEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleReactivateEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleDeactivateEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleDeactivateEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleActivateDeferredEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleActivateDeferredEvent:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|disableCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableCursorRects) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|enableCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableCursorRects) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setCursorForCurrentMouseLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setCursorForCurrentMouseLocation) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_mouseActivationInProgress| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_mouseActivationInProgress) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_obtainKeyFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_obtainKeyFocus) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_crashOnException:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_crashOnException:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_crashingExceptionNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_crashingExceptionNames) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_exceptionListeners| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_exceptionListeners) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_canShowExceptions| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canShowExceptions) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_showException:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_showException:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|stopSpeaking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stopSpeaking:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isSpeaking| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSpeaking) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|runPageLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runPageLayout:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_isNSDocumentBased| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isNSDocumentBased) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|startDictation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(startDictation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|stopDictation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stopDictation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|arrangeInFront:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(arrangeInFront:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|alternateArrangeInFront:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alternateArrangeInFront:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_appHasVisibleWindowOrPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_appHasVisibleWindowOrPanel) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|miniaturizeAll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(miniaturizeAll:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_anyOfMyWindowsAreOnAVisibleNonFullScreenSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_anyOfMyWindowsAreOnAVisibleNonFullScreenSpace) (NIL
                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|zoomAll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(zoomAll:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|unhideAllApplications:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unhideAllApplications:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|hideOtherApplications:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(hideOtherApplications:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleTouchBarCustomizationPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTouchBarCustomizationPalette:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleTouchBarControlStripCustomizationPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTouchBarControlStripCustomizationPalette:) ((:POINTER)
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_validateTouchBarCustomizationPaletteItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_validateTouchBarCustomizationPaletteItem:) ((:POINTER)
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|orderFrontColorPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontColorPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|showGuessPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showGuessPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_kitBundle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_kitBundle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|doCommandBySelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(doCommandBySelector:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setPresentationOptions:flags:| (thing _ flags)
  (let ((message-lambda 
         (make-message-lambda @(_setPresentationOptions:flags:) ((:UNSIGNED-LONG-LONG
                                                                  :UNSIGNED-LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ flags)))

(defun NS::|_enableSafeAreaShielding| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enableSafeAreaShielding) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_disableSafeAreaShielding| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_disableSafeAreaShielding) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|modeAndOptions:forPresentationOptions:usingForFullScreen:| (thing _ for-presentation-options using-for-full-screen)
  (let ((message-lambda 
         (make-message-lambda @(modeAndOptions:forPresentationOptions:usingForFullScreen:) (((:POINTER
                                                                                              :UNSIGNED-INT)
                                                                                             :UNSIGNED-LONG-LONG
                                                                                             :CHAR)
                                                                                            :UNSIGNED-INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-presentation-options (if using-for-full-screen 1 0))))

(defun NS::|_reactToPresentationChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_reactToPresentationChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|enterFullScreenMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(enterFullScreenMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_doCopyMemoryPressureArrayOnWriteIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doCopyMemoryPressureArrayOnWriteIfNecessary) (NIL
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_callMemoryPressureHandlers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_callMemoryPressureHandlers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_fakeMemoryPressureHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_fakeMemoryPressureHandler:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_invalidateEffectiveAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateEffectiveAppearance) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidateWindowAppearances| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateWindowAppearances) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accentColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accentColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|markAppLaunchComplete| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markAppLaunchComplete) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_installAutoreleasePoolsOnCurrentThreadIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_installAutoreleasePoolsOnCurrentThreadIfNecessary) (NIL
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateButtonsForSystemUIModeChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateButtonsForSystemUIModeChanged) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_applicationLaunchIsPastSplashScreens| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_applicationLaunchIsPastSplashScreens) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_freezeAutomaticTerminationState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_freezeAutomaticTerminationState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unfreezeAutomaticTerminationState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unfreezeAutomaticTerminationState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_forceAutoQuit:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_forceAutoQuit:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|occlusionState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(occlusionState) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isProtectedDataAvailable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isProtectedDataAvailable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setEventDelegate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setEventDelegate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_eventDelegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_eventDelegate) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addHiddenWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addHiddenWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeHiddenWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeHiddenWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_doFakeUnhide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doFakeUnhide) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unscheduleWindowForBatchOrdering:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_unscheduleWindowForBatchOrdering:) ((:LONG-LONG)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_lowestWindowOfAtLeastNormalWindowLevelAfterScheduledBatchOrdering| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lowestWindowOfAtLeastNormalWindowLevelAfterScheduledBatchOrdering) (NIL
                                                                                                     :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|unhide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unhide:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_batchOrdering| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_batchOrdering) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_windowNumber:changedTo:| (thing _ changed-to)
  (let ((message-lambda 
         (make-message-lambda @(_windowNumber:changedTo:) ((:LONG-LONG
                                                            :LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ changed-to)))

(defun NS::|_windowWithContextID:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_windowWithContextID:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_isDoingOpenFile| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isDoingOpenFile) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|openFile:ok:| (thing _ ok)
  (let ((message-lambda 
         (make-message-lambda @(openFile:ok:) ((:POINTER (:POINTER :LONG-LONG))
                                               :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr ok))))

(defun NS::|openTempFile:ok:| (thing _ ok)
  (let ((message-lambda 
         (make-message-lambda @(openTempFile:ok:) ((:POINTER
                                                    (:POINTER :LONG-LONG))
                                                   :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr ok))))

(defun NS::|_openFileWithoutUI:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_openFileWithoutUI:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|replyToOpenOrPrint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replyToOpenOrPrint:) ((:UNSIGNED-LONG-LONG)
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_hasOpenMenuItem| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasOpenMenuItem) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_doOpenUntitled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_doOpenUntitled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isDoingUnhide| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isDoingUnhide) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isDoingHide| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isDoingHide) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isRunningModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isRunningModal) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|deactivate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deactivate) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_ambientOriginatingDisplayHint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_ambientOriginatingDisplayHint) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_handlingAmbientDisplayHintDockMenuCommand| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_handlingAmbientDisplayHintDockMenuCommand) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_withAmbientOriginatingDisplayHint:perform:| (thing _ perform)
  (let ((message-lambda 
         (make-message-lambda @(_withAmbientOriginatingDisplayHint:perform:) ((:INT
                                                                               :POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr perform))))

(defun NS::|_setPendingActivationOriginatingDisplayHint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setPendingActivationOriginatingDisplayHint:) ((:INT)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_adjustKeyWindowFromOriginatingDisplayHint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_adjustKeyWindowFromOriginatingDisplayHint:) ((:INT)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_deactivateWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_deactivateWindows) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_activateWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_activateWindows) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_suppressFinishLaunchingFromEventHandlersWhilePerformingBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_suppressFinishLaunchingFromEventHandlersWhilePerformingBlock:) ((:POINTER)
                                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_replyToLaunch| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_replyToLaunch) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_replyToOpen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_replyToOpen:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_didNSOpenOrPrint| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_didNSOpenOrPrint) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_startRunMethod| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_startRunMethod) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_beginRunning| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_beginRunning) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_endRunMethod| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endRunMethod) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_preEventHandling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_preEventHandling) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postEventHandling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postEventHandling) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_wantsDeviceDependentEventModifierFlags| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsDeviceDependentEventModifierFlags) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|runModalForWindow:relativeToWindow:| (thing _ relative-to-window)
  (let ((message-lambda 
         (make-message-lambda @(runModalForWindow:relativeToWindow:) ((:POINTER
                                                                       :POINTER)
                                                                      :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr relative-to-window))))

(defun NS::|beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:| (thing _ modal-for-window modal-delegate did-end-selector context-info)
  (let ((message-lambda 
         (make-message-lambda @(beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:) ((:POINTER
                                                                                                       :POINTER
                                                                                                       :POINTER
                                                                                                       :POINTER
                                                                                                       (:POINTER
                                                                                                        :VOID))
                                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr modal-for-window) (ns-object-ptr modal-delegate) (ns-object-ptr did-end-selector) (ns-object-ptr context-info))))

(defun NS::|stop:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stop:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|stopModal| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stopModal) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|endSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endSheet:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|abortModal| (thing)
  (let ((message-lambda 
         (make-message-lambda @(abortModal) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|runModalSession:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runModalSession:) (((:POINTER
                                                     (:STRUCT
                                                      NS::|_NSModalSession|)))
                                                   :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setAppCentricOpenPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAppCentricOpenPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_waitingForTerminationReply| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_waitingForTerminationReply) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_persistentStateTerminationGeneration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_persistentStateTerminationGeneration) (NIL
                                                                        :UNSIGNED-INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_copyPublicPersistentUIInfo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_copyPublicPersistentUIInfo) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_expectingAppDeath| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_expectingAppDeath) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|delayWindowOrdering| (thing)
  (let ((message-lambda 
         (make-message-lambda @(delayWindowOrdering) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|preventWindowOrdering| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preventWindowOrdering) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|onFirstEvent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(onFirstEvent) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|rightMouseDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rightMouseDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_sendScreenNotificationWhenDockSizeChanges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_sendScreenNotificationWhenDockSizeChanges) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|event:wouldActivateWindow:| (thing _ would-activate-window)
  (let ((message-lambda 
         (make-message-lambda @(event:wouldActivateWindow:) ((:POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr would-activate-window))))

(defun NS::|quickLookPreviewItemsAtWindowLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(quickLookPreviewItemsAtWindowLocation:) (((:STRUCT
                                                                           NS::|CGPoint|))
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setHasKeyFocus:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setHasKeyFocus:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_stealKeyFocusWithOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_stealKeyFocusWithOptions:) ((:UNSIGNED-INT)
                                                             :INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_releaseKeyFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_releaseKeyFocus) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setAllPanelsNonactivating:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAllPanelsNonactivating:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_areAllPanelsNonactivating| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_areAllPanelsNonactivating) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|frontWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frontWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_enumerateOnScreenWindowsUsingBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_enumerateOnScreenWindowsUsingBlock:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_makeWindowsPerform:forEvent:inWindow:standardWindowButton:| (thing _ for-event in-window standard-window-button)
  (let ((message-lambda 
         (make-message-lambda @(_makeWindowsPerform:forEvent:inWindow:standardWindowButton:) ((:POINTER
                                                                                               :POINTER
                                                                                               :POINTER
                                                                                               :UNSIGNED-LONG-LONG)
                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-event) (ns-object-ptr in-window) standard-window-button)))

(defun NS::|_cycleWindowsReversed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cycleWindowsReversed:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_cycleUtilityWindowsReversed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cycleUtilityWindowsReversed:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_dockDied| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dockDied) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateDockTileImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateDockTileImage) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|applicationIconImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(applicationIconImage) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dockRestarted| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dockRestarted) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_appIcon| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_appIcon) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setActivationPolicy:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setActivationPolicy:) ((:LONG-LONG) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_addUpdaterForDocumentMenuItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addUpdaterForDocumentMenuItem:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setMainMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setMainMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setHelpMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHelpMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|helpMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(helpMenu) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setDockMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDockMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_flattenMenuItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_flattenMenuItem:) ((:POINTER)
                                                    (:POINTER
                                                     (:STRUCT
                                                      NS::|__CFDictionary|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_flattenMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_flattenMenu:) ((:POINTER)
                                                (:POINTER
                                                 (:STRUCT NS::|__CFArray|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_addWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_addOpenWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addOpenWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeOpenWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeOpenWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_openWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_openWindows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_handleAppKitDefinedEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleAppKitDefinedEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleHotKeyPressed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_handleHotKeyPressed:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_handleHotKeyRelease:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_handleHotKeyRelease:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_handleKeyFocusNotification:withEvent:| (thing _ with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_handleKeyFocusNotification:withEvent:) ((:LONG-LONG
                                                                          :POINTER)
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-event)))) nil t))

(defun NS::|_currentActivation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentActivation) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setCurrentActivation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCurrentActivation:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_pendingActCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_pendingActCount) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_crashWhenExceptionWithNameIsReported:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_crashWhenExceptionWithNameIsReported:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_registerExceptionListener:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_registerExceptionListener:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_unregisterExceptionListener:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_unregisterExceptionListener:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|reportException:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(reportException:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|speechSynthesizer:didFinishSpeaking:| (thing _ did-finish-speaking)
  (let ((message-lambda 
         (make-message-lambda @(speechSynthesizer:didFinishSpeaking:) ((:POINTER
                                                                        :CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if did-finish-speaking 1 0))))

(defun NS::|_unhighlightMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unhighlightMenu) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_whenReopeningIsAllowedDo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_whenReopeningIsAllowedDo:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_reopenWindowsAsNecessaryIncludingRestorableState:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(_reopenWindowsAsNecessaryIncludingRestorableState:completionHandler:) ((:CHAR
                                                                                                        :POINTER)
                                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (ns-object-ptr completion-handler))))

(defun NS::|isFullKeyboardAccessEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFullKeyboardAccessEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_processSwitchesEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_processSwitchesEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setPresentationOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPresentationOptions:) ((:UNSIGNED-LONG-LONG)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|exitFullScreenMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(exitFullScreenMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setCanEnterFullScreenMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanEnterFullScreenMode:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|abortAllToolTips| (thing)
  (let ((message-lambda 
         (make-message-lambda @(abortAllToolTips) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|addMemoryPressureMonitorUsingHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addMemoryPressureMonitorUsingHandler:) ((:POINTER)
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|removeMemoryPressureMonitor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeMemoryPressureMonitor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|addIdleMonitorUsingHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addIdleMonitorUsingHandler:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|removeIdleMonitor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeIdleMonitor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|memoryStatus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(memoryStatus) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setAccentColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAccentColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_effectiveAccentColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveAccentColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accentColorGeneration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accentColorGeneration) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldLoadMainNibNamed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldLoadMainNibNamed:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_shouldLoadMainStoryboardNamed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldLoadMainStoryboardNamed:) ((:POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_modalSessionForWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_modalSessionForWindow:) ((:POINTER)
                                                          (:POINTER
                                                           (:STRUCT
                                                            NS::|_NSModalSession|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_windowForModalSession:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_windowForModalSession:) (((:POINTER
                                                            (:STRUCT
                                                             NS::|_NSModalSession|)))
                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_previousModalSession:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_previousModalSession:) (((:POINTER
                                                           (:STRUCT
                                                            NS::|_NSModalSession|)))
                                                         (:POINTER
                                                          (:STRUCT
                                                           NS::|_NSModalSession|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|presentError:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(presentError:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|willPresentError:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(willPresentError:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_validateError:forPresentationMethod:| (thing _ for-presentation-method)
  (let ((message-lambda 
         (make-message-lambda @(_validateError:forPresentationMethod:) ((:POINTER
                                                                         :POINTER)
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-presentation-method))))

(defun NS::|_something:wasPresentedWithResult:soContinue:| (thing _ was-presented-with-result so-continue)
  (let ((message-lambda 
         (make-message-lambda @(_something:wasPresentedWithResult:soContinue:) ((:POINTER
                                                                                 :LONG-LONG
                                                                                 :POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) was-presented-with-result (ns-object-ptr so-continue))))

(defun NS::|presentError:modalForWindow:delegate:didPresentSelector:contextInfo:| (thing _ modal-for-window delegate did-present-selector context-info)
  (let ((message-lambda 
         (make-message-lambda @(presentError:modalForWindow:delegate:didPresentSelector:contextInfo:) ((:POINTER
                                                                                                        :POINTER
                                                                                                        :POINTER
                                                                                                        :POINTER
                                                                                                        (:POINTER
                                                                                                         :VOID))
                                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr modal-for-window) (ns-object-ptr delegate) (ns-object-ptr did-present-selector) (ns-object-ptr context-info))))

(defun NS::|_observeValueForSystemAppearanceKeyPath:ofObject:change:| (thing _ of-object change)
  (let ((message-lambda 
         (make-message-lambda @(_observeValueForSystemAppearanceKeyPath:ofObject:change:) ((:POINTER
                                                                                            :POINTER
                                                                                            :POINTER)
                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr of-object) (ns-object-ptr change))))

(defun NS::|_tryTransformingToBackgroundTypeForAutoQuit| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tryTransformingToBackgroundTypeForAutoQuit) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|registerForRemoteNotificationTypes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerForRemoteNotificationTypes:) ((:UNSIGNED-LONG-LONG)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|registerForRemoteNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(registerForRemoteNotifications) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|unregisterForRemoteNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unregisterForRemoteNotifications) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isRegisteredForRemoteNotifications| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRegisteredForRemoteNotifications) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|enabledRemoteNotificationTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enabledRemoteNotificationTypes) (NIL
                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_asynchronouslyPrefetchUbiqityContainerURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_asynchronouslyPrefetchUbiqityContainerURL) (NIL
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_ubiquityIdentityDidChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_ubiquityIdentityDidChange:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateCharacterPaletteItemKeyEquivalentFromHotKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateCharacterPaletteItemKeyEquivalentFromHotKey:) ((:POINTER)
                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateCharacterPaletteItemKeyEquivalentToGlobeShortcut:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateCharacterPaletteItemKeyEquivalentToGlobeShortcut:) ((:POINTER)
                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_addTextInputMenuItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addTextInputMenuItems:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_customizeFileMenuIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_customizeFileMenuIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addFullScreenMenuItemIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_addFullScreenMenuItemIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addDebugMenuIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_addDebugMenuIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_customizeImportFromDeviceMenuItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_customizeImportFromDeviceMenuItem) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_findMenuItemMatchingPredicate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_findMenuItemMatchingPredicate:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_customizeDocumentMenuItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_customizeDocumentMenuItems) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_customizeQuitMenuItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_customizeQuitMenuItem) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_bestAppearanceCustomizationTargetForAction:to:| (thing _ to)
  (let ((message-lambda 
         (make-message-lambda @(_bestAppearanceCustomizationTargetForAction:to:) ((:POINTER
                                                                                   :POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to))))

(defun NS::|_pptTestURLScheme| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_pptTestURLScheme) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_handlePPTTestURL:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handlePPTTestURL:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isRunningTest| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRunningTest) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isRunningTest:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRunningTest:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|isRunningQuitTest| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRunningQuitTest) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|runTest:options:| (thing _ options)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(runTest:options:) ((:POINTER :POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr options)))) nil t))

(defun NS::|startedTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(startedTest:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|finishedTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|finishedTest:extraResults:| (thing _ extra-results)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:extraResults:) ((:POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr extra-results))))

(defun NS::|finishedTest:extraResults:withTeardownBlock:| (thing _ extra-results with-teardown-block)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:extraResults:withTeardownBlock:) ((:POINTER
                                                                                :POINTER
                                                                                :POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr extra-results) (ns-object-ptr with-teardown-block))))

(defun NS::|finishedTest:extraResults:waitForNotification:| (thing _ extra-results wait-for-notification)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:extraResults:waitForNotification:) ((:POINTER
                                                                                  :POINTER
                                                                                  :POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr extra-results) (ns-object-ptr wait-for-notification))))

(defun NS::|finishedTest:extraResults:waitForNotification:withTeardownBlock:| (thing _ extra-results wait-for-notification with-teardown-block)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:extraResults:waitForNotification:withTeardownBlock:) ((:POINTER
                                                                                                    :POINTER
                                                                                                    :POINTER
                                                                                                    :POINTER)
                                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr extra-results) (ns-object-ptr wait-for-notification) (ns-object-ptr with-teardown-block))))

(defun NS::|finishedTest:waitForCommit:extraResults:| (thing _ wait-for-commit extra-results)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:waitForCommit:extraResults:) ((:POINTER
                                                                            :CHAR
                                                                            :POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if wait-for-commit 1 0) (ns-object-ptr extra-results))))

(defun NS::|finishedTest:waitForCommit:extraResults:withTeardownBlock:| (thing _ wait-for-commit extra-results with-teardown-block)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:waitForCommit:extraResults:withTeardownBlock:) ((:POINTER
                                                                                              :CHAR
                                                                                              :POINTER
                                                                                              :POINTER)
                                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if wait-for-commit 1 0) (ns-object-ptr extra-results) (ns-object-ptr with-teardown-block))))

(defun NS::|failedTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(failedTest:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|failedTest:withFailure:| (thing _ with-failure)
  (let ((message-lambda 
         (make-message-lambda @(failedTest:withFailure:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-failure))))

(defun NS::|failedTest:withResults:| (thing _ with-results)
  (let ((message-lambda 
         (make-message-lambda @(failedTest:withResults:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-results))))

(defun NS::|failedTest:withFailure:withResults:| (thing _ with-failure with-results)
  (let ((message-lambda 
         (make-message-lambda @(failedTest:withFailure:withResults:) ((:POINTER
                                                                       :POINTER
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-failure) (ns-object-ptr with-results))))

(defun NS::|startedSubTest:forTest:| (thing _ for-test)
  (let ((message-lambda 
         (make-message-lambda @(startedSubTest:forTest:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-test))))

(defun NS::|startedSubTest:forTest:withMetrics:| (thing _ for-test with-metrics)
  (let ((message-lambda 
         (make-message-lambda @(startedSubTest:forTest:withMetrics:) ((:POINTER
                                                                       :POINTER
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-test) (ns-object-ptr with-metrics))))

(defun NS::|finishedSubTest:forTest:| (thing _ for-test)
  (let ((message-lambda 
         (make-message-lambda @(finishedSubTest:forTest:) ((:POINTER :POINTER)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-test))))

(defun NS::|finishedSubTest:forTest:waitForCommit:withCompletionHandler:| (thing _ for-test wait-for-commit with-completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(finishedSubTest:forTest:waitForCommit:withCompletionHandler:) ((:POINTER
                                                                                                :POINTER
                                                                                                :CHAR
                                                                                                :POINTER)
                                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-test) (if wait-for-commit 1 0) (ns-object-ptr with-completion-handler))))

(defun NS::|installCACommitCompletionBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(installCACommitCompletionBlock:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|performScrollTestOnScrollView:usingTestName:completionHandler:| (thing _ using-test-name completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(performScrollTestOnScrollView:usingTestName:completionHandler:) ((:POINTER
                                                                                                  :POINTER
                                                                                                  :POINTER)
                                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr using-test-name) (ns-object-ptr completion-handler))))

(defun NS::|performResizeTestOnWindow:usingTestName:completionHandler:| (thing _ using-test-name completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(performResizeTestOnWindow:usingTestName:completionHandler:) ((:POINTER
                                                                                              :POINTER
                                                                                              :POINTER)
                                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr using-test-name) (ns-object-ptr completion-handler))))

(defun NS::|performResizeTestOnWindow:preTestHandler:postTestHandler:| (thing _ pre-test-handler post-test-handler)
  (let ((message-lambda 
         (make-message-lambda @(performResizeTestOnWindow:preTestHandler:postTestHandler:) ((:POINTER
                                                                                             :POINTER
                                                                                             :POINTER)
                                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr pre-test-handler) (ns-object-ptr post-test-handler))))

(defun NS::|performActivateDeactivateTestUsingTestName:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(performActivateDeactivateTestUsingTestName:completionHandler:) ((:POINTER
                                                                                                 :POINTER)
                                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr completion-handler))))

(defun NS::|isLaunchedForTesting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLaunchedForTesting) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_appHasNonMiniaturizedWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_appHasNonMiniaturizedWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|disableRelaunchOnLogin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableRelaunchOnLogin) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|enableRelaunchOnLogin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableRelaunchOnLogin) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|importFromDevice:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(importFromDevice:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityExtrasMenuBarAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityExtrasMenuBarAttribute) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityMenuBarAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMenuBarAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityWindowsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowsAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityFunctionRowTopLevelElementsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFunctionRowTopLevelElementsAttribute) (NIL
                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityFocusedWindowAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedWindowAttribute) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityFocusRingMoveForElement:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_accessibilityFocusRingMoveForElement:) ((:POINTER)
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_colorFromRGBAString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_colorFromRGBAString:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_drawHighlightForTextView:highlightInfo:| (thing _ highlight-info)
  (let ((message-lambda 
         (make-message-lambda @(_drawHighlightForTextView:highlightInfo:) ((:POINTER
                                                                            :POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr highlight-info))))

(defun NS::|_isValidColorComponentValue:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isValidColorComponentValue:) ((:DOUBLE) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_clearPreviousHighlight:layoutManager:| (thing _ layout-manager)
  (let ((message-lambda 
         (make-message-lambda @(_clearPreviousHighlight:layoutManager:) ((:POINTER
                                                                          :POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr layout-manager))))

(defun NS::|_restoreSentenceHighlight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_restoreSentenceHighlight:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|set_currentWordHighlightInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(set_currentWordHighlightInfo:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_lineRangesForRange:textView:| (thing _ text-view)
  (let ((message-lambda 
         (make-message-lambda @(_lineRangesForRange:textView:) (((:STRUCT
                                                                  NS::|_NSRange|)
                                                                 :POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr text-view))))

(defun NS::|_restoreWordHighlight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_restoreWordHighlight:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|set_currentSentenceHighlightInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(set_currentSentenceHighlightInfo:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_currentSentenceHighlightInfo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentSentenceHighlightInfo) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_currentWordHighlightInfo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentWordHighlightInfo) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_clearHighlightForRangeInfo:layoutManager:| (thing _ layout-manager)
  (let ((message-lambda 
         (make-message-lambda @(_clearHighlightForRangeInfo:layoutManager:) ((:POINTER
                                                                              :POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr layout-manager))))

(defun NS::|_accessibilityPopovers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityPopovers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityFocusRingHandleInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityFocusRingHandleInfo:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleAccessibilityTextRangesHighlightInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleAccessibilityTextRangesHighlightInfo:) ((:POINTER)
                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_accessibilityViewBridgeHitTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityViewBridgeHitTest:) (((:STRUCT
                                                                     NS::|CGPoint|))
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityWorkaroundAddExtraWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWorkaroundAddExtraWindow:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityWorkaroundRemoveExtraWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWorkaroundRemoveExtraWindow:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityTitleAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTitleAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsTitleAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTitleAttributeSettable) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityIsMenuBarAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMenuBarAttributeSettable) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityIsWindowsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsWindowsAttributeSettable) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityChildrenInNavigationOrderAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChildrenInNavigationOrderAttribute) (NIL
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsChildrenAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsChildrenAttributeSettable) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityFrontmostAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFrontmostAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsFrontmostAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFrontmostAttributeSettable) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySetFrontmostAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetFrontmostAttribute:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityHiddenAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHiddenAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsHiddenAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsHiddenAttributeSettable) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySetHiddenAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetHiddenAttribute:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityMainWindowAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMainWindowAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsMainWindowAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMainWindowAttributeSettable) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityIsFocusedWindowAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFocusedWindowAttributeSettable) (NIL
                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityFocusedUIElementAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedUIElementAttribute) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsFocusedUIElementAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFocusedUIElementAttributeSettable) (NIL
                                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityEnhancedUserInterfaceAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityEnhancedUserInterfaceAttribute) (NIL
                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsEnhancedUserInterfaceAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsEnhancedUserInterfaceAttributeSettable) (NIL
                                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySetEnhancedUserInterfaceAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetEnhancedUserInterfaceAttribute:) ((:POINTER)
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityAuditIssuesAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditIssuesAttribute) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lastWindowHitByAccessibility| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lastWindowHitByAccessibility) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityHitTest| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHitTest) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityMovingFromTable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMovingFromTable:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_accessibilityCompatibilityHitTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityCompatibilityHitTest:) (((:STRUCT
                                                                        NS::|CGPoint|))
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_accessibilityFocusRingHide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityFocusRingHide) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityFocusChangedToElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusChangedToElement:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_accessibilityEventReceived:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityEventReceived:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_accessibilityEventProcessed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityEventProcessed:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityMainThreadIdleNotificationSupported| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMainThreadIdleNotificationSupported) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isAccessibilityMainThreadIdleNotificationEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMainThreadIdleNotificationEnabled) (NIL
                                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isAccessibilityEventProcessedNotificationSupported| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEventProcessedNotificationSupported) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isAccessibilityEventProcessedNotificationEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEventProcessedNotificationEnabled) (NIL
                                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isAccessibilityMovingFromTable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMovingFromTable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_orderedWindowsWithPanels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_orderedWindowsWithPanels:) ((:CHAR) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_delegate:handlesKey:| (thing _ handles-key)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_delegate:handlesKey:) ((:POINTER :POINTER)
                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr handles-key)))) nil t))

(defun NS::|orderedDocuments| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orderedDocuments) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|orderedWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orderedWindows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_handleAEOpenDocumentsForURLs:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleAEOpenDocumentsForURLs:) ((:POINTER)
                                                                 :SHORT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleAEQuit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_handleAEQuit) (NIL :SHORT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_topLevelScriptingObject| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_topLevelScriptingObject) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|valueInOrderedWindowsWithUniqueID:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueInOrderedWindowsWithUniqueID:) ((:LONG-LONG)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|handleOpenScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleOpenScriptCommand:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|handlePrintScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handlePrintScriptCommand:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|handleQuitScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleQuitScriptCommand:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_requiresOpeningUntitledWindowAtLaunch| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_requiresOpeningUntitledWindowAtLaunch) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_appHasOpenNSWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_appHasOpenNSWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_extractOriginatingDisplayHintFromAppleEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_extractOriginatingDisplayHintFromAppleEvent:) ((:POINTER)
                                                                                :INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_restoreMiniaturizedWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_restoreMiniaturizedWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_supportsOpenURLs| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_supportsOpenURLs) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_forAEOpenDocumentsEvent:populateReplyEvent:withURLs:documents:| (thing _ populate-reply-event with-u-r-ls documents)
  (let ((message-lambda 
         (make-message-lambda @(_forAEOpenDocumentsEvent:populateReplyEvent:withURLs:documents:) ((:POINTER
                                                                                                   :POINTER
                                                                                                   :POINTER
                                                                                                   :POINTER)
                                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr populate-reply-event) (ns-object-ptr with-u-r-ls) (ns-object-ptr documents))))

(defun NS::|_openURLs:withCompletionHandler:| (thing _ with-completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(_openURLs:withCompletionHandler:) ((:POINTER
                                                                    :POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-completion-handler))))

(defun NS::|_resumeAppleEventWithSuspensionIDValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_resumeAppleEventWithSuspensionIDValue:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleSelfTestEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleSelfTestEvent:) ((:POINTER) :INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleAEOpenEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleAEOpenEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleAEReopen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleAEReopen:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleAEOpenContentsEvent:withReplyEvent:| (thing _ with-reply-event)
  (let ((message-lambda 
         (make-message-lambda @(_handleAEOpenContentsEvent:withReplyEvent:) ((:POINTER
                                                                              :POINTER)
                                                                             :SHORT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-reply-event))))

(defun NS::|_handleAEContinueUserActivityEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleAEContinueUserActivityEvent:) ((:POINTER)
                                                                      :SHORT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleAECloudKitShareInvitationEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleAECloudKitShareInvitationEvent:) ((:POINTER)
                                                                         :SHORT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleAEGetURLEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleAEGetURLEvent:) ((:POINTER) :SHORT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleCoreEvent:withReplyEvent:| (thing _ with-reply-event)
  (let ((message-lambda 
         (make-message-lambda @(_handleCoreEvent:withReplyEvent:) ((:POINTER
                                                                    :POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-reply-event))))

(defun NS::|_handleTestEvent:withReplyEvent:| (thing _ with-reply-event)
  (let ((message-lambda 
         (make-message-lambda @(_handleTestEvent:withReplyEvent:) ((:POINTER
                                                                    :POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-reply-event))))

(defun NS::|_doModalLoopForCarbonWindow:peek:| (thing _ peek)
  (let ((message-lambda 
         (make-message-lambda @(_doModalLoopForCarbonWindow:peek:) (((:POINTER
                                                                      (:STRUCT
                                                                       NS::|_NSModalSession|))
                                                                     :CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if peek 1 0))))

(defun NS::|runModalForCarbonWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runModalForCarbonWindow:) ((:POINTER)
                                                           :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|sendAction:to:from:| (thing _ to from)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(sendAction:to:from:) ((:POINTER :POINTER
                                                       :POINTER)
                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to) (ns-object-ptr from)))) nil t))

(defun NS::|_lockoutMiniaturizedOverlayDisengaged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_lockoutMiniaturizedOverlayDisengaged:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAppearance:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_invalidateWindowListForCycleIfNeededForWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateWindowListForCycleIfNeededForWindow:) ((:POINTER)
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_effectiveAppearanceParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveAppearanceParent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|areCursorRectsEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(areCursorRectsEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setVisibleInCache:forWindow:| (thing _ for-window)
  (let ((message-lambda 
         (make-message-lambda @(_setVisibleInCache:forWindow:) ((:CHAR
                                                                 :POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (ns-object-ptr for-window))))

(defun NS::|addWindowsItem:title:filename:| (thing _ title filename)
  (let ((message-lambda 
         (make-message-lambda @(addWindowsItem:title:filename:) ((:POINTER
                                                                  :POINTER
                                                                  :CHAR)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr title) (if filename 1 0))))

(defun NS::|restoreWindowWithIdentifier:state:completionHandler:| (thing _ state completion-handler)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(restoreWindowWithIdentifier:state:completionHandler:) ((:POINTER
                                                                                        :POINTER
                                                                                        :POINTER)
                                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr state) (ns-object-ptr completion-handler)))) nil t))

(defun NS::|_lockoutEngaged| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_lockoutEngaged) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|NS_touchBarProviders| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_touchBarProviders) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|NS_touchBarProvidersKeyPaths| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_touchBarProvidersKeyPaths) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|orderFrontPreferencesPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontPreferencesPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_lockoutUIChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_lockoutUIChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_activeLockoutWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_activeLockoutWindows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_engageLockoutUI:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_engageLockoutUI:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_disengageLockoutUI:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_disengageLockoutUI:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setLockoutEngaged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setLockoutEngaged:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_isInLockoutTransition| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isInLockoutTransition) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_engageLockoutUIWithDuration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_engageLockoutUIWithDuration:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_disengageLockoutUIWithDuration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_disengageLockoutUIWithDuration:) ((:DOUBLE)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_lockoutUIForWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_lockoutUIForWindow:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_lockoutWindowForWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_lockoutWindowForWindow:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_engagedLockoutWindowForWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_engagedLockoutWindowForWindow:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_lockoutWindowForFullscreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_lockoutWindowForFullscreen:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|shouldBeTreatedAsInkEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldBeTreatedAsInkEvent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_restoreCursor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_restoreCursor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cursorRectCursor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cursorRectCursor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_kitAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_kitAppearance) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|discardEventsMatchingMask:beforeEvent:| (thing _ before-event)
  (let ((message-lambda 
         (make-message-lambda @(discardEventsMatchingMask:beforeEvent:) ((:UNSIGNED-LONG-LONG
                                                                          :POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr before-event))))

(defun NS::|_resetCursorStack| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetCursorStack) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_handleCursorRectEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_handleCursorRectEvent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_setSuppressGestureSubMaskChangesEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSuppressGestureSubMaskChangesEnabled:) ((:CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|tryToPerform:with:| (thing _ with)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(tryToPerform:with:) ((:POINTER :POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with)))) nil t))

(defun NS::|_isSuppressGestureSubMaskChangesEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isSuppressGestureSubMaskChangesEnabled) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_gestureEventMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_gestureEventMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setGestureEventMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setGestureEventMask:) ((:UNSIGNED-LONG-LONG)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|targetForAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(targetForAction:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|orderFrontFontPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontFontPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|activateContextHelpMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(activateContextHelpMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|showHelp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showHelp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cancelGestureRecognizers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cancelGestureRecognizers:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setServicesMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setServicesMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setWindowsMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindowsMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAppleMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAppleMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_refreshSetAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_refreshSetAppearance) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|gestureEventMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gestureEventMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setGestureEventMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGestureEventMask:) ((:UNSIGNED-LONG-LONG)
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_eventFirstResponderChainDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_eventFirstResponderChainDescription) (NIL
                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|servicesProvider| (thing)
  (let ((message-lambda 
         (make-message-lambda @(servicesProvider) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setServicesProvider:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setServicesProvider:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|registerServiceProvider:withName:| (thing _ with-name)
  (let ((message-lambda 
         (make-message-lambda @(registerServiceProvider:withName:) ((:POINTER
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-name))))

(defun NS::|unregisterServiceProviderNamed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unregisterServiceProviderNamed:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_debugMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_debugMenu) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_fillSpellCheckerPopupButton:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_fillSpellCheckerPopupButton:) ((:POINTER)
                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_launchSpellChecker:error:| (thing _ error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_launchSpellChecker:error:) ((:LONG-LONG
                                                              (:POINTER
                                                               :POINTER))
                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr error)))) nil t))

(defun NS::|_nextEventMatchingEventMask:untilDate:inMode:dequeue:| (thing _ until-date in-mode dequeue)
  (let ((message-lambda 
         (make-message-lambda @(_nextEventMatchingEventMask:untilDate:inMode:dequeue:) ((:UNSIGNED-LONG-LONG
                                                                                         :POINTER
                                                                                         :POINTER
                                                                                         :CHAR)
                                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr until-date) (ns-object-ptr in-mode) (if dequeue 1 0))))

(defun NS::|_handleKeyEquivalent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_handleKeyEquivalent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_handleSymbolicHotKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_handleSymbolicHotKey:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_lastEventRecordTime| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lastEventRecordTime) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|orderFrontStandardAboutPanelWithOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontStandardAboutPanelWithOptions:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|orderFrontStandardAboutPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontStandardAboutPanel:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|registerServicesMenuSendTypes:returnTypes:| (thing _ return-types)
  (let ((message-lambda 
         (make-message-lambda @(registerServicesMenuSendTypes:returnTypes:) ((:POINTER
                                                                              :POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr return-types))))

(defun NS::|getValue:forSafeApertureCompatibilityURLResourceKey:| (thing _ for-safe-aperture-compatibility-u-r-l-resource-key)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getValue:forSafeApertureCompatibilityURLResourceKey:) (((:POINTER
                                                                                         :CHAR)
                                                                                        :POINTER)
                                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-safe-aperture-compatibility-u-r-l-resource-key)))) nil t))

(defun NS::|valueForSafeApertureCompatibilityEnvironmentVariable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueForSafeApertureCompatibilityEnvironmentVariable:) ((:POINTER)
                                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|getValue:forSafeApertureCompatibilityDefaultsKey:| (thing _ for-safe-aperture-compatibility-defaults-key)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getValue:forSafeApertureCompatibilityDefaultsKey:) (((:POINTER
                                                                                      :CHAR)
                                                                                     :POINTER)
                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-safe-aperture-compatibility-defaults-key)))) nil t))

(defun NS::|setValue:forSafeApertureCompatibilityConnectionProperty:| (thing _ for-safe-aperture-compatibility-connection-property)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forSafeApertureCompatibilityConnectionProperty:) (((:POINTER
                                                                                             :VOID)
                                                                                            (:POINTER
                                                                                             (:STRUCT
                                                                                              NS::|__CFString|)))
                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-safe-aperture-compatibility-connection-property))))

(defun NS::|setValue:forSafeApertureCompatibilityEnvironmentVariable:| (thing _ for-safe-aperture-compatibility-environment-variable)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forSafeApertureCompatibilityEnvironmentVariable:) ((:POINTER
                                                                                             :POINTER)
                                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-safe-aperture-compatibility-environment-variable))))

(defun NS::|updateWindowsItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateWindowsItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAutomaticCustomizeTouchBarMenuItemEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticCustomizeTouchBarMenuItemEnabled) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setAutomaticCustomizeTouchBarMenuItemEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAutomaticCustomizeTouchBarMenuItemEnabled:) ((:POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAutomaticCustomizeTouchBarMenuItemEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticCustomizeTouchBarMenuItemEnabled:) ((:CHAR)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|resetAutomaticCustomizeTouchBarMenuItemEnabled| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resetAutomaticCustomizeTouchBarMenuItemEnabled) (NIL
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setHasInvalidRestorableState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setHasInvalidRestorableState:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_hasInvalidRestorableState| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasInvalidRestorableState) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|removeWindowsItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeWindowsItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setCacheWindowNum:forWindow:| (thing _ for-window)
  (let ((message-lambda 
         (make-message-lambda @(_setCacheWindowNum:forWindow:) ((:LONG-LONG
                                                                 :POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-window))))

(defun NS::|changeWindowsItem:title:filename:| (thing _ title filename)
  (let ((message-lambda 
         (make-message-lambda @(changeWindowsItem:title:filename:) ((:POINTER
                                                                     :POINTER
                                                                     :CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr title) (if filename 1 0))))

(defun NS::|_isHandlingDisplayReconfigThatWillRepositionWindows| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isHandlingDisplayReconfigThatWillRepositionWindows) (NIL
                                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setHidesOnDeactivateInCache:forWindow:| (thing _ for-window)
  (let ((message-lambda 
         (make-message-lambda @(_setHidesOnDeactivateInCache:forWindow:) ((:CHAR
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (ns-object-ptr for-window))))

(defun NS::|_setModalInCache:forWindow:| (thing _ for-window)
  (let ((message-lambda 
         (make-message-lambda @(_setModalInCache:forWindow:) ((:CHAR :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (ns-object-ptr for-window))))

(defun NS::|_reactToDockChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_reactToDockChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lockOrUnlockWindowCycleList:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_lockOrUnlockWindowCycleList:) ((:CHAR) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0)))) nil t))

(defun NS::|_getWindowData:add:| (thing _ add)
  (let ((message-lambda 
         (make-message-lambda @(_getWindowData:add:) ((:POINTER :CHAR) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if add 1 0))))

(defun NS::|_checkForTerminateAfterLastWindowClosed:saveWindows:| (thing _ save-windows)
  (let ((message-lambda 
         (make-message-lambda @(_checkForTerminateAfterLastWindowClosed:saveWindows:) ((:POINTER
                                                                                        :CHAR)
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if save-windows 1 0))))

(defun NS::|_scheduleCheckForTerminateAfterLastWindowClosed| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scheduleCheckForTerminateAfterLastWindowClosed) (NIL
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isVisibleUsingCache:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isVisibleUsingCache:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|servicesMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(servicesMenu) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_rebuildOrUpdateServicesMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_rebuildOrUpdateServicesMenu:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_launchSpellChecker:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_launchSpellChecker:) ((:LONG-LONG) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_reactToDisplayChangedEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_reactToDisplayChangedEvent:) ((:UNSIGNED-INT)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_displayStatusNotification:title:options:| (thing _ title options)
  (let ((message-lambda 
         (make-message-lambda @(_displayStatusNotification:title:options:) ((:POINTER
                                                                             :POINTER
                                                                             :POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr title) (ns-object-ptr options))))

(defun NS::|_displayProgressNotification:isIndeterminate:| (thing _ is-indeterminate)
  (let ((message-lambda 
         (make-message-lambda @(_displayProgressNotification:isIndeterminate:) ((:FLOAT
                                                                                 :CHAR)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if is-indeterminate 1 0))))

(defun NS::|_safeAreaShieldWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_safeAreaShieldWindows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_safeAreaShieldObserver| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_safeAreaShieldObserver) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setSafeAreaShieldWindows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSafeAreaShieldWindows:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shieldRectsForSafeAreas| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_shieldRectsForSafeAreas) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_currentSafeAreaShieldWindowRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentSafeAreaShieldWindowRects) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cleanUpSafeAreaShields| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cleanUpSafeAreaShields) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateSafeAreaShieldingIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateSafeAreaShieldingIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setSafeAreaShieldObserver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSafeAreaShieldObserver:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|registerUserInterfaceItemSearchHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerUserInterfaceItemSearchHandler:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|unregisterUserInterfaceItemSearchHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unregisterUserInterfaceItemSearchHandler:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|searchString:inUserInterfaceItemString:searchRange:foundRange:| (thing _ in-user-interface-item-string search-range found-range)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(searchString:inUserInterfaceItemString:searchRange:foundRange:) ((:POINTER
                                                                                                  :POINTER
                                                                                                  (:STRUCT
                                                                                                   NS::|_NSRange|)
                                                                                                  (:POINTER
                                                                                                   (:STRUCT
                                                                                                    NS::|_NSRange|)))
                                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-user-interface-item-string) search-range (ns-object-ptr found-range)))) nil t))

(defun NS::|isDefaultHelpBookSearchEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDefaultHelpBookSearchEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setDefaultHelpBookSearchEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDefaultHelpBookSearchEnabled:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_feedbackURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_feedbackURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_feedbackMenuAppName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_feedbackMenuAppName) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldShowFeedbackMenuItem| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldShowFeedbackMenuItem) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_openFeedbackAssistant:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_openFeedbackAssistant:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_feedbackMenuTitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_feedbackMenuTitle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isDying| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isDying) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateCanQuitQuietlyAndSafely| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateCanQuitQuietlyAndSafely) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_contentsHaveInvalidRestorableState| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_contentsHaveInvalidRestorableState) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setContentsHaveInvalidRestorableState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setContentsHaveInvalidRestorableState:) ((:CHAR)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_shouldRecordPersistentState| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldRecordPersistentState) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_invalidateRestorableStateOfContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateRestorableStateOfContents) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_persistentUIWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_persistentUIWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_persistentUIIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_persistentUIIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|extendStateRestoration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(extendStateRestoration) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|completeStateRestoration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(completeStateRestoration) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_stateRestorationExtensionCounter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_stateRestorationExtensionCounter) (NIL
                                                                    :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_disableRestorableStateWriting| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_disableRestorableStateWriting) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_enableRestorableStateWriting| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enableRestorableStateWriting) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_restoreGlobalStateWithRestoration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_restoreGlobalStateWithRestoration:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_restoreWindowWithRestoration:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(_restoreWindowWithRestoration:completionHandler:) ((:POINTER
                                                                                    :POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr completion-handler))))

(defun NS::|_tryRestorationHeuristicsForWindowWithIdentifier:state:| (thing _ state)
  (let ((message-lambda 
         (make-message-lambda @(_tryRestorationHeuristicsForWindowWithIdentifier:state:) ((:POINTER
                                                                                           :POINTER)
                                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr state))))

(defun NS::|_reactToDisplayChanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_reactToDisplayChanges:) ((:UNSIGNED-LONG-LONG)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_startHandlingDisplayReconfig:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_startHandlingDisplayReconfig:) ((:UNSIGNED-LONG-LONG)
                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_finishHandlingDisplayReconfig| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_finishHandlingDisplayReconfig) (NIL
                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_reactToExtendedDynamicRangeChangeNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_reactToExtendedDynamicRangeChangeNotification) (NIL
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_canQuitQuietlyAndSafelyWithOptionalExplanation:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canQuitQuietlyAndSafelyWithOptionalExplanation:) ((:POINTER)
                                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_globalCanQuietAndSafeQuit| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_globalCanQuietAndSafeQuit) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_debugCanQuietSafeQuit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_debugCanQuietSafeQuit) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))









(defun NS::|localizedName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedName) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|processIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(processIdentifier) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))






(defun NS::|terminate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(terminate) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|icon| (thing)
  (let ((message-lambda 
         (make-message-lambda @(icon) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|unhide| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(unhide) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|activateWithOptions:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(activateWithOptions:) ((:UNSIGNED-LONG-LONG)
                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|hide| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hide) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hasASN:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasASN:) (((:POINTER (:STRUCT NS::__LSASN)))
                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|initWithApplicationSerialNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithApplicationSerialNumber:) (((:POINTER
                                                                     (:STRUCT
                                                                      NS::__LSASN)))
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_initDeadWithLSDictionary:forASN:| (thing _ for-a-s-n)
  (let ((message-lambda 
         (make-message-lambda @(_initDeadWithLSDictionary:forASN:) (((:POINTER
                                                                      (:STRUCT
                                                                       NS::|__CFDictionary|))
                                                                     (:POINTER
                                                                      (:STRUCT
                                                                       NS::__LSASN)))
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-a-s-n))))

(defun NS::|applicationSerialNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(applicationSerialNumber) (NIL
                                                          (:POINTER
                                                           (:STRUCT
                                                            NS::__LSASN)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postWillOrDidChangeNotificationsForKeyIndex:isWill:| (thing _ is-will)
  (let ((message-lambda 
         (make-message-lambda @(_postWillOrDidChangeNotificationsForKeyIndex:isWill:) ((:INT
                                                                                        :CHAR)
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if is-will 1 0))))

(defun NS::|_changeObservingNotificationMask:to:| (thing _ to)
  (let ((message-lambda 
         (make-message-lambda @(_changeObservingNotificationMask:to:) ((:UNSIGNED-LONG-LONG
                                                                        :CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if to 1 0))))

(defun NS::|_updateObservationMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateObservationMask) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_fetchDynamicPropertiesIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fetchDynamicPropertiesIfNecessary) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_applyPropertyChanges:fromDictionary:| (thing _ from-dictionary)
  (let ((message-lambda 
         (make-message-lambda @(_applyPropertyChanges:fromDictionary:) ((:UNSIGNED-LONG-LONG
                                                                         (:POINTER
                                                                          (:STRUCT
                                                                           NS::|__CFDictionary|)))
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-dictionary))))

(defun NS::|_updateActiveAndMenuBarOwnerProperties| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateActiveAndMenuBarOwnerProperties) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isAppPropertyUpdatedByLSNotifications:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAppPropertyUpdatedByLSNotifications:) ((:INT)
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_fetchDynamicProperties| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fetchDynamicProperties) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_preservingStaleProperties| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_preservingStaleProperties) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_preserveStaleDynamicPropertiesForRemainderOfRunLoop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_preserveStaleDynamicPropertiesForRemainderOfRunLoop) (NIL
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_fetchDynamicPropertiesIfNecessaryOrAppSeedIsOutOfDate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fetchDynamicPropertiesIfNecessaryOrAppSeedIsOutOfDate) (NIL
                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateOrStaleProperty:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateOrStaleProperty:) ((:INT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_applyInformationFromLSDictionary:includeDynamicProperties:| (thing _ include-dynamic-properties)
  (let ((message-lambda 
         (make-message-lambda @(_applyInformationFromLSDictionary:includeDynamicProperties:) ((:POINTER
                                                                                               :CHAR)
                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if include-dynamic-properties 1 0))))

(defun NS::|_fetchStaticInformationWithAtLeastKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_fetchStaticInformationWithAtLeastKey:) (((:POINTER
                                                                           (:STRUCT
                                                                            NS::|__CFString|)))
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|launchDate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(launchDate) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_getProcessSerialNumber:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_getProcessSerialNumber:) (((:POINTER
                                                             (:STRUCT
                                                              NS::|ProcessSerialNumber|)))
                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_isProxiedByTalagent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isProxiedByTalagent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isLSStopped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isLSStopped) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|forceTerminate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(forceTerminate) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_observeChangeInKey:withDataRef:| (thing _ with-data-ref)
  (let ((message-lambda 
         (make-message-lambda @(_observeChangeInKey:withDataRef:) ((:INT
                                                                    (:POINTER
                                                                     :VOID))
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-data-ref))))

(defun NS::|_checkForUnecessaryLSNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_checkForUnecessaryLSNotifications) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_fetchValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_fetchValueForKey:) (((:POINTER :VOID))
                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|applyPendingPropertyChanges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(applyPendingPropertyChanges) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isTerminated| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isTerminated) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isFinishedLaunching| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFinishedLaunching) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|ownsMenuBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ownsMenuBar) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_quittingWillBeNoisyOrLoseData| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_quittingWillBeNoisyOrLoseData) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_reasonThatQuittingWillBeNoisyOrLoseData| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_reasonThatQuittingWillBeNoisyOrLoseData) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|executableArchitecture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(executableArchitecture) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_performWithPSN:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_performWithPSN:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))




(defun NS::|name| (thing)
  (let ((message-lambda 
         (make-message-lambda @(name) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setQualityOfService:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setQualityOfService:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setName:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|start| (thing)
  (let ((message-lambda 
         (make-message-lambda @(start) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isMainThread| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMainThread) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|cancel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cancel) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|threadDictionary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(threadDictionary) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|runLoop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(runLoop) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isCancelled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isCancelled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|main| (thing)
  (let ((message-lambda 
         (make-message-lambda @(main) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|initWithBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithBlock:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isFinished| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFinished) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isExecuting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isExecuting) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|threadPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(threadPriority) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setThreadPriority:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setThreadPriority:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|qualityOfService| (thing)
  (let ((message-lambda 
         (make-message-lambda @(qualityOfService) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|initWithTarget:selector:object:| (thing _ selector object)
  (let ((message-lambda 
         (make-message-lambda @(initWithTarget:selector:object:) ((:POINTER
                                                                   :POINTER
                                                                   :POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr selector) (ns-object-ptr object))))

(defun NS::|_setThreadPriority:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_setThreadPriority:) ((:DOUBLE) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|isDying| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDying) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setStackSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStackSize:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|stackSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stackSize) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_beginQoSOverride:relativePriority:| (thing _ relative-priority)
  (let ((message-lambda 
         (make-message-lambda @(_beginQoSOverride:relativePriority:) ((:UNSIGNED-INT
                                                                       :INT)
                                                                      (:POINTER
                                                                       (:STRUCT
                                                                        NS::|pthread_override_s|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ relative-priority)))

(defun NS::|_endQoSOverride:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_endQoSOverride:) (((:POINTER
                                                     (:STRUCT
                                                      NS::|pthread_override_s|)))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_nq:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_nq:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|copyWithZone:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copyWithZone:) (((:POINTER
                                                  (:STRUCT NS::|_NSZone|)))
                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))







(defun NS::|type| (thing)
  (let ((message-lambda 
         (make-message-lambda @(type) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|subtype| (thing)
  (let ((message-lambda 
         (make-message-lambda @(subtype) (NIL :SHORT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|window| (thing)
  (let ((message-lambda 
         (make-message-lambda @(window) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|userData| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userData) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|stage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stage) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|rotation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rotation) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|uniqueID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(uniqueID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|progress| (thing)
  (let ((message-lambda 
         (make-message-lambda @(progress) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|characters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(characters) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|timestamp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timestamp) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|charactersIgnoringModifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(charactersIgnoringModifiers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|deviceID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|windowNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowNumber) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|deltaX| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deltaX) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|deltaY| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deltaY) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|pressure| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pressure) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|locationInWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(locationInWindow) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|phase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(phase) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|modifierFlags| (thing)
  (let ((message-lambda 
         (make-message-lambda @(modifierFlags) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|touchesMatchingPhase:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchesMatchingPhase:inView:) ((:UNSIGNED-LONG-LONG
                                                                :POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|allTouches| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allTouches) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|CGEvent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CGEvent) (NIL
                                          (:POINTER (:STRUCT NS::|__CGEvent|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_matchesKeyEquivalent:modifierMask:| (thing _ modifier-mask)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_matchesKeyEquivalent:modifierMask:) ((:POINTER
                                                                       :UNSIGNED-LONG-LONG)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) modifier-mask))) nil t))

(defun NS::|data1| (thing)
  (let ((message-lambda 
         (make-message-lambda @(data1) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|data2| (thing)
  (let ((message-lambda 
         (make-message-lambda @(data2) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|scrollingDeltaX| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollingDeltaX) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|clickCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clickCount) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|momentumPhase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(momentumPhase) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|scrollingDeltaY| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollingDeltaY) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|gestureAxis| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gestureAxis) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_gestureAxis| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_gestureAxis) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_viewRoot| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_viewRoot) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|associatedEventsMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(associatedEventsMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|keyCode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyCode) (NIL :UNSIGNED-SHORT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_eventRef| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_eventRef) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|eventNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(eventNumber) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|trackingArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trackingArea) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|magnification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(magnification) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_touchesMatchingIdentities:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_touchesMatchingIdentities:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_eventRelativeToViewRoot:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_eventRelativeToViewRoot:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|buttonMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(buttonMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|trackingNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trackingNumber) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|hasPreciseScrollingDeltas| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasPreciseScrollingDeltas) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|velocity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(velocity) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_eventRefInternal| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_eventRefInternal) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_fixCommandAlphaShifts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fixCommandAlphaShifts) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setSynthesizedKeyEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSynthesizedKeyEvent:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setTouches:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTouches:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_initWithEventRefInternal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_initWithEventRefInternal:) (((:POINTER :VOID))
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_initWithCGEvent:eventRef:| (thing _ event-ref)
  (let ((message-lambda 
         (make-message-lambda @(_initWithCGEvent:eventRef:) (((:POINTER
                                                               (:STRUCT
                                                                NS::|__CGEvent|))
                                                              (:POINTER :VOID))
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr event-ref))))

(defun NS::|_touchesMatchingPhase:inView:includeResting:| (thing _ in-view include-resting)
  (let ((message-lambda 
         (make-message-lambda @(_touchesMatchingPhase:inView:includeResting:) ((:UNSIGNED-LONG-LONG
                                                                                :POINTER
                                                                                :CHAR)
                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view) (if include-resting 1 0))))

(defun NS::|pressureBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pressureBehavior) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_eventRecordDelta:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_eventRecordDelta:) ((:LONG-LONG) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_charactersApplyingModifiers:carbonModifiers:| (thing _ carbon-modifiers)
  (let ((message-lambda 
         (make-message-lambda @(_charactersApplyingModifiers:carbonModifiers:) ((:UNSIGNED-LONG-LONG
                                                                                 :UNSIGNED-INT)
                                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ carbon-modifiers)))

(defun NS::|_cgsEventTime| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cgsEventTime) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postAtStart:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_postAtStart:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_postFromSubthread:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_postFromSubthread:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|buttonNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(buttonNumber) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|vendorDefined| (thing)
  (let ((message-lambda 
         (make-message-lambda @(vendorDefined) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|absoluteX| (thing)
  (let ((message-lambda 
         (make-message-lambda @(absoluteX) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|absoluteY| (thing)
  (let ((message-lambda 
         (make-message-lambda @(absoluteY) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|absoluteZ| (thing)
  (let ((message-lambda 
         (make-message-lambda @(absoluteZ) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|tilt| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tilt) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|tangentialPressure| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tangentialPressure) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|vendorID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(vendorID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|tabletID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabletID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|pointingDeviceID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pointingDeviceID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|systemTabletID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(systemTabletID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|vendorPointingDeviceType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(vendorPointingDeviceType) (NIL
                                                           :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|pointingDeviceSerialNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pointingDeviceSerialNumber) (NIL
                                                             :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|capabilityMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(capabilityMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|pointingDeviceType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pointingDeviceType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isEnteringProximity| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEnteringProximity) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|deltaZ| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deltaZ) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_scrollCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scrollCount) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|gestureAmount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gestureAmount) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isSynthesizedKeyEvent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isSynthesizedKeyEvent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isARepeat| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isARepeat) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_continuousScroll| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_continuousScroll) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_trackSwipeEventWithOptions:dampenAmountThresholdMin:max:trackingDistance:axis:velocityFilterClass:usingHandler:| (thing _ dampen-amount-threshold-min max tracking-distance axis velocity-filter-class using-handler)
  (let ((message-lambda 
         (make-message-lambda @(_trackSwipeEventWithOptions:dampenAmountThresholdMin:max:trackingDistance:axis:velocityFilterClass:usingHandler:) ((:UNSIGNED-LONG-LONG
                                                                                                                                                    :DOUBLE
                                                                                                                                                    :DOUBLE
                                                                                                                                                    :DOUBLE
                                                                                                                                                    :LONG-LONG
                                                                                                                                                    :POINTER
                                                                                                                                                    :POINTER)
                                                                                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ dampen-amount-threshold-min max tracking-distance axis (ns-object-ptr velocity-filter-class) (ns-object-ptr using-handler))))

(defun NS::|_eventWithModifiers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_eventWithModifiers:) ((:UNSIGNED-LONG-LONG)
                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|eventRef| (thing)
  (let ((message-lambda 
         (make-message-lambda @(eventRef) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_initMTTouchesFromIOHidEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_initMTTouchesFromIOHidEvent:) (((:POINTER
                                                                  (:STRUCT
                                                                   NS::|__IOHIDEvent|)))
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_initCoalescingTouchEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_initCoalescingTouchEvents:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_initDigitizerTouchesFromIOHidEvent:window:windowIsViewBridged:contextID:| (thing _ window window-is-view-bridged context-i-d)
  (let ((message-lambda 
         (make-message-lambda @(_initDigitizerTouchesFromIOHidEvent:window:windowIsViewBridged:contextID:) (((:POINTER
                                                                                                              (:STRUCT
                                                                                                               NS::|__IOHIDEvent|))
                                                                                                             :POINTER
                                                                                                             :CHAR
                                                                                                             :LONG-LONG)
                                                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr window) (if window-is-view-bridged 1 0) context-i-d)))

(defun NS::|_cgsEventRecord| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cgsEventRecord) (NIL (:ARRAY :CHAR 248))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasAcceleratedScrollingDeltas| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasAcceleratedScrollingDeltas) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_unacceleratedScrollingDeltaX| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unacceleratedScrollingDeltaX) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unacceleratedScrollingDeltaY| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unacceleratedScrollingDeltaY) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resetScrollAcceleration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetScrollAcceleration) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|charactersByApplyingModifiers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(charactersByApplyingModifiers:) ((:UNSIGNED-LONG-LONG)
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_unmodifiedCharacters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unmodifiedCharacters) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_commandModifiedCharacters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_commandModifiedCharacters) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isDeadkey| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isDeadkey) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setEventRef:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setEventRef:) (((:POINTER :VOID)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_postDelayed| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postDelayed) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isGesture| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGesture) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_scrollPhase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scrollPhase) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_eventWithRetargetedLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_eventWithRetargetedLocation:) (((:STRUCT
                                                                  NS::|CGPoint|))
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_nxeventTime| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_nxeventTime) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|deviceDeltaX| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceDeltaX) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|deviceDeltaY| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceDeltaY) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|deviceDeltaZ| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceDeltaZ) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isDirectionInvertedFromDevice| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDirectionInvertedFromDevice) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|stageTransition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stageTransition) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:| (thing _ dampen-amount-threshold-min max using-handler)
  (let ((message-lambda 
         (make-message-lambda @(trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:) ((:UNSIGNED-LONG-LONG
                                                                                                         :DOUBLE
                                                                                                         :DOUBLE
                                                                                                         :POINTER)
                                                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ dampen-amount-threshold-min max (ns-object-ptr using-handler))))

(defun NS::|_velocity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_velocity) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_eventRelativeToWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_eventRelativeToWindow:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_currentEventWithLocationInWindow:modifiers:| (thing _ modifiers)
  (let ((message-lambda 
         (make-message-lambda @(_currentEventWithLocationInWindow:modifiers:) (((:STRUCT
                                                                                 NS::|CGPoint|)
                                                                                :UNSIGNED-LONG-LONG)
                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ modifiers)))

(defun NS::|_eventCancellingTouches| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_eventCancellingTouches) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_eventCancellingTouchIdentities:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_eventCancellingTouchIdentities:) ((:POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_eventRemovingTouchIdentities:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_eventRemovingTouchIdentities:) ((:POINTER)
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_eventWithOnlyTouchIdentities:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_eventWithOnlyTouchIdentities:) ((:POINTER)
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|touchesForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesForView:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|coalescedTouchesForTouch:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(coalescedTouchesForTouch:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_isTouchesEnded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isTouchesEnded) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|command| (thing)
  (let ((message-lambda 
         (make-message-lambda @(command) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isVerticalWheelEvent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isVerticalWheelEvent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isMiddleButtonEvent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isMiddleButtonEvent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isEscapeKeyEvent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isEscapeKeyEvent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_safari_isKeyEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_safari_isKeyEvent:) ((:UNSIGNED-SHORT) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_isWheelEvent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isWheelEvent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isSpaceKeyEvent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isSpaceKeyEvent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hasOptionKeyModifier| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasOptionKeyModifier) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setOneArgument:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(_setOneArgument:forKey:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))

(defun NS::|boolValueSafeForKey:status:| (thing _ status)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(boolValueSafeForKey:status:) ((:POINTER
                                                               (:POINTER :INT))
                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr status)))) nil t))

(defun NS::|int64ValueSafeForKey:status:| (thing _ status)
  (let ((message-lambda 
         (make-message-lambda @(int64ValueSafeForKey:status:) ((:POINTER
                                                                (:POINTER
                                                                 :INT))
                                                               :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr status))))

(defun NS::|doubleValueSafeForKey:status:| (thing _ status)
  (let ((message-lambda 
         (make-message-lambda @(doubleValueSafeForKey:status:) ((:POINTER
                                                                 (:POINTER
                                                                  :INT))
                                                                :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr status))))

(defun NS::|stringValueSafeForKey:status:| (thing _ status)
  (let ((message-lambda 
         (make-message-lambda @(stringValueSafeForKey:status:) ((:POINTER
                                                                 (:POINTER
                                                                  :INT))
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr status))))

(defun NS::|utf8ValueSafeForKey:status:| (thing _ status)
  (let ((message-lambda 
         (make-message-lambda @(utf8ValueSafeForKey:status:) ((:POINTER
                                                               (:POINTER :INT))
                                                              :STRING)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr status))))

(defun NS::|boolValueSafeForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(boolValueSafeForKey:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|int64ValueSafeForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(int64ValueSafeForKey:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|doubleValueSafeForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(doubleValueSafeForKey:) ((:POINTER) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|stringValueSafeForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringValueSafeForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|utf8ValueSafeForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(utf8ValueSafeForKey:) ((:POINTER) :STRING)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|bs_setDomain:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_setDomain:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|bs_defaultExists:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(bs_defaultExists:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))




(defun NS::|objectForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(objectForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|removeObjectForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeObjectForKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setObject:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setObject:forKey:) ((:POINTER :POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))


(defun NS::|synchronize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(synchronize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|volatileDomainNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(volatileDomainNames) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|boolForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(boolForKey:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|URLForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(URLForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|stringForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|arrayForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(arrayForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|dictionaryForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dictionaryForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|integerForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(integerForKey:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|dictionaryRepresentation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dictionaryRepresentation) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|setObject:forKey:inDomain:| (thing _ for-key in-domain)
  (let ((message-lambda 
         (make-message-lambda @(setObject:forKey:inDomain:) ((:POINTER :POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key) (ns-object-ptr in-domain))))

(defun NS::|initWithSuiteName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithSuiteName:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_initWithSuiteName:container:| (thing _ container)
  (let ((message-lambda 
         (make-message-lambda @(_initWithSuiteName:container:) ((:POINTER
                                                                 :POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr container))))

(defun NS::|initWithUser:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUser:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setPersistentDomain:forName:| (thing _ for-name)
  (let ((message-lambda 
         (make-message-lambda @(setPersistentDomain:forName:) ((:POINTER
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-name))))

(defun NS::|objectForKey:inDomain:| (thing _ in-domain)
  (let ((message-lambda 
         (make-message-lambda @(objectForKey:inDomain:) ((:POINTER :POINTER)
                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-domain))))

(defun NS::|removeObjectForKey:inDomain:| (thing _ in-domain)
  (let ((message-lambda 
         (make-message-lambda @(removeObjectForKey:inDomain:) ((:POINTER
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-domain))))

(defun NS::|dataForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dataForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|stringArrayForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringArrayForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|longForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(longForKey:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|floatForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(floatForKey:) ((:POINTER) :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|doubleForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(doubleForKey:) ((:POINTER) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setInteger:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setInteger:forKey:) ((:LONG-LONG :POINTER)
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-key))))

(defun NS::|setLong:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setLong:forKey:) ((:LONG-LONG :POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-key))))

(defun NS::|setFloat:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setFloat:forKey:) ((:FLOAT :POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-key))))

(defun NS::|setDouble:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setDouble:forKey:) ((:DOUBLE :POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-key))))

(defun NS::|setBool:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setBool:forKey:) ((:CHAR :POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (ns-object-ptr for-key))))

(defun NS::|setURL:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setURL:forKey:) ((:POINTER :POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))

(defun NS::|searchList| (thing)
  (let ((message-lambda 
         (make-message-lambda @(searchList) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setSearchList:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSearchList:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|addSuiteNamed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addSuiteNamed:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|removeSuiteNamed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeSuiteNamed:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|registerDefaults:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerDefaults:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|volatileDomainForName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(volatileDomainForName:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setVolatileDomain:forName:| (thing _ for-name)
  (let ((message-lambda 
         (make-message-lambda @(setVolatileDomain:forName:) ((:POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-name))))

(defun NS::|removeVolatileDomainForName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeVolatileDomainForName:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|persistentDomainNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(persistentDomainNames) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|persistentDomainForName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(persistentDomainForName:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|removePersistentDomainForName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removePersistentDomainForName:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|objectIsForcedForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(objectIsForcedForKey:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|objectIsForcedForKey:inDomain:| (thing _ in-domain)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(objectIsForcedForKey:inDomain:) ((:POINTER
                                                                  :POINTER)
                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-domain)))) nil t))

(defun NS::|_container| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_container) (NIL
                                             (:POINTER
                                              (:STRUCT NS::|__CFString|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_identifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_identifier) (NIL
                                              (:POINTER
                                               (:STRUCT NS::|__CFString|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIdentifier:) (((:POINTER
                                                    (:STRUCT
                                                     NS::|__CFString|)))
                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setContainer:) (((:POINTER
                                                   (:STRUCT NS::__CFURL)))
                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_observingCFPreferences| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_observingCFPreferences) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_kvo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_kvo) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setKVO:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setKVO:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_removeObserver:notificationNamesAndSelectors:object:| (thing _ notification-names-and-selectors object)
  (let ((message-lambda 
         (make-message-lambda @(_removeObserver:notificationNamesAndSelectors:object:) ((:POINTER
                                                                                         :POINTER
                                                                                         :POINTER)
                                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr notification-names-and-selectors) (ns-object-ptr object))))

(defun NS::|_addObserver:notificationNamesAndSelectors:object:| (thing _ notification-names-and-selectors object)
  (let ((message-lambda 
         (make-message-lambda @(_addObserver:notificationNamesAndSelectors:object:) ((:POINTER
                                                                                      :POINTER
                                                                                      :POINTER)
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr notification-names-and-selectors) (ns-object-ptr object))))

(defun NS::|_addObserver:notificationNamesAndSelectorNames:object:onlyIfSelectorIsImplemented:| (thing _ notification-names-and-selector-names object only-if-selector-is-implemented)
  (let ((message-lambda 
         (make-message-lambda @(_addObserver:notificationNamesAndSelectorNames:object:onlyIfSelectorIsImplemented:) ((:POINTER
                                                                                                                      :POINTER
                                                                                                                      :POINTER
                                                                                                                      :CHAR)
                                                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr notification-names-and-selector-names) (ns-object-ptr object) (if only-if-selector-is-implemented 1 0))))

(defun NS::|_removeObserver:notificationNamesAndSelectorNames:object:| (thing _ notification-names-and-selector-names object)
  (let ((message-lambda 
         (make-message-lambda @(_removeObserver:notificationNamesAndSelectorNames:object:) ((:POINTER
                                                                                             :POINTER
                                                                                             :POINTER)
                                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr notification-names-and-selector-names) (ns-object-ptr object))))





(defun NS::|isEmpty| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEmpty) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|addObserverForName:object:queue:usingBlock:| (thing _ object queue using-block)
  (let ((message-lambda 
         (make-message-lambda @(addObserverForName:object:queue:usingBlock:) ((:POINTER
                                                                               :POINTER
                                                                               :POINTER
                                                                               :POINTER)
                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr object) (ns-object-ptr queue) (ns-object-ptr using-block))))

(defun NS::|removeObserver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|postNotificationName:object:| (thing _ object)
  (let ((message-lambda 
         (make-message-lambda @(postNotificationName:object:) ((:POINTER
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr object))))

(defun NS::|postNotification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(postNotification:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|addObserver:selector:name:object:| (thing _ selector name object)
  (let ((message-lambda 
         (make-message-lambda @(addObserver:selector:name:object:) ((:POINTER
                                                                     :POINTER
                                                                     :POINTER
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr selector) (ns-object-ptr name) (ns-object-ptr object))))

(defun NS::|postNotificationName:object:userInfo:| (thing _ object user-info)
  (let ((message-lambda 
         (make-message-lambda @(postNotificationName:object:userInfo:) ((:POINTER
                                                                         :POINTER
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr object) (ns-object-ptr user-info))))

(defun NS::|removeObserver:name:object:| (thing _ name object)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:name:object:) ((:POINTER
                                                               :POINTER
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr name) (ns-object-ptr object))))

(defun NS::|_initWithCFNotificationCenter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_initWithCFNotificationCenter:) (((:POINTER
                                                                   (:STRUCT
                                                                    NS::|__CFNotificationCenter|)))
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_addObserver:selector:name:object:options:| (thing _ selector name object options)
  (let ((message-lambda 
         (make-message-lambda @(_addObserver:selector:name:object:options:) ((:POINTER
                                                                              :POINTER
                                                                              :POINTER
                                                                              :POINTER
                                                                              :UNSIGNED-LONG-LONG)
                                                                             :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr selector) (ns-object-ptr name) (ns-object-ptr object) options)))

(defun NS::|_removeObserver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeObserver:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|respondsToAction:fromTask:| (thing _ from-task)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(respondsToAction:fromTask:) ((:POINTER
                                                              (:ARRAY :CHAR
                                                               32))
                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) from-task))) nil t))

(defun NS::|_accessibilityViewServiceMarshal| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityViewServiceMarshal) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|swizzledAccessibilityAttributeValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledAccessibilityAttributeValue:) ((:POINTER)
                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|swizzledviewDidChangeEffectiveAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(swizzledviewDidChangeEffectiveAppearance) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_effectiveSemanticContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveSemanticContext) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|automaticallyNotifiesObserversOf_semanticContext| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(automaticallyNotifiesObserversOf_semanticContext) (NIL
                                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setSemanticContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSemanticContext:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_semanticContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_semanticContext) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|safeAreaRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(safeAreaRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|automaticallyNotifiesObserversOfAdditionalSafeAreaInsets| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(automaticallyNotifiesObserversOfAdditionalSafeAreaInsets) (NIL
                                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAdditionalSafeAreaInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAdditionalSafeAreaInsets:) (((:STRUCT
                                                                 NS::|NSEdgeInsets|))
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|additionalSafeAreaInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(additionalSafeAreaInsets) (NIL
                                                           (:STRUCT
                                                            NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|safeAreaInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(safeAreaInsets) (NIL
                                                 (:STRUCT NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_allowRolloverInToolbarControls| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowRolloverInToolbarControls) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_titlebarIsForcingDisplayOfDividers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_titlebarIsForcingDisplayOfDividers) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_inSelectedTableRow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_inSelectedTableRow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))






(defun NS::|setHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHidden:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|identifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(identifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|prepareForReuse| (thing)
  (let ((message-lambda 
         (make-message-lambda @(prepareForReuse) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIdentifier:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|layout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layout) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|frame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_startLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_startLiveResize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_endLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endLiveResize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|resetCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resetCursorRects) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setNeedsDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplay:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|invalidateIntrinsicContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateIntrinsicContentSize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|layer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setBackgroundColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackgroundColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|setCompositingFilter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCompositingFilter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|bounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bounds) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrame:) (((:STRUCT NS::|CGRect|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|convertPoint:toView:| (thing _ to-view)
  (let ((message-lambda 
         (make-message-lambda @(convertPoint:toView:) (((:STRUCT NS::|CGPoint|)
                                                        :POINTER)
                                                       (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-view))))

(defun NS::|visibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(visibleRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFlipped) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|addCursorRect:cursor:| (thing _ cursor)
  (let ((message-lambda 
         (make-message-lambda @(addCursorRect:cursor:) (((:STRUCT NS::|CGRect|)
                                                         :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr cursor))))

(defun NS::|allowsVibrancy| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsVibrancy) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isOpaque| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isOpaque) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|wantsUpdateLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsUpdateLayer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|updateLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateLayer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|enableGeometryInWindowDidChangeNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableGeometryInWindowDidChangeNotification) (NIL
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|disableGeometryInWindowDidChangeNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableGeometryInWindowDidChangeNotification) (NIL
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setNeedsLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsLayout:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|superview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(superview) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|convertRect:toView:| (thing _ to-view)
  (let ((message-lambda 
         (make-message-lambda @(convertRect:toView:) (((:STRUCT NS::|CGRect|)
                                                       :POINTER)
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-view))))

(defun NS::|initWithFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithFrame:) (((:STRUCT NS::|CGRect|))
                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|widthAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(widthAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTranslatesAutoresizingMaskIntoConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTranslatesAutoresizingMaskIntoConstraints:) ((:CHAR)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_removeSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|addGestureRecognizer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addGestureRecognizer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|fittingSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fittingSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|removeConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeConstraint:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setContentCompressionResistancePriority:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setContentCompressionResistancePriority:forOrientation:) ((:FLOAT
                                                                                           :LONG-LONG)
                                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ for-orientation)))

(defun NS::|setContentHuggingPriority:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setContentHuggingPriority:forOrientation:) ((:FLOAT
                                                                             :LONG-LONG)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ for-orientation)))

(defun NS::|intrinsicContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(intrinsicContentSize) (NIL
                                                       (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|viewDidChangeEffectiveAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidChangeEffectiveAppearance) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|setWantsLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsLayer:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setShouldBeArchived:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShouldBeArchived:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|addSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|addSubview:positioned:relativeTo:| (thing _ positioned relative-to)
  (let ((message-lambda 
         (make-message-lambda @(addSubview:positioned:relativeTo:) ((:POINTER
                                                                     :LONG-LONG
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) positioned (ns-object-ptr relative-to))))

(defun NS::|addConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addConstraint:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|centerXAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(centerXAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|heightAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(heightAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|bottomAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bottomAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|addConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addConstraints:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setIgnoreHitTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIgnoreHitTest:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|leadingAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(leadingAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAllowedTouchTypes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowedTouchTypes:) ((:UNSIGNED-LONG-LONG)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|gestureRecognizers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gestureRecognizers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|viewDidMoveToWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidMoveToWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|removeFromSuperview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeFromSuperview) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|animator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animator) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|backgroundColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backgroundColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setCornerRadius:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerRadius:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|alignmentRectInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alignmentRectInsets) (NIL
                                                      (:STRUCT
                                                       NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setUserInterfaceLayoutDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUserInterfaceLayoutDirection:) ((:LONG-LONG)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|hitTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(hitTest:) (((:STRUCT NS::|CGPoint|)) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|convertPoint:fromView:| (thing _ from-view)
  (let ((message-lambda 
         (make-message-lambda @(convertPoint:fromView:) (((:STRUCT
                                                           NS::|CGPoint|)
                                                          :POINTER)
                                                         (:STRUCT
                                                          NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-view))))

(defun NS::|nextEventMatchingMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nextEventMatchingMask:) ((:UNSIGNED-LONG-LONG)
                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setBoundsOrigin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBoundsOrigin:) (((:STRUCT NS::|CGPoint|))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAnimations:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAnimations:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|gestureRecognizerShouldBegin:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(gestureRecognizerShouldBegin:) ((:POINTER)
                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_animatorClass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_animatorClass) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_contentHuggingDefault_isUsuallyFixedHeight| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_contentHuggingDefault_isUsuallyFixedHeight) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_contentHuggingDefault_isUsuallyFixedWidth| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_contentHuggingDefault_isUsuallyFixedWidth) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_preferredAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_preferredAppearance) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|tag| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tag) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|subviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(subviews) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isHiddenOrHasHiddenAncestor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHiddenOrHasHiddenAncestor) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))









(defun NS::|toolTip| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toolTip) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setToolTip:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setToolTip:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|performKeyEquivalent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(performKeyEquivalent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_startingWindowForSendAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_startingWindowForSendAction:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|layoutSubtreeIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutSubtreeIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAlphaValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAlphaValue:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setOpaque:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOpaque:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|display| (thing)
  (let ((message-lambda 
         (make-message-lambda @(display) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_collectionViewLayoutAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_collectionViewLayoutAttributes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))







(defun NS::|accessibilityHelpAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHelpAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsHelpAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsHelpAttributeSettable) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityFocusedAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsFocusedAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFocusedAttributeSettable) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySetFocusedAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetFocusedAttribute:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityParentAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityParentAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsParentAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsParentAttributeSettable) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityWindowAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsWindowAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsWindowAttributeSettable) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityTopLevelUIElementAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTopLevelUIElementAttribute) (NIL
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsTopLevelUIElementAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTopLevelUIElementAttributeSettable) (NIL
                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityPositionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPositionAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsPositionAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsPositionAttributeSettable) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySizeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySizeAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsSizeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSizeAttributeSettable) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))






(defun NS::|accessibilityHorizontalUnitDescriptionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalUnitDescriptionAttribute) (NIL
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityVerticalUnitDescriptionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalUnitDescriptionAttribute) (NIL
                                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|convertRect:fromView:| (thing _ from-view)
  (let ((message-lambda 
         (make-message-lambda @(convertRect:fromView:) (((:STRUCT NS::|CGRect|)
                                                         :POINTER)
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-view))))


(defun NS::|_briefDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_briefDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_gestureRecognizers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_gestureRecognizers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|removeTrackingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeTrackingArea:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|addTrackingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addTrackingArea:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|colorSpace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorSpace) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBounds:) (((:STRUCT NS::|CGRect|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|makeBackingLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(makeBackingLayer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|_backingScaleFactorForDrawing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_backingScaleFactorForDrawing) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|backingScaleFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backingScaleFactor) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAutoresizingMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoresizingMask:) ((:UNSIGNED-LONG-LONG)
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_alignmentBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_alignmentBounds) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setNextKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNextKeyView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setFrameOrigin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameOrigin:) (((:STRUCT NS::|CGPoint|))
                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|alignmentRectForFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignmentRectForFrame:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|removeConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeConstraints:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|autoresizingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autoresizingMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|drawRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawRect:) (((:STRUCT NS::|CGRect|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|mouseDownCanMoveWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouseDownCanMoveWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|convertSize:fromView:| (thing _ from-view)
  (let ((message-lambda 
         (make-message-lambda @(convertSize:fromView:) (((:STRUCT NS::|CGSize|)
                                                         :POINTER)
                                                        (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-view))))

(defun NS::|animations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animations) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_finishedAnimatingScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_finishedAnimatingScroll) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|cornerRadius| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cornerRadius) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cornerRadius| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cornerRadius) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|lockFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lockFocus) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|unlockFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unlockFocus) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))





(defun NS::|_visibleDescendants| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_visibleDescendants) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|designatedFocusRingView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(designatedFocusRingView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))




(defun NS::|convertRectToLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectToLayer:) (((:STRUCT NS::|CGRect|))
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|shouldDelayWindowOrderingForEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldDelayWindowOrderingForEvent:) ((:POINTER)
                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))


(defun NS::|setFrameSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameSize:) (((:STRUCT NS::|CGSize|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|setSubviews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSubviews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|leftAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(leftAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|trailingAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trailingAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|centerYAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(centerYAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_alignmentFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_alignmentFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|declaredLayoutConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(declaredLayoutConstraints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|wantsLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsLayer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_effectiveFocusRingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveFocusRingType) (NIL
                                                          :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setLayerContentsRedrawPolicy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayerContentsRedrawPolicy:) ((:LONG-LONG)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|displayIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|preferredLayoutAttributesFittingAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(preferredLayoutAttributesFittingAttributes:) ((:POINTER)
                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|replaceSubview:with:| (thing _ with)
  (let ((message-lambda 
         (make-message-lambda @(replaceSubview:with:) ((:POINTER :POINTER)
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with))))

(defun NS::|updateConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layoutEngine| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutEngine) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_widthVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_widthVariable) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_heightVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_heightVariable) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|viewWillDraw| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewWillDraw) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|backingAlignedRect:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(backingAlignedRect:options:) (((:STRUCT
                                                                NS::|CGRect|)
                                                               :UNSIGNED-LONG-LONG)
                                                              (:STRUCT
                                                               NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ options)))

(defun NS::|willRemoveSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(willRemoveSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_classToCheckForWantsUpdateLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_classToCheckForWantsUpdateLayer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_convertRectToIntegralizationSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_convertRectToIntegralizationSpace:) (((:STRUCT
                                                                        NS::|CGRect|))
                                                                      (:STRUCT
                                                                       NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|convertRectToBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectToBacking:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_convertRectFromIntegralizationSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_convertRectFromIntegralizationSpace:) (((:STRUCT
                                                                          NS::|CGRect|))
                                                                        (:STRUCT
                                                                         NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|convertRectFromBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectFromBacking:) (((:STRUCT
                                                            NS::|CGRect|))
                                                          (:STRUCT
                                                           NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|mouse:inRect:| (thing _ in-rect)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouse:inRect:) (((:STRUCT NS::|CGPoint|)
                                                 (:STRUCT NS::|CGRect|))
                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ in-rect))) nil t))

(defun NS::|convertSize:toView:| (thing _ to-view)
  (let ((message-lambda 
         (make-message-lambda @(convertSize:toView:) (((:STRUCT NS::|CGSize|)
                                                       :POINTER)
                                                      (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-view))))

(defun NS::|scrollRectToVisible:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scrollRectToVisible:) (((:STRUCT NS::|CGRect|))
                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_setWantsRevealovers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWantsRevealovers:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setNeedsDisplayInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplayInRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setKeyboardFocusRingNeedsDisplayInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKeyboardFocusRingNeedsDisplayInRect:) (((:STRUCT
                                                                            NS::|CGRect|))
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_dirtyRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dirtyRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowChangedKeyState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowChangedKeyState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isDescendantOf:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDescendantOf:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|nextKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nextKeyView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|previousKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(previousKeyView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setPostsFrameChangedNotifications:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPostsFrameChangedNotifications:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setPostsBoundsChangedNotifications:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPostsBoundsChangedNotifications:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|scrollPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollPoint:) (((:STRUCT NS::|CGPoint|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_wantsRevealovers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsRevealovers) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_drawRectIfEmpty| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_drawRectIfEmpty) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|displayRectIgnoringOpacity:inContext:| (thing _ in-context)
  (let ((message-lambda 
         (make-message-lambda @(displayRectIgnoringOpacity:inContext:) (((:STRUCT
                                                                          NS::|CGRect|)
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-context))))

(defun NS::|getRectsBeingDrawn:count:| (thing _ count)
  (let ((message-lambda 
         (make-message-lambda @(getRectsBeingDrawn:count:) (((:POINTER
                                                              (:POINTER
                                                               (:STRUCT
                                                                NS::|CGRect|)))
                                                             (:POINTER
                                                              :LONG-LONG))
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr count))))

(defun NS::|convertPointToBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointToBacking:) (((:STRUCT
                                                           NS::|CGPoint|))
                                                         (:STRUCT
                                                          NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_isLayerBacked| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isLayerBacked) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|inLiveResize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(inLiveResize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|preservesContentDuringLiveResize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(preservesContentDuringLiveResize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|getRectsExposedDuringLiveResize:count:| (thing _ count)
  (let ((message-lambda 
         (make-message-lambda @(getRectsExposedDuringLiveResize:count:) (((:ARRAY
                                                                           (:STRUCT
                                                                            NS::|CGRect|)
                                                                           4)
                                                                          (:POINTER
                                                                           :LONG-LONG))
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr count))))

(defun NS::|canDraw| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canDraw) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|enclosingScrollView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enclosingScrollView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|dragImage:at:offset:event:pasteboard:source:slideBack:| (thing _ at offset event pasteboard source slide-back)
  (let ((message-lambda 
         (make-message-lambda @(dragImage:at:offset:event:pasteboard:source:slideBack:) ((:POINTER
                                                                                          (:STRUCT
                                                                                           NS::|CGPoint|)
                                                                                          (:STRUCT
                                                                                           NS::|CGSize|)
                                                                                          :POINTER
                                                                                          :POINTER
                                                                                          :POINTER
                                                                                          :CHAR)
                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at offset (ns-object-ptr event) (ns-object-ptr pasteboard) (ns-object-ptr source) (if slide-back 1 0))))

(defun NS::|registerForDraggedTypes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerForDraggedTypes:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|unregisterDraggedTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unregisterDraggedTypes) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:| (thing _ is-visible-rect rect-is-visible-rect-for-view top-view)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveDisplayRectIfNeededIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:topView:) (((:STRUCT
                                                                                                                                 NS::|CGRect|)
                                                                                                                                :CHAR
                                                                                                                                :POINTER
                                                                                                                                :CHAR)
                                                                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if is-visible-rect 1 0) (ns-object-ptr rect-is-visible-rect-for-view) (if top-view 1 0))))

(defun NS::|_recursiveDisplayAllDirtyWithLockFocus:visRect:| (thing _ vis-rect)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveDisplayAllDirtyWithLockFocus:visRect:) ((:CHAR
                                                                                   (:STRUCT
                                                                                    NS::|CGRect|))
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) vis-rect)))

(defun NS::|_convertPointFromSuperview:test:| (thing _ test)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_convertPointFromSuperview:test:) (((:POINTER
                                                                     (:STRUCT
                                                                      NS::|CGPoint|))
                                                                    :CHAR)
                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if test 1 0)))) nil t))

(defun NS::|_hitTest:dragTypes:| (thing _ drag-types)
  (let ((message-lambda 
         (make-message-lambda @(_hitTest:dragTypes:) (((:POINTER
                                                        (:STRUCT
                                                         NS::|CGPoint|))
                                                       :POINTER)
                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr drag-types))))

(defun NS::|_shouldAutoscrollForDraggingInfo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldAutoscrollForDraggingInfo:) ((:POINTER)
                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_autoscrollForDraggingInfo:timeDelta:| (thing _ time-delta)
  (let ((message-lambda 
         (make-message-lambda @(_autoscrollForDraggingInfo:timeDelta:) ((:POINTER
                                                                         :DOUBLE)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) time-delta)))

(defun NS::|_titlebarOverhang| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_titlebarOverhang) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|acceptsFirstMouse:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsFirstMouse:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_recursiveSetDefaultKeyViewLoop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveSetDefaultKeyViewLoop) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_drawRectIfEmptyWhenSubviewsCoverDirtyRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_drawRectIfEmptyWhenSubviewsCoverDirtyRect:) (((:STRUCT
                                                                                NS::|CGRect|))
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_drawScrollViewFocusRing:clipRect:needsFullDisplay:| (thing _ clip-rect needs-full-display)
  (let ((message-lambda 
         (make-message-lambda @(_drawScrollViewFocusRing:clipRect:needsFullDisplay:) ((:POINTER
                                                                                       (:STRUCT
                                                                                        NS::|CGRect|)
                                                                                       :CHAR)
                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) clip-rect (if needs-full-display 1 0))))

(defun NS::|needsPanelToBecomeKey| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsPanelToBecomeKey) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|draggingEntered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingEntered:) ((:POINTER)
                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|draggingUpdated:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingUpdated:) ((:POINTER)
                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|draggingExited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingExited:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|performDragOperation:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(performDragOperation:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_interactiveBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_interactiveBounds) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_handleBoundsChangeForSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleBoundsChangeForSubview:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_focusRingClipAncestor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_focusRingClipAncestor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_focusRingVisibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_focusRingVisibleRect) (NIL
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|scrollWheel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollWheel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_focusRingBleedRegion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_focusRingBleedRegion) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|scrollRect:by:| (thing _ by)
  (let ((message-lambda 
         (make-message-lambda @(scrollRect:by:) (((:STRUCT NS::|CGRect|)
                                                  (:STRUCT NS::|CGSize|))
                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ by)))

(defun NS::|menuForEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(menuForEvent:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_showingFocusRingAroundEnclosingScrollView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_showingFocusRingAroundEnclosingScrollView:) ((:POINTER)
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_willDrawFocusRingAroundEnclosingScrollView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_willDrawFocusRingAroundEnclosingScrollView) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|removeFromSuperviewWithoutNeedingDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeFromSuperviewWithoutNeedingDisplay) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|bitmapImageRepForCachingDisplayInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bitmapImageRepForCachingDisplayInRect:) (((:STRUCT
                                                                           NS::|CGRect|))
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|cacheDisplayInRect:toBitmapImageRep:| (thing _ to-bitmap-image-rep)
  (let ((message-lambda 
         (make-message-lambda @(cacheDisplayInRect:toBitmapImageRep:) (((:STRUCT
                                                                         NS::|CGRect|)
                                                                        :POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-bitmap-image-rep))))

(defun NS::|_invalidateGStatesForTree| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateGStatesForTree) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|postsFrameChangedNotifications| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(postsFrameChangedNotifications) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hitTestToBlockWindowResizing:forResizeDirection:| (thing _ for-resize-direction)
  (let ((message-lambda 
         (make-message-lambda @(_hitTestToBlockWindowResizing:forResizeDirection:) (((:STRUCT
                                                                                      NS::|CGPoint|)
                                                                                     :LONG-LONG)
                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ for-resize-direction)))

(defun NS::|viewDidMoveToSuperview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidMoveToSuperview) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFlipped:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFlipped:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|registeredDraggedTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(registeredDraggedTypes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFocusRingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFocusRingType:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|headerView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(headerView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_primitiveSetPreviousKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_primitiveSetPreviousKeyView:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|translatesAutoresizingMaskIntoConstraints| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(translatesAutoresizingMaskIntoConstraints) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setNextResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNextResponder:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleFrameChangeForSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleFrameChangeForSubview:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|animationForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(animationForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|centerScanRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(centerScanRect:) (((:STRUCT NS::|CGRect|))
                                                  (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|invalidateIntrinsicContentSizeForCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(invalidateIntrinsicContentSizeForCell:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_finishedMakingConnections| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_finishedMakingConnections) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|invalidateConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|lockFocusIfCanDraw| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(lockFocusIfCanDraw) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setContentStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentStyle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_baselineOffsetsAtSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_baselineOffsetsAtSize:) (((:STRUCT
                                                            NS::|CGSize|))
                                                          (:ARRAY :CHAR 16))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|frameForAlignmentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(frameForAlignmentRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|sortSubviewsUsingBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sortSubviewsUsingBlock:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_recursiveFindDefaultButtonCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveFindDefaultButtonCell) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_opaqueRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_opaqueRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_vibrantBlendingStyleForSubtree| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_vibrantBlendingStyleForSubtree) (NIL
                                                                  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|firstBaselineOffsetFromTop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstBaselineOffsetFromTop) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|baselineOffsetFromBottom| (thing)
  (let ((message-lambda 
         (make-message-lambda @(baselineOffsetFromBottom) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_opaqueRectForWindowMoveWhenInTitlebar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_opaqueRectForWindowMoveWhenInTitlebar) (NIL
                                                                         (:STRUCT
                                                                          NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|touchBarHitTestInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBarHitTestInsets) (NIL
                                                        (:STRUCT
                                                         NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|performMnemonic:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(performMnemonic:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_resetSupportsDirectLayerContentsCache| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetSupportsDirectLayerContentsCache) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_vibrancyBlendMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_vibrancyBlendMode) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_commonAwake| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_commonAwake) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|noteFocusRingMaskChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(noteFocusRingMaskChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|convertPointFromBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointFromBacking:) (((:STRUCT
                                                             NS::|CGPoint|))
                                                           (:STRUCT
                                                            NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|lastBaselineOffsetFromBottom| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lastBaselineOffsetFromBottom) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|layerContentsRedrawPolicy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layerContentsRedrawPolicy) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|effectiveContentStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(effectiveContentStyle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_notePreferredAppearanceDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_notePreferredAppearanceDidChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setAutomaticFocusRingDisabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAutomaticFocusRingDisabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_presentationState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_presentationState) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|constraintForIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constraintForIdentifier:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setCompositingOperation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCompositingOperation:) ((:UNSIGNED-LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|compositingOperation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(compositingOperation) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setClipsToBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setClipsToBounds:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|alphaValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alphaValue) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_managesOpenGLDrawable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_managesOpenGLDrawable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|willOpenMenu:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(willOpenMenu:withEvent:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-event))))

(defun NS::|didCloseMenu:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(didCloseMenu:withEvent:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-event))))

(defun NS::|prepareMenu:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(prepareMenu:withEvent:) ((:POINTER :POINTER)
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-event))))

(defun NS::|prepareForMenu:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(prepareForMenu:withEvent:) ((:POINTER :POINTER)
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-event))))

(defun NS::|accessibilityPopUpMenuCreated:forSubview:returningAccessibilityParent:| (thing _ for-subview returning-accessibility-parent)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPopUpMenuCreated:forSubview:returningAccessibilityParent:) ((:POINTER
                                                                                                          :POINTER
                                                                                                          (:POINTER
                                                                                                           :POINTER))
                                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-subview) (ns-object-ptr returning-accessibility-parent))))

(defun NS::|accessibilityPopUpMenuClosed:accessibilityParent:| (thing _ accessibility-parent)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPopUpMenuClosed:accessibilityParent:) ((:POINTER
                                                                                     :POINTER)
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr accessibility-parent))))

(defun NS::|_setDefaultKeyViewLoop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setDefaultKeyViewLoop) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|print:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(print:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|worksWhenModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(worksWhenModal) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|topAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|trackingAreas| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trackingAreas) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nextValidKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nextValidKeyView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|focusRingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(focusRingType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|convertSizeToBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeToBacking:) (((:STRUCT
                                                          NS::|CGSize|))
                                                        (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAllowsVibrancy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsVibrancy:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_usingAlternateHighlightColorForCell:withFrame:| (thing _ with-frame)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_usingAlternateHighlightColorForCell:withFrame:) ((:POINTER
                                                                                   (:STRUCT
                                                                                    NS::|CGRect|))
                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) with-frame))) nil t))

(defun NS::|_highlightColorForCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_highlightColorForCell:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_automaticFocusRingDisabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_automaticFocusRingDisabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_scrollRectToVisible:fromView:| (thing _ from-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scrollRectToVisible:fromView:) (((:POINTER
                                                                   (:STRUCT
                                                                    NS::|CGRect|))
                                                                  :POINTER)
                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-view)))) nil t))

(defun NS::|_setIgnoreForKeyViewLoop:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIgnoreForKeyViewLoop:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_allowsContextMenus| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsContextMenus) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_performKeyEquivalent:conditionally:| (thing _ conditionally)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_performKeyEquivalent:conditionally:) ((:POINTER
                                                                        :CHAR)
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if conditionally 1 0)))) nil t))

(defun NS::|canBecomeKeyView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBecomeKeyView) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_wantsHeartBeat| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsHeartBeat) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|heartBeat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(heartBeat:) (((:POINTER (:ARRAY :CHAR 27)))
                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_crackSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_crackSize:) (((:POINTER
                                                (:STRUCT NS::|CGSize|)))
                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_crackRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_crackRect:) (((:POINTER
                                                (:STRUCT NS::|CGRect|)))
                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|opaqueAncestor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(opaqueAncestor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityShowMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityShowMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityWindowPointForShowMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowPointForShowMenu) (NIL
                                                                      (:STRUCT
                                                                       NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|drawFocusRingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawFocusRingMask) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityEnclosingTableView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityEnclosingTableView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityAuditParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditParent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityDrawFocusRing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDrawFocusRing) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilitySectionsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySectionsAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityAuditHierarchy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditHierarchy) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityAuditLabel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditLabel) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityAuditContrast| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditContrast) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|deepestAccessibilityDescendants| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deepestAccessibilityDescendants) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setUpGState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setUpGState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setTrackingAreasDirty:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTrackingAreasDirty:) ((:INT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_trackingAreasDirty| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_trackingAreasDirty) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tryToEncapsulateSubtreeLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tryToEncapsulateSubtreeLayout) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|rightAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rightAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|updateConstraintsForSubtreeIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateConstraintsForSubtreeIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|constraintsDidChangeInEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constraintsDidChangeInEngine:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|allocateGState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allocateGState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setSuperview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSuperview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeIBGeneratedPrototypingConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeIBGeneratedPrototypingConstraints) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|viewWillMoveToSuperview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewWillMoveToSuperview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_minimumFrameSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_minimumFrameSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_NSView_isWebClipView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_NSView_isWebClipView) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_edgesPropagatingSafeAreaInsetsToSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_edgesPropagatingSafeAreaInsetsToSubviews) (NIL
                                                                            :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_insetVisibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_insetVisibleRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_crackPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_crackPoint:) (((:POINTER
                                                 (:STRUCT NS::|CGPoint|)))
                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setBoundsSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBoundsSize:) (((:STRUCT NS::|CGSize|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|translateOriginToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(translateOriginToPoint:) (((:STRUCT
                                                            NS::|CGPoint|))
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_hasDrawMatrix| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasDrawMatrix) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|scaleUnitSquareToSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scaleUnitSquareToSize:) (((:STRUCT
                                                           NS::|CGSize|))
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_computeBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_computeBounds) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayerGeometryFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerGeometryFromView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidateFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateFocus) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayerGeometryForSelfAndSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerGeometryForSelfAndSubviews) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_autoscrollAmountForEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_autoscrollAmountForEvent:) ((:POINTER)
                                                             (:STRUCT
                                                              NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|adjustScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(adjustScroll:) (((:STRUCT NS::|CGRect|))
                                                (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_animatingFrameSize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_animatingFrameSize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setDontSuppressLayerAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDontSuppressLayerAnimation:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_inLiveResize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_inLiveResize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|previousValidKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(previousValidKeyView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_clipViewShouldClipFocusRing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_clipViewShouldClipFocusRing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_effectiveAutoresizingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveAutoresizingMask) (NIL
                                                             :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFrameRotation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameRotation:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setBoundsRotation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBoundsRotation:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|rotateByAngle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rotateByAngle:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|autoscroll:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoscroll:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_scrollPoint:fromView:| (thing _ from-view)
  (let ((message-lambda 
         (make-message-lambda @(_scrollPoint:fromView:) (((:POINTER
                                                           (:STRUCT
                                                            NS::|CGPoint|))
                                                          :POINTER)
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-view))))

(defun NS::|enclosingMenuItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enclosingMenuItem) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|viewWithTag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewWithTag:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|beginDraggingSessionWithItems:event:source:| (thing _ event source)
  (let ((message-lambda 
         (make-message-lambda @(beginDraggingSessionWithItems:event:source:) ((:POINTER
                                                                               :POINTER
                                                                               :POINTER)
                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr event) (ns-object-ptr source))))

(defun NS::|_markRememberedEditingFirstResponderIfIsASubview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_markRememberedEditingFirstResponderIfIsASubview) (NIL
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_validRememberedEditingFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_validRememberedEditingFirstResponder) (NIL
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_makeRememberedOrNewEditingSubviewBecomeFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_makeRememberedOrNewEditingSubviewBecomeFirstResponder) (NIL
                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_clearRememberedEditingFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_clearRememberedEditingFirstResponder) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_findLastViewInKeyViewLoop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_findLastViewInKeyViewLoop) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|constraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(constraints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_ensureSubviewNextKeyViewsAreSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_ensureSubviewNextKeyViewsAreSubviews) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|viewWillStartLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewWillStartLiveResize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|viewDidEndLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidEndLiveResize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|updateTrackingAreas| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateTrackingAreas) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|convertRectFromLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectFromLayer:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|interpretKeyEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(interpretKeyEvents:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_replaceSubview:with:rememberAndResetEditingFirstResponder:abortEditingIfNecessary:| (thing _ with remember-and-reset-editing-first-responder abort-editing-if-necessary)
  (let ((message-lambda 
         (make-message-lambda @(_replaceSubview:with:rememberAndResetEditingFirstResponder:abortEditingIfNecessary:) ((:POINTER
                                                                                                                       :POINTER
                                                                                                                       :CHAR
                                                                                                                       :CHAR)
                                                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with) (if remember-and-reset-editing-first-responder 1 0) (if abort-editing-if-necessary 1 0))))

(defun NS::|candidateListTouchBarItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(candidateListTouchBarItem) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_rootView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rootView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|lastBaselineAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lastBaselineAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|viewDidChangeBackingProperties| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidChangeBackingProperties) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|viewWillMoveToWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewWillMoveToWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAutoresizesSubviews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoresizesSubviews:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setViewController:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|replaceSubview:with:options:completionHandler:| (thing _ with options completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(replaceSubview:with:options:completionHandler:) ((:POINTER
                                                                                  :POINTER
                                                                                  :UNSIGNED-LONG-LONG
                                                                                  :POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with) options (ns-object-ptr completion-handler))))

(defun NS::|setNeedsUpdateConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsUpdateConstraints:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_windowWillOrderOnScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowWillOrderOnScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowDidOrderOnScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowDidOrderOnScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowWillOrderOffScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowWillOrderOffScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowDidOrderOffScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowDidOrderOffScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|acceptsTouchEvents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsTouchEvents) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isUserInterfaceLayoutDirectionExplicitlySet| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isUserInterfaceLayoutDirectionExplicitlySet) (NIL
                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|ignoreHitTest| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ignoreHitTest) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|shouldBeArchived| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldBeArchived) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_supportsDirectLayerContentsCache| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_supportsDirectLayerContentsCache) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setSupportsDirectLayerContentsCache:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSupportsDirectLayerContentsCache:) ((:CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_usesCustomLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_usesCustomLayer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_didRemoveLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_didRemoveLayer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setBackgroundStyleForSubtree:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setBackgroundStyleForSubtree:) ((:LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_axesForDerivingIntrinsicContentSizeFromLayoutSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_axesForDerivingIntrinsicContentSizeFromLayoutSize) (NIL
                                                                                     :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldComputeRevealovers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldComputeRevealovers) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hasToolTip| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasToolTip) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_removeAllRevealovers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeAllRevealovers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addRevealoverIfNecessaryForCell:cellRect:| (thing _ cell-rect)
  (let ((message-lambda 
         (make-message-lambda @(_addRevealoverIfNecessaryForCell:cellRect:) ((:POINTER
                                                                              (:STRUCT
                                                                               NS::|CGRect|))
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) cell-rect)))

(defun NS::|_isFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isFirstResponder) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setKeyboardFocusRingNeedsDisplayAroundPerimeter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setKeyboardFocusRingNeedsDisplayAroundPerimeter) (NIL
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasRectangularFocusRingAroundFrame| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasRectangularFocusRingAroundFrame) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|displayRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayRect:) (((:STRUCT NS::|CGRect|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_drawExpansionToolTipInView:usingCell:| (thing _ using-cell)
  (let ((message-lambda 
         (make-message-lambda @(_drawExpansionToolTipInView:usingCell:) ((:POINTER
                                                                          :POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr using-cell))))


(defun NS::|focusRingMaskBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(focusRingMaskBounds) (NIL
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_canShowExpansionTooltips| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canShowExpansionTooltips) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityPopUpMenuParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPopUpMenuParent:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|compositingFilter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(compositingFilter) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayerCompositingFilterFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerCompositingFilterFromView) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_ancestorSharedWithItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_ancestorSharedWithItem:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|shadow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|backgroundFilters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backgroundFilters) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setBackgroundFilters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackgroundFilters:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|contentFilters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentFilters) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setContentFilters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentFilters:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|clipsToBounds| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(clipsToBounds) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_replacementConstraintForConstraint:whenReplacingView:withView:| (thing _ when-replacing-view with-view)
  (let ((message-lambda 
         (make-message-lambda @(_replacementConstraintForConstraint:whenReplacingView:withView:) ((:POINTER
                                                                                                   :POINTER
                                                                                                   :POINTER)
                                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr when-replacing-view) (ns-object-ptr with-view))))

(defun NS::|_nonTAMICConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_nonTAMICConstraints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentHuggingPriorityForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentHuggingPriorityForOrientation:) ((:LONG-LONG)
                                                                        :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|contentCompressionResistancePriorityForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentCompressionResistancePriorityForOrientation:) ((:LONG-LONG)
                                                                                      :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setUsesNonVibrantAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setUsesNonVibrantAppearance:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|layoutRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutRect) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|firstBaselineAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstBaselineAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_didRestoreUserActivity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_didRestoreUserActivity:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateTrackingAreasWithInvalidCursorRects:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateTrackingAreasWithInvalidCursorRects:) ((:CHAR)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_removeTrackingRects:count:| (thing _ count)
  (let ((message-lambda 
         (make-message-lambda @(_removeTrackingRects:count:) (((:POINTER
                                                                :LONG-LONG)
                                                               :LONG-LONG)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) count)))

(defun NS::|_disableTrackingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_disableTrackingArea:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_enableTrackingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_enableTrackingArea:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shouldUseTrackingAreasForToolTips| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldUseTrackingAreasForToolTips) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_uninstallRemovedTrackingAreas| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_uninstallRemovedTrackingAreas) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_uninstallTrackingAreas| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_uninstallTrackingAreas) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_trackingAreaRootWillChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_trackingAreaRootWillChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_trackingAreaRootDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_trackingAreaRootDidChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidateCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateCursorRects) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_subviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_subviews) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|discardCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(discardCursorRects) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resetCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetCursorRects) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|cursorUpdate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cursorUpdate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_dragTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dragTypes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|prepareForDragOperation:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(prepareForDragOperation:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|concludeDragOperation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(concludeDragOperation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|helpRequested:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(helpRequested:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|addTrackingRect:owner:userData:assumeInside:| (thing _ owner user-data assume-inside)
  (let ((message-lambda 
         (make-message-lambda @(addTrackingRect:owner:userData:assumeInside:) (((:STRUCT
                                                                                 NS::|CGRect|)
                                                                                :POINTER
                                                                                (:POINTER
                                                                                 :VOID)
                                                                                :CHAR)
                                                                               :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr owner) (ns-object-ptr user-data) (if assume-inside 1 0))))

(defun NS::|removeTrackingRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeTrackingRect:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_getNextResizeEventInvalidatingLiveResizeCacheIfNecessary:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_getNextResizeEventInvalidatingLiveResizeCacheIfNecessary:) ((:POINTER)
                                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_postFrameChangeNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postFrameChangeNotification) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_defaultClipsToBoundsBehavior| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_defaultClipsToBoundsBehavior) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_defaultContentHuggingPriorities| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_defaultContentHuggingPriorities) (NIL
                                                                   (:STRUCT
                                                                    NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_defaultContentCompressionResistancePriorities| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_defaultContentCompressionResistancePriorities) (NIL
                                                                                 (:STRUCT
                                                                                  NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_viewForFirstBaselineLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_viewForFirstBaselineLayout) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_viewForLastBaselineLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_viewForLastBaselineLayout) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasBaselineOffsetsAtSize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasBaselineOffsetsAtSize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateViewRoot| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateViewRoot) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setWantsToHostAutolayoutEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWantsToHostAutolayoutEngine:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_isViewRoot| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isViewRoot) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|trackEventsMatchingMask:timeout:mode:handler:| (thing _ timeout mode handler)
  (let ((message-lambda 
         (make-message-lambda @(trackEventsMatchingMask:timeout:mode:handler:) ((:UNSIGNED-LONG-LONG
                                                                                 :DOUBLE
                                                                                 :POINTER
                                                                                 :POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ timeout (ns-object-ptr mode) (ns-object-ptr handler))))

(defun NS::|_subtreeDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_subtreeDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|recursiveDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(recursiveDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|wantsRestingTouches| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsRestingTouches) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|allowedTouchTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allowedTouchTypes) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isDrawingFindIndicator| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDrawingFindIndicator) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_focusFromView:withContext:| (thing _ with-context)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_focusFromView:withContext:) ((:POINTER
                                                               :POINTER)
                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-context)))) nil t))

(defun NS::|removeAllToolTips| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeAllToolTips) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_regionForOpaqueDescendants:forMove:| (thing _ for-move)
  (let ((message-lambda 
         (make-message-lambda @(_regionForOpaqueDescendants:forMove:) (((:STRUCT
                                                                         NS::|CGRect|)
                                                                        :CHAR)
                                                                       (:POINTER
                                                                        (:STRUCT
                                                                         NS::|CGSRegionObject|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if for-move 1 0))))

(defun NS::|nsis_frame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsis_frame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_useCoreAnimationFrameChanges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_useCoreAnimationFrameChanges) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_layoutSublayersOfLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_layoutSublayersOfLayer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setLayerContentsPlacement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayerContentsPlacement:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_vibrancyFilter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_vibrancyFilter) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_backingTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_backingTransform) (NIL
                                                    (:STRUCT
                                                     NS::|CGAffineTransform|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidatePreparedContentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidatePreparedContentRect) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_prepareContentInRectIfNeeded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_prepareContentInRectIfNeeded:) (((:STRUCT
                                                                   NS::|CGRect|))
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_appearanceSensitiveIsOpaque| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_appearanceSensitiveIsOpaque) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_sendViewWillDraw| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sendViewWillDraw) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isInclusiveLayerBacked| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isInclusiveLayerBacked) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_drawsNothing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_drawsNothing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|drawLayer:inContext:| (thing _ in-context)
  (let ((message-lambda 
         (make-message-lambda @(drawLayer:inContext:) ((:POINTER
                                                        (:POINTER
                                                         (:STRUCT
                                                          NS::|CGContext|)))
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-context))))

(defun NS::|_shouldPrintByCallingDrawRect| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldPrintByCallingDrawRect) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_recursive:displayRectIgnoringOpacity:inContext:stopAtLayerBackedViews:| (thing _ display-rect-ignoring-opacity in-context stop-at-layer-backed-views)
  (let ((message-lambda 
         (make-message-lambda @(_recursive:displayRectIgnoringOpacity:inContext:stopAtLayerBackedViews:) ((:CHAR
                                                                                                           (:STRUCT
                                                                                                            NS::|CGRect|)
                                                                                                           :POINTER
                                                                                                           :CHAR)
                                                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) display-rect-ignoring-opacity (ns-object-ptr in-context) (if stop-at-layer-backed-views 1 0))))

(defun NS::|_drawViewBackingLayer:inContext:drawingHandler:| (thing _ in-context drawing-handler)
  (let ((message-lambda 
         (make-message-lambda @(_drawViewBackingLayer:inContext:drawingHandler:) ((:POINTER
                                                                                   (:POINTER
                                                                                    (:STRUCT
                                                                                     NS::|CGContext|))
                                                                                   :POINTER)
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-context) (ns-object-ptr drawing-handler))))

(defun NS::|_integralizationSpaceAlignedRect:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(_integralizationSpaceAlignedRect:options:) (((:STRUCT
                                                                              NS::|CGRect|)
                                                                             :UNSIGNED-LONG-LONG)
                                                                            (:STRUCT
                                                                             NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ options)))

(defun NS::|actionForLayer:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(actionForLayer:forKey:) ((:POINTER :POINTER)
                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))

(defun NS::|_updateVibrancy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateVibrancy) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|functionRow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(functionRow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dynamicToolTipManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dynamicToolTipManager) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|needsDisplay| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsDisplay) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_recursiveWindowDidEnableToolTipCreationAndDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveWindowDidEnableToolTipCreationAndDisplay) (NIL
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|resizeWithOldSuperviewSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(resizeWithOldSuperviewSize:) (((:STRUCT
                                                                NS::|CGSize|))
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_invalidateAllRevealovers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateAllRevealovers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setHasToolTip:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setHasToolTip:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setRevealoversDirty:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setRevealoversDirty:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_toolTipManagerWillRecomputeToolTipsByRemoving:adding:| (thing _ adding)
  (let ((message-lambda 
         (make-message-lambda @(_toolTipManagerWillRecomputeToolTipsByRemoving:adding:) ((:CHAR
                                                                                          :CHAR)
                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if adding 1 0))))

(defun NS::|_viewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_viewController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_contextMenuTargetForEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_contextMenuTargetForEvent:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_lfld_minimalDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_minimalDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lfld_pushCurrentLayoutMethodName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_pushCurrentLayoutMethodName:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_lfld_discardLastCurrentLayoutMethodName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_discardLastCurrentLayoutMethodName) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lfld_incrementCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_incrementCount) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lfld_prepareToResetCountIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_prepareToResetCountIfNecessary) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lfld_count| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_count) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lfld_addVariableChangeRecordForVariable:inLayoutEngine:| (thing _ in-layout-engine)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_addVariableChangeRecordForVariable:inLayoutEngine:) ((:POINTER
                                                                                            :POINTER)
                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-layout-engine))))

(defun NS::|_lfld_currentLayoutMethodName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_currentLayoutMethodName) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lfld_addSetNeedsLayoutCallStack:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_addSetNeedsLayoutCallStack:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_lfld_addGeometryChangeRecordWithPropertyName:value:| (thing _ value)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_addGeometryChangeRecordWithPropertyName:value:) ((:POINTER
                                                                                        :POINTER)
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr value))))

(defun NS::|_lfld_description| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_description) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lfld_variableChangeRecords| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_variableChangeRecords) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|hasAmbiguousLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasAmbiguousLayout) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_lfld_geometryChangeRecords| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_geometryChangeRecords) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lfld_setNeedsLayoutCallStacks| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_setNeedsLayoutCallStacks) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lfld_resetCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lfld_resetCount) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_needsLayoutEngine| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_needsLayoutEngine) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hostsAutolayoutEngine| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hostsAutolayoutEngine) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setUpdateLayerHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUpdateLayerHandler:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_enclosingMenuItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enclosingMenuItem) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isContainedInMenu| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isContainedInMenu) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|alignmentLayoutRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alignmentLayoutRect) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_disableNeedsDisplayInRectNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_disableNeedsDisplayInRectNotifications) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_enableNeedsDisplayInRectNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enableNeedsDisplayInRectNotifications) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|ancestorSharedWithView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(ancestorSharedWithView:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_transformFromView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_transformFromView:) ((:POINTER)
                                                      (:STRUCT
                                                       NS::|CGAffineTransform|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|wantsBestResolutionOpenGLSurface| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsBestResolutionOpenGLSurface) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_surface| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_surface) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|renewGState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(renewGState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_surfaceColorSpace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_surfaceColorSpace) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateOpenGLViewport| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateOpenGLViewport) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasExplicitSurfaceColorSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasExplicitSurfaceColorSpace) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setEffectiveSurfaceColorSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setEffectiveSurfaceColorSpace:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setNeedsPostponedSurfaceSync| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsPostponedSurfaceSync) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_surfaceInheritsWindowOpaqueShape| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_surfaceInheritsWindowOpaqueShape) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_desiredSurfaceResolution| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_desiredSurfaceResolution) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setSurface:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSurface:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_surfaceBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_surfaceBounds) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_surfaceMoved:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_surfaceMoved:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_surfaceResized:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_surfaceResized:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateSurfaceResolution| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateSurfaceResolution) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateInheritedSurfaceColorSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_updateInheritedSurfaceColorSpace) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_syncSurfaceIfPostponed| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_syncSurfaceIfPostponed) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_clearPostponedSurfaceSync| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_clearPostponedSurfaceSync) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setHasExplicitSurfaceColorSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setHasExplicitSurfaceColorSpace:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setSurfaceColorSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSurfaceColorSpace:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setPressureConfiguration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPressureConfiguration:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pressureConfiguration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pressureConfiguration) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_debug_showKeyboardUILoop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_debug_showKeyboardUILoop) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayerMetricsOverlays| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerMetricsOverlays) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_drawMetricsOverlays| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_drawMetricsOverlays) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_showAllDrawingDrawRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_showAllDrawingDrawRect:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_briefDescriptionForLogging:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_briefDescriptionForLogging:) ((:CHAR) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|canDrawConcurrently| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canDrawConcurrently) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|autoresizesSubviews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoresizesSubviews) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|needsLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsLayout) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|needsUpdateConstraints| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsUpdateConstraints) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_subtreeDescriptionWithDepth:forLogging:| (thing _ for-logging)
  (let ((message-lambda 
         (make-message-lambda @(_subtreeDescriptionWithDepth:forLogging:) ((:LONG-LONG
                                                                            :CHAR)
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if for-logging 1 0))))

(defun NS::|_subtreeDescriptionForLogging:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_subtreeDescriptionForLogging:) ((:CHAR)
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_ancestorViewsDescriptionForLogging:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_ancestorViewsDescriptionForLogging:) ((:CHAR)
                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_layerTreeDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layerTreeDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|loggingDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(loggingDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_ancestorViewsDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_ancestorViewsDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_generateDraggingImageComponentWithKey:withMainDragView:| (thing _ with-main-drag-view)
  (let ((message-lambda 
         (make-message-lambda @(_generateDraggingImageComponentWithKey:withMainDragView:) ((:POINTER
                                                                                            :POINTER)
                                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-main-drag-view))))

(defun NS::|_recursiveSetNeedsDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveSetNeedsDisplay:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|didBecomeActiveFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(didBecomeActiveFirstResponder) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|didResignActiveFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(didResignActiveFirstResponder) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|addToolTipRect:owner:userData:| (thing _ owner user-data)
  (let ((message-lambda 
         (make-message-lambda @(addToolTipRect:owner:userData:) (((:STRUCT
                                                                   NS::|CGRect|)
                                                                  :POINTER
                                                                  (:POINTER
                                                                   :VOID))
                                                                 :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr owner) (ns-object-ptr user-data))))

(defun NS::|_recursiveSendViewDidChangeAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveSendViewDidChangeAppearance:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setOpenGLContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setOpenGLContext:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_layerBackedOpenGLContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layerBackedOpenGLContext) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setLayerBackedOpenGLContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setLayerBackedOpenGLContext:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_surfaceBackedOpenGLContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_surfaceBackedOpenGLContext) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setSurfaceBackedOpenGLContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSurfaceBackedOpenGLContext:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_openGLContextForCurrentLayerBackingState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_openGLContextForCurrentLayerBackingState) (NIL
                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|wantsExtendedDynamicRangeOpenGLSurface| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsExtendedDynamicRangeOpenGLSurface) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setWantsExtendedDynamicRangeOpenGLSurface:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsExtendedDynamicRangeOpenGLSurface:) ((:CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|convertPointFromBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointFromBase:) (((:STRUCT
                                                          NS::|CGPoint|))
                                                        (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_accessibilityParentForSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityParentForSubview:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_isHiddenForReuse| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isHiddenForReuse) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_subviewsExcludingHiddenViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_subviewsExcludingHiddenViews) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|prepareContentInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(prepareContentInRect:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_needsRedisplayOnFrameChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_needsRedisplayOnFrameChange) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_doIdlePrefetch| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_doIdlePrefetch) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setClipPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setClipPath:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_clipPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_clipPath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setHorizontalContentSizeConstraintActive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalContentSizeConstraintActive:) ((:CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setVerticalContentSizeConstraintActive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalContentSizeConstraintActive:) ((:CHAR)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_copyForCurrentOperation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_copyForCurrentOperation) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_printForCurrentOperation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_printForCurrentOperation) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_knowsPagesFirst:last:| (thing _ last)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_knowsPagesFirst:last:) (((:POINTER :LONG-LONG)
                                                          (:POINTER
                                                           :LONG-LONG))
                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr last)))) nil t))

(defun NS::|_provideTotalScaleFactorForPrintOperation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_provideTotalScaleFactorForPrintOperation:) ((:POINTER)
                                                                             :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_calcMarginSize:operation:| (thing _ operation)
  (let ((message-lambda 
         (make-message-lambda @(_calcMarginSize:operation:) (((:POINTER
                                                               (:STRUCT
                                                                NS::|CGSize|))
                                                              :POINTER)
                                                             :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr operation))))

(defun NS::|_calcWidthsWithMargin:operation:| (thing _ operation)
  (let ((message-lambda 
         (make-message-lambda @(_calcWidthsWithMargin:operation:) (((:POINTER
                                                                     (:STRUCT
                                                                      NS::|CGSize|))
                                                                    :POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr operation))))

(defun NS::|_calcHeightsWithMargin:operation:| (thing _ operation)
  (let ((message-lambda 
         (make-message-lambda @(_calcHeightsWithMargin:operation:) (((:POINTER
                                                                      (:STRUCT
                                                                       NS::|CGSize|))
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr operation))))

(defun NS::|rectForPage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rectForPage:) ((:LONG-LONG)
                                               (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|printJobTitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(printJobTitle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|geometryInWindowDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(geometryInWindowDidChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|viewDidHide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidHide) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|viewDidUnhide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidUnhide) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_wantsTouchesForEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsTouchesForEvent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_nextResponderForEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_nextResponderForEvent:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isRotatedOrScaledFromBase| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRotatedOrScaledFromBase) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_findLastViewInKeyViewLoopStartingAtView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_findLastViewInKeyViewLoopStartingAtView:) ((:POINTER)
                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_layoutFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_screenAtPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_screenAtPoint:) (((:STRUCT NS::|CGPoint|))
                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|imageInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(imageInRect:) (((:STRUCT NS::|CGRect|))
                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_windowResizeMouseLocationIsInVisibleScrollerThumb:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_windowResizeMouseLocationIsInVisibleScrollerThumb:) (((:STRUCT
                                                                                        NS::|CGPoint|))
                                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_focusRingAnimationType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_focusRingAnimationType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|removeToolTip:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeToolTip:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|inputContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(inputContext) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityFocusRingMaskBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusRingMaskBounds) (NIL
                                                                   (:STRUCT
                                                                    NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayerMasksToBoundsFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerMasksToBoundsFromView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_viewDidChangeAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_viewDidChangeAppearance:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_snipConstraintsToAnchor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_snipConstraintsToAnchor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|convertPointToLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointToLayer:) (((:STRUCT
                                                         NS::|CGPoint|))
                                                       (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_nearestAncestorOfClass:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_nearestAncestorOfClass:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_invalidateEffectiveVibrantBlendingStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateEffectiveVibrantBlendingStyle) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setCornerRadius:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCornerRadius:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_menuItemsForRevealItem:contextual:options:locationInWindow:| (thing _ contextual options location-in-window)
  (let ((message-lambda 
         (make-message-lambda @(_menuItemsForRevealItem:contextual:options:locationInWindow:) ((:POINTER
                                                                                                :CHAR
                                                                                                :POINTER
                                                                                                (:STRUCT
                                                                                                 NS::|CGPoint|))
                                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if contextual 1 0) (ns-object-ptr options) location-in-window)))

(defun NS::|_convertPointFromIntegralizationSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_convertPointFromIntegralizationSpace:) (((:STRUCT
                                                                           NS::|CGPoint|))
                                                                         (:STRUCT
                                                                          NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_engineHostingView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_engineHostingView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_convertPointToIntegralizationSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_convertPointToIntegralizationSpace:) (((:STRUCT
                                                                         NS::|CGPoint|))
                                                                       (:STRUCT
                                                                        NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_addSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|sortSubviewsUsingFunction:context:| (thing _ context)
  (let ((message-lambda 
         (make-message-lambda @(sortSubviewsUsingFunction:context:) (((:POINTER
                                                                       :POINTER)
                                                                      (:POINTER
                                                                       :VOID))
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr context))))

(defun NS::|_startLiveResizeAsTopLevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_startLiveResizeAsTopLevel) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_endLiveResizeAsTopLevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endLiveResizeAsTopLevel) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|resizeSubviewsWithOldSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(resizeSubviewsWithOldSize:) (((:STRUCT
                                                               NS::|CGSize|))
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|canDrawSubviewsIntoLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canDrawSubviewsIntoLayer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateConstraintsAtWindowLevelIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateConstraintsAtWindowLevelIfNeeded) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setLayoutIsClean:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setLayoutIsClean:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_willMeasureMinSizeForFullscreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_willMeasureMinSizeForFullscreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_didMeasureMinSizeForFullscreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_didMeasureMinSizeForFullscreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_requestExtraUpdateConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_requestExtraUpdateConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_withAutomaticEngineOptimizationDisabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_withAutomaticEngineOptimizationDisabled:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|nsis_valueOfVariable:didChangeInEngine:| (thing _ did-change-in-engine)
  (let ((message-lambda 
         (make-message-lambda @(nsis_valueOfVariable:didChangeInEngine:) ((:POINTER
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr did-change-in-engine))))

(defun NS::|_setLayoutEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setLayoutEngine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|convertSizeFromBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeFromBacking:) (((:STRUCT
                                                            NS::|CGSize|))
                                                          (:STRUCT
                                                           NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_responderDebugDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_responderDebugDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setAllowsEngineHostPreferredSizeConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAllowsEngineHostPreferredSizeConstraints:) ((:CHAR)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_isAncestorOfViewIdenticalTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAncestorOfViewIdenticalTo:) (((:POINTER
                                                                  :VOID))
                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_primitiveSetNextKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_primitiveSetNextKeyView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_prepareForDefaultKeyLoopComputation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_prepareForDefaultKeyLoopComputation) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recursiveBreakKeyViewLoop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveBreakKeyViewLoop) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_concludeDefaultKeyLoopComputation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_concludeDefaultKeyLoopComputation) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_primitiveSetDefaultNextKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_primitiveSetDefaultNextKeyView:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|preparedContentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preparedContentRect) (NIL
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_installPrefetchIdleTimerIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_installPrefetchIdleTimerIfNecessary) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasCanDrawSubviewsIntoLayerOrAncestor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasCanDrawSubviewsIntoLayerOrAncestor) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|overlayBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(overlayBounds) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resetThePreparedContentRectToTheVisibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetThePreparedContentRectToTheVisibleRect) (NIL
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_canCopyOnScroll| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canCopyOnScroll) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_allowImplicitInclusiveLayeringForResponsiveScrolling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowImplicitInclusiveLayeringForResponsiveScrolling) (NIL
                                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isScrolling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isScrolling) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setKeyboardFocusRingNeedsDisplayInRect:force:| (thing _ force)
  (let ((message-lambda 
         (make-message-lambda @(_setKeyboardFocusRingNeedsDisplayInRect:force:) (((:STRUCT
                                                                                   NS::|CGRect|)
                                                                                  :CHAR)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if force 1 0))))

(defun NS::|needsToDrawRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsToDrawRect:) (((:STRUCT NS::|CGRect|))
                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|showActiveFirstResponderIndication| (thing)
  (let ((message-lambda 
         (make-message-lambda @(showActiveFirstResponderIndication) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldAutoscrollForEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldAutoscrollForEvent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_didEndScrolling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_didEndScrolling) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|drawOverlayRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawOverlayRect:) (((:STRUCT NS::|CGRect|))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_hasLegacyExternalFocusRingThatWasNormallyDrawnManually| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasLegacyExternalFocusRingThatWasNormallyDrawnManually) (NIL
                                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_reallyCanDrawConcurrently| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_reallyCanDrawConcurrently) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_wantsHeaderView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsHeaderView) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|visibleAccessibleOrLeafSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(visibleAccessibleOrLeafSubviews) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityAuditPotentialChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditPotentialChildren) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_toolTipRectForCell:withFrame:| (thing _ with-frame)
  (let ((message-lambda 
         (make-message-lambda @(_toolTipRectForCell:withFrame:) ((:POINTER
                                                                  (:STRUCT
                                                                   NS::|CGRect|))
                                                                 (:STRUCT
                                                                  NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) with-frame)))

(defun NS::|_revealoverInfoForCell:cellRect:| (thing _ cell-rect)
  (let ((message-lambda 
         (make-message-lambda @(_revealoverInfoForCell:cellRect:) ((:POINTER
                                                                    (:STRUCT
                                                                     NS::|CGRect|))
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) cell-rect)))

(defun NS::|canSmoothFontsInLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canSmoothFontsInLayer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|displayIgnoringOpacity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayIgnoringOpacity) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayoutDependentMetricsIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayoutDependentMetricsIfNeeded) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_requestUpdateConstraintsFinishedForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_requestUpdateConstraintsFinishedForView:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_invalidateIntrinsicContentSizeDirtyingConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateIntrinsicContentSizeDirtyingConstraints:) ((:CHAR)
                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_descendantsPassingTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_descendantsPassingTest:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateConstraintsFinished| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateConstraintsFinished) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_allowRoundingToChangeSize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowRoundingToChangeSize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_layoutSizeThatFits:fixedAxes:| (thing _ fixed-axes)
  (let ((message-lambda 
         (make-message-lambda @(_layoutSizeThatFits:fixedAxes:) (((:STRUCT
                                                                   NS::|CGSize|)
                                                                  :UNSIGNED-LONG-LONG)
                                                                 (:STRUCT
                                                                  NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ fixed-axes)))

(defun NS::|isInTouchBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInTouchBar) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_usesNonVibrantAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_usesNonVibrantAppearance) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isLayingOut| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isLayingOut) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hasCanDrawSubviewsIntoLayerAncestor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasCanDrawSubviewsIntoLayerAncestor) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_registerForDraggedTypes:later:| (thing _ later)
  (let ((message-lambda 
         (make-message-lambda @(_registerForDraggedTypes:later:) ((:POINTER
                                                                   :CHAR)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if later 1 0))))

(defun NS::|showDefinitionForAttributedString:range:options:baselineOriginProvider:| (thing _ range options baseline-origin-provider)
  (let ((message-lambda 
         (make-message-lambda @(showDefinitionForAttributedString:range:options:baselineOriginProvider:) ((:POINTER
                                                                                                           (:STRUCT
                                                                                                            NS::|_NSRange|)
                                                                                                           :POINTER
                                                                                                           :POINTER)
                                                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) range (ns-object-ptr options) (ns-object-ptr baseline-origin-provider))))

(defun NS::|_getDrawMatrix| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_getDrawMatrix) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setRotatedFromBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setRotatedFromBase:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setRotatedOrScaledFromBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setRotatedOrScaledFromBase:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|wantsDefaultClipping| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsDefaultClipping) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isInFullScreenMode| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInFullScreenMode) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_autoscrollAmountForWindowPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_autoscrollAmountForWindowPoint:) (((:STRUCT
                                                                     NS::|CGPoint|))
                                                                   (:STRUCT
                                                                    NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_drawRect:clip:| (thing _ clip)
  (let ((message-lambda 
         (make-message-lambda @(_drawRect:clip:) (((:STRUCT NS::|CGRect|)
                                                   :CHAR)
                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if clip 1 0))))

(defun NS::|locationOfPrintRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(locationOfPrintRect:) (((:STRUCT NS::|CGRect|))
                                                       (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|rectForSmartMagnificationAtPoint:inRect:| (thing _ in-rect)
  (let ((message-lambda 
         (make-message-lambda @(rectForSmartMagnificationAtPoint:inRect:) (((:STRUCT
                                                                             NS::|CGPoint|)
                                                                            (:STRUCT
                                                                             NS::|CGRect|))
                                                                           (:STRUCT
                                                                            NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ in-rect)))

(defun NS::|_allowDynamicContentSizeChangesWhileScrolling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowDynamicContentSizeChangesWhileScrolling) (NIL
                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isRotatedFromBase| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRotatedFromBase) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_willBeginScrolling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_willBeginScrolling) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|didAddSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(didAddSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_needsDisplayInRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_needsDisplayInRect:) (((:STRUCT NS::|CGRect|))
                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|adjustPageHeightNew:top:bottom:limit:| (thing _ top bottom limit)
  (let ((message-lambda 
         (make-message-lambda @(adjustPageHeightNew:top:bottom:limit:) (((:POINTER
                                                                          :DOUBLE)
                                                                         :DOUBLE
                                                                         :DOUBLE
                                                                         :DOUBLE)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) top bottom limit)))

(defun NS::|knowsPageRange:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(knowsPageRange:) (((:POINTER
                                                    (:STRUCT NS::|_NSRange|)))
                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_rvPresentingContextAtLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_rvPresentingContextAtLocation:) (((:STRUCT
                                                                    NS::|CGPoint|))
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_rvDocumentContextWithOptions:item:| (thing _ item)
  (let ((message-lambda 
         (make-message-lambda @(_rvDocumentContextWithOptions:item:) ((:POINTER
                                                                       :POINTER)
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr item))))

(defun NS::|_rvPresenter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rvPresenter) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_viewDidDrawInLayer:inContext:| (thing _ in-context)
  (let ((message-lambda 
         (make-message-lambda @(_viewDidDrawInLayer:inContext:) ((:POINTER
                                                                  (:POINTER
                                                                   (:STRUCT
                                                                    NS::|CGContext|)))
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-context))))

(defun NS::|knowsPagesFirst:last:| (thing _ last)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(knowsPagesFirst:last:) (((:POINTER :LONG-LONG)
                                                         (:POINTER :LONG-LONG))
                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr last)))) nil t))

(defun NS::|revealContext:rectsForItem:| (thing _ rects-for-item)
  (let ((message-lambda 
         (make-message-lambda @(revealContext:rectsForItem:) ((:POINTER
                                                               :POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr rects-for-item))))

(defun NS::|_isDiagonallyRotatedOrScaledFromBase| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isDiagonallyRotatedOrScaledFromBase) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_buttonOfClass:action:| (thing _ action)
  (let ((message-lambda 
         (make-message-lambda @(_buttonOfClass:action:) ((:POINTER :POINTER)
                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr action))))

(defun NS::|_regionForOpaqueDescendants:forMove:forUnderTitlebar:| (thing _ for-move for-under-titlebar)
  (let ((message-lambda 
         (make-message-lambda @(_regionForOpaqueDescendants:forMove:forUnderTitlebar:) (((:STRUCT
                                                                                          NS::|CGRect|)
                                                                                         :CHAR
                                                                                         :CHAR)
                                                                                        (:POINTER
                                                                                         (:STRUCT
                                                                                          NS::|CGSRegionObject|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if for-move 1 0) (if for-under-titlebar 1 0))))

(defun NS::|addLayoutGuide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addLayoutGuide:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_minXVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_minXVariable) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|rectPreservedDuringLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rectPreservedDuringLiveResize) (NIL
                                                                (:STRUCT
                                                                 NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidateAutoresizingConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateAutoresizingConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_betterCacheDisplayInRect:toBitmapImageRep:| (thing _ to-bitmap-image-rep)
  (let ((message-lambda 
         (make-message-lambda @(_betterCacheDisplayInRect:toBitmapImageRep:) (((:STRUCT
                                                                                NS::|CGRect|)
                                                                               :POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-bitmap-image-rep))))

(defun NS::|_shouldBeTreatedAsInkEventInInactiveWindow:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldBeTreatedAsInkEventInInactiveWindow:) ((:POINTER)
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_setDrawDelegate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDrawDelegate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_convertRectFromSuperview:test:| (thing _ test)
  (let ((message-lambda 
         (make-message-lambda @(_convertRectFromSuperview:test:) (((:STRUCT
                                                                    NS::|CGRect|)
                                                                   :CHAR)
                                                                  (:STRUCT
                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if test 1 0))))

(defun NS::|_reallyNeedsDisplayForBounds| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_reallyNeedsDisplayForBounds) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|view:customToolTip:drawInView:displayInfo:| (thing _ custom-tool-tip draw-in-view display-info)
  (let ((message-lambda 
         (make-message-lambda @(view:customToolTip:drawInView:displayInfo:) ((:POINTER
                                                                              :LONG-LONG
                                                                              :POINTER
                                                                              :POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) custom-tool-tip (ns-object-ptr draw-in-view) (ns-object-ptr display-info))))

(defun NS::|view:customToolTip:frameForToolTipWithDisplayInfo:| (thing _ custom-tool-tip frame-for-tool-tip-with-display-info)
  (let ((message-lambda 
         (make-message-lambda @(view:customToolTip:frameForToolTipWithDisplayInfo:) ((:POINTER
                                                                                      :LONG-LONG
                                                                                      :POINTER)
                                                                                     (:STRUCT
                                                                                      NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) custom-tool-tip (ns-object-ptr frame-for-tool-tip-with-display-info))))

(defun NS::|_addTrackingRect:owner:userData:assumeInside:useTrackingNum:| (thing _ owner user-data assume-inside use-tracking-num)
  (let ((message-lambda 
         (make-message-lambda @(_addTrackingRect:owner:userData:assumeInside:useTrackingNum:) (((:STRUCT
                                                                                                 NS::|CGRect|)
                                                                                                :POINTER
                                                                                                (:POINTER
                                                                                                 :VOID)
                                                                                                :CHAR
                                                                                                :LONG-LONG)
                                                                                               :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr owner) (ns-object-ptr user-data) (if assume-inside 1 0) use-tracking-num)))

(defun NS::|_addTrackingRects:owner:userDataList:assumeInsideList:trackingNums:count:| (thing _ owner user-data-list assume-inside-list tracking-nums count)
  (let ((message-lambda 
         (make-message-lambda @(_addTrackingRects:owner:userDataList:assumeInsideList:trackingNums:count:) (((:POINTER
                                                                                                              (:STRUCT
                                                                                                               NS::|CGRect|))
                                                                                                             :POINTER
                                                                                                             (:POINTER
                                                                                                              (:POINTER
                                                                                                               :VOID))
                                                                                                             (:POINTER
                                                                                                              :CHAR)
                                                                                                             (:POINTER
                                                                                                              :LONG-LONG)
                                                                                                             :LONG-LONG)
                                                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr owner) (ns-object-ptr user-data-list) (ns-object-ptr assume-inside-list) (ns-object-ptr tracking-nums) count)))

(defun NS::|view:customToolTip:fadeOutAllowedForToolTipWithDisplayInfo:| (thing _ custom-tool-tip fade-out-allowed-for-tool-tip-with-display-info)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(view:customToolTip:fadeOutAllowedForToolTipWithDisplayInfo:) ((:POINTER
                                                                                               :LONG-LONG
                                                                                               :POINTER)
                                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) custom-tool-tip (ns-object-ptr fade-out-allowed-for-tool-tip-with-display-info)))) nil t))

(defun NS::|_clipViewAncestor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_clipViewAncestor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setAllowsGroupBlending:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAllowsGroupBlending:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_populateEngineWithConstraintsForViewSubtree:forComputingFittingSizeOfView:| (thing _ for-computing-fitting-size-of-view)
  (let ((message-lambda 
         (make-message-lambda @(_populateEngineWithConstraintsForViewSubtree:forComputingFittingSizeOfView:) ((:POINTER
                                                                                                               :POINTER)
                                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-computing-fitting-size-of-view))))

(defun NS::|nsis_frameInEngine:forLayoutGuide:withRounding:| (thing _ for-layout-guide with-rounding)
  (let ((message-lambda 
         (make-message-lambda @(nsis_frameInEngine:forLayoutGuide:withRounding:) ((:POINTER
                                                                                   :POINTER
                                                                                   :CHAR)
                                                                                  (:STRUCT
                                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-layout-guide) (if with-rounding 1 0))))

(defun NS::|accessibilityPopUpMenuCreated:returningAccessibilityParent:| (thing _ returning-accessibility-parent)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPopUpMenuCreated:returningAccessibilityParent:) ((:POINTER
                                                                                               (:POINTER
                                                                                                :POINTER))
                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr returning-accessibility-parent))))

(defun NS::|_isKeyLoopGroup| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isKeyLoopGroup) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setCanDrawSubviewsIntoLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanDrawSubviewsIntoLayer:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_drawDelegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_drawDelegate) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_copySubviewsInOrderOfDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_copySubviewsInOrderOfDisplay) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recursiveDisplaySelfAndDescendantsInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveDisplaySelfAndDescendantsInRect:) (((:STRUCT
                                                                               NS::|CGRect|))
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_defaultLayerContentsRedrawPolicy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_defaultLayerContentsRedrawPolicy) (NIL
                                                                    :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recursiveGainedDescendantThatOverridesNeedsDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveGainedDescendantThatOverridesNeedsDisplay) (NIL
                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_autoDrawConcurrently| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_autoDrawConcurrently) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setCanDrawConcurrently:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanDrawConcurrently:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setupViewLayoutInvalidatorIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setupViewLayoutInvalidatorIfNecessary) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_willUpdateConstraintsForSubtree| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_willUpdateConstraintsForSubtree) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_safeAreaLayoutGuideIfExists| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_safeAreaLayoutGuideIfExists) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layoutMarginsGuideIfExists| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutMarginsGuideIfExists) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeIdleTimer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeIdleTimer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_discardEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_discardEngine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeFromKeyViewLoop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeFromKeyViewLoop) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|removeAllGestureRecognizers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeAllGestureRecognizers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_finalize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_finalize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_gainedDescendantThatCanDrawConcurrently| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_gainedDescendantThatCanDrawConcurrently) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeLayerIfOwnedByAppKit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeLayerIfOwnedByAppKit) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dismissGestureRecognizers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dismissGestureRecognizers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_engageAutolayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_engageAutolayout) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_parentalLayoutEngine| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_parentalLayoutEngine) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_parentalLayoutEngineDidChangeTo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_parentalLayoutEngineDidChangeTo:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_layoutEngine_windowDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutEngine_windowDidChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_rootLayerBackWindowIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rootLayerBackWindowIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addToOrphanList| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_addToOrphanList) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_startLiveResizeCacheOK:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_startLiveResizeCacheOK:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_drawFocusRingDebugAroundRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_drawFocusRingDebugAroundRect:) (((:STRUCT
                                                                   NS::|CGRect|))
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|hideActiveFirstResponderIndication| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hideActiveFirstResponderIndication) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|layerContentsPlacement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layerContentsPlacement) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateDragRegionForHiddenStateChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateDragRegionForHiddenStateChange) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_treeHasDragTypes| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_treeHasDragTypes) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setWindowNeedsDisplayInViewsDrawableRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setWindowNeedsDisplayInViewsDrawableRect) (NIL
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recursiveOrderFrontSurfacesForNonHiddenViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveOrderFrontSurfacesForNonHiddenViews) (NIL
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_insertMissingSubviewLayers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_insertMissingSubviewLayers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_ignoreForKeyViewLoop| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_ignoreForKeyViewLoop) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_recursiveGainedHiddenAncestorDuringUnarchiving| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveGainedHiddenAncestorDuringUnarchiving) (NIL
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_viewWillDisappearBecauseHidden| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_viewWillDisappearBecauseHidden) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_viewDidDisappearBecauseHidden| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_viewDidDisappearBecauseHidden) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recursiveGainedHiddenAncestorBySwitchingWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveGainedHiddenAncestorBySwitchingWindow:) ((:CHAR)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_orderOutTheSurfaceIfHidden| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_orderOutTheSurfaceIfHidden) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_disableTrackingRectsIfHidden| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_disableTrackingRectsIfHidden) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayerHiddenFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerHiddenFromView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_installTrackingAreas:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_installTrackingAreas:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_orderFrontSurfacesIfNotHidden| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_orderFrontSurfacesIfNotHidden) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_viewWillAppearBecauseUnhidden| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_viewWillAppearBecauseUnhidden) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_viewDidAppearBecauseUnhidden| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_viewDidAppearBecauseUnhidden) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recursiveLostHiddenAncestorBySwitchingWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveLostHiddenAncestorBySwitchingWindow:) ((:CHAR)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_enableTrackingRectsIfNotHidden| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enableTrackingRectsIfNotHidden) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setHidden:setNeedsDisplay:| (thing _ set-needs-display)
  (let ((message-lambda 
         (make-message-lambda @(_setHidden:setNeedsDisplay:) ((:CHAR :CHAR)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if set-needs-display 1 0))))

(defun NS::|_updateLayerContentsGravityFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerContentsGravityFromView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateAllLayerPropertiesFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateAllLayerPropertiesFromView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_createLayerAndInitialize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_createLayerAndInitialize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateDrawDelegateForAlphaValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateDrawDelegateForAlphaValue) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_endEditingIfFirstResponderIsASubview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endEditingIfFirstResponderIsASubview) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_impactsWindowMoving| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_impactsWindowMoving) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_editingFirstResponderIfIsASubview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_editingFirstResponderIfIsASubview) (NIL
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|compareGeometry:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(compareGeometry:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_abortEditingIfFirstResponderIsASubview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_abortEditingIfFirstResponderIsASubview) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setupCrossFadeFromView:toView:| (thing _ to-view)
  (let ((message-lambda 
         (make-message-lambda @(_setupCrossFadeFromView:toView:) ((:POINTER
                                                                   :POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-view))))

(defun NS::|_setupSlideAnimation:fromView:toView:| (thing _ from-view to-view)
  (let ((message-lambda 
         (make-message-lambda @(_setupSlideAnimation:fromView:toView:) ((:UNSIGNED-LONG-LONG
                                                                         :POINTER
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-view) (ns-object-ptr to-view))))

(defun NS::|_doCrossFadeFromView:toView:| (thing _ to-view)
  (let ((message-lambda 
         (make-message-lambda @(_doCrossFadeFromView:toView:) ((:POINTER
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-view))))

(defun NS::|_doSlideAnimation:fromView:toView:| (thing _ from-view to-view)
  (let ((message-lambda 
         (make-message-lambda @(_doSlideAnimation:fromView:toView:) ((:UNSIGNED-LONG-LONG
                                                                      :POINTER
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-view) (ns-object-ptr to-view))))

(defun NS::|_recursiveClearViewWillDidDisappearOnMoveToWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveClearViewWillDidDisappearOnMoveToWindow) (NIL
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_drawnByAncestor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_drawnByAncestor) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_drawsOwnDescendants| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_drawsOwnDescendants) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_removeLayerFromSuperlayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeLayerFromSuperlayer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_constraints_subviewWillChangeSuperview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_constraints_subviewWillChangeSuperview:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_constraints_snipDangliesWithForce:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_constraints_snipDangliesWithForce:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_recursivelyInvalidateCachedContentStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recursivelyInvalidateCachedContentStyle) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_constraints_subviewDidChangeSuperview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_constraints_subviewDidChangeSuperview:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_informContainerThatSubviewsNeedUpdateConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_informContainerThatSubviewsNeedUpdateConstraints) (NIL
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_informContainerThatSubviewsNeedLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_informContainerThatSubviewsNeedLayout) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateHostedAutolayoutEngineForPossiblyNewEngineScalingCoefficients| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateHostedAutolayoutEngineForPossiblyNewEngineScalingCoefficients) (NIL
                                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidateEngineHostingPreferredSizeConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateEngineHostingPreferredSizeConstraints) (NIL
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_engineToUserScalingCoefficientsInEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_engineToUserScalingCoefficientsInEngine:) ((:POINTER)
                                                                                (:STRUCT
                                                                                 NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_effectiveAutoresizingMask_autoresizesSubviewsChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveAutoresizingMask_autoresizesSubviewsChanged) (NIL
                                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setPreparedContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreparedContentRect:) (((:STRUCT
                                                            NS::|CGRect|))
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|boundsOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(boundsOrigin) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isResizingFromLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isResizingFromLayout) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_wantsToPrefetchContent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsToPrefetchContent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_resetThePreparedContentRectKeepingAsMuchOverdrawAsPossible| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetThePreparedContentRectKeepingAsMuchOverdrawAsPossible) (NIL
                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_rootmostLayerTreeHostAncestor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rootmostLayerTreeHostAncestor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFrameTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameTransform:) (((:STRUCT
                                                       NS::|CGAffineTransform|))
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|frameRotation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameRotation) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isMagnifying| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isMagnifying) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_wantsPrepareContentRect| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsPrepareContentRect) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateSuggestedContentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateSuggestedContentRect) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateSuggestedContentRectToValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateSuggestedContentRectToValue:) (((:STRUCT
                                                                        NS::|CGRect|))
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_expandAndConstrainRect:byAmount:| (thing _ by-amount)
  (let ((message-lambda 
         (make-message-lambda @(_expandAndConstrainRect:byAmount:) (((:STRUCT
                                                                      NS::|CGRect|)
                                                                     (:STRUCT
                                                                      NS::|CGSize|))
                                                                    (:STRUCT
                                                                     NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ by-amount)))

(defun NS::|_currentScrollVelocity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentScrollVelocity) (NIL
                                                         (:STRUCT
                                                          NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_performWorkOnTilesFromRect:renderedContentRect:maximumRect:scrollVelocity:handler:| (thing _ rendered-content-rect maximum-rect scroll-velocity handler)
  (let ((message-lambda 
         (make-message-lambda @(_performWorkOnTilesFromRect:renderedContentRect:maximumRect:scrollVelocity:handler:) (((:STRUCT
                                                                                                                        NS::|CGRect|)
                                                                                                                       (:STRUCT
                                                                                                                        NS::|CGRect|)
                                                                                                                       (:STRUCT
                                                                                                                        NS::|CGRect|)
                                                                                                                       (:STRUCT
                                                                                                                        NS::|CGPoint|)
                                                                                                                       :POINTER)
                                                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ rendered-content-rect maximum-rect scroll-velocity (ns-object-ptr handler))))

(defun NS::|_updateSuggestedContentRectForVisibleRectChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateSuggestedContentRectForVisibleRectChange) (NIL
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postBoundsChangeNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postBoundsChangeNotification) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_makeAndStoreDrawMatrix| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_makeAndStoreDrawMatrix) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayerOpacityFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerOpacityFromView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_performAnimatedAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_performAnimatedAction:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateLayerBackgroundFiltersFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerBackgroundFiltersFromView) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayerFiltersFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerFiltersFromView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayerShadowFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerShadowFromView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_convertPoint:toAncestor:| (thing _ to-ancestor)
  (let ((message-lambda 
         (make-message-lambda @(_convertPoint:toAncestor:) (((:STRUCT
                                                              NS::|CGPoint|)
                                                             :POINTER)
                                                            (:STRUCT
                                                             NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-ancestor))))

(defun NS::|_convertPoint:fromAncestor:| (thing _ from-ancestor)
  (let ((message-lambda 
         (make-message-lambda @(_convertPoint:fromAncestor:) (((:STRUCT
                                                                NS::|CGPoint|)
                                                               :POINTER)
                                                              (:STRUCT
                                                               NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-ancestor))))

(defun NS::|_convertRect:toAncestor:| (thing _ to-ancestor)
  (let ((message-lambda 
         (make-message-lambda @(_convertRect:toAncestor:) (((:STRUCT
                                                             NS::|CGRect|)
                                                            :POINTER)
                                                           (:STRUCT
                                                            NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-ancestor))))

(defun NS::|_baseScaleFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_baseScaleFactor) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|convertPointFromLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointFromLayer:) (((:STRUCT
                                                           NS::|CGPoint|))
                                                         (:STRUCT
                                                          NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|convertSizeToLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeToLayer:) (((:STRUCT NS::|CGSize|))
                                                      (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|convertSizeFromLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeFromLayer:) (((:STRUCT
                                                          NS::|CGSize|))
                                                        (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_updateLayerCanDrawConcurrentlyFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerCanDrawConcurrentlyFromView) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_convertRectToSuperview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_convertRectToSuperview:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           (:STRUCT
                                                            NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_gatherFocusStateInto:upTo:withContext:| (thing _ up-to with-context)
  (let ((message-lambda 
         (make-message-lambda @(_gatherFocusStateInto:upTo:withContext:) ((:POINTER
                                                                           :POINTER
                                                                           :POINTER)
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr up-to) (ns-object-ptr with-context))))

(defun NS::|_focusInto:withClip:| (thing _ with-clip)
  (let ((message-lambda 
         (make-message-lambda @(_focusInto:withClip:) ((:POINTER :CHAR)
                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if with-clip 1 0))))

(defun NS::|_contextForLockFocus:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_contextForLockFocus:) ((:CHAR) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_convertRect:fromAncestor:| (thing _ from-ancestor)
  (let ((message-lambda 
         (make-message-lambda @(_convertRect:fromAncestor:) (((:STRUCT
                                                               NS::|CGRect|)
                                                              :POINTER)
                                                             (:STRUCT
                                                              NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-ancestor))))

(defun NS::|_getNextResizeEventFromMask:invalidatingLiveResizeCacheIfNecessary:| (thing _ invalidating-live-resize-cache-if-necessary)
  (let ((message-lambda 
         (make-message-lambda @(_getNextResizeEventFromMask:invalidatingLiveResizeCacheIfNecessary:) ((:UNSIGNED-LONG-LONG
                                                                                                       :POINTER)
                                                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr invalidating-live-resize-cache-if-necessary))))

(defun NS::|_hasAutoCanDrawSubviewsIntoLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasAutoCanDrawSubviewsIntoLayer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setLayerNeedsDisplayInViewRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setLayerNeedsDisplayInViewRect:) (((:STRUCT
                                                                     NS::|CGRect|))
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_recurseSublayersLookingForViewsWithDirtyRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recurseSublayersLookingForViewsWithDirtyRect:) (((:STRUCT
                                                                                   NS::|CGRect|))
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_recursiveMarkInclusiveLayerDirtyInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveMarkInclusiveLayerDirtyInRect:) (((:STRUCT
                                                                             NS::|CGRect|))
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_dirtyAutomaticInclusiveLayersInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_dirtyAutomaticInclusiveLayersInRect:) (((:STRUCT
                                                                          NS::|CGRect|))
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_hasAutoSetWantsLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasAutoSetWantsLayer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_drawView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_drawView:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_recursiveDisplayDescendantsInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveDisplayDescendantsInRect:) (((:STRUCT
                                                                        NS::|CGRect|))
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_drawOverlayRectSet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_drawOverlayRectSet:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_compositeHiddenViewHighlight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_compositeHiddenViewHighlight) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_oldDisplayRectIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:| (thing _ is-visible-rect rect-is-visible-rect-for-view)
  (let ((message-lambda 
         (make-message-lambda @(_oldDisplayRectIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:) (((:STRUCT
                                                                                                           NS::|CGRect|)
                                                                                                          :CHAR
                                                                                                          :POINTER)
                                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if is-visible-rect 1 0) (ns-object-ptr rect-is-visible-rect-for-view))))

(defun NS::|_layoutAtWindowLevelIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutAtWindowLevelIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_attemptConcurrentViewDrawingForSelfAndDescendants| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_attemptConcurrentViewDrawingForSelfAndDescendants) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_recursiveTickleNeedsDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveTickleNeedsDisplay) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|removeGestureRecognizer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeGestureRecognizer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_synchronizeEffectivePressureConfiguration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_synchronizeEffectivePressureConfiguration) (NIL
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setImpactsWindowMoving:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setImpactsWindowMoving:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_prepareForTwoPassConstraintsUpdateIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_prepareForTwoPassConstraintsUpdateIfNeeded) (NIL
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_usesEngineHostingConstraints| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_usesEngineHostingConstraints) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateEngineHostConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateEngineHostConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateAutoresizingConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateAutoresizingConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateContentSizeConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateContentSizeConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateDeclaredConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateDeclaredConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateDeclaredRules| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateDeclaredRules) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayoutGuidesAsNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayoutGuidesAsNecessary) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_finishTwoPassConstraintsUpdateIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_finishTwoPassConstraintsUpdateIfNeeded) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hostedLayoutEngineOverride| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_hostedLayoutEngineOverride) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateConstraintsForSubtreeIfNeededCollectingViewsWithInvalidBaselines:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateConstraintsForSubtreeIfNeededCollectingViewsWithInvalidBaselines:) (((:POINTER
                                                                                                             :POINTER))
                                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_collectedViewsWaitingForConstraintsFinished| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_collectedViewsWaitingForConstraintsFinished) (NIL
                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateEngineHostPreferredSizeConstraintsIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateEngineHostPreferredSizeConstraintsIfNeeded) (NIL
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layoutDescendsToSubviewsOnAllFrameSizeChanges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_layoutDescendsToSubviewsOnAllFrameSizeChanges) (NIL
                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_layoutSubtreeWithOldSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_layoutSubtreeWithOldSize:) (((:STRUCT
                                                               NS::|CGSize|))
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_collectDescendantsNeedingUpdateConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_collectDescendantsNeedingUpdateConstraints:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_collectDescendantsNeedingLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_collectDescendantsNeedingLayout:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_layoutSubtreeIfNeededAndAllowTemporaryEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_layoutSubtreeIfNeededAndAllowTemporaryEngine:) ((:CHAR)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_wantsToHostAutolayoutEngine| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsToHostAutolayoutEngine) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateConstraintsForLayoutCheckingDirtyBits:creatingEngine:| (thing _ creating-engine)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_updateConstraintsForLayoutCheckingDirtyBits:creatingEngine:) ((:CHAR
                                                                                                :CHAR)
                                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if creating-engine 1 0)))) nil t))

(defun NS::|_logViewsThatNeedLayoutOrUpdateConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_logViewsThatNeedLayoutOrUpdateConstraints) (NIL
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_alignmentRectForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_alignmentRectForBounds:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           (:STRUCT
                                                            NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_ancestorForStartOfDisplayRecursion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_ancestorForStartOfDisplayRecursion) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_displayRectIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:| (thing _ is-visible-rect rect-is-visible-rect-for-view)
  (let ((message-lambda 
         (make-message-lambda @(_displayRectIgnoringOpacity:isVisibleRect:rectIsVisibleRectForView:) (((:STRUCT
                                                                                                        NS::|CGRect|)
                                                                                                       :CHAR
                                                                                                       :POINTER)
                                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if is-visible-rect 1 0) (ns-object-ptr rect-is-visible-rect-for-view))))

(defun NS::|displayIfNeededInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayIfNeededInRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|displayIfNeededIgnoringOpacity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayIfNeededIgnoringOpacity) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|displayIfNeededInRectIgnoringOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayIfNeededInRectIgnoringOpacity:) (((:STRUCT
                                                                          NS::|CGRect|))
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setHostsAutolayoutEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setHostsAutolayoutEngine:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setContentSizeConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setContentSizeConstraints:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_bitmapImageRepForCachingDisplayInRect:toRect:colorSpace:| (thing _ to-rect color-space)
  (let ((message-lambda 
         (make-message-lambda @(_bitmapImageRepForCachingDisplayInRect:toRect:colorSpace:) (((:STRUCT
                                                                                              NS::|CGRect|)
                                                                                             (:STRUCT
                                                                                              NS::|CGRect|)
                                                                                             :POINTER)
                                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ to-rect (ns-object-ptr color-space))))

(defun NS::|_bitmapImageRepForCachingDisplayInRect:colorSpace:| (thing _ color-space)
  (let ((message-lambda 
         (make-message-lambda @(_bitmapImageRepForCachingDisplayInRect:colorSpace:) (((:STRUCT
                                                                                       NS::|CGRect|)
                                                                                      :POINTER)
                                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr color-space))))

(defun NS::|cacheDisplayInRect:toBitmapImageRep:includeSubviews:| (thing _ to-bitmap-image-rep include-subviews)
  (let ((message-lambda 
         (make-message-lambda @(cacheDisplayInRect:toBitmapImageRep:includeSubviews:) (((:STRUCT
                                                                                         NS::|CGRect|)
                                                                                        :POINTER
                                                                                        :CHAR)
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-bitmap-image-rep) (if include-subviews 1 0))))

(defun NS::|_removeTrackingRectTag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeTrackingRectTag:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_uninstallTrackingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_uninstallTrackingArea:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_recursiveEnsureSubviewNextKeyViewsAreSubviewsOf:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveEnsureSubviewNextKeyViewsAreSubviewsOf:) ((:POINTER)
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeNextPointersToMe| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeNextPointersToMe) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removePreviousPointersToMe| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removePreviousPointersToMe) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recursiveGatherAllKeyViewCandidatesInArray:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveGatherAllKeyViewCandidatesInArray:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_omitFalsePositiveKeyViewCandidates:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_omitFalsePositiveKeyViewCandidates:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_delayedEnableRevealoverComputationAfterScrollWheel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_delayedEnableRevealoverComputationAfterScrollWheel:) ((:POINTER)
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_addToolTipRect:displayDelegate:displayInfo:| (thing _ display-delegate display-info)
  (let ((message-lambda 
         (make-message-lambda @(_addToolTipRect:displayDelegate:displayInfo:) (((:STRUCT
                                                                                 NS::|CGRect|)
                                                                                :POINTER
                                                                                :POINTER)
                                                                               :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr display-delegate) (ns-object-ptr display-info))))

(defun NS::|layoutGuides| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutGuides) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_primitiveContentHuggingPrioritiesValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_primitiveContentHuggingPrioritiesValue) (NIL
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_primitiveContentCompressionResistancePrioritiesValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_primitiveContentCompressionResistancePrioritiesValue) (NIL
                                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_userInterfaceLayoutDirectionPropagatesToDescendants| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_userInterfaceLayoutDirectionPropagatesToDescendants) (NIL
                                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setWantsBestResolutionOpenGLSurface:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsBestResolutionOpenGLSurface:) ((:CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_finishDecodingLayoutGuideConnections:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_finishDecodingLayoutGuideConnections:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setPrimitiveContentHuggingPrioritiesValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setPrimitiveContentHuggingPrioritiesValue:) ((:POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setPrimitiveContentCompressionResistancePrioritiesValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setPrimitiveContentCompressionResistancePrioritiesValue:) ((:POINTER)
                                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setGestureRecognizers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGestureRecognizers:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setUserInterfaceLayoutDirectionPropagatesToDescendants:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setUserInterfaceLayoutDirectionPropagatesToDescendants:) ((:CHAR)
                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_computedUserInterfaceLayoutDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_computedUserInterfaceLayoutDirection) (NIL
                                                                        :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_showMenuForEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_showMenuForEvent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_enableOrDisableTrackingAreas| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enableOrDisableTrackingAreas) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_allowsGroupBlending| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsGroupBlending) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_ancestorWithLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_ancestorWithLayer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_internalSetAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_internalSetAppearance:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateLayerBackgroundColorFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerBackgroundColorFromView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayerShadowColorFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerShadowColorFromView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|effectiveAppearanceDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(effectiveAppearanceDidChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_pullInExtraTilesForOverdraw| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_pullInExtraTilesForOverdraw) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_beginAnimatingFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_beginAnimatingFrame) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_endAnimatingFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endAnimatingFrame) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_uncachedShouldUseTrackingAreasForToolTips| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_uncachedShouldUseTrackingAreasForToolTips) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_enableOrDisableTrackingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_enableOrDisableTrackingArea:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_addTrackingTag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addTrackingTag:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_recursiveSetTrackingAreasDirty:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveSetTrackingAreasDirty:) ((:LONG-LONG)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_installTrackingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_installTrackingArea:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateTrackingLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateTrackingLocation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_mayHaveVisibleDescendantsThatOverlapRect:inFrontOfSubview:| (thing _ in-front-of-subview)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_mayHaveVisibleDescendantsThatOverlapRect:inFrontOfSubview:) (((:STRUCT
                                                                                                NS::|CGRect|)
                                                                                               :POINTER)
                                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-front-of-subview)))) nil t))

(defun NS::|_enumerateVisibleDescendantsThatOverlapRect:inFrontOfSubview:recurseUp:usingBlock:| (thing _ in-front-of-subview recurse-up using-block)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_enumerateVisibleDescendantsThatOverlapRect:inFrontOfSubview:recurseUp:usingBlock:) (((:STRUCT
                                                                                                                       NS::|CGRect|)
                                                                                                                      :POINTER
                                                                                                                      :CHAR
                                                                                                                      :POINTER)
                                                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-front-of-subview) (if recurse-up 1 0) (ns-object-ptr using-block)))) nil t))

(defun NS::|_createLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_createLayer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayerMaskFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerMaskFromView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayerCornerRadiusFromView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerCornerRadiusFromView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_autoscrollAmountForTouch:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_autoscrollAmountForTouch:) ((:POINTER)
                                                             (:STRUCT
                                                              NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_renderLayerInContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_renderLayerInContext:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setupFocusStateForDrawing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setupFocusStateForDrawing) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateSurfaceWhenInAnInclusiveLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateSurfaceWhenInAnInclusiveLayer) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldAutoFlattenLayerTree| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldAutoFlattenLayerTree) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_pressureConfigurationTrackingAreaCreateIfNeeded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_pressureConfigurationTrackingAreaCreateIfNeeded:) ((:CHAR)
                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setDrawsOwnDescendants:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDrawsOwnDescendants:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))



(defun NS::|_hasEverHadInvalidRestorableState| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasEverHadInvalidRestorableState) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_enclosingScrollViewIfDocumentView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enclosingScrollViewIfDocumentView) (NIL
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setMaskView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaskView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|maskView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maskView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|computed_effectiveSemanticContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computed_effectiveSemanticContext) (NIL
                                                                    :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setSubviewsIvar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSubviewsIvar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_subviewsIvar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_subviewsIvar) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsis_layoutRectFromHostingViewInEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsis_layoutRectFromHostingViewInEngine:) ((:POINTER)
                                                                          (:STRUCT
                                                                           NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_maybeCheckForAmbiguityForItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_maybeCheckForAmbiguityForItem:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|nsis_unroundedFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsis_unroundedFrame) (NIL
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsis_rawAlignmentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsis_rawAlignmentRect) (NIL
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_verifyConstraintsForCurrentFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_verifyConstraintsForCurrentFrame) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|disableLayoutFlushing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableLayoutFlushing) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|enableLayoutFlushing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableLayoutFlushing) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_needsLayoutForAnimation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_needsLayoutForAnimation) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|frameTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameTransform) (NIL
                                                 (:STRUCT
                                                  NS::|CGAffineTransform|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFrameCenterRotation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameCenterRotation:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|frameCenterRotation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameCenterRotation) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|frameOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameOrigin) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|frameSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|wantsExtendedDynamicRange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsExtendedDynamicRange) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setWantsExtendedDynamicRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsExtendedDynamicRange:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_scrollViewDidScrollBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scrollViewDidScrollBounds) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_willBeginMagnifying| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_willBeginMagnifying) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_didEndMagnifying| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_didEndMagnifying) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_didMagnify| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_didMagnify) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|boundsSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(boundsSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|boundsRotation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(boundsRotation) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setLayerUsesCoreImageFilters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayerUsesCoreImageFilters:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|layerUsesCoreImageFilters| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(layerUsesCoreImageFilters) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_convertPointToSuperview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_convertPointToSuperview:) (((:STRUCT
                                                              NS::|CGPoint|))
                                                            (:STRUCT
                                                             NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_transformToView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_transformToView:) ((:POINTER)
                                                    (:STRUCT
                                                     NS::|CGAffineTransform|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_nsib_usesPointIntegralizationForLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_nsib_usesPointIntegralizationForLayout) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_nsib_setUsesPointIntegralizationForLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_nsib_setUsesPointIntegralizationForLayout:) ((:CHAR)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_convertSizeToIntegralizationSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_convertSizeToIntegralizationSpace:) (((:STRUCT
                                                                        NS::|CGSize|))
                                                                      (:STRUCT
                                                                       NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_convertSizeFromIntegralizationSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_convertSizeFromIntegralizationSpace:) (((:STRUCT
                                                                          NS::|CGSize|))
                                                                        (:STRUCT
                                                                         NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|convertPointToBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointToBase:) (((:STRUCT NS::|CGPoint|))
                                                      (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|convertSizeToBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeToBase:) (((:STRUCT NS::|CGSize|))
                                                     (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|convertSizeFromBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeFromBase:) (((:STRUCT NS::|CGSize|))
                                                       (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|convertRectToBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectToBase:) (((:STRUCT NS::|CGRect|))
                                                     (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|convertRectFromBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectFromBase:) (((:STRUCT NS::|CGRect|))
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|gState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gState) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|releaseGState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(releaseGState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|lockFocusIfCanDrawInContext:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(lockFocusIfCanDrawInContext:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_setLiveResize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setLiveResize:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_didChangeAutoSetWantsLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_didChangeAutoSetWantsLayer:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setAcceptsTouchEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAcceptsTouchEvents:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setWantsRestingTouches:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsRestingTouches:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|gesturesEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(gesturesEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setGesturesEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGesturesEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_shouldDetermineOpaqueRegionForMoves| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldDetermineOpaqueRegionForMoves) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_resetUpdateConstraintsPassCounter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetUpdateConstraintsPassCounter) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layoutAtSubtreeLevelIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutAtSubtreeLevelIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layoutSubtreeIfNeededNoEngineCreation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutSubtreeIfNeededNoEngineCreation) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_boundsForAlignmentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_boundsForAlignmentRect:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           (:STRUCT
                                                            NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|displayRectIgnoringOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayRectIgnoringOpacity:) (((:STRUCT
                                                                NS::|CGRect|))
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_buildLayerTreeFromRoot| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_buildLayerTreeFromRoot) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|usesConstraintsInsteadOfAutoresizing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesConstraintsInsteadOfAutoresizing) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setUsesConstraintsInsteadOfAutoresizing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesConstraintsInsteadOfAutoresizing:) ((:CHAR)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isHorizontalContentSizeConstraintActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHorizontalContentSizeConstraintActive) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isVerticalContentSizeConstraintActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isVerticalContentSizeConstraintActive) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|scrollPoint:fromView:| (thing _ from-view)
  (let ((message-lambda 
         (make-message-lambda @(scrollPoint:fromView:) (((:POINTER
                                                          (:STRUCT
                                                           NS::|CGPoint|))
                                                         :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-view))))

(defun NS::|translateRectsNeedingDisplayInRect:by:| (thing _ by)
  (let ((message-lambda 
         (make-message-lambda @(translateRectsNeedingDisplayInRect:by:) (((:STRUCT
                                                                           NS::|CGRect|)
                                                                          (:STRUCT
                                                                           NS::|CGSize|))
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ by)))

(defun NS::|removeCursorRect:cursor:| (thing _ cursor)
  (let ((message-lambda 
         (make-message-lambda @(removeCursorRect:cursor:) (((:STRUCT
                                                             NS::|CGRect|)
                                                            :POINTER)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr cursor))))

(defun NS::|shouldDrawColor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldDrawColor) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|postsBoundsChangedNotifications| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(postsBoundsChangedNotifications) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isAncestorOf:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAncestorOf:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|willSendMenuNeedsUpdate:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(willSendMenuNeedsUpdate:withEvent:) ((:POINTER
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-event))))

(defun NS::|updateLayerHandler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateLayerHandler) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_clearHasBeenCommittedIfNeededOrForced:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_clearHasBeenCommittedIfNeededOrForced:) ((:CHAR)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_renderedContentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_renderedContentRect) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|viewDidChangeBackingProperties:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewDidChangeBackingProperties:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_startLiveAnimation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_startLiveAnimation) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_endLiveAnimation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endLiveAnimation) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateDrawsNothing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateDrawsNothing) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setAnimatingFrameSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAnimatingFrameSize:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_dontSuppressLayerAnimation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_dontSuppressLayerAnimation) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_frameAnimationCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_frameAnimationCount) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_performAnimated:actions:| (thing _ actions)
  (let ((message-lambda 
         (make-message-lambda @(_performAnimated:actions:) ((:CHAR :POINTER)
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (ns-object-ptr actions))))

(defun NS::|_updateTrackingAreas| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateTrackingAreas) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_getDirtyRects:clippedToRect:count:boundingBox:| (thing _ clipped-to-rect count bounding-box)
  (let ((message-lambda 
         (make-message-lambda @(_getDirtyRects:clippedToRect:count:boundingBox:) (((:POINTER
                                                                                    (:POINTER
                                                                                     (:STRUCT
                                                                                      NS::|CGRect|)))
                                                                                   (:STRUCT
                                                                                    NS::|CGRect|)
                                                                                   (:POINTER
                                                                                    :UNSIGNED-LONG-LONG)
                                                                                   (:POINTER
                                                                                    (:STRUCT
                                                                                     NS::|CGRect|)))
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) clipped-to-rect (ns-object-ptr count) (ns-object-ptr bounding-box))))

(defun NS::|_dirtyRegion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dirtyRegion) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_useCoreAnimationFrameOriginChanges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_useCoreAnimationFrameOriginChanges) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setVibrantBlendingStyleForSubtree:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setVibrantBlendingStyleForSubtree:) ((:UNSIGNED-LONG-LONG)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_autoscrollScreenEdgeFactorFromPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_autoscrollScreenEdgeFactorFromPoint:) (((:STRUCT
                                                                          NS::|CGPoint|))
                                                                        :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|activeDrawingRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(activeDrawingRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_backgroundColorForFontSmoothing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_backgroundColorForFontSmoothing) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_revertGestureRecognizerPressureConfigurationForEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_revertGestureRecognizerPressureConfigurationForEvent:) ((:POINTER)
                                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_drawsWithTintWhenHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_drawsWithTintWhenHidden) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setDrawsWithTintWhenHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDrawsWithTintWhenHidden:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_clipViewAncestorWillScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_clipViewAncestorWillScroll:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_clipViewAncestorDidScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_clipViewAncestorDidScroll:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_revealItemFromString:range:options:baselineOriginProvider:| (thing _ range options baseline-origin-provider)
  (let ((message-lambda 
         (make-message-lambda @(_revealItemFromString:range:options:baselineOriginProvider:) ((:POINTER
                                                                                               (:STRUCT
                                                                                                NS::|_NSRange|)
                                                                                               :POINTER
                                                                                               :POINTER)
                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) range (ns-object-ptr options) (ns-object-ptr baseline-origin-provider))))

(defun NS::|showDefinitionForAttributedString:atPoint:| (thing _ at-point)
  (let ((message-lambda 
         (make-message-lambda @(showDefinitionForAttributedString:atPoint:) ((:POINTER
                                                                              (:STRUCT
                                                                               NS::|CGPoint|))
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-point)))

(defun NS::|contentStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentStyle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|computed_inSelectedTableRow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computed_inSelectedTableRow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|computed_titlebarIsForcingDisplayOfDividers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computed_titlebarIsForcingDisplayOfDividers) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|computed_allowRolloverInToolbarControls| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computed_allowRolloverInToolbarControls) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_recursiveFreezeLayersBeforeTransplant| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveFreezeLayersBeforeTransplant) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recursiveThawLayersAfterTransplant| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveThawLayersAfterTransplant) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|fontSmoothingBackgroundColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fontSmoothingBackgroundColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFontSmoothingBackgroundColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFontSmoothingBackgroundColor:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_safeSubviewEnumerationWithHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_safeSubviewEnumerationWithHandler:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|shouldSetFontSmoothingBackgroundColor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldSetFontSmoothingBackgroundColor) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_CAViewFlags| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_CAViewFlags) (NIL :UNSIGNED-INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_minXVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_minXVariable) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_minYVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_minYVariable) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_superitem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_superitem) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_effectiveBackingScaleFactorForLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveBackingScaleFactorForLayout) (NIL
                                                                        :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_engineHostConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_engineHostConstraints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityBasicHitTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityBasicHitTest:) (((:STRUCT
                                                                NS::|CGPoint|))
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_accessibilityEnclosingTableRow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityEnclosingTableRow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_singleCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_singleCell) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_classSetToIgnoreForAuditing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_classSetToIgnoreForAuditing) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_ignoreAudit| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_ignoreAudit) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isLeafNodeWithPotentialAccessibilityChildren| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isLeafNodeWithPotentialAccessibilityChildren) (NIL
                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_drawRectAsLayerTree:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_drawRectAsLayerTree:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_layerTreeRenderer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layerTreeRenderer) (NIL
                                                     (:POINTER
                                                      (:STRUCT NS::|_CAView|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setLayerTreeRenderer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setLayerTreeRenderer:) (((:POINTER
                                                           (:STRUCT
                                                            NS::|_CAView|)))
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_forceUpdateLayerTreeRenderer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_forceUpdateLayerTreeRenderer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_desiredLayerBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_desiredLayerBounds) (NIL
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|dataWithEPSInsideRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dataWithEPSInsideRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|dataWithPDFInsideRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dataWithPDFInsideRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_encodedLayerTree| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_encodedLayerTree) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dumpLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dumpLayer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recommendedDrawableSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recommendedDrawableSize) (NIL
                                                           (:STRUCT
                                                            NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|dragFile:fromRect:slideBack:event:| (thing _ from-rect slide-back event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(dragFile:fromRect:slideBack:event:) ((:POINTER
                                                                      (:STRUCT
                                                                       NS::|CGRect|)
                                                                      :CHAR
                                                                      :POINTER)
                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) from-rect (if slide-back 1 0) (ns-object-ptr event)))) nil t))

(defun NS::|dragPromisedFilesOfTypes:fromRect:source:slideBack:event:| (thing _ from-rect source slide-back event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(dragPromisedFilesOfTypes:fromRect:source:slideBack:event:) ((:POINTER
                                                                                             (:STRUCT
                                                                                              NS::|CGRect|)
                                                                                             :POINTER
                                                                                             :CHAR
                                                                                             :POINTER)
                                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) from-rect (ns-object-ptr source) (if slide-back 1 0) (ns-object-ptr event)))) nil t))

(defun NS::|_registerDraggingForiOSMacContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_registerDraggingForiOSMacContext:) ((:UNSIGNED-INT)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_unregisterDraggingForiOSMacContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_unregisterDraggingForiOSMacContext:) ((:UNSIGNED-INT)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|removeLayoutGuide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeLayoutGuide:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:onBehalfOfLayoutGuide:| (thing _ into-expression with-coefficient for-constraint on-behalf-of-layout-guide)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:onBehalfOfLayoutGuide:) ((:INT
                                                                                                                           :POINTER
                                                                                                                           :DOUBLE
                                                                                                                           :POINTER
                                                                                                                           :POINTER)
                                                                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr into-expression) with-coefficient (ns-object-ptr for-constraint) (ns-object-ptr on-behalf-of-layout-guide)))) nil t))

(defun NS::|nsli_lowersExpressionRelativeToConstraintContainer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_lowersExpressionRelativeToConstraintContainer) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|nsli_layoutEngine| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_layoutEngine) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_installedConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_installedConstraints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_removeConstraint:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_removeConstraint:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|constraintsAffectingLayoutForOrientation:ofItem:| (thing _ of-item)
  (let ((message-lambda 
         (make-message-lambda @(constraintsAffectingLayoutForOrientation:ofItem:) ((:LONG-LONG
                                                                                    :POINTER)
                                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr of-item))))

(defun NS::|_constraintsReferencingItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_constraintsReferencingItem:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|nsli_convertSizeToEngineSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_convertSizeToEngineSpace:) (((:STRUCT
                                                                   NS::|CGSize|))
                                                                 (:STRUCT
                                                                  NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|nsli_convertSizeFromEngineSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_convertSizeFromEngineSpace:) (((:STRUCT
                                                                     NS::|CGSize|))
                                                                   (:STRUCT
                                                                    NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|nsli_defaultResolvedValue:forSymbolicConstant:inConstraint:error:| (thing _ for-symbolic-constant in-constraint error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_defaultResolvedValue:forSymbolicConstant:inConstraint:error:) (((:POINTER
                                                                                                      :DOUBLE)
                                                                                                     :POINTER
                                                                                                     :POINTER
                                                                                                     (:POINTER
                                                                                                      :POINTER))
                                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-symbolic-constant) (ns-object-ptr in-constraint) (ns-object-ptr error)))) nil t))

(defun NS::|nsli_constraintWithAnchor:relatedBy:toAnchor:withSystemSpacingMultipliedBy:| (thing _ related-by to-anchor with-system-spacing-multiplied-by)
  (let ((message-lambda 
         (make-message-lambda @(nsli_constraintWithAnchor:relatedBy:toAnchor:withSystemSpacingMultipliedBy:) ((:POINTER
                                                                                                               :LONG-LONG
                                                                                                               :POINTER
                                                                                                               :DOUBLE)
                                                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) related-by (ns-object-ptr to-anchor) with-system-spacing-multiplied-by)))

(defun NS::|nsli_isRTL| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_isRTL) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|nsli_itemDescribingLayoutDirectionForConstraint:toItem:| (thing _ to-item)
  (let ((message-lambda 
         (make-message-lambda @(nsli_itemDescribingLayoutDirectionForConstraint:toItem:) ((:POINTER
                                                                                           :POINTER)
                                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-item))))

(defun NS::|nsli_addConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_addConstraint:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|nsli_boundsWidthVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_boundsWidthVariable) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_boundsHeightVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_boundsHeightVariable) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_description| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_description) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:| (thing _ into-expression with-coefficient for-constraint)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:) ((:INT
                                                                                                     :POINTER
                                                                                                     :DOUBLE
                                                                                                     :POINTER)
                                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr into-expression) with-coefficient (ns-object-ptr for-constraint)))) nil t))

(defun NS::|nsli_lowerAttribute:intoExpression:withCoefficient:container:| (thing _ into-expression with-coefficient container)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_lowerAttribute:intoExpression:withCoefficient:container:) ((:INT
                                                                                                 :POINTER
                                                                                                 :DOUBLE
                                                                                                 :POINTER)
                                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr into-expression) with-coefficient (ns-object-ptr container)))) nil t))

(defun NS::|constraintsAffectingLayoutForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constraintsAffectingLayoutForOrientation:) ((:LONG-LONG)
                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_referencingConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_referencingConstraints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_layoutRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_layoutRect) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_resolvedValue:forSymbolicConstant:inConstraint:error:| (thing _ for-symbolic-constant in-constraint error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_resolvedValue:forSymbolicConstant:inConstraint:error:) (((:POINTER
                                                                                               :DOUBLE)
                                                                                              :POINTER
                                                                                              :POINTER
                                                                                              (:POINTER
                                                                                               :POINTER))
                                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-symbolic-constant) (ns-object-ptr in-constraint) (ns-object-ptr error)))) nil t))

(defun NS::|nsli_descriptionIncludesPointer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_descriptionIncludesPointer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|nsli_autoresizingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_autoresizingMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_isFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_isFlipped) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|nsli_piercingToken| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_piercingToken) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_setPiercingToken:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_setPiercingToken:) ((:UNSIGNED-LONG-LONG)
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_minYVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_minYVariable) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_widthVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_widthVariable) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_heightVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_heightVariable) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:) ((:POINTER)
                                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|nsis_shouldIntegralizeVariable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsis_shouldIntegralizeVariable:) ((:POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|nsis_valueOfVariableIsUserObservable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsis_valueOfVariableIsUserObservable:) ((:POINTER)
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|nsis_descriptionOfVariable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsis_descriptionOfVariable:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|nsis_orientationHintForVariable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsis_orientationHintForVariable:) ((:POINTER)
                                                                   :INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_subview:valueOfVariable:didChangeInEngine:| (thing _ value-of-variable did-change-in-engine)
  (let ((message-lambda 
         (make-message-lambda @(_subview:valueOfVariable:didChangeInEngine:) ((:POINTER
                                                                               :POINTER
                                                                               :POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr value-of-variable) (ns-object-ptr did-change-in-engine))))

(defun NS::|widthAdjustLimit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(widthAdjustLimit) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|adjustPageWidthNew:left:right:limit:| (thing _ left right limit)
  (let ((message-lambda 
         (make-message-lambda @(adjustPageWidthNew:left:right:limit:) (((:POINTER
                                                                         :DOUBLE)
                                                                        :DOUBLE
                                                                        :DOUBLE
                                                                        :DOUBLE)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) left right limit)))

(defun NS::|heightAdjustLimit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(heightAdjustLimit) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_getPageHeaderRect:pageFooterRect:forBorderSize:| (thing _ page-footer-rect for-border-size)
  (let ((message-lambda 
         (make-message-lambda @(_getPageHeaderRect:pageFooterRect:forBorderSize:) (((:POINTER
                                                                                     (:STRUCT
                                                                                      NS::|CGRect|))
                                                                                    (:POINTER
                                                                                     (:STRUCT
                                                                                      NS::|CGRect|))
                                                                                    (:STRUCT
                                                                                     NS::|CGSize|))
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr page-footer-rect) for-border-size)))

(defun NS::|pageFooter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pageFooter) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|pageHeader| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pageHeader) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_pageHeaderAndFooterTextAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_pageHeaderAndFooterTextAttributes) (NIL
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|drawSheetBorderWithSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawSheetBorderWithSize:) (((:STRUCT
                                                             NS::|CGSize|))
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|drawPageBorderWithSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawPageBorderWithSize:) (((:STRUCT
                                                            NS::|CGSize|))
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_rvItemForAttributedString:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(_rvItemForAttributedString:range:) ((:POINTER
                                                                     (:STRUCT
                                                                      NS::|_NSRange|))
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) range)))

(defun NS::|_previewCurrentPageForPrintOperation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_previewCurrentPageForPrintOperation:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|beginDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginDocument) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|endDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endDocument) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|endPage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endPage) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|writePDFInsideRect:toPasteboard:| (thing _ to-pasteboard)
  (let ((message-lambda 
         (make-message-lambda @(writePDFInsideRect:toPasteboard:) (((:STRUCT
                                                                     NS::|CGRect|)
                                                                    :POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-pasteboard))))

(defun NS::|writeEPSInsideRect:toPasteboard:| (thing _ to-pasteboard)
  (let ((message-lambda 
         (make-message-lambda @(writeEPSInsideRect:toPasteboard:) (((:STRUCT
                                                                     NS::|CGRect|)
                                                                    :POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-pasteboard))))

(defun NS::|beginPageInRect:atPlacement:| (thing _ at-placement)
  (let ((message-lambda 
         (make-message-lambda @(beginPageInRect:atPlacement:) (((:STRUCT
                                                                 NS::|CGRect|)
                                                                (:STRUCT
                                                                 NS::|CGPoint|))
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ at-placement)))

(defun NS::|_renderCurrentPageForPrintOperation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_renderCurrentPageForPrintOperation:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:| (thing _ creation-date created-by fonts for-whom pages title)
  (let ((message-lambda 
         (make-message-lambda @(beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:) (((:STRUCT
                                                                                                        NS::|CGRect|)
                                                                                                       :POINTER
                                                                                                       :POINTER
                                                                                                       :POINTER
                                                                                                       :POINTER
                                                                                                       :LONG-LONG
                                                                                                       :POINTER)
                                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr creation-date) (ns-object-ptr created-by) (ns-object-ptr fonts) (ns-object-ptr for-whom) pages (ns-object-ptr title))))

(defun NS::|endHeaderComments| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endHeaderComments) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|endPrologue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endPrologue) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|beginSetup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginSetup) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|endSetup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endSetup) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|beginPage:label:bBox:fonts:| (thing _ label b-box fonts)
  (let ((message-lambda 
         (make-message-lambda @(beginPage:label:bBox:fonts:) ((:LONG-LONG
                                                               :POINTER
                                                               (:STRUCT
                                                                NS::|CGRect|)
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr label) b-box (ns-object-ptr fonts))))

(defun NS::|beginPageSetupRect:placement:| (thing _ placement)
  (let ((message-lambda 
         (make-message-lambda @(beginPageSetupRect:placement:) (((:STRUCT
                                                                  NS::|CGRect|)
                                                                 (:STRUCT
                                                                  NS::|CGPoint|))
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ placement)))

(defun NS::|addToPageSetup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(addToPageSetup) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|endPageSetup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endPageSetup) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|beginTrailer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginTrailer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|endTrailer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endTrailer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|enterFullScreenMode:withOptions:| (thing _ with-options)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(enterFullScreenMode:withOptions:) ((:POINTER
                                                                    :POINTER)
                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-options)))) nil t))

(defun NS::|exitFullScreenModeWithOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(exitFullScreenModeWithOptions:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_canSubtreeUseInclusiveLayersAutomatically| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canSubtreeUseInclusiveLayersAutomatically) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setReuseIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setReuseIdentifier:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_preferredLayoutAttributesFittingAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_preferredLayoutAttributesFittingAttributes:) ((:POINTER)
                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_arePreferredAttributesValid| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_arePreferredAttributesValid) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_invalidatePreferredAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidatePreferredAttributes) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_wasDequeued| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wasDequeued) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_markAsDequeued| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_markAsDequeued) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setHiddenForReuse:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setHiddenForReuse:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|reuseIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(reuseIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_collectionViewReusableViewFlags| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_collectionViewReusableViewFlags) (NIL
                                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setCollectionViewReusableViewFlags:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCollectionViewReusableViewFlags:) ((:UNSIGNED-LONG-LONG)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setBaseCollectionViewLayoutAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setBaseCollectionViewLayoutAttributes:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setCollectionViewLayoutAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCollectionViewLayoutAttributes:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shouldFixupChildAutoresizingMaskOnResizeSubviewsOverride| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldFixupChildAutoresizingMaskOnResizeSubviewsOverride) (NIL
                                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_visibleRectExcludingTitlebarInCoordinateSystemForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_visibleRectExcludingTitlebarInCoordinateSystemForView:) ((:POINTER)
                                                                                          (:STRUCT
                                                                                           NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_visitSubviewsWithBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_visitSubviewsWithBlock:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_calculateEngineHostPreferredSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_calculateEngineHostPreferredSize) (NIL
                                                                    (:STRUCT
                                                                     NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_makeEngineHostConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_makeEngineHostConstraints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|_copyPersistentUIChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_copyPersistentUIChildren) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_depthFirstCompare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_depthFirstCompare:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_visibleRectForPopover| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_visibleRectForPopover) (NIL
                                                         (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasActiveDragTypes| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasActiveDragTypes) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_alignmentBoundsForPopover| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_alignmentBoundsForPopover) (NIL
                                                             (:STRUCT
                                                              NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|ns_widgetType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ns_widgetType) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|ns_containerWidgetType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ns_containerWidgetType) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|exerciseAmbiguityInLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(exerciseAmbiguityInLayout) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_declaredConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_declaredConstraints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_childRuleNodes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_childRuleNodes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_addConstraint:mutuallyExclusiveConstraints:| (thing _ mutually-exclusive-constraints)
  (let ((message-lambda 
         (make-message-lambda @(nsli_addConstraint:mutuallyExclusiveConstraints:) ((:POINTER
                                                                                    (:POINTER
                                                                                     :POINTER))
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr mutually-exclusive-constraints))))

(defun NS::|_tryToAddConstraint:integralizationAdjustment:mutuallyExclusiveConstraints:| (thing _ integralization-adjustment mutually-exclusive-constraints)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tryToAddConstraint:integralizationAdjustment:mutuallyExclusiveConstraints:) ((:POINTER
                                                                                                               :DOUBLE
                                                                                                               (:POINTER
                                                                                                                :POINTER))
                                                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) integralization-adjustment (ns-object-ptr mutually-exclusive-constraints)))) nil t))

(defun NS::|_constraintsArray| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_constraintsArray) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layoutEngine_willRemoveLayoutConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_layoutEngine_willRemoveLayoutConstraint:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_noteDeclaredConstraintWasManuallyRemoved:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_noteDeclaredConstraintWasManuallyRemoved:) ((:POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_layoutDescriptionIfDifferentFromDefault| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutDescriptionIfDifferentFromDefault) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_defaultLayoutDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_defaultLayoutDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nsli_engineToUserScalingCoefficients| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_engineToUserScalingCoefficients) (NIL
                                                                       (:STRUCT
                                                                        NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setBaselineOffsetFromBottomMayBeReferenced:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setBaselineOffsetFromBottomMayBeReferenced:) ((:CHAR)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_layoutHeightDependsOnWidth| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_layoutHeightDependsOnWidth) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_invalidateEngineHostConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateEngineHostConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_preferredAutolayoutEngineToUserScalingCoefficients| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_preferredAutolayoutEngineToUserScalingCoefficients) (NIL
                                                                                      (:STRUCT
                                                                                       NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_adjustLayoutForResolutionChangeToRetina:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_adjustLayoutForResolutionChangeToRetina:) ((:CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_rebuildLayoutFromScratch| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rebuildLayoutFromScratch) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_constraints_viewGeometryDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_constraints_viewGeometryDidChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_willChangeHostsAutolayoutEngineTo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_willChangeHostsAutolayoutEngineTo:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_didChangeHostsAutolayoutEngineTo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_didChangeHostsAutolayoutEngineTo:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_viewWillBePiercedByConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_viewWillBePiercedByConstraint:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setPotentiallyHasDanglyConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setPotentiallyHasDanglyConstraints:) ((:CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_layoutEngine_didAddLayoutConstraint:integralizationAdjustment:mutuallyExclusiveConstraints:| (thing _ integralization-adjustment mutually-exclusive-constraints)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_layoutEngine_didAddLayoutConstraint:integralizationAdjustment:mutuallyExclusiveConstraints:) ((:POINTER
                                                                                                                                :DOUBLE
                                                                                                                                (:POINTER
                                                                                                                                 :POINTER))
                                                                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) integralization-adjustment (ns-object-ptr mutually-exclusive-constraints)))) nil t))

(defun NS::|_wantsPreferredSizeConstraintsWhenEngineHosting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsPreferredSizeConstraintsWhenEngineHosting) (NIL
                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_constraintsEquivalentToAutoresizingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_constraintsEquivalentToAutoresizingMask) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_priorityForEngineHostConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_priorityForEngineHostConstraints) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_allowsEngineHostPreferredSizeConstraints| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsEngineHostPreferredSizeConstraints) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_engineHostingPreferredSizeConstraintsNeedUpdating| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_engineHostingPreferredSizeConstraintsNeedUpdating) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_contentCompressionResistancePriorities| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_contentCompressionResistancePriorities) (NIL
                                                                          (:STRUCT
                                                                           NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_contentHuggingPriorities| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_contentHuggingPriorities) (NIL
                                                            (:STRUCT
                                                             NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setEngineHostConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setEngineHostConstraints:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_allowAutoresizingMaskFixupDueToSuperOverridingResizeSubviews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowAutoresizingMaskFixupDueToSuperOverridingResizeSubviews) (NIL
                                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_calculateSubviewAlignmentFrame:superviewAlignmentBounds:forAutoresizingMask:| (thing _ superview-alignment-bounds for-autoresizing-mask)
  (let ((message-lambda 
         (make-message-lambda @(_calculateSubviewAlignmentFrame:superviewAlignmentBounds:forAutoresizingMask:) (((:POINTER
                                                                                                                  (:STRUCT
                                                                                                                   NS::|CGRect|))
                                                                                                                 (:POINTER
                                                                                                                  (:STRUCT
                                                                                                                   NS::|CGRect|))
                                                                                                                 :UNSIGNED-LONG-LONG)
                                                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr superview-alignment-bounds) for-autoresizing-mask)))

(defun NS::|_updateExistingEngineHostConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateExistingEngineHostConstraints) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setContentHuggingPriorities:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setContentHuggingPriorities:) (((:STRUCT
                                                                  NS::|CGSize|))
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setContentCompressionResistancePriorities:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setContentCompressionResistancePriorities:) (((:STRUCT
                                                                                NS::|CGSize|))
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_contentSizeConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_contentSizeConstraints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_makeOrUpdateContentSizeWidthConstraint:heightConstraint:| (thing _ height-constraint)
  (let ((message-lambda 
         (make-message-lambda @(_makeOrUpdateContentSizeWidthConstraint:heightConstraint:) (((:POINTER
                                                                                              :POINTER)
                                                                                             (:POINTER
                                                                                              :POINTER))
                                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr height-constraint))))

(defun NS::|_intrinsicContentSizeInvalidatedForChildView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_intrinsicContentSizeInvalidatedForChildView:) ((:POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_layoutVariablesWithAmbiguousValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutVariablesWithAmbiguousValue) (NIL
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_descendantWithAmbiguousLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_descendantWithAmbiguousLayout) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_findViewPassingTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_findViewPassingTest:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_layoutDebuggingIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutDebuggingIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_descriptionForLayoutTrace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_descriptionForLayoutTrace) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recursiveAutolayoutTraceAtLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveAutolayoutTraceAtLevel:) ((:LONG-LONG)
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|nsli_layoutAnchorForAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_layoutAnchorForAttribute:) ((:LONG-LONG)
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|nsli_canHostIndependentVariableAnchor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_canHostIndependentVariableAnchor) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|nsli_swapContainerForOutgoingConstraint:toIncomingConstraint:| (thing _ to-incoming-constraint)
  (let ((message-lambda 
         (make-message-lambda @(nsli_swapContainerForOutgoingConstraint:toIncomingConstraint:) ((:POINTER
                                                                                                 :POINTER)
                                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-incoming-constraint))))

(defun NS::|_encapsulatesSubtreeLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_encapsulatesSubtreeLayout) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_potentiallyHasDanglyConstraints| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_potentiallyHasDanglyConstraints) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_tryToAddConstraint:roundingAdjustment:mutuallyExclusiveConstraints:| (thing _ rounding-adjustment mutually-exclusive-constraints)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tryToAddConstraint:roundingAdjustment:mutuallyExclusiveConstraints:) ((:POINTER
                                                                                                        :DOUBLE
                                                                                                        (:POINTER
                                                                                                         :POINTER))
                                                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) rounding-adjustment (ns-object-ptr mutually-exclusive-constraints)))) nil t))

(defun NS::|_tryToAddConstraint:mutuallyExclusiveConstraints:| (thing _ mutually-exclusive-constraints)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tryToAddConstraint:mutuallyExclusiveConstraints:) ((:POINTER
                                                                                     (:POINTER
                                                                                      :POINTER))
                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr mutually-exclusive-constraints)))) nil t))

(defun NS::|engine:markerForConstraintToBreakAmongConstraints:| (thing _ marker-for-constraint-to-break-among-constraints)
  (let ((message-lambda 
         (make-message-lambda @(engine:markerForConstraintToBreakAmongConstraints:) ((:POINTER
                                                                                      :POINTER)
                                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr marker-for-constraint-to-break-among-constraints))))

(defun NS::|engine:willBreakConstraint:dueToMutuallyExclusiveConstraints:| (thing _ will-break-constraint due-to-mutually-exclusive-constraints)
  (let ((message-lambda 
         (make-message-lambda @(engine:willBreakConstraint:dueToMutuallyExclusiveConstraints:) ((:POINTER
                                                                                                 :POINTER
                                                                                                 :POINTER)
                                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr will-break-constraint) (ns-object-ptr due-to-mutually-exclusive-constraints))))

(defun NS::|solutionDidChangeInEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(solutionDidChangeInEngine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_autoresizingConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_autoresizingConstraints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateSimpleAutoresizingConstraintsInPlace:forAutoresizingMask:| (thing _ for-autoresizing-mask)
  (let ((message-lambda 
         (make-message-lambda @(_updateSimpleAutoresizingConstraintsInPlace:forAutoresizingMask:) ((:POINTER
                                                                                                    :UNSIGNED-LONG-LONG)
                                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-autoresizing-mask)))

(defun NS::|_intrinsicContentFrameSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_intrinsicContentFrameSize) (NIL
                                                             (:STRUCT
                                                              NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_findControlWithStringValuePrefix:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_findControlWithStringValuePrefix:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_autolayoutTrace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_autolayoutTrace) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|measureMin:max:ideal:| (thing _ max ideal)
  (let ((message-lambda 
         (make-message-lambda @(measureMin:max:ideal:) (((:POINTER
                                                          (:STRUCT
                                                           NS::|CGSize|))
                                                         (:POINTER
                                                          (:STRUCT
                                                           NS::|CGSize|))
                                                         (:POINTER
                                                          (:STRUCT
                                                           NS::|CGSize|)))
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr max) (ns-object-ptr ideal))))

(defun NS::|layoutMarginsGuide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutMarginsGuide) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_safeAreaInsetsForFrame:inSuperview:| (thing _ in-superview)
  (let ((message-lambda 
         (make-message-lambda @(_safeAreaInsetsForFrame:inSuperview:) (((:STRUCT
                                                                         NS::|CGRect|)
                                                                        :POINTER)
                                                                       (:STRUCT
                                                                        NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-superview))))

(defun NS::|_marginsInsetsForSafeAreaInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_marginsInsetsForSafeAreaInsets:) (((:STRUCT
                                                                     NS::|NSEdgeInsets|))
                                                                   (:STRUCT
                                                                    NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setupSafeAreaConstraintsIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setupSafeAreaConstraintsIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setupMarginsConstraintsIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setupMarginsConstraintsIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layoutMargins| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutMargins) (NIL
                                                 (:STRUCT NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setupConstraintsForGuide:withInsets:| (thing _ with-insets)
  (let ((message-lambda 
         (make-message-lambda @(_setupConstraintsForGuide:withInsets:) ((:POINTER
                                                                         (:STRUCT
                                                                          NS::|NSEdgeInsets|))
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) with-insets)))

(defun NS::|safeAreaLayoutGuide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(safeAreaLayoutGuide) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateSafeAreaLayoutGuideConstraintsIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateSafeAreaLayoutGuideConstraintsIfNecessary) (NIL
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateLayoutMarginsGuideConstraintsIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayoutMarginsGuideConstraintsIfNecessary) (NIL
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateConstraintsForGuide:withInsets:| (thing _ with-insets)
  (let ((message-lambda 
         (make-message-lambda @(_updateConstraintsForGuide:withInsets:) ((:POINTER
                                                                          (:STRUCT
                                                                           NS::|NSEdgeInsets|))
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) with-insets)))

(defun NS::|_frameLayoutItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_frameLayoutItem) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|computedSafeAreaInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computedSafeAreaInsets) (NIL
                                                         (:STRUCT
                                                          NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|computedSafeAreaRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computedSafeAreaRect) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recursiveSubConstraintsCountIncludeEncapsulated:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveSubConstraintsCountIncludeEncapsulated:) ((:CHAR)
                                                                                    :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_recursiveConstraintsWithDepth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveConstraintsWithDepth:) ((:LONG-LONG)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_populateRecursiveConstraintIdentifiersWithMapping:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_populateRecursiveConstraintIdentifiersWithMapping:) ((:POINTER)
                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|recursiveConstraintDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(recursiveConstraintDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|recursiveConstraintIdentifierDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(recursiveConstraintIdentifierDescription) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_complainAboutImproperDeclaredConstraintInvalidation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_complainAboutImproperDeclaredConstraintInvalidation) (NIL
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setDeclaredConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDeclaredConstraints:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|declaredLayoutRules| (thing)
  (let ((message-lambda 
         (make-message-lambda @(declaredLayoutRules) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addChildRuleNode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addChildRuleNode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeChildRuleNode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeChildRuleNode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|textLayerShouldEnableFontSmoothing:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(textLayerShouldEnableFontSmoothing:) ((:POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|removeConstraintWithIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeConstraintWithIdentifier:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_wantsConstraintBasedLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsConstraintBasedLayout) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_measureWithTemporaryConstraints:suspendingSystemConstraints:withOptimizedEngineBlock:| (thing _ suspending-system-constraints with-optimized-engine-block)
  (let ((message-lambda 
         (make-message-lambda @(_measureWithTemporaryConstraints:suspendingSystemConstraints:withOptimizedEngineBlock:) ((:POINTER
                                                                                                                          :CHAR
                                                                                                                          :POINTER)
                                                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if suspending-system-constraints 1 0) (ns-object-ptr with-optimized-engine-block))))


(defun NS::|intValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(intValue) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|floatValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(floatValue) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|doubleValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(doubleValue) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|stringValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringValue) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|integerValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(integerValue) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setTarget:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTarget:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|target| (thing)
  (let ((message-lambda 
         (make-message-lambda @(target) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|isEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|action| (thing)
  (let ((message-lambda 
         (make-message-lambda @(action) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTag:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setRepresentedObject:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepresentedObject:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setBaseWritingDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBaseWritingDirection:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAction:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAlignment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAlignment:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|alignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alignment) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|formatter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(formatter) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFormatter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFormatter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|objectValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(objectValue) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setObjectValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setObjectValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setStringValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStringValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|lineBreakMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineBreakMode) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|baseWritingDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(baseWritingDirection) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setLineBreakMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineBreakMode:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|controlSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(controlSize) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setControlSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setControlSize:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))








(defun NS::|setContinuous:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContinuous:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))



(defun NS::|setHighlighted:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHighlighted:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isContinuous| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isContinuous) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|mouseDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|acceptsFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsFirstResponder) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isHighlighted| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHighlighted) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))





(defun NS::|accessibilityHelpStringForChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHelpStringForChild:) ((:POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityIsChildFocusable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsChildFocusable:) ((:POINTER)
                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|accessibilitySetFocus:forChild:| (thing _ for-child)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetFocus:forChild:) ((:POINTER
                                                                   :POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-child))))

(defun NS::|accessibilityPositionOfChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPositionOfChild:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySizeOfChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySizeOfChild:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|accessibilityEnabledAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityEnabledAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsEnabledAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsEnabledAttributeSettable) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|cell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cell) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|setDoubleValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDoubleValue:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_sendActionFrom:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_sendActionFrom:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|setTouchBarInsetMitigation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTouchBarInsetMitigation:) ((:LONG-LONG)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setTouchBarRestingMitigation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTouchBarRestingMitigation:) ((:LONG-LONG)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|touchBarInsetMitigation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBarInsetMitigation) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|touchBarRestingMitigation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBarRestingMitigation) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setMouseTrackingForCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setMouseTrackingForCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|font| (thing)
  (let ((message-lambda 
         (make-message-lambda @(font) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFont:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFont:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|performClick:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performClick:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|attributedStringValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributedStringValue) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|sizeToFit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sizeToFit) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAttributedStringValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAttributedStringValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|becomeKeyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(becomeKeyWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|representedObject| (thing)
  (let ((message-lambda 
         (make-message-lambda @(representedObject) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setIntValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIntValue:) ((:INT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setIntegerValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIntegerValue:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setFloatValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFloatValue:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|sendAction:to:| (thing _ to)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(sendAction:to:) ((:POINTER :POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to)))) nil t))

(defun NS::|setCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|abortEditing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(abortEditing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|updateCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|selectedCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedCell) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_stringSearchParametersForListingViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_stringSearchParametersForListingViews) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|keyDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(keyDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|resignFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(resignFirstResponder) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setRefusesFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRefusesFirstResponder:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|selectCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|resignKeyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignKeyWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldDelegateTargetActionForSelector:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldDelegateTargetActionForSelector:) ((:POINTER)
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|updateCellInside:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateCellInside:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|becomeFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(becomeFirstResponder) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|refusesFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(refusesFirstResponder) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|backgroundStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backgroundStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|drawWithExpansionFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(drawWithExpansionFrame:inView:) (((:STRUCT
                                                                   NS::|CGRect|)
                                                                  :POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))


(defun NS::|getPeriodicDelay:interval:| (thing _ interval)
  (let ((message-lambda 
         (make-message-lambda @(getPeriodicDelay:interval:) (((:POINTER :FLOAT)
                                                              (:POINTER
                                                               :FLOAT))
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr interval))))

(defun NS::|setNextState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setNextState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidateTrackingAreas| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateTrackingAreas) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_inToolbar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_inToolbar) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))




(defun NS::|_hasExtra10_11BordersInToolbars| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasExtra10_11BordersInToolbars) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_insetMitigationTreatment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_insetMitigationTreatment) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|_clearMouseTrackingForCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_clearMouseTrackingForCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_sendActionsForEvents:view:| (thing _ view)
  (let ((message-lambda 
         (make-message-lambda @(_sendActionsForEvents:view:) ((:UNSIGNED-LONG-LONG
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr view))))

(defun NS::|sendActionOnMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sendActionOnMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldSendActionForEventType:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldSendActionForEventType:) ((:UNSIGNED-LONG-LONG)
                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|drawCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|currentEditor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentEditor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|validateEditing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(validateEditing) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|usesSingleLineMode| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesSingleLineMode) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|endEditing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endEditing:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_hitTestForTrackMouseEvent:inRect:ofView:| (thing _ in-rect of-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hitTestForTrackMouseEvent:inRect:ofView:) ((:POINTER
                                                                             (:STRUCT
                                                                              NS::|CGRect|)
                                                                             :POINTER)
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) in-rect (ns-object-ptr of-view)))) nil t))

(defun NS::|_controlStartTrackingAt:inView:| (thing _ in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_controlStartTrackingAt:inView:) (((:STRUCT
                                                                    NS::|CGPoint|)
                                                                   :POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view)))) nil t))

(defun NS::|_controlContinueTracking:at:inView:| (thing _ at in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_controlContinueTracking:at:inView:) (((:STRUCT
                                                                        NS::|CGPoint|)
                                                                       (:STRUCT
                                                                        NS::|CGPoint|)
                                                                       :POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ at (ns-object-ptr in-view)))) nil t))

(defun NS::|_controlStopTracking:at:inView:mouseIsUp:| (thing _ at in-view mouse-is-up)
  (let ((message-lambda 
         (make-message-lambda @(_controlStopTracking:at:inView:mouseIsUp:) (((:STRUCT
                                                                              NS::|CGPoint|)
                                                                             (:STRUCT
                                                                              NS::|CGPoint|)
                                                                             :POINTER
                                                                             :CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ at (ns-object-ptr in-view) (if mouse-is-up 1 0))))

(defun NS::|_controlContinueTrackingPressure:inView:| (thing _ in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_controlContinueTrackingPressure:inView:) ((:POINTER
                                                                            :POINTER)
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-view)))) nil t))

(defun NS::|_controlContinueTrackingPeriodically:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(_controlContinueTrackingPeriodically:inView:) ((:POINTER
                                                                                :POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-view))))

(defun NS::|_inSendAction| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_inSendAction) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setInSendAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setInSendAction:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|sendActionOn:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sendActionOn:) ((:UNSIGNED-LONG-LONG)
                                                :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|takeIntValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeIntValueFrom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|takeIntegerValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeIntegerValueFrom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|takeFloatValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeFloatValueFrom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|takeDoubleValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeDoubleValueFrom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|takeStringValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeStringValueFrom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|takeObjectValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeObjectValueFrom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setUsesSingleLineMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesSingleLineMode:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|mouseDownFlags| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mouseDownFlags) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_validateEditing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_validateEditing:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|setNeedsDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplay) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|touchesBeganWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesBeganWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|touchesMovedWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesMovedWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|touchesEndedWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesEndedWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|touchesCancelledWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesCancelledWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAllowsExpansionToolTips:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsExpansionToolTips:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_preferredLayerContentsRedrawPolicy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_preferredLayerContentsRedrawPolicy) (NIL
                                                                      :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_commonEarlyInit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_commonEarlyInit) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_commonControlInit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_commonControlInit) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_transferStateToCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_transferStateToCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|allowsLogicalLayoutDirection| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsLogicalLayoutDirection) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|allowsExpansionToolTips| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsExpansionToolTips) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_controlModel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_controlModel) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldAutoflipUnarchivedProperties| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldAutoflipUnarchivedProperties) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_shouldUseCellUserInterfaceLayoutDirection| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldUseCellUserInterfaceLayoutDirection) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_removeAllCellMouseTracking| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeAllCellMouseTracking) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_becomeCellBasedWithReason:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_becomeCellBasedWithReason:) ((:LONG-LONG)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_invalidateTextAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateTextAttributes) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidateCachedParagraphStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateCachedParagraphStyle) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_currentParagraphStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentParagraphStyle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_currentForegroundColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentForegroundColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_shouldShowFirstResponderForCell:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldShowFirstResponderForCell:) ((:POINTER)
                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))


(defun NS::|_setsMaxLayoutWidthAtFirstLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_setsMaxLayoutWidthAtFirstLayout) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setHasSetMaxLayoutWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setHasSetMaxLayoutWidth:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_shouldTrackMouseWithEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldTrackMouseWithEvent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_rightMouseUpOrDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_rightMouseUpOrDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_startTrackingAt:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_startTrackingAt:) (((:STRUCT NS::|CGPoint|))
                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_continueTrackingFromPoint:toPoint:| (thing _ to-point)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_continueTrackingFromPoint:toPoint:) (((:STRUCT
                                                                        NS::|CGPoint|)
                                                                       (:STRUCT
                                                                        NS::|CGPoint|))
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ to-point))) nil t))

(defun NS::|_stopTrackingFromPoint:endingAtPoint:| (thing _ ending-at-point)
  (let ((message-lambda 
         (make-message-lambda @(_stopTrackingFromPoint:endingAtPoint:) (((:STRUCT
                                                                          NS::|CGPoint|)
                                                                         (:STRUCT
                                                                          NS::|CGPoint|))
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ ending-at-point)))

(defun NS::|_continueTrackingWithPeriodicEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_continueTrackingWithPeriodicEvent:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_continueTrackingWithPressureEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_continueTrackingWithPressureEvent:) ((:POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|keyUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(keyUp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_fieldEditor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fieldEditor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_autoCancelIfTouchTooLong:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_autoCancelIfTouchTooLong:) (((:POINTER
                                                               :POINTER))
                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_touchCancelled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_touchCancelled:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_continueBeginTouch:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_continueBeginTouch:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_touchEnded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_touchEnded:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_controlValueDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_controlValueDidChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityPostNotification:context:| (thing _ context)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPostNotification:context:) ((:POINTER
                                                                          :POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr context))))

(defun NS::|_currentTextAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentTextAttributes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|textView:willChangeSelectionFromCharacterRange:toCharacterRange:| (thing _ will-change-selection-from-character-range to-character-range)
  (let ((message-lambda 
         (make-message-lambda @(textView:willChangeSelectionFromCharacterRange:toCharacterRange:) ((:POINTER
                                                                                                    (:STRUCT
                                                                                                     NS::|_NSRange|)
                                                                                                    (:STRUCT
                                                                                                     NS::|_NSRange|))
                                                                                                   (:STRUCT
                                                                                                    NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) will-change-selection-from-character-range to-character-range)))

(defun NS::|setFloatingPointFormat:left:right:| (thing _ left right)
  (let ((message-lambda 
         (make-message-lambda @(setFloatingPointFormat:left:right:) ((:CHAR
                                                                      :UNSIGNED-LONG-LONG
                                                                      :UNSIGNED-LONG-LONG)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) left right)))

(defun NS::|setAllowsLogicalLayoutDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsLogicalLayoutDirection:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|cellIfExists| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cellIfExists) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|selectedTag| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedTag) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|sizeThatFits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sizeThatFits:) (((:STRUCT NS::|CGSize|))
                                                (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setSetsMaxLayoutWidthAtFirstLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSetsMaxLayoutWidthAtFirstLayout:) ((:CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_hasSetMaxLayoutWidth| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasSetMaxLayoutWidth) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_resetMaxLayoutWidthAtNextLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetMaxLayoutWidthAtNextLayout) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|ignoresMultiClick| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ignoresMultiClick) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setIgnoresMultiClick:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIgnoresMultiClick:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_restingMitigationTreatment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_restingMitigationTreatment) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|skipEditValidation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(skipEditValidation) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setSkipEditValidation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSkipEditValidation:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|editWithFrame:editor:delegate:event:| (thing _ editor delegate event)
  (let ((message-lambda 
         (make-message-lambda @(editWithFrame:editor:delegate:event:) (((:STRUCT
                                                                         NS::|CGRect|)
                                                                        :POINTER
                                                                        :POINTER
                                                                        :POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr editor) (ns-object-ptr delegate) (ns-object-ptr event))))

(defun NS::|selectWithFrame:editor:delegate:start:length:| (thing _ editor delegate start length)
  (let ((message-lambda 
         (make-message-lambda @(selectWithFrame:editor:delegate:start:length:) (((:STRUCT
                                                                                  NS::|CGRect|)
                                                                                 :POINTER
                                                                                 :POINTER
                                                                                 :LONG-LONG
                                                                                 :LONG-LONG)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr editor) (ns-object-ptr delegate) start length)))

(defun NS::|_hasEditableCell| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasEditableCell) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|textViewDidChangeSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(textViewDidChangeSelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setControlTextDelegateFromOld:toNew:| (thing _ to-new)
  (let ((message-lambda 
         (make-message-lambda @(_setControlTextDelegateFromOld:toNew:) ((:POINTER
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-new))))

(defun NS::|calcSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(calcSize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateCellImage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateCellImage:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|drawCellInside:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawCellInside:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|expansionFrameWithFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(expansionFrameWithFrame:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           (:STRUCT
                                                            NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_addControlTargetAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addControlTargetAction:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_allTargetActions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_allTargetActions) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|addTarget:action:forControlEvents:| (thing _ action for-control-events)
  (let ((message-lambda 
         (make-message-lambda @(addTarget:action:forControlEvents:) ((:POINTER
                                                                      :POINTER
                                                                      :UNSIGNED-LONG-LONG)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr action) for-control-events)))

(defun NS::|removeTarget:action:forControlEvents:| (thing _ action for-control-events)
  (let ((message-lambda 
         (make-message-lambda @(removeTarget:action:forControlEvents:) ((:POINTER
                                                                         :POINTER
                                                                         :UNSIGNED-LONG-LONG)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr action) for-control-events)))









(defun NS::|compare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(compare:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))





(defun NS::|state| (thing)
  (let ((message-lambda 
         (make-message-lambda @(state) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|setType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setType:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))






(defun NS::|setState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setState:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))



(defun NS::|setImage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setImage:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))





(defun NS::|setTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|keyEquivalent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyEquivalent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|image| (thing)
  (let ((message-lambda 
         (make-message-lambda @(image) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))




(defun NS::|_contents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_contents) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))




(defun NS::|title| (thing)
  (let ((message-lambda 
         (make-message-lambda @(title) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))









(defun NS::|setAccessibilitySubrole:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySubrole:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setDrawsBackground:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawsBackground:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))




(defun NS::|accessibilitySubrole| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySubrole) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityDecrementButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDecrementButton) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIncrementButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIncrementButton) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|accessibilityChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChildren) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|accessibilityRole| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRole) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityLabel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLabel) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIndex| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIndex) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|accessibilityCustomActions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCustomActions) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))





(defun NS::|accessibilityChildrenInNavigationOrder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChildrenInNavigationOrder) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|controlView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(controlView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isAccessibilityElement| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityElement) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|accessibilityRowCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRowCount) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityVisibleChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleChildren) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityRoleDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRoleDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityColumnCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumnCount) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilitySelectedChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedChildren) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySelectedChildren:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedChildren:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySelectedCells| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedCells) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))
































(defun NS::|_coreUIWidgetName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_coreUIWidgetName) (NIL
                                                    (:POINTER
                                                     (:STRUCT
                                                      NS::|__CFString|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_bezelPresentationStateInView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_bezelPresentationStateInView:) ((:POINTER)
                                                                 :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_backingScaleFactorForDrawingInView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_backingScaleFactorForDrawingInView:) ((:POINTER)
                                                                       :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setMouseTrackingInRect:ofView:| (thing _ of-view)
  (let ((message-lambda 
         (make-message-lambda @(_setMouseTrackingInRect:ofView:) (((:STRUCT
                                                                    NS::|CGRect|)
                                                                   :POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr of-view))))

(defun NS::|mouseEntered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseEntered:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|mouseExited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseExited:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityTitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTitle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityElementWithParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityElementWithParent:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))




(defun NS::|setControlView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setControlView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_invalidateCachedControlContentStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateCachedControlContentStyle) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|interiorBackgroundStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(interiorBackgroundStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|textAlignmentPolicy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textAlignmentPolicy) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|titleRectForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(titleRectForBounds:) (((:STRUCT NS::|CGRect|))
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_needRedrawOnWindowChangedKeyState| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_needRedrawOnWindowChangedKeyState) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityLabel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityLabel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|isBordered| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isBordered) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setBordered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBordered:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|cellSizeForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cellSizeForBounds:) (((:STRUCT NS::|CGRect|))
                                                     (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setControlTint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setControlTint:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|setAllowsEditingTextAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsEditingTextAttributes:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|accessibilityPostNotification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPostNotification:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|isAccessibilityFocused| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityFocused) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityLayoutPointForScreenPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLayoutPointForScreenPoint:) (((:STRUCT
                                                                            NS::|CGPoint|))
                                                                          (:STRUCT
                                                                           NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityLayoutSizeForScreenSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLayoutSizeForScreenSize:) (((:STRUCT
                                                                          NS::|CGSize|))
                                                                        (:STRUCT
                                                                         NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityScreenPointForLayoutPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityScreenPointForLayoutPoint:) (((:STRUCT
                                                                            NS::|CGPoint|))
                                                                          (:STRUCT
                                                                           NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityScreenSizeForLayoutSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityScreenSizeForLayoutSize:) (((:STRUCT
                                                                          NS::|CGSize|))
                                                                        (:STRUCT
                                                                         NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityCellForColumn:row:| (thing _ row)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCellForColumn:row:) ((:LONG-LONG
                                                                   :LONG-LONG)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ row)))

(defun NS::|accessibilityAttributedStringForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributedStringForRange:) (((:STRUCT
                                                                           NS::|_NSRange|))
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityRangeForLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForLine:) ((:LONG-LONG)
                                                             (:STRUCT
                                                              NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityStringForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityStringForRange:) (((:STRUCT
                                                                 NS::|_NSRange|))
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityRangeForPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForPosition:) (((:STRUCT
                                                                   NS::|CGPoint|))
                                                                 (:STRUCT
                                                                  NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityRangeForIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForIndex:) ((:LONG-LONG)
                                                              (:STRUCT
                                                               NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityFrameForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFrameForRange:) (((:STRUCT
                                                                NS::|_NSRange|))
                                                              (:STRUCT
                                                               NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityRTFForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRTFForRange:) (((:STRUCT
                                                              NS::|_NSRange|))
                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityStyleRangeForIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityStyleRangeForIndex:) ((:LONG-LONG)
                                                                   (:STRUCT
                                                                    NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityLineForIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLineForIndex:) ((:LONG-LONG)
                                                             :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityPerformCancel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformCancel) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityPerformConfirm| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformConfirm) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityPerformDecrement| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformDecrement) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityPerformDelete| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformDelete) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityPerformIncrement| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformIncrement) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityPerformPick| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformPick) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityPerformPress| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformPress) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityPerformRaise| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformRaise) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityPerformShowAlternateUI| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformShowAlternateUI) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityPerformShowDefaultUI| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformShowDefaultUI) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityPerformShowMenu| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformShowMenu) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isAccessibilitySelectorAllowed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilitySelectorAllowed:) ((:POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|setAccessibilityElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityElement:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setAccessibilityFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFrame:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAccessibilityFocused:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFocused:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityActivationPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityActivationPoint) (NIL
                                                               (:STRUCT
                                                                NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityActivationPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityActivationPoint:) (((:STRUCT
                                                                     NS::|CGPoint|))
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityTopLevelUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTopLevelUIElement) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityTopLevelUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityTopLevelUIElement:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityURL:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityURL:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityValue) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityValueDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityValueDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityValueDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityValueDescription:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAccessibilityVisibleChildren:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleChildren:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAccessibilityTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityTitle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityTitleUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTitleUIElement) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityTitleUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityTitleUIElement:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityNextContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityNextContents) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityNextContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityNextContents:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityOrientation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityOrientation) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityOrientation:) ((:LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityOverflowButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityOverflowButton) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityOverflowButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityOverflowButton:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAccessibilityParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityParent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityPlaceholderValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPlaceholderValue) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityPlaceholderValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityPlaceholderValue:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityPreviousContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPreviousContents) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityPreviousContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityPreviousContents:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAccessibilityRole:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRole:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAccessibilityRoleDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRoleDescription:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySearchButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySearchButton) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySearchButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySearchButton:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySearchMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySearchMenu) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySearchMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySearchMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilitySelected| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilitySelected) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilitySelected:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelected:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityServesAsTitleForUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityServesAsTitleForUIElements) (NIL
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityServesAsTitleForUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityServesAsTitleForUIElements:) ((:POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityShownMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityShownMenu) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityShownMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityShownMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityMinValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinValue) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityMinValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMinValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityMaxValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMaxValue) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityMaxValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMaxValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityLinkedUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLinkedUIElements) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityLinkedUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityLinkedUIElements:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAccessibilityIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityIdentifier:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityHelp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHelp) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityHelp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHelp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityFilename| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFilename) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityFilename:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFilename:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityExpanded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityExpanded) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityExpanded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityExpanded:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isAccessibilityEdited| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEdited) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityEdited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEdited:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isAccessibilityEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setAccessibilityChildren:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityChildren:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAccessibilityChildrenInNavigationOrder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityChildrenInNavigationOrder:) ((:POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityClearButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityClearButton) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityClearButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityClearButton:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityCancelButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCancelButton) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityCancelButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCancelButton:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityProtectedContent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityProtectedContent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityProtectedContent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityProtectedContent:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContents) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityContents:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityAlternateUIVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityAlternateUIVisible) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityAlternateUIVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAlternateUIVisible:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilitySharedFocusElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedFocusElements) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySharedFocusElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySharedFocusElements:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityRequired| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityRequired) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityRequired:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRequired:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityCustomRotors| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCustomRotors) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityCustomRotors:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCustomRotors:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityApplicationFocusedUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityApplicationFocusedUIElement) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityApplicationFocusedUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityApplicationFocusedUIElement:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityMainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMainWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityMainWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMainWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityHidden) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHidden:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isAccessibilityFrontmost| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityFrontmost) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityFrontmost:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFrontmost:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityFocusedWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityFocusedWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFocusedWindow:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityWindows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityWindows:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityExtrasMenuBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityExtrasMenuBar) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityExtrasMenuBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityExtrasMenuBar:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityMenuBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMenuBar) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityMenuBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMenuBar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityColumnTitles| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumnTitles) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityColumnTitles:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumnTitles:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityOrderedByRow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityOrderedByRow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityOrderedByRow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityOrderedByRow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityHorizontalUnits| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalUnits) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityHorizontalUnits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHorizontalUnits:) ((:LONG-LONG)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityVerticalUnits| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalUnits) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityVerticalUnits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVerticalUnits:) ((:LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityHorizontalUnitDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalUnitDescription) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityHorizontalUnitDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHorizontalUnitDescription:) ((:POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityVerticalUnitDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalUnitDescription) (NIL
                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityVerticalUnitDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVerticalUnitDescription:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityHandles| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHandles) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityHandles:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHandles:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityWarningValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWarningValue) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityWarningValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityWarningValue:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityCriticalValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCriticalValue) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityCriticalValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCriticalValue:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityDisclosed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityDisclosed) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityDisclosed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDisclosed:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityDisclosedByRow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDisclosedByRow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityDisclosedByRow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDisclosedByRow:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityDisclosedRows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDisclosedRows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityDisclosedRows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDisclosedRows:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityDisclosureLevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDisclosureLevel) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityDisclosureLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDisclosureLevel:) ((:LONG-LONG)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityMarkerUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerUIElements) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityMarkerUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMarkerUIElements:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityMarkerValues| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerValues) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityMarkerValues:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMarkerValues:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityMarkerGroupUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerGroupUIElement) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityMarkerGroupUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMarkerGroupUIElement:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityUnits| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUnits) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityUnits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityUnits:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityUnitDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUnitDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityUnitDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityUnitDescription:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityRulerMarkerType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRulerMarkerType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityRulerMarkerType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRulerMarkerType:) ((:LONG-LONG)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityMarkerTypeDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerTypeDescription) (NIL
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityMarkerTypeDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMarkerTypeDescription:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityHorizontalScrollBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalScrollBar) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityHorizontalScrollBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHorizontalScrollBar:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityVerticalScrollBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalScrollBar) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityVerticalScrollBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVerticalScrollBar:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityAllowedValues| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAllowedValues) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityAllowedValues:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAllowedValues:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityLabelUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLabelUIElements) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityLabelUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityLabelUIElements:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityLabelValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLabelValue) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityLabelValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityLabelValue:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilitySplitters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySplitters) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySplitters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySplitters:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAccessibilityDecrementButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDecrementButton:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAccessibilityIncrementButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityIncrementButton:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityTabs| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTabs) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityTabs:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityTabs:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityHeader| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHeader) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityHeader:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHeader:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAccessibilityColumnCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumnCount:) ((:LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAccessibilityRowCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRowCount:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAccessibilityIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityIndex:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityColumns| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumns) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityColumns:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumns:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityRows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityRows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRows:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityVisibleRows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleRows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityVisibleRows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleRows:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySelectedRows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedRows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySelectedRows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedRows:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityVisibleColumns| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleColumns) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityVisibleColumns:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleColumns:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySelectedColumns| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedColumns) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySelectedColumns:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedColumns:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySortDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySortDirection) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySortDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySortDirection:) ((:LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityRowHeaderUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRowHeaderUIElements) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityRowHeaderUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRowHeaderUIElements:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAccessibilitySelectedCells:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedCells:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityVisibleCells| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleCells) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityVisibleCells:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleCells:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityColumnHeaderUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumnHeaderUIElements) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityColumnHeaderUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumnHeaderUIElements:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityRowIndexRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRowIndexRange) (NIL
                                                             (:STRUCT
                                                              NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityRowIndexRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRowIndexRange:) (((:STRUCT
                                                                   NS::|_NSRange|))
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityColumnIndexRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumnIndexRange) (NIL
                                                                (:STRUCT
                                                                 NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityColumnIndexRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumnIndexRange:) (((:STRUCT
                                                                      NS::|_NSRange|))
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityInsertionPointLineNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityInsertionPointLineNumber) (NIL
                                                                        :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityInsertionPointLineNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityInsertionPointLineNumber:) ((:LONG-LONG)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilitySharedCharacterRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedCharacterRange) (NIL
                                                                    (:STRUCT
                                                                     NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySharedCharacterRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySharedCharacterRange:) (((:STRUCT
                                                                          NS::|_NSRange|))
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilitySharedTextUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedTextUIElements) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySharedTextUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySharedTextUIElements:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityVisibleCharacterRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleCharacterRange) (NIL
                                                                     (:STRUCT
                                                                      NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityVisibleCharacterRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleCharacterRange:) (((:STRUCT
                                                                           NS::|_NSRange|))
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityNumberOfCharacters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityNumberOfCharacters) (NIL
                                                                  :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityNumberOfCharacters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityNumberOfCharacters:) ((:LONG-LONG)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilitySelectedText| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedText) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySelectedText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedText:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySelectedTextRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextRange) (NIL
                                                                 (:STRUCT
                                                                  NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySelectedTextRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedTextRange:) (((:STRUCT
                                                                       NS::|_NSRange|))
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilitySelectedTextRanges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextRanges) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySelectedTextRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedTextRanges:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityToolbarButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityToolbarButton) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityToolbarButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityToolbarButton:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityModal) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityModal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityModal:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityProxy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityProxy) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityProxy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityProxy:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityMain| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMain) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityMain:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMain:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityFullScreenButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFullScreenButton) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityFullScreenButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFullScreenButton:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityGrowArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityGrowArea) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityGrowArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityGrowArea:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDocument) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDocument:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityDefaultButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDefaultButton) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityDefaultButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDefaultButton:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityCloseButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCloseButton) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityCloseButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCloseButton:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityZoomButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityZoomButton) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityZoomButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityZoomButton:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityMinimizeButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinimizeButton) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityMinimizeButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMinimizeButton:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityMinimized| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMinimized) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityMinimized:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMinimized:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setAccessibilityCustomActions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCustomActions:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))




(defun NS::|isEditable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEditable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))





(defun NS::|accessibilityValueAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityValueAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsValueAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsValueAttributeSettable) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySetValueAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetValueAttribute:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|initTextCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initTextCell:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|cellSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cellSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|drawWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(drawWithFrame:inView:) (((:STRUCT NS::|CGRect|)
                                                         :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|setEditable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEditable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setSelectable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setTitleWithMnemonic:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleWithMnemonic:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|hitTestForEvent:inRect:ofView:| (thing _ in-rect of-view)
  (let ((message-lambda 
         (make-message-lambda @(hitTestForEvent:inRect:ofView:) ((:POINTER
                                                                  (:STRUCT
                                                                   NS::|CGRect|)
                                                                  :POINTER)
                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) in-rect (ns-object-ptr of-view))))


(defun NS::|highlight:withFrame:inView:| (thing _ with-frame in-view)
  (let ((message-lambda 
         (make-message-lambda @(highlight:withFrame:inView:) ((:CHAR
                                                               (:STRUCT
                                                                NS::|CGRect|)
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) with-frame (ns-object-ptr in-view))))


(defun NS::|drawsBackground| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsBackground) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|setBezeled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBezeled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setWraps:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWraps:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|_usingAlternateHighlightColorWithFrame:inView:| (thing _ in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_usingAlternateHighlightColorWithFrame:inView:) (((:STRUCT
                                                                                   NS::|CGRect|)
                                                                                  :POINTER)
                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view)))) nil t))

(defun NS::|initImageCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initImageCell:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_drawHighlightWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(_drawHighlightWithFrame:inView:) (((:STRUCT
                                                                    NS::|CGRect|)
                                                                   :POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|drawInteriorWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(drawInteriorWithFrame:inView:) (((:STRUCT
                                                                  NS::|CGRect|)
                                                                 :POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|setBackgroundStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackgroundStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|imageRectForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(imageRectForBounds:) (((:STRUCT NS::|CGRect|))
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_defaultImageHints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_defaultImageHints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lineBreakMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lineBreakMode) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setLineBreakMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setLineBreakMode:) ((:UNSIGNED-LONG-LONG)
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|highlightColorWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(highlightColorWithFrame:inView:) (((:STRUCT
                                                                    NS::|CGRect|)
                                                                   :POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|expansionFrameWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(expansionFrameWithFrame:inView:) (((:STRUCT
                                                                    NS::|CGRect|)
                                                                   :POINTER)
                                                                  (:STRUCT
                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))



(defun NS::|allowsMixedState| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsMixedState) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAllowsMixedState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsMixedState:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|setShowsFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsFirstResponder:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|drawFocusRingMaskWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(drawFocusRingMaskWithFrame:inView:) (((:STRUCT
                                                                       NS::|CGRect|)
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|_effectiveContentStyleForTextInView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveContentStyleForTextInView:) ((:POINTER)
                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|updateTrackingAreaWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(updateTrackingAreaWithFrame:inView:) (((:STRUCT
                                                                        NS::|CGRect|)
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|_setMouseDownFlags:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setMouseDownFlags:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_minimumPressDuration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_minimumPressDuration) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|mnemonic| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mnemonic) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasAttributedStringValue| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasAttributedStringValue) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_textAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_textAttributes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|drawingRectForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawingRectForBounds:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_convertToText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_convertToText:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_autoflipUnarchivedProperties| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_autoflipUnarchivedProperties) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_formatObjectValue:invalid:| (thing _ invalid)
  (let ((message-lambda 
         (make-message-lambda @(_formatObjectValue:invalid:) ((:POINTER :CHAR)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if invalid 1 0))))

(defun NS::|_shouldSetHighlightToFlag:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldSetHighlightToFlag:) ((:CHAR) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0)))) nil t))

(defun NS::|_unformattedAttributedStringValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_unformattedAttributedStringValue:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_defaultFont| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_defaultFont) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setTextAttributeParaStyleNeedsRecalc| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setTextAttributeParaStyleNeedsRecalc) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nextState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nextState) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setNeedsStateUpdate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsStateUpdate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_effectiveFont| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveFont) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setScrollable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_effectiveContentStyleForImageInView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveContentStyleForImageInView:) ((:POINTER)
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_controlContentStyleInView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_controlContentStyleInView:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateControlContentStyle:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(_updateControlContentStyle:inView:) ((:POINTER
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-view))))

(defun NS::|_contentBacking| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_contentBacking) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_interiorContentPresentationStateInView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_interiorContentPresentationStateInView:) ((:POINTER)
                                                                           :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_allowsStyledTextForColor:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsStyledTextForColor:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_shouldUseStyledTextInView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldUseStyledTextInView:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_customForegroundColorInTitle:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_customForegroundColorInTitle:) ((:POINTER)
                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_interiorContentValueInView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_interiorContentValueInView:) ((:POINTER)
                                                               :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_interiorContentStateInView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_interiorContentStateInView:) ((:POINTER)
                                                               :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_initialBackgroundStyleCompatibilityGuessIgnoringExternalContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_initialBackgroundStyleCompatibilityGuessIgnoringExternalContext) (NIL
                                                                                                   :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateInvalidatedObjectValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateInvalidatedObjectValue:) ((:POINTER)
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_beginVibrantBlendGroupIfNecessaryForControlView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_beginVibrantBlendGroupIfNecessaryForControlView:) ((:POINTER)
                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_endVibrantBlendGroup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endVibrantBlendGroup) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_allowsTextTighteningInView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsTextTighteningInView:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|isBezeled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isBezeled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|trackMouse:inRect:ofView:untilMouseUp:| (thing _ in-rect of-view until-mouse-up)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(trackMouse:inRect:ofView:untilMouseUp:) ((:POINTER
                                                                          (:STRUCT
                                                                           NS::|CGRect|)
                                                                          :POINTER
                                                                          :CHAR)
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) in-rect (ns-object-ptr of-view) (if until-mouse-up 1 0)))) nil t))

(defun NS::|startTrackingAt:inView:| (thing _ in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(startTrackingAt:inView:) (((:STRUCT
                                                            NS::|CGPoint|)
                                                           :POINTER)
                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view)))) nil t))

(defun NS::|continueTracking:at:inView:| (thing _ at in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(continueTracking:at:inView:) (((:STRUCT
                                                                NS::|CGPoint|)
                                                               (:STRUCT
                                                                NS::|CGPoint|)
                                                               :POINTER)
                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ at (ns-object-ptr in-view)))) nil t))

(defun NS::|_hasTrackingGestureOverride| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasTrackingGestureOverride) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_clearMouseTracking| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_clearMouseTracking) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|touchEndedAt:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchEndedAt:inView:) (((:STRUCT NS::|CGPoint|)
                                                        :POINTER)
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|_useHitTestInTrackMouse| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_useHitTestInTrackMouse) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hasGuardedBehavior| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasGuardedBehavior) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))




(defun NS::|_hasAppearanceTextEffectsWithAttributedString:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasAppearanceTextEffectsWithAttributedString:) ((:POINTER)
                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_controlViewDidChangeEffectiveAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_controlViewDidChangeEffectiveAppearance:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|wantsUpdateLayerInView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsUpdateLayerInView:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|updateLayerWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(updateLayerWithFrame:inView:) (((:STRUCT
                                                                 NS::|CGRect|)
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|layoutLayerWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(layoutLayerWithFrame:inView:) (((:STRUCT
                                                                 NS::|CGRect|)
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|_vibrancyBlendModeForControlView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_vibrancyBlendModeForControlView:) ((:POINTER)
                                                                    :INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|focusRingMaskBoundsForFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(focusRingMaskBoundsForFrame:inView:) (((:STRUCT
                                                                        NS::|CGRect|)
                                                                       :POINTER)
                                                                      (:STRUCT
                                                                       NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|continueTrackingGesture:inView:| (thing _ in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(continueTrackingGesture:inView:) ((:POINTER
                                                                   :POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-view)))) nil t))

(defun NS::|stopTracking:at:inView:mouseIsUp:| (thing _ at in-view mouse-is-up)
  (let ((message-lambda 
         (make-message-lambda @(stopTracking:at:inView:mouseIsUp:) (((:STRUCT
                                                                      NS::|CGPoint|)
                                                                     (:STRUCT
                                                                      NS::|CGPoint|)
                                                                     :POINTER
                                                                     :CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ at (ns-object-ptr in-view) (if mouse-is-up 1 0))))

(defun NS::|_pressureConfigurationIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_pressureConfigurationIfNeeded) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowChangedKeyStateWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(_windowChangedKeyStateWithFrame:inView:) (((:STRUCT
                                                                            NS::|CGRect|)
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|cellAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cellAttribute:) ((:UNSIGNED-LONG-LONG)
                                                 :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setCellAttribute:to:| (thing _ to)
  (let ((message-lambda 
         (make-message-lambda @(setCellAttribute:to:) ((:UNSIGNED-LONG-LONG
                                                        :LONG-LONG)
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ to)))

(defun NS::|_setContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setContents:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setImageInterpolation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setImageInterpolation:) ((:UNSIGNED-LONG-LONG)
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|imageInterpolation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(imageInterpolation) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_stringDrawingContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_stringDrawingContext) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_clearAttributedStringCache| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_clearAttributedStringCache) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cell_setRefusesFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cell_setRefusesFirstResponder:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_cell_isEditable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_cell_isEditable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_restartEditingWithTextView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_restartEditingWithTextView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|wraps| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wraps) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_stringForEditing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_stringForEditing) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_objectValue:forString:errorDescription:| (thing _ for-string error-description)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_objectValue:forString:errorDescription:) (((:POINTER
                                                                             :POINTER)
                                                                            :POINTER
                                                                            (:POINTER
                                                                             :POINTER))
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-string) (ns-object-ptr error-description)))) nil t))

(defun NS::|_isEditingTextView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isEditingTextView:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_skipsSynchronizationForEditingTextView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_skipsSynchronizationForEditingTextView:) ((:POINTER)
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_synchronizeTextView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_synchronizeTextView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shouldRedrawOnIdenticalObjectValueChanges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldRedrawOnIdenticalObjectValueChanges) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_textAttributesWithInteriorBackgroundStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_textAttributesWithInteriorBackgroundStyle:) ((:LONG-LONG)
                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_textDimsWhenDisabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_textDimsWhenDisabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_lineBreakStrategyForCurrentConfiguration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lineBreakStrategyForCurrentConfiguration) (NIL
                                                                            :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setCurrentlyEditing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCurrentlyEditing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|allowsEditingTextAttributes| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsEditingTextAttributes) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|allowsEditingTokens| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsEditingTokens) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setCachedAttributedStringValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCachedAttributedStringValue:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cachedAttributedStringWithGeneration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cachedAttributedStringWithGeneration:) ((:LONG-LONG)
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_attributedStringValue:invalid:| (thing _ invalid)
  (let ((message-lambda 
         (make-message-lambda @(_attributedStringValue:invalid:) ((:POINTER
                                                                   :CHAR)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if invalid 1 0))))

(defun NS::|_canCacheAttributedStringValue| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canCacheAttributedStringValue) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_objectValue:forString:| (thing _ for-string)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_objectValue:forString:) (((:POINTER :POINTER)
                                                           :POINTER)
                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-string)))) nil t))


(defun NS::|_integerValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_integerValue) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setIntegerValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIntegerValue:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_typesetterBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_typesetterBehavior) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_delegateValidation:object:uiHandled:| (thing _ object ui-handled)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_delegateValidation:object:uiHandled:) ((:POINTER
                                                                         :POINTER
                                                                         (:POINTER
                                                                          :CHAR))
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr object) (ns-object-ptr ui-handled)))) nil t))

(defun NS::|allowsUndo| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsUndo) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_isButtonTitleCell| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isButtonTitleCell) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|truncatesLastVisibleLine| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(truncatesLastVisibleLine) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isScrollable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isScrollable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|titleTextContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titleTextContainer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|cachesLineRef| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(cachesLineRef) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_cachedLineRef| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cachedLineRef) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setCachedLineRef:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCachedLineRef:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shouldUseStyledTextInView:withBackgroundStyle:| (thing _ with-background-style)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldUseStyledTextInView:withBackgroundStyle:) ((:POINTER
                                                                                   :LONG-LONG)
                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) with-background-style))) nil t))

(defun NS::|_placeholderAttributedString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_placeholderAttributedString) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_styleEffectContentStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_styleEffectContentStyle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setCachedControlContentStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCachedControlContentStyle:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_effectiveContentStyleForCellInView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveContentStyleForCellInView:) ((:POINTER)
                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_displaySomeWindowsIfNeeded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_displaySomeWindowsIfNeeded:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setTrackingTouch:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTrackingTouch:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_touchContinuousTimer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_touchContinuousTimer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_trackingTouch| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_trackingTouch) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|continueTrackingPeriodicEvent:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(continueTrackingPeriodicEvent:inView:) ((:POINTER
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-view))))

(defun NS::|_setTouchContinuousTimer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTouchContinuousTimer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|cancelTrackingAt:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(cancelTrackingAt:inView:) (((:STRUCT
                                                             NS::|CGPoint|)
                                                            :POINTER)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|_setEditingTextView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setEditingTextView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_centerInnerBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_centerInnerBounds:) (((:STRUCT NS::|CGRect|))
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|_selectOrEdit:inView:target:editor:event:start:end:| (thing _ in-view target editor event start end)
  (let ((message-lambda 
         (make-message-lambda @(_selectOrEdit:inView:target:editor:event:start:end:) (((:POINTER
                                                                                        (:STRUCT
                                                                                         NS::|CGRect|))
                                                                                       :POINTER
                                                                                       :POINTER
                                                                                       :POINTER
                                                                                       :POINTER
                                                                                       :LONG-LONG
                                                                                       :LONG-LONG)
                                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-view) (ns-object-ptr target) (ns-object-ptr editor) (ns-object-ptr event) start end)))

(defun NS::|_clearEditingTextView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_clearEditingTextView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|fieldEditorTextContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fieldEditorTextContainer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_maybeSwapSystemFontForFont:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_maybeSwapSystemFontForFont:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isSelectable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSelectable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_setNeedsHighlightedTextHint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsHighlightedTextHint:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_drawCellForDragWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(_drawCellForDragWithFrame:inView:) (((:STRUCT
                                                                      NS::|CGRect|)
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|_imageComponentIfNonEmptyImagePortion:rect:key:| (thing _ rect key)
  (let ((message-lambda 
         (make-message-lambda @(_imageComponentIfNonEmptyImagePortion:rect:key:) ((:POINTER
                                                                                   (:STRUCT
                                                                                    NS::|CGRect|)
                                                                                   :POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) rect (ns-object-ptr key))))

(defun NS::|styleEffectConfiguration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(styleEffectConfiguration) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))









(defun NS::|_prefersTrackingWhenDisabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_prefersTrackingWhenDisabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_setAcceptsFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAcceptsFirstResponder:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setHorizontallyCentered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setHorizontallyCentered:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setVerticallyCentered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setVerticallyCentered:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|_invalidateObjectValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateObjectValue) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|hasValidObjectValue| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasValidObjectValue) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAllowsUndo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsUndo:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_attributedStringForEditing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_attributedStringForEditing) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cachedAttributedStringValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cachedAttributedStringValue) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|showsFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsFirstResponder) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|importsGraphics| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(importsGraphics) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setImportsGraphics:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setImportsGraphics:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|allowsDefaultTighteningForTruncation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsDefaultTighteningForTruncation) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAllowsDefaultTighteningForTruncation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsDefaultTighteningForTruncation:) ((:CHAR)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))







(defun NS::|_invalidateFont| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateFont) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTruncatesLastVisibleLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTruncatesLastVisibleLine:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|_baselinePairWithFrame:flipped:| (thing _ flipped)
  (let ((message-lambda 
         (make-message-lambda @(_baselinePairWithFrame:flipped:) (((:STRUCT
                                                                    NS::|CGRect|)
                                                                   :CHAR)
                                                                  (:ARRAY :CHAR
                                                                   16))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if flipped 1 0))))

(defun NS::|_validateEntryString:uiHandled:| (thing _ ui-handled)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_validateEntryString:uiHandled:) ((:POINTER
                                                                   (:POINTER
                                                                    :CHAR))
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr ui-handled)))) nil t))

(defun NS::|textView:shouldChangeTextInRange:replacementString:| (thing _ should-change-text-in-range replacement-string)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(textView:shouldChangeTextInRange:replacementString:) ((:POINTER
                                                                                       (:STRUCT
                                                                                        NS::|_NSRange|)
                                                                                       :POINTER)
                                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) should-change-text-in-range (ns-object-ptr replacement-string)))) nil t))

(defun NS::|textDidChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(textDidChange:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|calcDrawInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(calcDrawInfo:) (((:STRUCT NS::|CGRect|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setUpFieldEditorAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUpFieldEditorAttributes:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|fontDilationStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fontDilationStyle) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_characterRangeForPoint:inRect:ofView:| (thing _ in-rect of-view)
  (let ((message-lambda 
         (make-message-lambda @(_characterRangeForPoint:inRect:ofView:) (((:STRUCT
                                                                           NS::|CGPoint|)
                                                                          (:STRUCT
                                                                           NS::|CGRect|)
                                                                          :POINTER)
                                                                         (:STRUCT
                                                                          NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ in-rect (ns-object-ptr of-view))))

(defun NS::|_needsHighlightedTextHint| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_needsHighlightedTextHint) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_controlViewDidChangeEffectiveSemanticContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_controlViewDidChangeEffectiveSemanticContext:) ((:POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cachedControlContentStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cachedControlContentStyle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_drawFocusRingWithFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_drawFocusRingWithFrame:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|_hitTestForTouch:inRect:ofView:| (thing _ in-rect of-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hitTestForTouch:inRect:ofView:) ((:POINTER
                                                                   (:STRUCT
                                                                    NS::|CGRect|)
                                                                   :POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) in-rect (ns-object-ptr of-view)))) nil t))

(defun NS::|touchBeganAt:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchBeganAt:inView:) (((:STRUCT NS::|CGPoint|)
                                                        :POINTER)
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|touchMovedFrom:to:inView:| (thing _ to in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchMovedFrom:to:inView:) (((:STRUCT
                                                              NS::|CGPoint|)
                                                             (:STRUCT
                                                              NS::|CGPoint|)
                                                             :POINTER)
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ to (ns-object-ptr in-view))))

(defun NS::|touchCancelledAt:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchCancelledAt:inView:) (((:STRUCT
                                                             NS::|CGPoint|)
                                                            :POINTER)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|keyDown:inRect:ofView:| (thing _ in-rect of-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(keyDown:inRect:ofView:) ((:POINTER
                                                          (:STRUCT
                                                           NS::|CGRect|)
                                                          :POINTER)
                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) in-rect (ns-object-ptr of-view)))) nil t))

(defun NS::|keyUp:inRect:ofView:| (thing _ in-rect of-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(keyUp:inRect:ofView:) ((:POINTER
                                                        (:STRUCT NS::|CGRect|)
                                                        :POINTER)
                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) in-rect (ns-object-ptr of-view)))) nil t))

(defun NS::|_focusRingFrameForFrame:cellFrame:| (thing _ cell-frame)
  (let ((message-lambda 
         (make-message-lambda @(_focusRingFrameForFrame:cellFrame:) (((:STRUCT
                                                                       NS::|CGRect|)
                                                                      (:STRUCT
                                                                       NS::|CGRect|))
                                                                     (:STRUCT
                                                                      NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ cell-frame)))

(defun NS::|editWithFrame:inView:editor:delegate:event:| (thing _ in-view editor delegate event)
  (let ((message-lambda 
         (make-message-lambda @(editWithFrame:inView:editor:delegate:event:) (((:STRUCT
                                                                                NS::|CGRect|)
                                                                               :POINTER
                                                                               :POINTER
                                                                               :POINTER
                                                                               :POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view) (ns-object-ptr editor) (ns-object-ptr delegate) (ns-object-ptr event))))

(defun NS::|selectWithFrame:inView:editor:delegate:start:length:| (thing _ in-view editor delegate start length)
  (let ((message-lambda 
         (make-message-lambda @(selectWithFrame:inView:editor:delegate:start:length:) (((:STRUCT
                                                                                         NS::|CGRect|)
                                                                                        :POINTER
                                                                                        :POINTER
                                                                                        :POINTER
                                                                                        :LONG-LONG
                                                                                        :LONG-LONG)
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view) (ns-object-ptr editor) (ns-object-ptr delegate) start length)))


(defun NS::|fieldEditorForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(fieldEditorForView:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|resetCursorRect:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(resetCursorRect:inView:) (((:STRUCT
                                                            NS::|CGRect|)
                                                           :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|menuForEvent:inRect:ofView:| (thing _ in-rect of-view)
  (let ((message-lambda 
         (make-message-lambda @(menuForEvent:inRect:ofView:) ((:POINTER
                                                               (:STRUCT
                                                                NS::|CGRect|)
                                                               :POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) in-rect (ns-object-ptr of-view))))

(defun NS::|setSendsActionOnEndEditing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSendsActionOnEndEditing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|sendsActionOnEndEditing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(sendsActionOnEndEditing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|wantsNotificationForMarkedText| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsNotificationForMarkedText) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|opaqueRectForTitleBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(opaqueRectForTitleBounds:) (((:STRUCT
                                                              NS::|CGRect|))
                                                            (:STRUCT
                                                             NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|draggingImageComponentsWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(draggingImageComponentsWithFrame:inView:) (((:STRUCT
                                                                             NS::|CGRect|)
                                                                            :POINTER)
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|canSmoothFontsInFrame:forLayerBackedView:| (thing _ for-layer-backed-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canSmoothFontsInFrame:forLayerBackedView:) (((:STRUCT
                                                                              NS::|CGRect|)
                                                                             :POINTER)
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-layer-backed-view)))) nil t))

(defun NS::|allowsAppearanceTextEffects| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsAppearanceTextEffects) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAllowsAppearanceTextEffects:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsAppearanceTextEffects:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setStyleEffectConfiguration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStyleEffectConfiguration:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setTitleTextContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleTextContainer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setFieldEditorTextContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFieldEditorTextContainer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityResultsForSearchPredicate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityResultsForSearchPredicate:) ((:POINTER)
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityHeaderForColumnIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHeaderForColumnIndex:) ((:LONG-LONG)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityHeaderForRowIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHeaderForRowIndex:) ((:LONG-LONG)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityAuditIssues| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditIssues) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityAuditIssues:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAuditIssues:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityAutoInteractable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityAutoInteractable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityAutoInteractable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAutoInteractable:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityContainerType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContainerType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityContainerType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityContainerType:) ((:LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityUserInputLabels| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUserInputLabels) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityUserInputLabels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityUserInputLabels:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityCustomContent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCustomContent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityCustomContent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCustomContent:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityAttributedUserInputLabels| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributedUserInputLabels) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityAttributedUserInputLabels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAttributedUserInputLabels:) ((:POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityPath:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityCustomChoosers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCustomChoosers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityCustomChoosers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCustomChoosers:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_accessibilityLabel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityLabel) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityEmbeddedImageDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityEmbeddedImageDescription) (NIL
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityEmbeddedImageDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEmbeddedImageDescription:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityEnhancedUserInterface| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEnhancedUserInterface) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityEnhancedUserInterface:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEnhancedUserInterface:) ((:CHAR)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityFunctionRowTopLevelElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFunctionRowTopLevelElements) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityFunctionRowTopLevelElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFunctionRowTopLevelElements:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isAccessibilityMimicNativeView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMimicNativeView) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityMimicNativeView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMimicNativeView:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilitySections| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySections) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilitySections:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySections:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityHeaderGroup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHeaderGroup) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityHeaderGroup:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHeaderGroup:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityFrameInParentSpace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFrameInParentSpace) (NIL
                                                                  (:STRUCT
                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityFrameInParentSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFrameInParentSpace:) (((:STRUCT
                                                                        NS::|CGRect|))
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityPreviousContentSibling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPreviousContentSibling) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setPreviousContentSibling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreviousContentSibling:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityNextContentSibling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityNextContentSibling) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setNextContentSibling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNextContentSibling:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityContentSiblingAbove| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContentSiblingAbove) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityContentSiblingAbove:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityContentSiblingAbove:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityContentSiblingBelow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContentSiblingBelow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityContentSiblingBelow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityContentSiblingBelow:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityChartDescriptor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChartDescriptor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAccessibilityChartDescriptor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityChartDescriptor:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityOverridesAlwaysTakePrecedence| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityOverridesAlwaysTakePrecedence) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAccessibilityOverridesAlwaysTakePrecedence:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityOverridesAlwaysTakePrecedence:) ((:CHAR)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_mouseTrackingInfo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_mouseTrackingInfo) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setMouseTrackingInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setMouseTrackingInfo:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_viewDidChangeGeometryInWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_viewDidChangeGeometryInWindow:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setMouseTrackingInRect:ofView:withConfiguration:| (thing _ of-view with-configuration)
  (let ((message-lambda 
         (make-message-lambda @(_setMouseTrackingInRect:ofView:withConfiguration:) (((:STRUCT
                                                                                      NS::|CGRect|)
                                                                                     :POINTER
                                                                                     :POINTER)
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr of-view) (ns-object-ptr with-configuration))))



(defun NS::|_isAnimatingDefaultCell| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAnimatingDefaultCell) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setPlaceholderString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setPlaceholderString:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_placeholderString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_placeholderString) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setPlaceholderAttributedString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setPlaceholderAttributedString:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_defaultPlaceholderString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_defaultPlaceholderString) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_textHitTest:withFrame:inView:| (thing _ with-frame in-view)
  (let ((message-lambda 
         (make-message-lambda @(_textHitTest:withFrame:inView:) (((:STRUCT
                                                                   NS::|CGPoint|)
                                                                  (:STRUCT
                                                                   NS::|CGRect|)
                                                                  :POINTER)
                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ with-frame (ns-object-ptr in-view))))

(defun NS::|_externalContextSeemsLikelyToBeRaised| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_externalContextSeemsLikelyToBeRaised) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_initialBackgroundStyleCompatibilityGuess| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_initialBackgroundStyleCompatibilityGuess) (NIL
                                                                            :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|accessibilityCurrentEditor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCurrentEditor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityWindowPointForShowMenuWithProxy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityWindowPointForShowMenuWithProxy:) ((:POINTER)
                                                                                 (:STRUCT
                                                                                  NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_accessibilityShowMenu:withProxy:| (thing _ with-proxy)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityShowMenu:withProxy:) ((:POINTER
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-proxy))))








(defun NS::|accessibilitySelectedTextAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextAttribute) (NIL
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsSelectedTextAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSelectedTextAttributeSettable) (NIL
                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySetSelectedTextAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetSelectedTextAttribute:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySelectedTextRangeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextRangeAttribute) (NIL
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsSelectedTextRangeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSelectedTextRangeAttributeSettable) (NIL
                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySetSelectedTextRangeAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetSelectedTextRangeAttribute:) ((:POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityNumberOfCharactersAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityNumberOfCharactersAttribute) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsNumberOfCharactersAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsNumberOfCharactersAttributeSettable) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityVisibleCharacterRangeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleCharacterRangeAttribute) (NIL
                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsVisibleCharacterRangeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsVisibleCharacterRangeAttributeSettable) (NIL
                                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySetVisibleCharacterRangeAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetVisibleCharacterRangeAttribute:) ((:POINTER)
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityInsertionPointLineNumberAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityInsertionPointLineNumberAttribute) (NIL
                                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsInsertionPointLineNumberAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsInsertionPointLineNumberAttributeSettable) (NIL
                                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityLineForIndexAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLineForIndexAttributeForParameter:) ((:POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityRangeForLineAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForLineAttributeForParameter:) ((:POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityStringForRangeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityStringForRangeAttributeForParameter:) ((:POINTER)
                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityRangeForPositionAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForPositionAttributeForParameter:) ((:POINTER)
                                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityRangeForIndexAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForIndexAttributeForParameter:) ((:POINTER)
                                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityBoundsForRangeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityBoundsForRangeAttributeForParameter:) ((:POINTER)
                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityRTFForRangeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRTFForRangeAttributeForParameter:) ((:POINTER)
                                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityAttributedStringForRangeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributedStringForRangeAttributeForParameter:) ((:POINTER)
                                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityStyleRangeForIndexAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityStyleRangeForIndexAttributeForParameter:) ((:POINTER)
                                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|isEntryAcceptable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEntryAcceptable:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|setMnemonicLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMnemonicLocation:) ((:UNSIGNED-LONG-LONG)
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|mnemonicLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mnemonicLocation) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|controlTint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(controlTint) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|entryType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(entryType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setEntryType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEntryType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setControlView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setControlView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_usesUserKeyEquivalent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_usesUserKeyEquivalent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_useUserKeyEquivalent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_useUserKeyEquivalent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_drawLiveResizeHighlightWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(_drawLiveResizeHighlightWithFrame:inView:) (((:STRUCT
                                                                              NS::|CGRect|)
                                                                             :POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-view))))

(defun NS::|_shouldHighlightCellWhenSelected| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldHighlightCellWhenSelected) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


























(defun NS::|arrangedSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(arrangedSubviews) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



















(defun NS::|orientation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orientation) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|isVertical| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isVertical) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))













(defun NS::|isSpringLoaded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSpringLoaded) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setSpringLoaded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSpringLoaded:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))




(defun NS::|addArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addArrangedSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|toggleSidebar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleSidebar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))




(defun NS::|setAutosaveName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutosaveName:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|autosaveName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autosaveName) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setVertical:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVertical:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setPosition:ofDividerAtIndex:| (thing _ of-divider-at-index)
  (let ((message-lambda 
         (make-message-lambda @(setPosition:ofDividerAtIndex:) ((:DOUBLE
                                                                 :LONG-LONG)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ of-divider-at-index)))

(defun NS::|_setArrangedView:isCollapsed:| (thing _ is-collapsed)
  (let ((message-lambda 
         (make-message-lambda @(_setArrangedView:isCollapsed:) ((:POINTER
                                                                 :CHAR)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if is-collapsed 1 0))))

(defun NS::|_invalidateSizeConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateSizeConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setMinimumSizeForInlineSidebars:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setMinimumSizeForInlineSidebars:) ((:DOUBLE)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setSplitViewControllerAllowsPropertyChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSplitViewControllerAllowsPropertyChange:) ((:CHAR)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setArrangesAllSubviews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setArrangesAllSubviews:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setDividerStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDividerStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|removeArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeArrangedSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertArrangedSubview:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertArrangedSubview:atIndex:) ((:POINTER
                                                                  :LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-index)))

(defun NS::|dividerThickness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dividerThickness) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resetUserPreferredThicknessFromLayoutAlignmentFrameForArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_resetUserPreferredThicknessFromLayoutAlignmentFrameForArrangedSubview:) ((:POINTER)
                                                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_testingForOverlays| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_testingForOverlays) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setInTransientSpringLoad:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setInTransientSpringLoad:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_uncollapseAndOverlayArrangedView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_uncollapseAndOverlayArrangedView:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_uncollapseArrangedView:overlayIfNecessary:| (thing _ overlay-if-necessary)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_uncollapseArrangedView:overlayIfNecessary:) ((:POINTER
                                                                               :CHAR)
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if overlay-if-necessary 1 0)))) nil t))

(defun NS::|_updateDividerViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateDividerViews) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resetUserPreferredThicknessFromSetAlignmentFrameForAllArrangedSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetUserPreferredThicknessFromSetAlignmentFrameForAllArrangedSubviews) (NIL
                                                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setExplicitAutocollapseThicknessDisabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setExplicitAutocollapseThicknessDisabled:) ((:CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_fakeCollapse:arrangedView:canOverlay:withHandler:| (thing _ arranged-view can-overlay with-handler)
  (let ((message-lambda 
         (make-message-lambda @(_fakeCollapse:arrangedView:canOverlay:withHandler:) ((:CHAR
                                                                                      :POINTER
                                                                                      :CHAR
                                                                                      :POINTER)
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (ns-object-ptr arranged-view) (if can-overlay 1 0) (ns-object-ptr with-handler))))

(defun NS::|_invalidateStackAndSizeConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateStackAndSizeConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|validateToolbarItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateToolbarItem:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_autoCollapseArrangedView:animated:| (thing _ animated)
  (let ((message-lambda 
         (make-message-lambda @(_autoCollapseArrangedView:animated:) ((:POINTER
                                                                       :CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if animated 1 0))))

(defun NS::|_isArrangedViewAutoCollapsed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isArrangedViewAutoCollapsed:) ((:POINTER)
                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|instantiateWithObjectInstantiator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(instantiateWithObjectInstantiator:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_effectiveUserInterfaceLayoutDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveUserInterfaceLayoutDirection) (NIL
                                                                         :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|dividerStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dividerStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isPaneSplitter| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isPaneSplitter) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_registeredTransientBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_registeredTransientBehavior) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_initVariables| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_initVariables) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_stopObservingViews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_stopObservingViews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_canUseDividerViewsAsSubviews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canUseDividerViewsAsSubviews) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_canUseLayersForDividers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canUseLayersForDividers) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_invalidateStackConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateStackConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setArrangedView:isAutocollapsed:| (thing _ is-autocollapsed)
  (let ((message-lambda 
         (make-message-lambda @(_setArrangedView:isAutocollapsed:) ((:POINTER
                                                                     :CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if is-autocollapsed 1 0))))

(defun NS::|_setFrameOrAlignmentRect:ofArrangedView:| (thing _ of-arranged-view)
  (let ((message-lambda 
         (make-message-lambda @(_setFrameOrAlignmentRect:ofArrangedView:) (((:STRUCT
                                                                             NS::|CGRect|)
                                                                            :POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr of-arranged-view))))

(defun NS::|_walkLayoutDescriptionArray:withFrameHandler:| (thing _ with-frame-handler)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_walkLayoutDescriptionArray:withFrameHandler:) ((:POINTER
                                                                                 :POINTER)
                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-frame-handler)))) nil t))

(defun NS::|_canMakePropertyChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canMakePropertyChange) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isInTexturedWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isInTexturedWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_currentDividerDimpleVariant| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentDividerDimpleVariant) (NIL
                                                               (:POINTER
                                                                (:STRUCT
                                                                 NS::|__CFString|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_currentVerticalKey| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentVerticalKey) (NIL
                                                      (:POINTER
                                                       (:STRUCT
                                                        NS::|__CFString|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_currentStateKey| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentStateKey) (NIL
                                                   (:POINTER
                                                    (:STRUCT NS::|__CFString|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|dividerColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dividerColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_drawDividerDimpleInRect:indicatorOnly:| (thing _ indicator-only)
  (let ((message-lambda 
         (make-message-lambda @(_drawDividerDimpleInRect:indicatorOnly:) (((:STRUCT
                                                                            NS::|CGRect|)
                                                                           :CHAR)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if indicator-only 1 0))))

(defun NS::|isArrangedViewCollapsed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isArrangedViewCollapsed:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_hasHidableDividerAtLogicalIndex:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasHidableDividerAtLogicalIndex:) ((:LONG-LONG)
                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_shouldMirrorForRTL| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldMirrorForRTL) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_scaledDividerThickness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scaledDividerThickness) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_frameOrAlignmentRectOfArrangedView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_frameOrAlignmentRectOfArrangedView:) ((:POINTER)
                                                                       (:STRUCT
                                                                        NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_isArrangedViewOverlaid:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isArrangedViewOverlaid:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_splitViewUseConstraintBasedLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_splitViewUseConstraintBasedLayout) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_scheduleAutosaveArrangedViewLayoutIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scheduleAutosaveArrangedViewLayoutIfNecessary) (NIL
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_autosaveArrangedViewLayoutIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_autosaveArrangedViewLayoutIfNecessary) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dividerFrames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dividerFrames) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldAdjustSizeOfArrangedView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldAdjustSizeOfArrangedView:) ((:POINTER)
                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_arrangedViewsOrDividersHaveChangedSinceAdjustment| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_arrangedViewsOrDividersHaveChangedSinceAdjustment) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setArrangedViewsAreAdjusted:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setArrangedViewsAreAdjusted:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_invalidateCursorRectsAndDragRegion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateCursorRectsAndDragRegion) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_leadingViewForLogicalSeparatorIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_leadingViewForLogicalSeparatorIndex:) ((:LONG-LONG)
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_visualDividerIndexForLogicalIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_visualDividerIndexForLogicalIndex:) ((:LONG-LONG)
                                                                      :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_trailingViewForLogicalSeparatorIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_trailingViewForLogicalSeparatorIndex:) ((:LONG-LONG)
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|minPossiblePositionOfDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(minPossiblePositionOfDividerAtIndex:) ((:LONG-LONG)
                                                                       :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|maxPossiblePositionOfDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(maxPossiblePositionOfDividerAtIndex:) ((:LONG-LONG)
                                                                       :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_usesAlternateDrag| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_usesAlternateDrag) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_unscaledDividerThickness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unscaledDividerThickness) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_canCollapseArrangedView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canCollapseArrangedView:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_logicalDividerIndexForVisualIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_logicalDividerIndexForVisualIndex:) ((:LONG-LONG)
                                                                      :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_dividerDraggingAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dividerDraggingAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_distanceFromTrailingEdgeOfView:toAnchor:| (thing _ to-anchor)
  (let ((message-lambda 
         (make-message-lambda @(_distanceFromTrailingEdgeOfView:toAnchor:) ((:POINTER
                                                                             :POINTER)
                                                                            :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-anchor))))

(defun NS::|_trailingDistanceFromSelf:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_trailingDistanceFromSelf:) (((:STRUCT
                                                               NS::|CGRect|))
                                                             :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_leadingDistanceFromSelf:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_leadingDistanceFromSelf:) (((:STRUCT
                                                              NS::|CGRect|))
                                                            :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_dragLimitsOfDividerAtLogicalIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_dragLimitsOfDividerAtLogicalIndex:) ((:UNSIGNED-LONG-LONG)
                                                                      (:ARRAY
                                                                       :CHAR
                                                                       34))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_constantFromDividerPosition:toAnchorView:| (thing _ to-anchor-view)
  (let ((message-lambda 
         (make-message-lambda @(_constantFromDividerPosition:toAnchorView:) ((:DOUBLE
                                                                              :POINTER)
                                                                             :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-anchor-view))))

(defun NS::|_uncollapseArrangedView:animated:| (thing _ animated)
  (let ((message-lambda 
         (make-message-lambda @(_uncollapseArrangedView:animated:) ((:POINTER
                                                                     :CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if animated 1 0))))

(defun NS::|_collapseArrangedView:animated:| (thing _ animated)
  (let ((message-lambda 
         (make-message-lambda @(_collapseArrangedView:animated:) ((:POINTER
                                                                   :CHAR)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if animated 1 0))))

(defun NS::|_doConstraintBasedPresentDividerDragResult:withParams:| (thing _ with-params)
  (let ((message-lambda 
         (make-message-lambda @(_doConstraintBasedPresentDividerDragResult:withParams:) (((:ARRAY
                                                                                           :CHAR
                                                                                           10)
                                                                                          :POINTER)
                                                                                         :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-params))))

(defun NS::|_updateLayerDividersIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateLayerDividersIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dragParamsOfDividerAtVisualIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_dragParamsOfDividerAtVisualIndex:) ((:UNSIGNED-LONG-LONG)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_resultOfDividerDragToLeadingPosition:withParams:| (thing _ with-params)
  (let ((message-lambda 
         (make-message-lambda @(_resultOfDividerDragToLeadingPosition:withParams:) ((:DOUBLE
                                                                                     :POINTER)
                                                                                    (:ARRAY
                                                                                     :CHAR
                                                                                     10))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-params))))

(defun NS::|_presentDividerDragResult:withParams:| (thing _ with-params)
  (let ((message-lambda 
         (make-message-lambda @(_presentDividerDragResult:withParams:) (((:ARRAY
                                                                          :CHAR
                                                                          10)
                                                                         :POINTER)
                                                                        :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-params))))

(defun NS::|arrangesAllSubviews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(arrangesAllSubviews) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_sortSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sortSubviews) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_willAddArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_willAddArrangedSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_didAddArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_didAddArrangedSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_removeWindowSidebarTrackingIfApplicable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeWindowSidebarTrackingIfApplicable) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unregisterSplitViewItemTrackingForArrangedSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unregisterSplitViewItemTrackingForArrangedSubviews) (NIL
                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cancelResetUserPreferredThicknessAfterUserResizeWithDelay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cancelResetUserPreferredThicknessAfterUserResizeWithDelay) (NIL
                                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowDidEndLiveResize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_windowDidEndLiveResize:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_windowWillExitFullScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_windowWillExitFullScreen:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_noteNeedsSidebarProviderUpdate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_noteNeedsSidebarProviderUpdate) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_registerSplitViewItemTrackingForArrangedSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_registerSplitViewItemTrackingForArrangedSubviews) (NIL
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_compareDividerFramesAndNotifyWithOldFrames:viewWasResized:| (thing _ view-was-resized)
  (let ((message-lambda 
         (make-message-lambda @(_compareDividerFramesAndNotifyWithOldFrames:viewWasResized:) ((:POINTER
                                                                                               :CHAR)
                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if view-was-resized 1 0))))

(defun NS::|_noteWillResizeDividerPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_noteWillResizeDividerPosition:) ((:LONG-LONG)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_sendWillResizeNotificationsIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sendWillResizeNotificationsIfNecessary) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_sendDidResizeNotificationsIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sendDidResizeNotificationsIfNecessary) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isSubclassThatOverridesDrawingMethods| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isSubclassThatOverridesDrawingMethods) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|drawDividerInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawDividerInRect:) (((:STRUCT NS::|CGRect|))
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_dividerLayers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dividerLayers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setDividerLayers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDividerLayers:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateDividerLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateDividerLayer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shouldDrawDivider| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldDrawDivider) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_visualIndexOfDividerForLocation:andReturnFrame:| (thing _ and-return-frame)
  (let ((message-lambda 
         (make-message-lambda @(_visualIndexOfDividerForLocation:andReturnFrame:) (((:STRUCT
                                                                                     NS::|CGPoint|)
                                                                                    (:POINTER
                                                                                     (:STRUCT
                                                                                      NS::|CGRect|)))
                                                                                   :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr and-return-frame))))

(defun NS::|_effectiveFrameForDrawnFrame:ofDividerAtIndex:| (thing _ of-divider-at-index)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveFrameForDrawnFrame:ofDividerAtIndex:) (((:STRUCT
                                                                                   NS::|CGRect|)
                                                                                  :LONG-LONG)
                                                                                 (:STRUCT
                                                                                  NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ of-divider-at-index)))

(defun NS::|_additionalEffectiveFrameOfDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_additionalEffectiveFrameOfDividerAtIndex:) ((:LONG-LONG)
                                                                             (:STRUCT
                                                                              NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_isArrangedViewAnimating:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isArrangedViewAnimating:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_cursorOfDividerAtIndex:position:dragLimits:| (thing _ position drag-limits)
  (let ((message-lambda 
         (make-message-lambda @(_cursorOfDividerAtIndex:position:dragLimits:) ((:UNSIGNED-LONG-LONG
                                                                                :DOUBLE
                                                                                (:ARRAY
                                                                                 :CHAR
                                                                                 34))
                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ position drag-limits)))


(defun NS::|holdingPriorityForSubviewAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(holdingPriorityForSubviewAtIndex:) ((:LONG-LONG)
                                                                    :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_makeDividerLayerWithFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_makeDividerLayerWithFrame:) (((:STRUCT
                                                                NS::|CGRect|))
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_removeDividerLayers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeDividerLayers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_adjustArrangedViewsIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_adjustArrangedViewsIfNecessary) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_usesExplicitSizeForAutoCollapse| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_usesExplicitSizeForAutoCollapse) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_explicitAutocollapseThicknessDisabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_explicitAutocollapseThicknessDisabled) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_minimumSizeForInlineSidebars| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_minimumSizeForInlineSidebars) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_canAutocollapseArrangedView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canAutocollapseArrangedView:) ((:POINTER)
                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_willAddOverlayView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_willAddOverlayView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_animatesAutocollapses| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_animatesAutocollapses) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_autoCollapseArrangedView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_autoCollapseArrangedView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_canLiveCollapseArrangedViews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canLiveCollapseArrangedViews) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_liveCollapseIsCanned| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_liveCollapseIsCanned) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_inWindowLiveResize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_inWindowLiveResize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_canLiveCollapseArrangedView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canLiveCollapseArrangedView:) ((:POINTER)
                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_uncollapseArrangedView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_uncollapseArrangedView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_didRemoveOverlay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_didRemoveOverlay:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateStackConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateStackConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateSizeConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateSizeConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doLayerBackedLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doLayerBackedLayout) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_checkForAutoUncollapsedViews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_checkForAutoUncollapsedViews) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_checkForEarlyCollapseArrangedViews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_checkForEarlyCollapseArrangedViews) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_compareDividerFramesAndNotifyWithOldFrames:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_compareDividerFramesAndNotifyWithOldFrames:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateWindowSidebarTrackingIfApplicable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateWindowSidebarTrackingIfApplicable) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resetUserPreferredThicknessAfterUserResizeWithDelay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetUserPreferredThicknessAfterUserResizeWithDelay) (NIL
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_validateArrangedViewFrames| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_validateArrangedViewFrames) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|adjustSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(adjustSubviews) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeStackConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeStackConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_updateConstraintsForMinMaxMeasure| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateConstraintsForMinMaxMeasure) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_willRemoveArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_willRemoveArrangedSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_didRemoveArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_didRemoveArrangedSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_splitViewOwnedBySplitViewController| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_splitViewOwnedBySplitViewController) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_delegateImplementsAutolayoutIncompatibleMethods| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_delegateImplementsAutolayoutIncompatibleMethods) (NIL
                                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setHoldingPriority:forSubviewAtIndex:| (thing _ for-subview-at-index)
  (let ((message-lambda 
         (make-message-lambda @(setHoldingPriority:forSubviewAtIndex:) ((:FLOAT
                                                                         :LONG-LONG)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ for-subview-at-index)))

(defun NS::|_dividerIsHiddenAtLogicalIndex:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_dividerIsHiddenAtLogicalIndex:) ((:LONG-LONG)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_constraintsForStacking:toView:previousIndex:identifierIndex:spacing:canLiveCollapse:forDivider:| (thing _ to-view previous-index identifier-index spacing can-live-collapse for-divider)
  (let ((message-lambda 
         (make-message-lambda @(_constraintsForStacking:toView:previousIndex:identifierIndex:spacing:canLiveCollapse:forDivider:) ((:POINTER
                                                                                                                                    :POINTER
                                                                                                                                    :LONG-LONG
                                                                                                                                    :LONG-LONG
                                                                                                                                    :DOUBLE
                                                                                                                                    :CHAR
                                                                                                                                    :CHAR)
                                                                                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-view) previous-index identifier-index spacing (if can-live-collapse 1 0) (if for-divider 1 0))))

(defun NS::|_constraintsForLeadingView:identifierIndex:spacing:canLiveCollapse:forOverlay:| (thing _ identifier-index spacing can-live-collapse for-overlay)
  (let ((message-lambda 
         (make-message-lambda @(_constraintsForLeadingView:identifierIndex:spacing:canLiveCollapse:forOverlay:) ((:POINTER
                                                                                                                  :LONG-LONG
                                                                                                                  :DOUBLE
                                                                                                                  :CHAR
                                                                                                                  :CHAR)
                                                                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) identifier-index spacing (if can-live-collapse 1 0) (if for-overlay 1 0))))

(defun NS::|_constraintsForPerpendicularAxisForView:identifierIndex:divider:| (thing _ identifier-index divider)
  (let ((message-lambda 
         (make-message-lambda @(_constraintsForPerpendicularAxisForView:identifierIndex:divider:) ((:POINTER
                                                                                                    :LONG-LONG
                                                                                                    :CHAR)
                                                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) identifier-index (if divider 1 0))))

(defun NS::|_constraintsForTrailingView:identifierIndex:spacing:canLiveCollapse:forOverlay:| (thing _ identifier-index spacing can-live-collapse for-overlay)
  (let ((message-lambda 
         (make-message-lambda @(_constraintsForTrailingView:identifierIndex:spacing:canLiveCollapse:forOverlay:) ((:POINTER
                                                                                                                   :LONG-LONG
                                                                                                                   :DOUBLE
                                                                                                                   :CHAR
                                                                                                                   :CHAR)
                                                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) identifier-index spacing (if can-live-collapse 1 0) (if for-overlay 1 0))))

(defun NS::|_constraintsFreezingFrameForView:identifierIndex:| (thing _ identifier-index)
  (let ((message-lambda 
         (make-message-lambda @(_constraintsFreezingFrameForView:identifierIndex:) ((:POINTER
                                                                                     :LONG-LONG)
                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) identifier-index)))

(defun NS::|_userPreferredThicknessForArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_userPreferredThicknessForArrangedSubview:) ((:POINTER)
                                                                             :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_needsUpdateConstraintsForProportionalResizing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_needsUpdateConstraintsForProportionalResizing) (NIL
                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateConstraintsForProportionalResizing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateConstraintsForProportionalResizing) (NIL
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_priorityGroups| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_priorityGroups) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_automaticMaximumSizeForArrangedView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_automaticMaximumSizeForArrangedView:) ((:POINTER)
                                                                        :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|_arrangedViewLayoutDescriptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_arrangedViewLayoutDescriptions) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setIsPaneSplitter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsPaneSplitter:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_compatibility_seemsToBeVertical| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_compatibility_seemsToBeVertical) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_startObservingViews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_startObservingViews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_startObservingView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_startObservingView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_stopObservingView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_stopObservingView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_splitViewControllerAllowsPropertyChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_splitViewControllerAllowsPropertyChange) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_unregisterSplitViewItemTrackingIfNecessaryForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_unregisterSplitViewItemTrackingIfNecessaryForView:) ((:POINTER)
                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_registerSplitViewItemTrackingIfNecessaryForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_registerSplitViewItemTrackingIfNecessaryForView:) ((:POINTER)
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setDividerColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDividerColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isSubviewCollapsed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSubviewCollapsed:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|positionOfDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(positionOfDividerAtIndex:) ((:LONG-LONG)
                                                            :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_indexOfDividerForLocation:andReturnFrame:| (thing _ and-return-frame)
  (let ((message-lambda 
         (make-message-lambda @(_indexOfDividerForLocation:andReturnFrame:) (((:STRUCT
                                                                               NS::|CGPoint|)
                                                                              (:POINTER
                                                                               (:STRUCT
                                                                                NS::|CGRect|)))
                                                                             :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr and-return-frame))))

(defun NS::|cursorRectForDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cursorRectForDividerAtIndex:) ((:LONG-LONG)
                                                               (:STRUCT
                                                                NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_makeShadowView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_makeShadowView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_inDividerLiveResize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_inDividerLiveResize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_nsib_setSplitViewAlwaysLaysOutAccordingToAlignmentRects:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_nsib_setSplitViewAlwaysLaysOutAccordingToAlignmentRects:) ((:CHAR)
                                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_nsib_splitViewAlwaysLaysOutAccordingToAlignmentRects| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_nsib_splitViewAlwaysLaysOutAccordingToAlignmentRects) (NIL
                                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_nsib_setSplitViewIntegralizesInUserSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_nsib_setSplitViewIntegralizesInUserSpace:) ((:CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_nsib_splitViewIntegralizesInUserSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_nsib_splitViewIntegralizesInUserSpace) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|stayPutPriorityForSubviewAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stayPutPriorityForSubviewAtIndex:) ((:LONG-LONG)
                                                                    :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setStayPutPriority:forSubviewAtIndex:| (thing _ for-subview-at-index)
  (let ((message-lambda 
         (make-message-lambda @(setStayPutPriority:forSubviewAtIndex:) ((:FLOAT
                                                                         :LONG-LONG)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ for-subview-at-index)))

(defun NS::|_resizeViewsForOffset:coordinate:| (thing _ coordinate)
  (let ((message-lambda 
         (make-message-lambda @(_resizeViewsForOffset:coordinate:) ((:LONG-LONG
                                                                     :DOUBLE)
                                                                    (:STRUCT
                                                                     NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ coordinate)))

(defun NS::|_uncollapseWithOverlayArrangedView:animated:| (thing _ animated)
  (let ((message-lambda 
         (make-message-lambda @(_uncollapseWithOverlayArrangedView:animated:) ((:POINTER
                                                                                :CHAR)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if animated 1 0))))

(defun NS::|_resetUserPreferredThicknessFromSetAlignmentFrameForArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_resetUserPreferredThicknessFromSetAlignmentFrameForArrangedSubview:) ((:POINTER)
                                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityResetChildrenAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityResetChildrenAttribute) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeUserPreferredThicknessForArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeUserPreferredThicknessForArrangedSubview:) ((:POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_canOverlayArrangedViews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canOverlayArrangedViews) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_overlayArrangedView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_overlayArrangedView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_inTransientSpringLoad| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_inTransientSpringLoad) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_customDividerColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_customDividerColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_customThickness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_customThickness) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dividerShouldBeVibrantAtIndex:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_dividerShouldBeVibrantAtIndex:) ((:UNSIGNED-LONG-LONG)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_blendingModeForDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_blendingModeForDividerAtIndex:) ((:UNSIGNED-LONG-LONG)
                                                                  :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_appearanceForDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_appearanceForDividerAtIndex:) ((:UNSIGNED-LONG-LONG)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_noteDividerViewChangedSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_noteDividerViewChangedSize:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_autosaveSubviewLayoutIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_autosaveSubviewLayoutIfNecessary) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setAnimatesAutocollapses:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAnimatesAutocollapses:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_animatedAutoCollapseArrangedView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_animatedAutoCollapseArrangedView:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_debugLayoutType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_debugLayoutType) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_debugDividerType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_debugDividerType) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|debugReasonForLayoutMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(debugReasonForLayoutMode) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setUserPreferredThickness:forArrangedSubview:| (thing _ for-arranged-subview)
  (let ((message-lambda 
         (make-message-lambda @(_setUserPreferredThickness:forArrangedSubview:) ((:DOUBLE
                                                                                  :POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-arranged-subview))))

(defun NS::|_setRegisteredTransientBehavior:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setRegisteredTransientBehavior:) ((:LONG-LONG)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_transientBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_transientBehavior) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isAffectedByEventsInWindow:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAffectedByEventsInWindow:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_closeForNonDragOrResizeClickWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_closeForNonDragOrResizeClickWithEvent:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_closeForKeyDownEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_closeForKeyDownEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_closeForSheetPresentingOnWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_closeForSheetPresentingOnWindow:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_closeForToolbarPresentingOnWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_closeForToolbarPresentingOnWindow:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_accessibilitySplitterRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySplitterRects) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilitySplitterAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySplitterAtIndex:) ((:UNSIGNED-LONG-LONG)
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilitySplittersAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySplittersAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsSplittersAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSplittersAttributeSettable) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))






(defun NS::|_delegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_delegate) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setEdgeInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEdgeInsets:) (((:STRUCT NS::|NSEdgeInsets|))
                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOrientation:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setDetachesHiddenViews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDetachesHiddenViews:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))





(defun NS::|spacing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(spacing) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setSpacing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSpacing:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|removeView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|setDistribution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDistribution:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|insertView:atIndex:inGravity:| (thing _ at-index in-gravity)
  (let ((message-lambda 
         (make-message-lambda @(insertView:atIndex:inGravity:) ((:POINTER
                                                                 :UNSIGNED-LONG-LONG
                                                                 :LONG-LONG)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-index in-gravity)))

(defun NS::|edgeInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(edgeInsets) (NIL (:STRUCT NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|views| (thing)
  (let ((message-lambda 
         (make-message-lambda @(views) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setCustomSpacing:afterView:| (thing _ after-view)
  (let ((message-lambda 
         (make-message-lambda @(setCustomSpacing:afterView:) ((:DOUBLE
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr after-view))))










(defun NS::|setHuggingPriority:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setHuggingPriority:forOrientation:) ((:FLOAT
                                                                      :LONG-LONG)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ for-orientation)))

(defun NS::|_isVertical| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isVertical) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))







(defun NS::|addView:inGravity:| (thing _ in-gravity)
  (let ((message-lambda 
         (make-message-lambda @(addView:inGravity:) ((:POINTER :LONG-LONG)
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) in-gravity)))

(defun NS::|setViews:inGravity:| (thing _ in-gravity)
  (let ((message-lambda 
         (make-message-lambda @(setViews:inGravity:) ((:POINTER :LONG-LONG)
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) in-gravity)))

(defun NS::|_earlyDecodingOrderPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_earlyDecodingOrderPriority) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))





(defun NS::|_reattachViews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_reattachViews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_detachViews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_detachViews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setVisibilityPriority:forView:| (thing _ for-view)
  (let ((message-lambda 
         (make-message-lambda @(setVisibilityPriority:forView:) ((:FLOAT
                                                                  :POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-view))))

(defun NS::|setClippingResistancePriority:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setClippingResistancePriority:forOrientation:) ((:FLOAT
                                                                                 :LONG-LONG)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ for-orientation)))

(defun NS::|viewsInGravity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewsInGravity:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|detachesHiddenViews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(detachesHiddenViews) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|enumerateViewsIncludingDetached:usingBlock:| (thing _ using-block)
  (let ((message-lambda 
         (make-message-lambda @(enumerateViewsIncludingDetached:usingBlock:) ((:CHAR
                                                                               :POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (ns-object-ptr using-block))))

(defun NS::|_addSubviewsAndPreserveAndPreserveAncestorConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addSubviewsAndPreserveAndPreserveAncestorConstraints:) ((:POINTER)
                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_invalidateCachedViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateCachedViews) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidateCachedDetachedViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateCachedDetachedViews) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_explicitlySetUserInterfaceLayoutDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_explicitlySetUserInterfaceLayoutDirection) (NIL
                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidateBaselines| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateBaselines) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|secondaryAlignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(secondaryAlignment) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setSecondaryAlignment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSecondaryAlignment:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setSecondaryAlignmentPriority:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSecondaryAlignmentPriority:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|alignmentPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alignmentPriority) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAlignmentPriority:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAlignmentPriority:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setSpacing:animated:| (thing _ animated)
  (let ((message-lambda 
         (make-message-lambda @(_setSpacing:animated:) ((:DOUBLE :CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if animated 1 0))))

(defun NS::|_setEdgeInsets:animated:| (thing _ animated)
  (let ((message-lambda 
         (make-message-lambda @(_setEdgeInsets:animated:) (((:STRUCT
                                                             NS::|NSEdgeInsets|)
                                                            :CHAR)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if animated 1 0))))

(defun NS::|distribution| (thing)
  (let ((message-lambda 
         (make-message-lambda @(distribution) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_gravityContainerContainingView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_gravityContainerContainingView:) ((:POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setCustomSpacing:afterView:animated:| (thing _ after-view animated)
  (let ((message-lambda 
         (make-message-lambda @(_setCustomSpacing:afterView:animated:) ((:DOUBLE
                                                                         :POINTER
                                                                         :CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr after-view) (if animated 1 0))))

(defun NS::|customSpacingAfterView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(customSpacingAfterView:) ((:POINTER) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_valueOfCustomSpacingAfterView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_valueOfCustomSpacingAfterView:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removesDetachedViewsFromSubviews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_removesDetachedViewsFromSubviews) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|detachedViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(detachedViews) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeView:animated:removeFromViewHierarchy:| (thing _ animated remove-from-view-hierarchy)
  (let ((message-lambda 
         (make-message-lambda @(_removeView:animated:removeFromViewHierarchy:) ((:POINTER
                                                                                 :CHAR
                                                                                 :CHAR)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if animated 1 0) (if remove-from-view-hierarchy 1 0))))

(defun NS::|_insertView:atIndex:inGravity:animated:| (thing _ at-index in-gravity animated)
  (let ((message-lambda 
         (make-message-lambda @(_insertView:atIndex:inGravity:animated:) ((:POINTER
                                                                           :UNSIGNED-LONG-LONG
                                                                           :LONG-LONG
                                                                           :CHAR)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-index in-gravity (if animated 1 0))))

(defun NS::|_valueOfVisibilityPriorityForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_valueOfVisibilityPriorityForView:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|leadingOrTopViewsManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(leadingOrTopViewsManager) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|centerViewsManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(centerViewsManager) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|trailingOrBottomViewsManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trailingOrBottomViewsManager) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeView:animated:| (thing _ animated)
  (let ((message-lambda 
         (make-message-lambda @(_removeView:animated:) ((:POINTER :CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if animated 1 0))))

(defun NS::|isViewDetached:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isViewDetached:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|attachedViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attachedViews) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|huggingPriorityForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(huggingPriorityForOrientation:) ((:LONG-LONG)
                                                                 :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_nsib_shouldAddConstraints| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_nsib_shouldAddConstraints) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_effectiveStackingAxisHuggingPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveStackingAxisHuggingPriority) (NIL
                                                                        :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|secondaryAlignmentPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(secondaryAlignmentPriority) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_firstAndLastViewsAreFlushToEdges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_firstAndLastViewsAreFlushToEdges) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isBaselineRelativeArrangement| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isBaselineRelativeArrangement) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_idealSizeLayoutDimensionCreateIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_idealSizeLayoutDimensionCreateIfNecessary) (NIL
                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|clippingResistancePriorityForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(clippingResistancePriorityForOrientation:) ((:LONG-LONG)
                                                                            :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_hasEffectiveGravityAreas| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasEffectiveGravityAreas) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_allAttachedViewsAreCentered| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allAttachedViewsAreCentered) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_needsSecondUpdateConstraintsPassForAutomaticDetaching| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_needsSecondUpdateConstraintsPassForAutomaticDetaching) (NIL
                                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_checkForDroppedViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_checkForDroppedViews) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_firstBaselineOffsetFromStackViewTopForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_firstBaselineOffsetFromStackViewTopForView:) ((:POINTER)
                                                                               :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_lastBaselineOffsetFromStackViewBottomForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_lastBaselineOffsetFromStackViewBottomForView:) ((:POINTER)
                                                                                 :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|visibilityPriorityForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(visibilityPriorityForView:) ((:POINTER) :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_detachedViewsSortedByPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_detachedViewsSortedByPriority) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_attachedViewsSortedByPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_attachedViewsSortedByPriority) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_gravityForContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_gravityForContainer:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_hasActiveClippingOfLastView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasActiveClippingOfLastView) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_deferringDetachAndReattachNotifications:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_deferringDetachAndReattachNotifications:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_detachedViewsSortedByPriorityWithoutUnaddableViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_detachedViewsSortedByPriorityWithoutUnaddableViews) (NIL
                                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_ib_is19704021Fixed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_ib_is19704021Fixed) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_stackViewFinishedDecoding| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_stackViewFinishedDecoding) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_stackViewDecodedWantingFlatHierarchy| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_stackViewDecodedWantingFlatHierarchy) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|perpendicularAlignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(perpendicularAlignment) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setPerpendicularAlignment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPerpendicularAlignment:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|transverseAlignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(transverseAlignment) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTransverseAlignment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTransverseAlignment:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|transverseAlignmentPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(transverseAlignmentPriority) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTransverseAlignmentPriority:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTransverseAlignmentPriority:) ((:FLOAT)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|hasEqualSpacing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasEqualSpacing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setHasEqualSpacing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasEqualSpacing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|effectiveSpacingAfterView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(effectiveSpacingAfterView:) ((:POINTER) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_nsib_setShouldAddConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_nsib_setShouldAddConstraints:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_willDetachViews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_willDetachViews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_didDetachViews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_didDetachViews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_willReattachViews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_willReattachViews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_didReattachViews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_didReattachViews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|beginningViewsContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginningViewsContainer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|middleViewsContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(middleViewsContainer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|endViewsContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endViewsContainer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|currentContainers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentContainers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|currentSpacers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentSpacers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|topSpacer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topSpacer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|bottomSpacer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bottomSpacer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|leftSpacer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(leftSpacer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|rightSpacer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rightSpacer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setArrangedSubviews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setArrangedSubviews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setBaselineRelativeArrangement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBaselineRelativeArrangement:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))








(defun NS::|minimumSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minimumSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))
































(defun NS::|_accessibilityUpdateKeyboardFocusRingForTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityUpdateKeyboardFocusRingForTabViewItem:) ((:POINTER)
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))






(defun NS::|accessibilityContentsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContentsAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsContentsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsContentsAttributeSettable) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hasKeyboardFocus| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasKeyboardFocus) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|moveRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveRight:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveLeft:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))













(defun NS::|springLoadingEntered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingEntered:) ((:POINTER)
                                                        :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|springLoadingHighlightChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingHighlightChanged:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|springLoadingActivated:draggingInfo:| (thing _ dragging-info)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingActivated:draggingInfo:) ((:CHAR
                                                                        :POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (ns-object-ptr dragging-info))))


(defun NS::|_commonInit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_commonInit) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))






(defun NS::|moveDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveUp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))





(defun NS::|springLoadingUpdated:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingUpdated:) ((:POINTER)
                                                        :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|springLoadingExited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingExited:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|contentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|mouseTracker:shouldStartTrackingWithEvent:| (thing _ should-start-tracking-with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouseTracker:shouldStartTrackingWithEvent:) ((:POINTER
                                                                              :POINTER)
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr should-start-tracking-with-event)))) nil t))

(defun NS::|mouseTracker:shouldContinueTrackingWithEvent:| (thing _ should-continue-tracking-with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouseTracker:shouldContinueTrackingWithEvent:) ((:POINTER
                                                                                 :POINTER)
                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr should-continue-tracking-with-event)))) nil t))

(defun NS::|mouseTracker:didStopTrackingWithEvent:| (thing _ did-stop-tracking-with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouseTracker:didStopTrackingWithEvent:) ((:POINTER
                                                                          :POINTER)
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr did-stop-tracking-with-event)))) nil t))

(defun NS::|removeTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))




(defun NS::|_hasSelectedTabRoundedBezel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasSelectedTabRoundedBezel) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_drawTabsInDirtyRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_drawTabsInDirtyRect:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|tabViewItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabViewItems) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tabRectForTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_tabRectForTabViewItem:) ((:POINTER)
                                                          (:STRUCT
                                                           NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_copyCoreUIOptionsForTabViewItem:withState:maskOnly:inRect:| (thing _ with-state mask-only in-rect)
  (let ((message-lambda 
         (make-message-lambda @(_copyCoreUIOptionsForTabViewItem:withState:maskOnly:inRect:) ((:POINTER
                                                                                               :UNSIGNED-LONG-LONG
                                                                                               :CHAR
                                                                                               (:STRUCT
                                                                                                NS::|CGRect|))
                                                                                              (:POINTER
                                                                                               (:STRUCT
                                                                                                NS::|__CFDictionary|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) with-state (if mask-only 1 0) in-rect)))

(defun NS::|_systemColorChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_systemColorChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateTabViewButtons| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateTabViewButtons) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeTabViewItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeTabViewItems:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setTabViewMinimumSizeConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabViewMinimumSizeConstraint:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectedTabViewItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedTabViewItem) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|addTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|tabViewType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabViewType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tabOrientation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabOrientation) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_redisplayForStateChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_redisplayForStateChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_currentBackgroundColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentBackgroundColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasHorizontalOrientation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasHorizontalOrientation) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_tabsAreR2L| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tabsAreR2L) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_layoutTabs| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutTabs) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidateTabsCache| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateTabsCache) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resizeSelectedTabViewItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resizeSelectedTabViewItem) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_willChangeTabViewType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_willChangeTabViewType) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setTabViewTypeFlags:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTabViewTypeFlags:) ((:UNSIGNED-LONG-LONG)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_didChangeTabViewType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_didChangeTabViewType) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasTabs| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasTabs) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|selectTabViewItemAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectTabViewItemAtIndex:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_addedTab:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(_addedTab:atIndex:) ((:POINTER :LONG-LONG)
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-index)))

(defun NS::|indexOfTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfTabViewItem:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setKeyboardFocusRingNeedsDisplayForTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setKeyboardFocusRingNeedsDisplayForTabViewItem:) ((:POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setInteriorNextKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setInteriorNextKeyView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|numberOfTabViewItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(numberOfTabViewItems) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cancelDelayedKeyboardNavigationTabSwitch| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cancelDelayedKeyboardNavigationTabSwitch) (NIL
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setNeedsDisplayForTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsDisplayForTabViewItem:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shouldUseSeparateLayoutEngineForItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldUseSeparateLayoutEngineForItem:) ((:POINTER)
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_tabViewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabViewController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_switchInitialFirstResponder:lastKeyView:forTabViewItem:| (thing _ last-key-view for-tab-view-item)
  (let ((message-lambda 
         (make-message-lambda @(_switchInitialFirstResponder:lastKeyView:forTabViewItem:) ((:POINTER
                                                                                            :POINTER
                                                                                            :POINTER)
                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr last-key-view) (ns-object-ptr for-tab-view-item))))

(defun NS::|_findFirstValidKeyViewStartingFrom:inTabViewItem:| (thing _ in-tab-view-item)
  (let ((message-lambda 
         (make-message-lambda @(_findFirstValidKeyViewStartingFrom:inTabViewItem:) ((:POINTER
                                                                                     :POINTER)
                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr in-tab-view-item))))

(defun NS::|_setNextKeyViewFor:toNextKeyView:| (thing _ to-next-key-view)
  (let ((message-lambda 
         (make-message-lambda @(_setNextKeyViewFor:toNextKeyView:) ((:POINTER
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-next-key-view))))

(defun NS::|tabViewItemAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(tabViewItemAtIndex:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_originalNextKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_originalNextKeyView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isViewValidOriginalNextKeyView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isViewValidOriginalNextKeyView:) ((:POINTER)
                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))





(defun NS::|_shouldSelectTabViewItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldSelectTabViewItem:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_switchTabViewItem:oldView:withTabViewItem:newView:initialFirstResponder:lastKeyView:| (thing _ old-view with-tab-view-item new-view initial-first-responder last-key-view)
  (let ((message-lambda 
         (make-message-lambda @(_switchTabViewItem:oldView:withTabViewItem:newView:initialFirstResponder:lastKeyView:) ((:POINTER
                                                                                                                         :POINTER
                                                                                                                         :POINTER
                                                                                                                         :POINTER
                                                                                                                         :POINTER
                                                                                                                         :POINTER)
                                                                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr old-view) (ns-object-ptr with-tab-view-item) (ns-object-ptr new-view) (ns-object-ptr initial-first-responder) (ns-object-ptr last-key-view))))

(defun NS::|_hasKeyboardFocusInTabItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasKeyboardFocusInTabItem:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|indexOfTabViewItemWithIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfTabViewItemWithIdentifier:) ((:POINTER)
                                                                    :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_previousNextTab:loop:| (thing _ loop)
  (let ((message-lambda 
         (make-message-lambda @(_previousNextTab:loop:) ((:LONG-LONG :CHAR)
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if loop 1 0))))

(defun NS::|_setPressedTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setPressedTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_testTabSwitchingPerformance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_testTabSwitchingPerformance) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_findPreviousNextTab:loop:invertForR2L:startingAtTabItem:| (thing _ loop invert-for-r2-l starting-at-tab-item)
  (let ((message-lambda 
         (make-message-lambda @(_findPreviousNextTab:loop:invertForR2L:startingAtTabItem:) ((:LONG-LONG
                                                                                             :CHAR
                                                                                             :CHAR
                                                                                             :POINTER)
                                                                                            :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if loop 1 0) (if invert-for-r2-l 1 0) (ns-object-ptr starting-at-tab-item))))

(defun NS::|_keyboardNavigateDoSelectOfFocusItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_keyboardNavigateDoSelectOfFocusItem:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_keyboardNavigateToTabAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_keyboardNavigateToTabAtIndex:) ((:LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_keyboardNavigateToTabByDelta:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_keyboardNavigateToTabByDelta:) ((:LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_tabRectAdjustedForOverlap:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_tabRectAdjustedForOverlap:) (((:STRUCT
                                                                NS::|CGRect|))
                                                              (:STRUCT
                                                               NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_usesSubviewsForButtons| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_usesSubviewsForButtons) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_tabViewButtons| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabViewButtons) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_coreUIDrawTab:withState:inRect:maskOnly:| (thing _ with-state in-rect mask-only)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_coreUIDrawTab:withState:inRect:maskOnly:) ((:POINTER
                                                                             :UNSIGNED-LONG-LONG
                                                                             (:STRUCT
                                                                              NS::|CGRect|)
                                                                             :CHAR)
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) with-state in-rect (if mask-only 1 0)))) nil t))

(defun NS::|_tabHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabHeight) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_performTabLayoutIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_performTabLayoutIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasBezelBorder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasBezelBorder) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_backgroundBezelLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_backgroundBezelLayer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_bezelLayerFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_bezelLayerFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addAndUpdateBezelLayerIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_addAndUpdateBezelLayerIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeBackgroundBezelLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeBackgroundBezelLayer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_currentBorderColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentBorderColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_currentBorderWidth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentBorderWidth) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setBackgroundBezelLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setBackgroundBezelLayer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_backgroundBezelMaskLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_backgroundBezelMaskLayer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setBackgroundBezelMaskLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setBackgroundBezelMaskLayer:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_tabViewButtonFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabViewButtonFrame) (NIL
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_createCoreUIMaskOnlyBezelOptionsForTabItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_createCoreUIMaskOnlyBezelOptionsForTabItem:) ((:POINTER)
                                                                               (:POINTER
                                                                                (:STRUCT
                                                                                 NS::|__CFDictionary|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateBackgroundBezelLayerIfRequired| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateBackgroundBezelLayerIfRequired) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_frameForBezelBorder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_frameForBezelBorder) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hackFrameToMatchLegacyBezelRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_hackFrameToMatchLegacyBezelRect:) (((:STRUCT
                                                                      NS::|CGRect|))
                                                                    (:STRUCT
                                                                     NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_shouldAppearActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldAppearActive) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_coreUIDrawBezelInRect:withClip:flipped:| (thing _ with-clip flipped)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_coreUIDrawBezelInRect:withClip:flipped:) (((:STRUCT
                                                                             NS::|CGRect|)
                                                                            (:STRUCT
                                                                             NS::|CGRect|)
                                                                            :CHAR)
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ with-clip (if flipped 1 0)))) nil t))

(defun NS::|_createCoreUIBezelOptionsFlipped:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_createCoreUIBezelOptionsFlipped:) ((:CHAR)
                                                                    (:POINTER
                                                                     (:STRUCT
                                                                      NS::|__CFDictionary|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_addTabViewButtonsIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_addTabViewButtonsIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeTabButtonSubviewIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeTabButtonSubviewIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setTabViewButtons:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTabViewButtons:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_drawTabViewItem:inRect:| (thing _ in-rect)
  (let ((message-lambda 
         (make-message-lambda @(_drawTabViewItem:inRect:) ((:POINTER
                                                            (:STRUCT
                                                             NS::|CGRect|))
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) in-rect)))

(defun NS::|_titleRectForTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_titleRectForTabViewItem:) ((:POINTER)
                                                            (:STRUCT
                                                             NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_drawBackgroundAndBorderInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_drawBackgroundAndBorderInRect:) (((:STRUCT
                                                                    NS::|CGRect|))
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_coreUIDrawTab:withState:inRect:| (thing _ with-state in-rect)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_coreUIDrawTab:withState:inRect:) ((:POINTER
                                                                    :UNSIGNED-LONG-LONG
                                                                    (:STRUCT
                                                                     NS::|CGRect|))
                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) with-state in-rect))) nil t))

(defun NS::|_drawThemeTab:withState:inRect:| (thing _ with-state in-rect)
  (let ((message-lambda 
         (make-message-lambda @(_drawThemeTab:withState:inRect:) ((:POINTER
                                                                   :UNSIGNED-LONG-LONG
                                                                   (:STRUCT
                                                                    NS::|CGRect|))
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) with-state in-rect)))

(defun NS::|_nominalSizeNeedForTabItemLabel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_nominalSizeNeedForTabItemLabel:) ((:POINTER)
                                                                   (:STRUCT
                                                                    NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_endTabWidth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endTabWidth) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_labelRectForTabRect:forItem:| (thing _ for-item)
  (let ((message-lambda 
         (make-message-lambda @(_labelRectForTabRect:forItem:) (((:STRUCT
                                                                  NS::|CGRect|)
                                                                 :POINTER)
                                                                (:STRUCT
                                                                 NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-item))))

(defun NS::|_tabIndexIsLeftOrTop:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tabIndexIsLeftOrTop:) ((:UNSIGNED-LONG-LONG)
                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_tabIndexIsRightOrBottom:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tabIndexIsRightOrBottom:) ((:UNSIGNED-LONG-LONG)
                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_drawBezelBorderInBounds:clipRect:| (thing _ clip-rect)
  (let ((message-lambda 
         (make-message-lambda @(_drawBezelBorderInBounds:clipRect:) (((:STRUCT
                                                                       NS::|CGRect|)
                                                                      (:STRUCT
                                                                       NS::|CGRect|))
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ clip-rect)))

(defun NS::|_themeTabAndBarArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_themeTabAndBarArea) (NIL
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_old_encodeWithCoder_NSTabView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_old_encodeWithCoder_NSTabView:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_old_initWithCoder_NSTabView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_old_initWithCoder_NSTabView:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|tabViewMinimumSizeConstraint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabViewMinimumSizeConstraint) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateMinimumSizeConstraint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateMinimumSizeConstraint) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_totalMinimumTabsLengthWithOverlap:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_totalMinimumTabsLengthWithOverlap:) ((:DOUBLE)
                                                                      :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_minimumSizeNeedForTabItemLabel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_minimumSizeNeedForTabItemLabel:) ((:POINTER)
                                                                   (:STRUCT
                                                                    NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_totalTabsLength:overlap:| (thing _ overlap)
  (let ((message-lambda 
         (make-message-lambda @(_totalTabsLength:overlap:) ((:CHAR :DOUBLE)
                                                            :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) overlap)))

(defun NS::|_totalNominalTabsLengthWithOverlap:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_totalNominalTabsLengthWithOverlap:) ((:DOUBLE)
                                                                      :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_tabEnumerationFromLeftToRight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabEnumerationFromLeftToRight) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doLayoutTabs:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_doLayoutTabs:) ((:DOUBLE) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_updateTabViewButtonsFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateTabViewButtonsFrame) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_themeContentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_themeContentRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|tabViewItemAtPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(tabViewItemAtPoint:) (((:STRUCT NS::|CGPoint|))
                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_tabViewItemForSpringLoading| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabViewItemForSpringLoading) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setTabViewItemForSpringLoading:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTabViewItemForSpringLoading:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_springLoadItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_springLoadItem) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tabViewOwnedByTabViewController| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tabViewOwnedByTabViewController) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_tabViewControllerAllowsPropertyChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tabViewControllerAllowsPropertyChange) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_doTestTabSwitchingPerformance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doTestTabSwitchingPerformance) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|allowsTruncatedLabels| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsTruncatedLabels) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setTabViewItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabViewItems:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|tabPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabPosition) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|tabViewBorderType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabViewBorderType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAllowsTruncatedLabels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsTruncatedLabels:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setTabViewType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabViewType:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setTabPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabPosition:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setTabViewBorderType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabViewBorderType:) ((:UNSIGNED-LONG-LONG)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|insertTabViewItem:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertTabViewItem:atIndex:) ((:POINTER
                                                              :LONG-LONG)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-index)))

(defun NS::|_wiringNibConnections| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wiringNibConnections) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|takeSelectedTabViewItemFromSender:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeSelectedTabViewItemFromSender:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectTabViewItemWithIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectTabViewItemWithIdentifier:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectFirstTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectFirstTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectLastTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectLastTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectNextTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectNextTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectPreviousTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectPreviousTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_frameSizeForContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_frameSizeForContentSize:) (((:STRUCT
                                                              NS::|CGSize|))
                                                            (:STRUCT
                                                             NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_pressedTabViewItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_pressedTabViewItem) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_maxOverlap| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_maxOverlap) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setMaxOverlap:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setMaxOverlap:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_currentTabHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentTabHeight) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setCurrentTabHeight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCurrentTabHeight:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setNeedsLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsLayout:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setEndTabWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setEndTabWidth:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setTabViewItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTabViewItems:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setTabViewControllerAllowsPropertyChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTabViewControllerAllowsPropertyChange:) ((:CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|accessibilityTabsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTabsAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsTabsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTabsAttributeSettable) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))










(defun NS::|_update| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_update) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))








(defun NS::|setBorderType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBorderType:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setHasVerticalScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasVerticalScroller:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setVerticalScrollElasticity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalScrollElasticity:) ((:LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setHasHorizontalScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasHorizontalScroller:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|horizontalScroller| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalScroller) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setHorizontalScrollElasticity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalScrollElasticity:) ((:LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAutomaticallyAdjustsContentInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticallyAdjustsContentInsets:) ((:CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setContentInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentInsets:) (((:STRUCT
                                                      NS::|NSEdgeInsets|))
                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setHasHorizontalMoreContentIndicators:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasHorizontalMoreContentIndicators:) ((:CHAR)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setDocumentView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDocumentView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))




(defun NS::|hasHorizontalMoreContentIndicators| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasHorizontalMoreContentIndicators) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|contentView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|documentView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(documentView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_wantsPageAlignedHorizontalAxis| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsPageAlignedHorizontalAxis) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setWantsPageAlignedHorizontalAxis:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWantsPageAlignedHorizontalAxis:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_wantsPageAlignedVerticalAxis| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsPageAlignedVerticalAxis) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setWantsPageAlignedVerticalAxis:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWantsPageAlignedVerticalAxis:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|gestureRecognizer:shouldReceiveTouch:| (thing _ should-receive-touch)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(gestureRecognizer:shouldReceiveTouch:) ((:POINTER
                                                                         :POINTER)
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr should-receive-touch)))) nil t))






(defun NS::|setContentView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))











(defun NS::|_contentView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_contentView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|setHasTopShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasTopShadow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setHasBottomShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasBottomShadow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|reflectScrolledClipView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(reflectScrolledClipView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|verticalScroller| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalScroller) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_automateLiveScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_automateLiveScroll) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_shouldUseFocusRingMask| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldUseFocusRingMask) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|borderType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(borderType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))





(defun NS::|hasHorizontalScroller| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasHorizontalScroller) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|tile| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tile) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAutohidesScrollers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutohidesScrollers:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|autohidesScrollers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autohidesScrollers) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|documentVisibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(documentVisibleRect) (NIL
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAutoforwardsScrollWheelEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoforwardsScrollWheelEvents:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|contentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setLineBorderColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setLineBorderColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setHorizontalLineScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalLineScroll:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setScrollerInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollerInsets:) (((:STRUCT
                                                       NS::|NSEdgeInsets|))
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|scrollerStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentInsets) (NIL
                                                (:STRUCT NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|horizontalLineScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalLineScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|automaticallyAdjustsContentInsets| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(automaticallyAdjustsContentInsets) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))





(defun NS::|setScrollerStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollerStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_doScroller:hitPart:multiplier:| (thing _ hit-part multiplier)
  (let ((message-lambda 
         (make-message-lambda @(_doScroller:hitPart:multiplier:) ((:POINTER
                                                                   :LONG-LONG
                                                                   :DOUBLE)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) hit-part multiplier)))


(defun NS::|_overlayScroller:didBecomeShown:| (thing _ did-become-shown)
  (let ((message-lambda 
         (make-message-lambda @(_overlayScroller:didBecomeShown:) ((:POINTER
                                                                    :CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if did-become-shown 1 0))))

(defun NS::|_lockOverlayScrollerState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_lockOverlayScrollerState:) ((:UNSIGNED-LONG-LONG)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_unlockOverlayScrollerState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unlockOverlayScrollerState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessoryViewMightInterfereWithOverlayScrollers:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_accessoryViewMightInterfereWithOverlayScrollers:) ((:POINTER)
                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_boundsInsetForBorder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_boundsInsetForBorder) (NIL
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|scrollerImpPair| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImpPair) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setLineScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineScroll:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|hasVerticalScroller| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasVerticalScroller) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityHorizontalScrollBarAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalScrollBarAttribute) (NIL
                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsHorizontalScrollBarAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsHorizontalScrollBarAttributeSettable) (NIL
                                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|scrollClipView:toPoint:| (thing _ to-point)
  (let ((message-lambda 
         (make-message-lambda @(scrollClipView:toPoint:) ((:POINTER
                                                           (:STRUCT
                                                            NS::|CGPoint|))
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) to-point)))


(defun NS::|_allowsVerticalStretching| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsVerticalStretching) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_allowsHorizontalStretching| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsHorizontalStretching) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_headerClipView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_headerClipView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_insetBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_insetBounds) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_reflectDocumentViewBoundsChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_reflectDocumentViewBoundsChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|verticalLineScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalLineScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_repeatMultiplier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_repeatMultiplier:) ((:DOUBLE) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|flashScrollers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flashScrollers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_informDelegateUserDidLiveScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_informDelegateUserDidLiveScroll) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setDocumentCursor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDocumentCursor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|drawsContentShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsContentShadow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setDrawsContentShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawsContentShadow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|contentInset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentInset) (NIL (:STRUCT NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setContentInset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentInset:) (((:STRUCT
                                                     NS::|NSEdgeInsets|))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|documentCursor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(documentCursor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))




(defun NS::|setVerticalScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalScroller:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pageDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pageDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pageUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pageUp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|magnifyWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(magnifyWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setMagnification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMagnification:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_magnification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_magnification) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))




(defun NS::|_automatedLiveScrollingWillBegin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_automatedLiveScrollingWillBegin) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_automatedLiveScrollingDidEnd| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_automatedLiveScrollingDidEnd) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_endScrollGesture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endScrollGesture) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_scrollingModeForAxis:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scrollingModeForAxis:) ((:LONG-LONG)
                                                         :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_beginScrollGesture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_beginScrollGesture) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|decelerationRate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(decelerationRate) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|findBarView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(findBarView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_isConcurrentScrollingCompatible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isConcurrentScrollingCompatible) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setHorizontalScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalScroller:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_gestureRecognizer:shouldReceiveTouch:| (thing _ should-receive-touch)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_gestureRecognizer:shouldReceiveTouch:) ((:POINTER
                                                                          :POINTER)
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr should-receive-touch)))) nil t))

(defun NS::|accessibilityScrollToShowDescendantAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityScrollToShowDescendantAttributeForParameter:) ((:POINTER)
                                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_tileIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tileIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))




(defun NS::|smartMagnifyWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(smartMagnifyWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|beginGestureWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(beginGestureWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|endGestureWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endGestureWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateRulerlineForRuler:oldPosition:newPosition:vertical:| (thing _ old-position new-position vertical)
  (let ((message-lambda 
         (make-message-lambda @(_updateRulerlineForRuler:oldPosition:newPosition:vertical:) ((:POINTER
                                                                                              :DOUBLE
                                                                                              :DOUBLE
                                                                                              :CHAR)
                                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) old-position new-position (if vertical 1 0))))

(defun NS::|rulersVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulersVisible) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setRulersVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRulersVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_cornerView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cornerView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|horizontalRulerView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalRulerView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|verticalRulerView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalRulerView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityVerticalScrollBarAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalScrollBarAttribute) (NIL
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|hasHorizontalRuler| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasHorizontalRuler) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|hasVerticalRuler| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasVerticalRuler) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_accessibilityAdditionalChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityAdditionalChildren) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|horizontalPageScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalPageScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|verticalPageScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalPageScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsVerticalScrollBarAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsVerticalScrollBarAttributeSettable) (NIL
                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_destinationFloatValueForScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_destinationFloatValueForScroller:) ((:POINTER)
                                                                     :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_conditionallyReflectScrolledClipView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_conditionallyReflectScrolledClipView) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_overlayScrollersShown| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_overlayScrollersShown) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|usesPredominantAxisScrolling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesPredominantAxisScrolling) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_pageAlignmentsForAxis:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_pageAlignmentsForAxis:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_synchronizedSiblingsForAxis:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_synchronizedSiblingsForAxis:) ((:LONG-LONG)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_stretchAmount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_stretchAmount) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unregisterNonInterferingAccessoryView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_unregisterNonInterferingAccessoryView:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_registerNonInterferingAccessoryView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_registerNonInterferingAccessoryView:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setScrollingMode:forAxis:| (thing _ for-axis)
  (let ((message-lambda 
         (make-message-lambda @(_setScrollingMode:forAxis:) ((:UNSIGNED-LONG-LONG
                                                              :LONG-LONG)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ for-axis)))

(defun NS::|_verticalScrollerWidthWithBorder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_verticalScrollerWidthWithBorder) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addBackgroundView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addBackgroundView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_setContentExtendsUnderHeader:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setContentExtendsUnderHeader:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_contentExtendsUnderHeader| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_contentExtendsUnderHeader) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|addFloatingSubview:forAxis:| (thing _ for-axis)
  (let ((message-lambda 
         (make-message-lambda @(addFloatingSubview:forAxis:) ((:POINTER
                                                               :LONG-LONG)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-axis)))

(defun NS::|_pointInVisibleScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_pointInVisibleScroller:) (((:STRUCT
                                                             NS::|CGPoint|))
                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setHasHorizontalRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasHorizontalRuler:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setHasVerticalRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasVerticalRuler:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))



(defun NS::|setDecelerationRate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDecelerationRate:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|horizontalScrollDecelerationFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalScrollDecelerationFactor) (NIL
                                                                     :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setHorizontalScrollDecelerationFactor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalScrollDecelerationFactor:) ((:DOUBLE)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|verticalScrollDecelerationFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalScrollDecelerationFactor) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setVerticalScrollDecelerationFactor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalScrollDecelerationFactor:) ((:DOUBLE)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|_shouldUseInclusiveLayersAutomatically| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldUseInclusiveLayersAutomatically) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|findBarPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(findBarPosition) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isFindBarVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFindBarVisible) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_cornerViewHidesWithVerticalScroller| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_cornerViewHidesWithVerticalScroller) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_usesOverlayScrollers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_usesOverlayScrollers) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_findBarDesiredHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_findBarDesiredHeight) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|scrollerInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerInsets) (NIL
                                                 (:STRUCT NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_floatingSubviewsContainerForAxis:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_floatingSubviewsContainerForAxis:) ((:LONG-LONG)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_pulseOverlayScrollers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_pulseOverlayScrollers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_informDelegateWillStartLiveScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_informDelegateWillStartLiveScroll) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_informDelegateDidEndLiveScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_informDelegateDidEndLiveScroll) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_willCoverBackingStore| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_willCoverBackingStore) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hasNonLayeredOverlappingSiblingView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasNonLayeredOverlappingSiblingView) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_scrollViewWillMoveToWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scrollViewWillMoveToWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scrollViewDidMoveToWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scrollViewDidMoveToWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setMirrorView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setMirrorView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_resetOverlayScrollerFlashForWindowOrderOut:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_resetOverlayScrollerFlashForWindowOrderOut:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_ensureOverlayScrollerFlashForWindowOrderIn:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_ensureOverlayScrollerFlashForWindowOrderIn:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_dynamicColorsChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_dynamicColorsChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_snapRubberBandDueToNotification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_snapRubberBandDueToNotification:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_mirrorView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_mirrorView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_horizontalScrollerHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_horizontalScrollerHeight) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_verticalScrollerWidth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_verticalScrollerWidth) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_horizontalScrollerHeightWithBorder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_horizontalScrollerHeightWithBorder) (NIL
                                                                      :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setContentViewFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setContentViewFrame:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setVerticalScrollerHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setVerticalScrollerHidden:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setHorizontalScrollerHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setHorizontalScrollerHidden:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_tileWithoutRecursing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tileWithoutRecursing) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|scrollerKnobStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerKnobStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setScrollerKnobStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollerKnobStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_documentViewWantsHeaderView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_documentViewWantsHeaderView) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_fixHeaderAndCornerViews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_fixHeaderAndCornerViews) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_betweenScrollersRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_betweenScrollersRect) (NIL
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_drawBetweenScrollersWidgetInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_drawBetweenScrollersWidgetInRect:) (((:STRUCT
                                                                       NS::|CGRect|))
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_lineBorderColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lineBorderColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_drawOldSchoolFocusRingIfNecessaryInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_drawOldSchoolFocusRingIfNecessaryInRect:) (((:STRUCT
                                                                              NS::|CGRect|))
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_dirtyFocusRingOrMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dirtyFocusRingOrMask) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateWithDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateWithDisplay) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_newScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_newScroll:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_commonNewScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_commonNewScroll:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_doScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_doScroller:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scrollerDidBeginTracking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scrollerDidBeginTracking:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scrollerDidEndTracking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scrollerDidEndTracking:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setVerticalLineScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalLineScroll:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setHorizontalPageScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalPageScroll:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setVerticalPageScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalPageScroll:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_pinnedInDirectionX:y:| (thing _ y)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_pinnedInDirectionX:y:) ((:DOUBLE :DOUBLE)
                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ y))) nil t))

(defun NS::|verticalScrollElasticity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalScrollElasticity) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|horizontalScrollElasticity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalScrollElasticity) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|allowsMagnification| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsMagnification) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_beginMagnifyGesture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_beginMagnifyGesture) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setMagnification:centeredAroundPoint:animate:| (thing _ centered-around-point animate)
  (let ((message-lambda 
         (make-message-lambda @(_setMagnification:centeredAroundPoint:animate:) ((:DOUBLE
                                                                                  (:STRUCT
                                                                                   NS::|CGPoint|)
                                                                                  :CHAR)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ centered-around-point (if animate 1 0))))

(defun NS::|_endMagnifyGesture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endMagnifyGesture) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|maxMagnification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maxMagnification) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|minMagnification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minMagnification) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_smartMagnifyToRect:centeredAt:animate:| (thing _ centered-at animate)
  (let ((message-lambda 
         (make-message-lambda @(_smartMagnifyToRect:centeredAt:animate:) (((:STRUCT
                                                                            NS::|CGRect|)
                                                                           (:STRUCT
                                                                            NS::|CGPoint|)
                                                                           :CHAR)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ centered-at (if animate 1 0))))

(defun NS::|_beginMagnifying| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_beginMagnifying) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_endMagnifying| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endMagnifying) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_scrollPageInDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scrollPageInDirection:) ((:INT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_applyContentAreaLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_applyContentAreaLayout:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateBetweenScrollersView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateBetweenScrollersView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_canOptInToConcurrentScrolling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canOptInToConcurrentScrolling) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setIngoreSynchronizedSiblings:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIngoreSynchronizedSiblings:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setMagnification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setMagnification:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_magnifyToFitRect:animate:| (thing _ animate)
  (let ((message-lambda 
         (make-message-lambda @(_magnifyToFitRect:animate:) (((:STRUCT
                                                               NS::|CGRect|)
                                                              :CHAR)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if animate 1 0))))

(defun NS::|_synchronizedSiblingForAxis:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_synchronizedSiblingForAxis:) ((:LONG-LONG)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|separatorOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(separatorOffset) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentAreaRectForScrollerImpPair:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentAreaRectForScrollerImpPair:) ((:POINTER)
                                                                     (:STRUCT
                                                                      NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|inLiveResizeForScrollerImpPair:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(inLiveResizeForScrollerImpPair:) ((:POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|mouseLocationInContentAreaForScrollerImpPair:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseLocationInContentAreaForScrollerImpPair:) ((:POINTER)
                                                                                (:STRUCT
                                                                                 NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|scrollerImpPair:convertContentPoint:toScrollerImp:| (thing _ convert-content-point to-scroller-imp)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImpPair:convertContentPoint:toScrollerImp:) ((:POINTER
                                                                                      (:STRUCT
                                                                                       NS::|CGPoint|)
                                                                                      :POINTER)
                                                                                     (:STRUCT
                                                                                      NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) convert-content-point (ns-object-ptr to-scroller-imp))))

(defun NS::|scrollerImpPair:updateScrollerStyleForNewRecommendedScrollerStyle:| (thing _ update-scroller-style-for-new-recommended-scroller-style)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImpPair:updateScrollerStyleForNewRecommendedScrollerStyle:) ((:POINTER
                                                                                                      :LONG-LONG)
                                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) update-scroller-style-for-new-recommended-scroller-style)))

(defun NS::|scrollerImpPair:isContentPointVisible:| (thing _ is-content-point-visible)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scrollerImpPair:isContentPointVisible:) ((:POINTER
                                                                          (:STRUCT
                                                                           NS::|CGPoint|))
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) is-content-point-visible))) nil t))

(defun NS::|findBarViewDidChangeHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(findBarViewDidChangeHeight) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFindBarView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFindBarView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setFindBarVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFindBarVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|computedScrollViewFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computedScrollViewFrame) (NIL
                                                          (:STRUCT
                                                           NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|computedHasScrolledContentsUnderTitlebar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computedHasScrolledContentsUnderTitlebar) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|computed_distancesScrolledFromDocumentEdges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computed_distancesScrolledFromDocumentEdges) (NIL
                                                                              (:STRUCT
                                                                               NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_mirrorRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_mirrorRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setScrollsDynamically:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollsDynamically:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|scrollsDynamically| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scrollsDynamically) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|hasTopShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasTopShadow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setTopShadowTopInset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTopShadowTopInset:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|topShadowTopInset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topShadowTopInset) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTopShadowMinimumRequiredContentYOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTopShadowMinimumRequiredContentYOffset:) ((:DOUBLE)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|topShadowMinimumRequiredContentYOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topShadowMinimumRequiredContentYOffset) (NIL
                                                                         :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|hasBottomShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasBottomShadow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setScrollerNeedsDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setScrollerNeedsDisplay:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|lineScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setPageScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPageScroll:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|pageScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pageScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_pinnedInDirectionOfScroll:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_pinnedInDirectionOfScroll:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_hasScrollOccurredOutsideOfGesture| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasScrollOccurredOutsideOfGesture) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setHasScrollOccurredOutsideOfGesture:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setHasScrollOccurredOutsideOfGesture:) ((:CHAR)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_gestureRecognizer:shouldAttemptToRecognizeWithEvent:| (thing _ should-attempt-to-recognize-with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_gestureRecognizer:shouldAttemptToRecognizeWithEvent:) ((:POINTER
                                                                                         :POINTER)
                                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr should-attempt-to-recognize-with-event)))) nil t))

(defun NS::|_gestureRecognizerFailed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_gestureRecognizerFailed:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_panWithGestureRecognizer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_panWithGestureRecognizer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_magnificationInflectionPoints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_magnificationInflectionPoints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setUsesPredominantAxisScrolling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesPredominantAxisScrolling:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setFindBarPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFindBarPosition:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAllowsMagnification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsMagnification:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setMaxMagnification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaxMagnification:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setMinMagnification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinMagnification:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|magnifyToFitRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(magnifyToFitRect:) (((:STRUCT NS::|CGRect|))
                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setMagnification:centeredAtPoint:| (thing _ centered-at-point)
  (let ((message-lambda 
         (make-message-lambda @(setMagnification:centeredAtPoint:) ((:DOUBLE
                                                                     (:STRUCT
                                                                      NS::|CGPoint|))
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ centered-at-point)))

(defun NS::|_setPageAlignments:forAxis:| (thing _ for-axis)
  (let ((message-lambda 
         (make-message-lambda @(_setPageAlignments:forAxis:) ((:POINTER
                                                               :LONG-LONG)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-axis)))

(defun NS::|addFloatingHeaderView:forAxis:| (thing _ for-axis)
  (let ((message-lambda 
         (make-message-lambda @(addFloatingHeaderView:forAxis:) ((:POINTER
                                                                  :LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-axis)))

(defun NS::|removeFloatingHeaderView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeFloatingHeaderView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_resetScrollingBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetScrollingBehavior) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|autoforwardsScrollWheelEvents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoforwardsScrollWheelEvents) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hideOverlayScrollers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_hideOverlayScrollers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_overlayScrollerStateIsLocked| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_overlayScrollerStateIsLocked) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setSynchronizedSibling:forAxis:| (thing _ for-axis)
  (let ((message-lambda 
         (make-message-lambda @(_setSynchronizedSibling:forAxis:) ((:POINTER
                                                                    :LONG-LONG)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-axis)))

(defun NS::|_setStuntedForIB:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setStuntedForIB:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_isStuntedForIB| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isStuntedForIB) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|automaticallyAdjustsContentViewInsets| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(automaticallyAdjustsContentViewInsets) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAutomaticallyAdjustsContentViewInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticallyAdjustsContentViewInsets:) ((:CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|computed_contentExtendsPastContentInsets| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computed_contentExtendsPastContentInsets) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setHorizontalRulerView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalRulerView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setVerticalRulerView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalRulerView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|rulerStateDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rulerStateDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))












































(defun NS::|accessibilityOrientationAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityOrientationAttribute) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsOrientationAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsOrientationAttributeSettable) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|setArrowsPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setArrowsPosition:) ((:UNSIGNED-LONG-LONG)
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|checkSpaceForParts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(checkSpaceForParts) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))




(defun NS::|overlayScrollerKnobAlpha| (thing)
  (let ((message-lambda 
         (make-message-lambda @(overlayScrollerKnobAlpha) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|rectForPart:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rectForPart:) ((:UNSIGNED-LONG-LONG)
                                               (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_lionScrollerStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lionScrollerStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|highlight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(highlight:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|_overlayScrollerState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_overlayScrollerState) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|_orientation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_orientation) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|testPart:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(testPart:) (((:STRUCT NS::|CGPoint|))
                                            :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setNeedsDisplayIfNotLayerBackedOverlayCompatible| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsDisplayIfNotLayerBackedOverlayCompatible) (NIL
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_routeAroundScrollerStyleAccessors| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_routeAroundScrollerStyleAccessors) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setFloatValue:knobProportion:| (thing _ knob-proportion)
  (let ((message-lambda 
         (make-message-lambda @(setFloatValue:knobProportion:) ((:FLOAT
                                                                 :DOUBLE)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ knob-proportion)))

(defun NS::|_replaceScrollerImp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_replaceScrollerImp) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setOverlayScrollerState:forceImmediately:| (thing _ force-immediately)
  (let ((message-lambda 
         (make-message-lambda @(_setOverlayScrollerState:forceImmediately:) ((:UNSIGNED-LONG-LONG
                                                                              :CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if force-immediately 1 0))))

(defun NS::|_really_setLionScrollerStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_really_setLionScrollerStyle:) ((:LONG-LONG)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setKnobStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKnobStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_drawingRectForPart:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_drawingRectForPart:) ((:UNSIGNED-LONG-LONG)
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|usableParts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(usableParts) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|drawArrow:highlight:| (thing _ highlight)
  (let ((message-lambda 
         (make-message-lambda @(drawArrow:highlight:) ((:UNSIGNED-LONG-LONG
                                                        :CHAR)
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if highlight 1 0))))

(defun NS::|_old_drawArrow:highlightPart:| (thing _ highlight-part)
  (let ((message-lambda 
         (make-message-lambda @(_old_drawArrow:highlightPart:) ((:UNSIGNED-LONG-LONG
                                                                 :UNSIGNED-LONG-LONG)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ highlight-part)))

(defun NS::|drawKnobSlotInRect:highlight:| (thing _ highlight)
  (let ((message-lambda 
         (make-message-lambda @(drawKnobSlotInRect:highlight:) (((:STRUCT
                                                                  NS::|CGRect|)
                                                                 :CHAR)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if highlight 1 0))))

(defun NS::|drawArrow:highlightPart:| (thing _ highlight-part)
  (let ((message-lambda 
         (make-message-lambda @(drawArrow:highlightPart:) ((:UNSIGNED-LONG-LONG
                                                            :UNSIGNED-LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ highlight-part)))

(defun NS::|drawKnob| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawKnob) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|overlayScrollerTrackAlpha| (thing)
  (let ((message-lambda 
         (make-message-lambda @(overlayScrollerTrackAlpha) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setTrackingInKnob:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTrackingInKnob:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_postScrollerDidBeginTrackingNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postScrollerDidBeginTrackingNotification) (NIL
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setThumbingDoubleValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setThumbingDoubleValue:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setThumbingKnobProportion:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setThumbingKnobProportion:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_isTrackingInKnob| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isTrackingInKnob) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_thumbingDoubleValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_thumbingDoubleValue) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_thumbingKnobProportion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_thumbingKnobProportion) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postScrollerDidEndTrackingNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postScrollerDidEndTrackingNotification) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_testPartUsingDestinationFloatValue:scrollView:| (thing _ scroll-view)
  (let ((message-lambda 
         (make-message-lambda @(_testPartUsingDestinationFloatValue:scrollView:) (((:STRUCT
                                                                                    NS::|CGPoint|)
                                                                                   :POINTER)
                                                                                  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr scroll-view))))

(defun NS::|trackKnob:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(trackKnob:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|trackPagingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(trackPagingArea:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|trackScrollButtons:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(trackScrollButtons:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setKnobProportion:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKnobProportion:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setNeedsDisplayIfNotLayerBackedOverlayCompatibleInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsDisplayIfNotLayerBackedOverlayCompatibleInRect:) (((:STRUCT
                                                                                             NS::|CGRect|))
                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|knobProportion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(knobProportion) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setLionScrollerStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setLionScrollerStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setUiStateTransitionProgress:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUiStateTransitionProgress:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setExpansionTransitionProgress:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setExpansionTransitionProgress:) ((:DOUBLE)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_uiStateTransitionProgress| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_uiStateTransitionProgress) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_expansionTransitionProgress| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_expansionTransitionProgress) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setOverlayScrollerKnobAlpha:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOverlayScrollerKnobAlpha:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setOverlayScrollerTrackAlpha:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOverlayScrollerTrackAlpha:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setPresentationValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPresentationValue:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setUsePresentationValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsePresentationValue:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_changeDoubleValueWithActionBy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_changeDoubleValueWithActionBy:) ((:DOUBLE)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|scrollerImp:animateKnobAlphaTo:duration:| (thing _ animate-knob-alpha-to duration)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:animateKnobAlphaTo:duration:) ((:POINTER
                                                                            :DOUBLE
                                                                            :DOUBLE)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) animate-knob-alpha-to duration)))

(defun NS::|scrollerImp:animateTrackAlphaTo:duration:| (thing _ animate-track-alpha-to duration)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:animateTrackAlphaTo:duration:) ((:POINTER
                                                                             :DOUBLE
                                                                             :DOUBLE)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) animate-track-alpha-to duration)))

(defun NS::|scrollerImp:overlayScrollerStateChangedTo:| (thing _ overlay-scroller-state-changed-to)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:overlayScrollerStateChangedTo:) ((:POINTER
                                                                              :UNSIGNED-LONG-LONG)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) overlay-scroller-state-changed-to)))

(defun NS::|scrollerImp:animateUIStateTransitionWithDuration:| (thing _ animate-u-i-state-transition-with-duration)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:animateUIStateTransitionWithDuration:) ((:POINTER
                                                                                     :DOUBLE)
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) animate-u-i-state-transition-with-duration)))

(defun NS::|scrollerImp:animateExpansionTransitionWithDuration:| (thing _ animate-expansion-transition-with-duration)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:animateExpansionTransitionWithDuration:) ((:POINTER
                                                                                       :DOUBLE)
                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) animate-expansion-transition-with-duration)))

(defun NS::|mouseLocationInScrollerForScrollerImp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseLocationInScrollerForScrollerImp:) ((:POINTER)
                                                                         (:STRUCT
                                                                          NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|shouldUseLayerPerPartForScrollerImp:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldUseLayerPerPartForScrollerImp:) ((:POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_repeatTime| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_repeatTime) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|knobStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(knobStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|drawParts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawParts) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|arrowsPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(arrowsPosition) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|hitPart| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hitPart) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hitPart| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_hitPart) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setHitPart:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setHitPart:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_fixScrollerImpForSwizzlers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_fixScrollerImpForSwizzlers) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|layer:shouldInheritContentsScale:fromWindow:| (thing _ should-inherit-contents-scale from-window)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(layer:shouldInheritContentsScale:fromWindow:) ((:POINTER
                                                                                :DOUBLE
                                                                                :POINTER)
                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) should-inherit-contents-scale (ns-object-ptr from-window)))) nil t))

(defun NS::|_setAvoidingOtherScrollerThumb:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAvoidingOtherScrollerThumb:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setIsHorizontal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIsHorizontal:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|scrollerImp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_decrementLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_decrementLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_incrementLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_incrementLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_decrementPage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_decrementPage:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_incrementPage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_incrementPage:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_scrollByDelta:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scrollByDelta:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_accessibilityScrollView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityScrollView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilitySupportedPartCodes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySupportedPartCodes) (NIL
                                                                   (:POINTER
                                                                    :UNSIGNED-LONG-LONG))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityUIElementForPartCode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityUIElementForPartCode:) ((:UNSIGNED-LONG-LONG)
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_accessibilityIsSupportedPartCode:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_accessibilityIsSupportedPartCode:) ((:UNSIGNED-LONG-LONG)
                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))






(defun NS::|screen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(screen) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))





















(defun NS::|setContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentSize:) (((:STRUCT NS::|CGSize|))
                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|_setIsScrollDueToUserAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIsScrollDueToUserAction:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_pixelAlignProposedScrollPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_pixelAlignProposedScrollPosition:) (((:STRUCT
                                                                       NS::|CGPoint|))
                                                                     (:STRUCT
                                                                      NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_immediateScrollToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_immediateScrollToPoint:) (((:STRUCT
                                                             NS::|CGPoint|))
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|scrollToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollToPoint:) (((:STRUCT NS::|CGPoint|))
                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))





(defun NS::|setCopiesOnScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCopiesOnScroll:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|_scrollRectToVisible:fromView:animateScroll:flashScrollerKnobs:| (thing _ from-view animate-scroll flash-scroller-knobs)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scrollRectToVisible:fromView:animateScroll:flashScrollerKnobs:) (((:POINTER
                                                                                                    (:STRUCT
                                                                                                     NS::|CGRect|))
                                                                                                   :POINTER
                                                                                                   :LONG-LONG
                                                                                                   :UNSIGNED-LONG-LONG)
                                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-view) animate-scroll flash-scroller-knobs))) nil t))



(defun NS::|documentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(documentRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))







(defun NS::|_setCanAnimateScrolls:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCanAnimateScrolls:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))




(defun NS::|_currentDocViewFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentDocViewFrame) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_scrollTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scrollTo:) (((:POINTER
                                               (:STRUCT NS::|CGPoint|)))
                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_reflectDocumentViewFrameChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_reflectDocumentViewFrameChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_selfBoundsChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_selfBoundsChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_pinDocRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_pinDocRect) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_isUsedByCell| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isUsedByCell) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_markUsedByCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_markUsedByCell) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_alignOriginOfBoundsRectToBackingIfNeeded:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_alignOriginOfBoundsRectToBackingIfNeeded:) (((:POINTER
                                                                               (:STRUCT
                                                                                NS::|CGRect|)))
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))


(defun NS::|viewFrameChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewFrameChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|viewBoundsChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewBoundsChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_unregisterForDocViewFrameAndBoundsChangeNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unregisterForDocViewFrameAndBoundsChangeNotifications) (NIL
                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeOverhangSubviewsIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeOverhangSubviewsIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_registerForDocViewFrameAndBoundsChangeNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_registerForDocViewFrameAndBoundsChangeNotifications) (NIL
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addOverhangSubviewsIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_addOverhangSubviewsIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_alignCoords| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_alignCoords) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|automaticallyCalculatesContentSize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(automaticallyCalculatesContentSize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_overhangSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_overhangSubviews) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setOverhangSubviews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setOverhangSubviews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_getOverhangFrames:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_getOverhangFrames:) (((:ARRAY
                                                        (:STRUCT NS::|CGRect|)
                                                        8))
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_drawsOverhangRects| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_drawsOverhangRects) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|constrainBoundsRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constrainBoundsRect:) (((:STRUCT NS::|CGRect|))
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_convertedContentInsetsToProposedBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_convertedContentInsetsToProposedBounds:) (((:STRUCT
                                                                             NS::|CGRect|))
                                                                           (:STRUCT
                                                                            NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|constrainScrollPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constrainScrollPoint:) (((:STRUCT
                                                          NS::|CGPoint|))
                                                        (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_constrainBoundsRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_constrainBoundsRect:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_constrainBoundsRectAndAlignIfNeeded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_constrainBoundsRectAndAlignIfNeeded:) (((:STRUCT
                                                                          NS::|CGRect|))
                                                                        (:STRUCT
                                                                         NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))




(defun NS::|_forcePixelAlignedClipViewFrame| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_forcePixelAlignedClipViewFrame) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|_checkAlignmentOfOriginOfBoundsRectIfNeeded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_checkAlignmentOfOriginOfBoundsRectIfNeeded:) (((:POINTER
                                                                                 (:STRUCT
                                                                                  NS::|CGRect|)))
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|_updateOverhangSubviewsIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateOverhangSubviewsIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isAnimatingScroll| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAnimatingScroll) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_scrollTo:animateScroll:flashScrollerKnobs:| (thing _ animate-scroll flash-scroller-knobs)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scrollTo:animateScroll:flashScrollerKnobs:) (((:POINTER
                                                                                (:STRUCT
                                                                                 NS::|CGPoint|))
                                                                               :LONG-LONG
                                                                               :UNSIGNED-LONG-LONG)
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) animate-scroll flash-scroller-knobs))) nil t))


(defun NS::|_scrollAmountForLineScroll:percentageTowardsMax:limitingSize:multiplier:| (thing _ percentage-towards-max limiting-size multiplier)
  (let ((message-lambda 
         (make-message-lambda @(_scrollAmountForLineScroll:percentageTowardsMax:limitingSize:multiplier:) ((:DOUBLE
                                                                                                            :DOUBLE
                                                                                                            :DOUBLE
                                                                                                            :DOUBLE)
                                                                                                           :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ percentage-towards-max limiting-size multiplier)))

(defun NS::|_scrollTo:animate:| (thing _ animate)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scrollTo:animate:) (((:POINTER
                                                       (:STRUCT NS::|CGPoint|))
                                                      :CHAR)
                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if animate 1 0)))) nil t))

(defun NS::|_animatingScrollTargetOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_animatingScrollTargetOrigin) (NIL
                                                               (:STRUCT
                                                                NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_effectiveContentFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveContentFrame) (NIL
                                                         (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldShowOverlayScrollersForScrollToPoint:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldShowOverlayScrollersForScrollToPoint:) (((:STRUCT
                                                                                 NS::|CGPoint|))
                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_animatedScrollToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_animatedScrollToPoint:) (((:STRUCT
                                                            NS::|CGPoint|))
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_shouldAdjustPatternPhase| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldAdjustPatternPhase) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|_setDocViewFromRead:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDocViewFromRead:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|_setNeedsDisplayInOverhang:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsDisplayInOverhang:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|_magnificationAnchorPointForCursorPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_magnificationAnchorPointForCursorPoint:) (((:STRUCT
                                                                             NS::|CGPoint|))
                                                                           (:STRUCT
                                                                            NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|scrollVelocity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollVelocity) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setScrollVelocity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollVelocity:) (((:STRUCT NS::|CGPoint|))
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))



(defun NS::|setAutomaticallyCalculatesContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticallyCalculatesContentSize:) ((:CHAR)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))




(defun NS::|_dirtyRectUncoveredFromOldDocFrame:byNewDocFrame:| (thing _ by-new-doc-frame)
  (let ((message-lambda 
         (make-message-lambda @(_dirtyRectUncoveredFromOldDocFrame:byNewDocFrame:) (((:STRUCT
                                                                                      NS::|CGRect|)
                                                                                     (:STRUCT
                                                                                      NS::|CGRect|))
                                                                                    (:STRUCT
                                                                                     NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ by-new-doc-frame)))

(defun NS::|_proposedScrollPositionIsPixelAligned:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_proposedScrollPositionIsPixelAligned:) (((:STRUCT
                                                                           NS::|CGPoint|))
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_extendNextScrollRelativeToCurrentPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_extendNextScrollRelativeToCurrentPosition) (NIL
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|_canAnimateScrolls| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canAnimateScrolls) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setDontConstrainScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDontConstrainScroll:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_shouldDontConstrainScroll| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldDontConstrainScroll) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setDontConstrainBoundsChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDontConstrainBoundsChange:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_isScrollDueToUserAction| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isScrollDueToUserAction) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setAnimateCurrentScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAnimateCurrentScroll:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_animateCurrentScroll| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_animateCurrentScroll) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|copiesOnScroll| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(copiesOnScroll) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_scrollInProgress| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scrollInProgress) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_setAnimationCompletionHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAnimationCompletionHandler:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_documentViewAlignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_documentViewAlignment) (NIL
                                                         :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setDocumentViewAlignment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDocumentViewAlignment:) ((:UNSIGNED-LONG-LONG)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))







(defun NS::|setAccessoryView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessoryView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))







(defun NS::|scrollView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))













(defun NS::|accessoryView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessoryView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))







(defun NS::|accessibilityMinValueAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinValueAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityMaxValueAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMaxValueAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))






(defun NS::|clientView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clientView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|baselineLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(baselineLocation) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|measurementUnits| (thing)
  (let ((message-lambda 
         (make-message-lambda @(measurementUnits) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setDraggingMarker:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDraggingMarker:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|displaysTooltips| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(displaysTooltips) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|addMarker:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addMarker:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|removeMarker:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeMarker:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_unitsForClientLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_unitsForClientLocation:) ((:DOUBLE) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_unitsForRulerLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_unitsForRulerLocation:) ((:DOUBLE) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|initWithScrollView:orientation:| (thing _ orientation)
  (let ((message-lambda 
         (make-message-lambda @(initWithScrollView:orientation:) ((:POINTER
                                                                   :UNSIGNED-LONG-LONG)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) orientation)))

(defun NS::|invalidateHashMarks| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateHashMarks) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_ruleAreaRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_ruleAreaRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isAccessoryViewHostMode| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAccessoryViewHostMode) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_rulerContentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rulerContentRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setMarkers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMarkers:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setReservedThicknessForMarkers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setReservedThicknessForMarkers:) ((:DOUBLE)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_markerAreaRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_markerAreaRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setReservedThicknessForAccessoryView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setReservedThicknessForAccessoryView:) ((:DOUBLE)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_rulerAccessoryViewAreaRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rulerAccessoryViewAreaRect) (NIL
                                                              (:STRUCT
                                                               NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_centerScanSeparatorRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_centerScanSeparatorRect:) (((:STRUCT
                                                              NS::|CGRect|))
                                                            (:STRUCT
                                                             NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_rulerOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rulerOrigin) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_maxRuleAreaRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_maxRuleAreaRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hashMarkDictionary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_hashMarkDictionary) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|labelStringForValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(labelStringForValue:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setLabelString:forValue:| (thing _ for-value)
  (let ((message-lambda 
         (make-message-lambda @(setLabelString:forValue:) ((:POINTER :POINTER)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-value))))

(defun NS::|_drawContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_drawContentRect:) (((:STRUCT NS::|CGRect|))
                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|drawSeparatorInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawSeparatorInRect:) (((:STRUCT NS::|CGRect|))
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|drawHashMarksAndLabelsInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawHashMarksAndLabelsInRect:) (((:STRUCT
                                                                  NS::|CGRect|))
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|drawRulerLines| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawRulerLines) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|drawMarkersInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawMarkersInRect:) (((:STRUCT NS::|CGRect|))
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_markerHitTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_markerHitTest:) (((:STRUCT NS::|CGPoint|))
                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_rulerContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rulerContentSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hashMarkDictionaryForDocumentView:measurementUnitName:| (thing _ measurement-unit-name)
  (let ((message-lambda 
         (make-message-lambda @(_hashMarkDictionaryForDocumentView:measurementUnitName:) ((:POINTER
                                                                                           :POINTER)
                                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr measurement-unit-name))))

(defun NS::|_hashMarkDictionaryForDocView:measurementUnitToBoundsConversionFactor:stepUpCycle:stepDownCycle:minimumHashSpacing:minimumLabelSpacing:| (thing _ measurement-unit-to-bounds-conversion-factor step-up-cycle step-down-cycle minimum-hash-spacing minimum-label-spacing)
  (let ((message-lambda 
         (make-message-lambda @(_hashMarkDictionaryForDocView:measurementUnitToBoundsConversionFactor:stepUpCycle:stepDownCycle:minimumHashSpacing:minimumLabelSpacing:) ((:POINTER
                                                                                                                                                                           :DOUBLE
                                                                                                                                                                           :POINTER
                                                                                                                                                                           :POINTER
                                                                                                                                                                           :DOUBLE
                                                                                                                                                                           :DOUBLE)
                                                                                                                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) measurement-unit-to-bounds-conversion-factor (ns-object-ptr step-up-cycle) (ns-object-ptr step-down-cycle) minimum-hash-spacing minimum-label-spacing)))

(defun NS::|_draggingMarkerView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_draggingMarkerView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setScrollView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|requiredThickness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(requiredThickness) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setRuleThickness:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRuleThickness:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|ruleThickness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ruleThickness) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|reservedThicknessForMarkers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(reservedThicknessForMarkers) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|reservedThicknessForAccessoryView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(reservedThicknessForAccessoryView) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setMeasurementUnits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMeasurementUnits:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setOriginOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOriginOffset:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|originOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(originOffset) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setClientView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setClientView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|markers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|trackMarker:withMouseEvent:| (thing _ with-mouse-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(trackMarker:withMouseEvent:) ((:POINTER
                                                               :POINTER)
                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-mouse-event)))) nil t))

(defun NS::|moveRulerlineFromLocation:toLocation:| (thing _ to-location)
  (let ((message-lambda 
         (make-message-lambda @(moveRulerlineFromLocation:toLocation:) ((:DOUBLE
                                                                         :DOUBLE)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ to-location)))

(defun NS::|_rectWithSingleThickness:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_rectWithSingleThickness:) (((:STRUCT
                                                              NS::|CGRect|))
                                                            (:STRUCT
                                                             NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_ruleAreaMarginRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_ruleAreaMarginRect) (NIL
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setDisplaysTooltips:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDisplaysTooltips:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_scrollToMatchContentView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scrollToMatchContentView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setAccessoryViewHostMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAccessoryViewHostMode:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_addMarker:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addMarker:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cancelAddMarker:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cancelAddMarker:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_locationFromUnitsValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_locationFromUnitsValue:) ((:DOUBLE) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|accessibilityUnitsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUnitsAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsUnitsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsUnitsAttributeSettable) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityUnitDescriptionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUnitDescriptionAttribute) (NIL
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsUnitDescriptionAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsUnitDescriptionAttributeSettable) (NIL
                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityMarkerUIElementsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerUIElementsAttribute) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsMarkerUIElementsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMarkerUIElementsAttributeSettable) (NIL
                                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))









(defun NS::|isRemovable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRemovable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setMovable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMovable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isMovable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMovable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|initWithRulerView:markerLocation:image:imageOrigin:| (thing _ marker-location image image-origin)
  (let ((message-lambda 
         (make-message-lambda @(initWithRulerView:markerLocation:image:imageOrigin:) ((:POINTER
                                                                                       :DOUBLE
                                                                                       :POINTER
                                                                                       (:STRUCT
                                                                                        NS::|CGPoint|))
                                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) marker-location (ns-object-ptr image) image-origin)))

(defun NS::|_originPointInRuler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_originPointInRuler) (NIL
                                                      (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_compositePointInRuler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_compositePointInRuler) (NIL
                                                         (:STRUCT
                                                          NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isDragging| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDragging) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|imageRectInRuler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(imageRectInRuler) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|ruler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ruler) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setMarkerLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMarkerLocation:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|markerLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markerLocation) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setImageOrigin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setImageOrigin:) (((:STRUCT NS::|CGPoint|))
                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|imageOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(imageOrigin) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setRemovable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRemovable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|thicknessRequiredInRuler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(thicknessRequiredInRuler) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|trackMouse:adding:| (thing _ adding)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(trackMouse:adding:) ((:POINTER :CHAR) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if adding 1 0)))) nil t))

(defun NS::|_locationOfOriginPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_locationOfOriginPoint:) ((:DOUBLE) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))






(defun NS::|string| (thing)
  (let ((message-lambda 
         (make-message-lambda @(string) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|replaceCharactersInRange:withString:| (thing _ with-string)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withString:) (((:STRUCT
                                                                         NS::|_NSRange|)
                                                                        :POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-string))))




(defun NS::|setString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setString:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|attributedSubstringFromRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(attributedSubstringFromRange:) (((:STRUCT
                                                                  NS::|_NSRange|))
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))



(defun NS::|defaultParagraphStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(defaultParagraphStyle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))







(defun NS::|contentType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentType) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setContentType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentType:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))






(defun NS::|minSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|maxSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maxSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))










(defun NS::|accessibilityFocusRingBoundsForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusRingBoundsForBounds:) (((:STRUCT
                                                                           NS::|CGRect|))
                                                                         (:STRUCT
                                                                          NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))






(defun NS::|insertText:replacementRange:| (thing _ replacement-range)
  (let ((message-lambda 
         (make-message-lambda @(insertText:replacementRange:) ((:POINTER
                                                                (:STRUCT
                                                                 NS::|_NSRange|))
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) replacement-range)))

















(defun NS::|mouseMoved:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseMoved:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|setTouchBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTouchBar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|startSpeaking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(startSpeaking:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))




(defun NS::|textColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))
















(defun NS::|copy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copy:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|layoutManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutManager) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))








(defun NS::|setTextColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))









(defun NS::|selectAll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectAll:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|allowsMultipleSelection| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsMultipleSelection) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|draggingSourceOperationMaskForLocal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingSourceOperationMaskForLocal:) ((:CHAR)
                                                                       :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|draggedImage:endedAt:operation:| (thing _ ended-at operation)
  (let ((message-lambda 
         (make-message-lambda @(draggedImage:endedAt:operation:) ((:POINTER
                                                                   (:STRUCT
                                                                    NS::|CGPoint|)
                                                                   :UNSIGNED-LONG-LONG)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) ended-at operation)))












(defun NS::|becomeMainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(becomeMainWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|cut:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cut:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|paste:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(paste:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|undoManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(undoManager) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|hasMarkedText| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasMarkedText) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isUnmarking| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isUnmarking) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|textStorage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textStorage) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|shouldChangeTextInRange:replacementString:| (thing _ replacement-string)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldChangeTextInRange:replacementString:) (((:STRUCT
                                                                               NS::|_NSRange|)
                                                                              :POINTER)
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr replacement-string)))) nil t))

(defun NS::|typingAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(typingAttributes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|didChangeText| (thing)
  (let ((message-lambda 
         (make-message-lambda @(didChangeText) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setSelectedRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedRange:) (((:STRUCT NS::|_NSRange|))
                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|textLayoutManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textLayoutManager) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isFieldEditor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFieldEditor) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAllowsCharacterPickerTouchBarItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsCharacterPickerTouchBarItem:) ((:CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setAutomaticTextCompletionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticTextCompletionEnabled:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setTextContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextContainer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|textContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContainer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|selectedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedRange) (NIL (:STRUCT NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setFieldEditorUndoManager:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setFieldEditorUndoManager:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))






(defun NS::|setSelectedTextAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedTextAttributes:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setUsesFontPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesFontPanel:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setWantsNotificationForMarkedText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsNotificationForMarkedText:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setUsesRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesRuler:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setMinSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinSize:) (((:STRUCT NS::|CGSize|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setMaxSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaxSize:) (((:STRUCT NS::|CGSize|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setHorizontallyResizable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontallyResizable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setVerticallyResizable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticallyResizable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setRichText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRichText:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setTypingAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTypingAttributes:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))
























(defun NS::|drawBackgroundOverhangInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawBackgroundOverhangInRect:) (((:STRUCT
                                                                  NS::|CGRect|))
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))





(defun NS::|_finishedImmediateScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_finishedImmediateScroll) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isCompatibleWithResponsiveScrolling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isCompatibleWithResponsiveScrolling) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|changeColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertNewline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertNewline:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|complete:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(complete:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|makeTouchBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(makeTouchBar) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))




(defun NS::|insertTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertTab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertBacktab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertBacktab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|setPlaceholderString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPlaceholderString:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|textCheckingController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textCheckingController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|spellCheckerDocumentTag| (thing)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDocumentTag) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|textCheckingControllerUsesStringAnnotations| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(textCheckingControllerUsesStringAnnotations) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isAutomaticSpellingCorrectionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticSpellingCorrectionEnabled) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAutomaticSpellingCorrectionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticSpellingCorrectionEnabled:) ((:CHAR)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isContinuousSpellCheckingEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isContinuousSpellCheckingEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setContinuousSpellCheckingEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContinuousSpellCheckingEnabled:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isGrammarCheckingEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGrammarCheckingEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setGrammarCheckingEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGrammarCheckingEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isAutomaticQuoteSubstitutionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticQuoteSubstitutionEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAutomaticQuoteSubstitutionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticQuoteSubstitutionEnabled:) ((:CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isAutomaticDashSubstitutionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticDashSubstitutionEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAutomaticDashSubstitutionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticDashSubstitutionEnabled:) ((:CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|smartInsertDeleteEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(smartInsertDeleteEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setSmartInsertDeleteEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSmartInsertDeleteEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isAutomaticTextReplacementEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticTextReplacementEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAutomaticTextReplacementEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticTextReplacementEnabled:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isAutomaticDataDetectionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticDataDetectionEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAutomaticDataDetectionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticDataDetectionEnabled:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isAutomaticLinkDetectionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticLinkDetectionEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAutomaticLinkDetectionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticLinkDetectionEnabled:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isAutomaticTextCompletionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticTextCompletionEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:| (thing _ longest-effective-range in-range)
  (let ((message-lambda 
         (make-message-lambda @(_temporaryAttributesAtCharacterIndex:longestEffectiveRange:inRange:) ((:UNSIGNED-LONG-LONG
                                                                                                       (:POINTER
                                                                                                        (:STRUCT
                                                                                                         NS::|_NSRange|))
                                                                                                       (:STRUCT
                                                                                                        NS::|_NSRange|))
                                                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr longest-effective-range) in-range)))

(defun NS::|_removeTemporaryAttribute:forCharacterRange:| (thing _ for-character-range)
  (let ((message-lambda 
         (make-message-lambda @(_removeTemporaryAttribute:forCharacterRange:) ((:POINTER
                                                                                (:STRUCT
                                                                                 NS::|_NSRange|))
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-character-range)))

(defun NS::|_temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:| (thing _ at-character-index longest-effective-range in-range)
  (let ((message-lambda 
         (make-message-lambda @(_temporaryAttribute:atCharacterIndex:longestEffectiveRange:inRange:) ((:POINTER
                                                                                                       :UNSIGNED-LONG-LONG
                                                                                                       (:POINTER
                                                                                                        (:STRUCT
                                                                                                         NS::|_NSRange|))
                                                                                                       (:STRUCT
                                                                                                        NS::|_NSRange|))
                                                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-character-index (ns-object-ptr longest-effective-range) in-range)))

(defun NS::|_addTemporaryAttributes:forCharacterRange:| (thing _ for-character-range)
  (let ((message-lambda 
         (make-message-lambda @(_addTemporaryAttributes:forCharacterRange:) ((:POINTER
                                                                              (:STRUCT
                                                                               NS::|_NSRange|))
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-character-range)))

(defun NS::|setSpellingState:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setSpellingState:range:) ((:LONG-LONG
                                                           (:STRUCT
                                                            NS::|_NSRange|))
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ range)))

(defun NS::|_addAnnotations:range:textStorage:removeExistingAnnotations:| (thing _ range text-storage remove-existing-annotations)
  (let ((message-lambda 
         (make-message-lambda @(_addAnnotations:range:textStorage:removeExistingAnnotations:) ((:POINTER
                                                                                                (:STRUCT
                                                                                                 NS::|_NSRange|)
                                                                                                :POINTER
                                                                                                :CHAR)
                                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) range (ns-object-ptr text-storage) (if remove-existing-annotations 1 0))))

(defun NS::|selectedRanges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedRanges) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setSelectedRange:affinity:stillSelecting:| (thing _ affinity still-selecting)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedRange:affinity:stillSelecting:) (((:STRUCT
                                                                              NS::|_NSRange|)
                                                                             :UNSIGNED-LONG-LONG
                                                                             :CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ affinity (if still-selecting 1 0))))

(defun NS::|scrollRangeToVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollRangeToVisible:) (((:STRUCT
                                                          NS::|_NSRange|))
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_textRangeForCharRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_textRangeForCharRange:) (((:STRUCT
                                                            NS::|_NSRange|))
                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_charRangeForTextRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_charRangeForTextRange:) ((:POINTER)
                                                          (:STRUCT
                                                           NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|textContainerOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContainerOrigin) (NIL
                                                      (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|autocorrectionType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autocorrectionType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAutocorrectionType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutocorrectionType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|spellCheckingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckingType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setSpellCheckingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSpellCheckingType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|grammarCheckingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(grammarCheckingType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setGrammarCheckingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGrammarCheckingType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|smartQuotesType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(smartQuotesType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setSmartQuotesType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSmartQuotesType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|smartDashesType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(smartDashesType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setSmartDashesType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSmartDashesType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|smartInsertDeleteType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(smartInsertDeleteType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setSmartInsertDeleteType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSmartInsertDeleteType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|textReplacementType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textReplacementType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTextReplacementType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextReplacementType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|dataDetectionType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dataDetectionType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setDataDetectionType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDataDetectionType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|linkDetectionType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(linkDetectionType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setLinkDetectionType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLinkDetectionType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|textCompletionType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textCompletionType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTextCompletionType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextCompletionType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|annotatedSubstringForProposedRange:actualRange:| (thing _ actual-range)
  (let ((message-lambda 
         (make-message-lambda @(annotatedSubstringForProposedRange:actualRange:) (((:STRUCT
                                                                                    NS::|_NSRange|)
                                                                                   (:POINTER
                                                                                    (:STRUCT
                                                                                     NS::|_NSRange|)))
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr actual-range))))

(defun NS::|setAnnotations:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setAnnotations:range:) ((:POINTER
                                                         (:STRUCT
                                                          NS::|_NSRange|))
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) range)))

(defun NS::|addAnnotations:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(addAnnotations:range:) ((:POINTER
                                                         (:STRUCT
                                                          NS::|_NSRange|))
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) range)))

(defun NS::|removeAnnotation:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(removeAnnotation:range:) ((:POINTER
                                                           (:STRUCT
                                                            NS::|_NSRange|))
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) range)))

(defun NS::|replaceCharactersInRange:withAnnotatedString:| (thing _ with-annotated-string)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withAnnotatedString:) (((:STRUCT
                                                                                  NS::|_NSRange|)
                                                                                 :POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-annotated-string))))

(defun NS::|selectAndShowRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectAndShowRange:) (((:STRUCT
                                                        NS::|_NSRange|))
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|viewForRange:firstRect:actualRange:| (thing _ first-rect actual-range)
  (let ((message-lambda 
         (make-message-lambda @(viewForRange:firstRect:actualRange:) (((:STRUCT
                                                                        NS::|_NSRange|)
                                                                       (:POINTER
                                                                        (:STRUCT
                                                                         NS::|CGRect|))
                                                                       (:POINTER
                                                                        (:STRUCT
                                                                         NS::|_NSRange|)))
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr first-rect) (ns-object-ptr actual-range))))

(defun NS::|_replaceCharactersInRange:withAnnotatedString:replacementRange:| (thing _ with-annotated-string replacement-range)
  (let ((message-lambda 
         (make-message-lambda @(_replaceCharactersInRange:withAnnotatedString:replacementRange:) (((:STRUCT
                                                                                                    NS::|_NSRange|)
                                                                                                   :POINTER
                                                                                                   (:STRUCT
                                                                                                    NS::|_NSRange|))
                                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-annotated-string) replacement-range)))

(defun NS::|setMarkedText:selectedRange:replacementRange:| (thing _ selected-range replacement-range)
  (let ((message-lambda 
         (make-message-lambda @(setMarkedText:selectedRange:replacementRange:) ((:POINTER
                                                                                 (:STRUCT
                                                                                  NS::|_NSRange|)
                                                                                 (:STRUCT
                                                                                  NS::|_NSRange|))
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) selected-range replacement-range)))

(defun NS::|unmarkText| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unmarkText) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|markedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markedRange) (NIL (:STRUCT NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|attributedSubstringForProposedRange:actualRange:| (thing _ actual-range)
  (let ((message-lambda 
         (make-message-lambda @(attributedSubstringForProposedRange:actualRange:) (((:STRUCT
                                                                                     NS::|_NSRange|)
                                                                                    (:POINTER
                                                                                     (:STRUCT
                                                                                      NS::|_NSRange|)))
                                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr actual-range))))

(defun NS::|validAttributesForMarkedText| (thing)
  (let ((message-lambda 
         (make-message-lambda @(validAttributesForMarkedText) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|firstRectForCharacterRange:actualRange:| (thing _ actual-range)
  (let ((message-lambda 
         (make-message-lambda @(firstRectForCharacterRange:actualRange:) (((:STRUCT
                                                                            NS::|_NSRange|)
                                                                           (:POINTER
                                                                            (:STRUCT
                                                                             NS::|_NSRange|)))
                                                                          (:STRUCT
                                                                           NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr actual-range))))

(defun NS::|characterIndexForPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(characterIndexForPoint:) (((:STRUCT
                                                            NS::|CGPoint|))
                                                          :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|attributedString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributedString) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|fractionOfDistanceThroughGlyphForPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(fractionOfDistanceThroughGlyphForPoint:) (((:STRUCT
                                                                            NS::|CGPoint|))
                                                                          :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|baselineDeltaForCharacterAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(baselineDeltaForCharacterAtIndex:) ((:UNSIGNED-LONG-LONG)
                                                                    :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|windowLevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowLevel) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|drawsVerticallyForCharacterAtIndex:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsVerticallyForCharacterAtIndex:) ((:UNSIGNED-LONG-LONG)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))



(defun NS::|rightMouseUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rightMouseUp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|sharingServicePicker:delegateForSharingService:| (thing _ delegate-for-sharing-service)
  (let ((message-lambda 
         (make-message-lambda @(sharingServicePicker:delegateForSharingService:) ((:POINTER
                                                                                   :POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr delegate-for-sharing-service))))

(defun NS::|flagsChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(flagsChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|sharingService:sourceWindowForShareItems:sharingContentScope:| (thing _ source-window-for-share-items sharing-content-scope)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:sourceWindowForShareItems:sharingContentScope:) ((:POINTER
                                                                                                 :POINTER
                                                                                                 (:POINTER
                                                                                                  :LONG-LONG))
                                                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr source-window-for-share-items) (ns-object-ptr sharing-content-scope))))

(defun NS::|sharingService:sourceFrameOnScreenForShareItem:| (thing _ source-frame-on-screen-for-share-item)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:sourceFrameOnScreenForShareItem:) ((:POINTER
                                                                                   :POINTER)
                                                                                  (:STRUCT
                                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr source-frame-on-screen-for-share-item))))

(defun NS::|sharingService:transitionImageForShareItem:contentRect:| (thing _ transition-image-for-share-item content-rect)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:transitionImageForShareItem:contentRect:) ((:POINTER
                                                                                           :POINTER
                                                                                           (:POINTER
                                                                                            (:STRUCT
                                                                                             NS::|CGRect|)))
                                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr transition-image-for-share-item) (ns-object-ptr content-rect))))

(defun NS::|sharingService:didShareItems:| (thing _ did-share-items)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:didShareItems:) ((:POINTER
                                                                 :POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr did-share-items))))


(defun NS::|updateDraggingItemsForDrag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateDraggingItemsForDrag:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|draggingSession:sourceOperationMaskForDraggingContext:| (thing _ source-operation-mask-for-dragging-context)
  (let ((message-lambda 
         (make-message-lambda @(draggingSession:sourceOperationMaskForDraggingContext:) ((:POINTER
                                                                                          :LONG-LONG)
                                                                                         :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) source-operation-mask-for-dragging-context)))

(defun NS::|draggingSession:endedAtPoint:operation:| (thing _ ended-at-point operation)
  (let ((message-lambda 
         (make-message-lambda @(draggingSession:endedAtPoint:operation:) ((:POINTER
                                                                           (:STRUCT
                                                                            NS::|CGPoint|)
                                                                           :UNSIGNED-LONG-LONG)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) ended-at-point operation)))

(defun NS::|insertText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertText:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_getUndoManager:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_getUndoManager:) ((:CHAR) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|readSelectionFromItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(readSelectionFromItems:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectionItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectionItems) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|canReadSelectionFromItems| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canReadSelectionFromItems) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|preferredTextFinderStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredTextFinderStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|performTextFinderAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performTextFinderAction:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|performFindPanelAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performFindPanelAction:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cancelFindIndicator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cancelFindIndicator) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setPreferredTextFinderStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreferredTextFinderStyle:) ((:LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|isIncrementalSearchingEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isIncrementalSearchingEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setIncrementalSearchingEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIncrementalSearchingEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|firstSelectedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstSelectedRange) (NIL
                                                     (:STRUCT NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentViewAtIndex:effectiveCharacterRange:| (thing _ effective-character-range)
  (let ((message-lambda 
         (make-message-lambda @(contentViewAtIndex:effectiveCharacterRange:) ((:UNSIGNED-LONG-LONG
                                                                               (:POINTER
                                                                                (:STRUCT
                                                                                 NS::|_NSRange|)))
                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr effective-character-range))))

(defun NS::|setSelectedRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedRanges:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|shouldReplaceCharactersInRanges:withStrings:| (thing _ with-strings)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldReplaceCharactersInRanges:withStrings:) ((:POINTER
                                                                                :POINTER)
                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-strings)))) nil t))

(defun NS::|didReplaceCharacters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(didReplaceCharacters) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|visibleCharacterRanges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(visibleCharacterRanges) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|changeDocumentBackgroundColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeDocumentBackgroundColor:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|changeAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeAttributes:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|changeFont:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeFont:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|underline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(underline:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|outline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(outline:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|useStandardKerning:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(useStandardKerning:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|turnOffKerning:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(turnOffKerning:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|tightenKerning:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(tightenKerning:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|loosenKerning:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(loosenKerning:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|useStandardLigatures:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(useStandardLigatures:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|turnOffLigatures:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(turnOffLigatures:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|useAllLigatures:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(useAllLigatures:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|unscript:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unscript:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|superscript:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(superscript:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|subscript:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(subscript:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|raiseBaseline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(raiseBaseline:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|lowerBaseline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lowerBaseline:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|copyFont:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copyFont:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pasteFont:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteFont:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_selectedRanges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_selectedRanges) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|rangeForUserCharacterAttributeChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangeForUserCharacterAttributeChange) (NIL
                                                                       (:STRUCT
                                                                        NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setUndoActionName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUndoActionName:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isRichText| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRichText) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|rangeForUserParagraphAttributeChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangeForUserParagraphAttributeChange) (NIL
                                                                       (:STRUCT
                                                                        NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|placeholderString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(placeholderString) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setPlaceholderAttributedString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPlaceholderAttributedString:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|placeholderAttributedString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(placeholderAttributedString) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dragOperationForDraggingInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_dragOperationForDraggingInfo:) ((:POINTER)
                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|delete:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(delete:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|getMarkedText:selectedRange:| (thing _ selected-range)
  (let ((message-lambda 
         (make-message-lambda @(getMarkedText:selectedRange:) (((:POINTER
                                                                 :POINTER)
                                                                (:POINTER
                                                                 (:STRUCT
                                                                  NS::|_NSRange|)))
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr selected-range))))

(defun NS::|firstRectForCharacterRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(firstRectForCharacterRange:) (((:STRUCT
                                                                NS::|_NSRange|))
                                                              (:STRUCT
                                                               NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|conversationIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(conversationIdentifier) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setMarkedText:selectedRange:| (thing _ selected-range)
  (let ((message-lambda 
         (make-message-lambda @(setMarkedText:selectedRange:) ((:POINTER
                                                                (:STRUCT
                                                                 NS::|_NSRange|))
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) selected-range)))


(defun NS::|spellCheckerDidLearnWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidLearnWord:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|spellCheckerDidUnlearnWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidUnlearnWord:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|spellCheckerDidChangeLanguage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeLanguage:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|spellCheckerDidChangeCorrection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeCorrection:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|spellCheckerDidChangeReplacement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeReplacement:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|spellCheckerDidChangeQuoteSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeQuoteSubstitution:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|spellCheckerDidChangeDashSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeDashSubstitution:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|layoutSublayersOfLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(layoutSublayersOfLayer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|invokeExtensionService:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(invokeExtensionService:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|touchBar:makeItemForIdentifier:| (thing _ make-item-for-identifier)
  (let ((message-lambda 
         (make-message-lambda @(touchBar:makeItemForIdentifier:) ((:POINTER
                                                                   :POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr make-item-for-identifier))))


(defun NS::|_sharedData| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sharedData) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_inLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_inLayout) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|candidateListTouchBarItem:endSelectingCandidateAtIndex:| (thing _ end-selecting-candidate-at-index)
  (let ((message-lambda 
         (make-message-lambda @(candidateListTouchBarItem:endSelectingCandidateAtIndex:) ((:POINTER
                                                                                           :UNSIGNED-LONG-LONG)
                                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) end-selecting-candidate-at-index)))



(defun NS::|checkSpelling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(checkSpelling:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleContinuousSpellChecking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleContinuousSpellChecking:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleGrammarChecking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleGrammarChecking:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleAutomaticSpellingCorrection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticSpellingCorrection:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|changeSpelling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeSpelling:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|ignoreSpelling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(ignoreSpelling:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleAutomaticQuoteSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticQuoteSubstitution:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleAutomaticDashSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticDashSubstitution:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleAutomaticLinkDetection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticLinkDetection:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleAutomaticTextReplacement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticTextReplacement:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_performPendingTextChecking| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_performPendingTextChecking) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|moveToLeftEndOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToLeftEndOfLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToRightEndOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToRightEndOfLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToLeftEndOfLineAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToLeftEndOfLineAndModifySelection:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToRightEndOfLineAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToRightEndOfLineAndModifySelection:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToBeginningOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToEndOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToBeginningOfLineAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfLineAndModifySelection:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToEndOfLineAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfLineAndModifySelection:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|quickLookWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(quickLookWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_wantsKeyDownForEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsKeyDownForEvent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|rulerView:pointForLocation:| (thing _ point-for-location)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:pointForLocation:) ((:POINTER
                                                               :DOUBLE)
                                                              (:STRUCT
                                                               NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) point-for-location)))

(defun NS::|rulerView:shouldAddMarker:| (thing _ should-add-marker)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulerView:shouldAddMarker:) ((:POINTER
                                                              :POINTER)
                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr should-add-marker)))) nil t))

(defun NS::|rulerView:shouldMoveMarker:| (thing _ should-move-marker)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulerView:shouldMoveMarker:) ((:POINTER
                                                               :POINTER)
                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr should-move-marker)))) nil t))

(defun NS::|rulerView:willAddMarker:atLocation:| (thing _ will-add-marker at-location)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:willAddMarker:atLocation:) ((:POINTER
                                                                       :POINTER
                                                                       :DOUBLE)
                                                                      :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr will-add-marker) at-location)))

(defun NS::|rulerView:willMoveMarker:toLocation:| (thing _ will-move-marker to-location)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:willMoveMarker:toLocation:) ((:POINTER
                                                                        :POINTER
                                                                        :DOUBLE)
                                                                       :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr will-move-marker) to-location)))

(defun NS::|rulerView:shouldRemoveMarker:| (thing _ should-remove-marker)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulerView:shouldRemoveMarker:) ((:POINTER
                                                                 :POINTER)
                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr should-remove-marker)))) nil t))

(defun NS::|rulerView:locationForPoint:| (thing _ location-for-point)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:locationForPoint:) ((:POINTER
                                                               (:STRUCT
                                                                NS::|CGPoint|))
                                                              :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) location-for-point)))

(defun NS::|rulerView:didAddMarker:| (thing _ did-add-marker)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:didAddMarker:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr did-add-marker))))

(defun NS::|rulerView:didMoveMarker:| (thing _ did-move-marker)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:didMoveMarker:) ((:POINTER :POINTER)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr did-move-marker))))

(defun NS::|rulerView:didRemoveMarker:| (thing _ did-remove-marker)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:didRemoveMarker:) ((:POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr did-remove-marker))))

(defun NS::|rulerView:willSetClientView:| (thing _ will-set-client-view)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:willSetClientView:) ((:POINTER
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr will-set-client-view))))

(defun NS::|rulerView:handleMouseDown:forMarker:| (thing _ handle-mouse-down for-marker)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulerView:handleMouseDown:forMarker:) ((:POINTER
                                                                        :POINTER
                                                                        :POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr handle-mouse-down) (ns-object-ptr for-marker)))) nil t))

(defun NS::|rulerView:handleMouseDown:| (thing _ handle-mouse-down)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:handleMouseDown:) ((:POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr handle-mouse-down))))

(defun NS::|setFieldEditor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFieldEditor:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_performTypingAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_performTypingAction:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|shouldChangeTextInRanges:replacementStrings:| (thing _ replacement-strings)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldChangeTextInRanges:replacementStrings:) ((:POINTER
                                                                                :POINTER)
                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr replacement-strings)))) nil t))

(defun NS::|readSelectionFromPasteboard:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(readSelectionFromPasteboard:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|moveToEndOfDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfDocument:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|orderFrontSubstitutionsPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontSubstitutionsPanel:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|checkTextInDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(checkTextInDocument:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleAutomaticDataDetection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticDataDetection:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_drawInsertionPointInRect:color:| (thing _ color)
  (let ((message-lambda 
         (make-message-lambda @(_drawInsertionPointInRect:color:) (((:STRUCT
                                                                     NS::|CGRect|)
                                                                    :POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr color))))

(defun NS::|writablePasteboardTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(writablePasteboardTypes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|writeSelectionToPasteboard:type:| (thing _ type)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeSelectionToPasteboard:type:) ((:POINTER
                                                                    :POINTER)
                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr type)))) nil t))

(defun NS::|itemsForSharingServiceInRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(itemsForSharingServiceInRanges:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_continuousCheckingAllowed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_continuousCheckingAllowed) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_allowsMultipleTextSelectionByMouse| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsMultipleTextSelectionByMouse) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|enabledTextCheckingTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enabledTextCheckingTypes) (NIL
                                                           :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_immediateActionAnimationControllerForCharacterAtIndex:withRecognizer:| (thing _ with-recognizer)
  (let ((message-lambda 
         (make-message-lambda @(_immediateActionAnimationControllerForCharacterAtIndex:withRecognizer:) ((:UNSIGNED-LONG-LONG
                                                                                                          :POINTER)
                                                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-recognizer))))

(defun NS::|_revealAnimationControllerForCharacterAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_revealAnimationControllerForCharacterAtIndex:) ((:UNSIGNED-LONG-LONG)
                                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|updateCandidates| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateCandidates) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAllowedInputSourceLocales:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowedInputSourceLocales:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleSmartInsertDelete:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleSmartInsertDelete:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|checkTextInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(checkTextInSelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setUsesAdaptiveColorMappingForDarkAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesAdaptiveColorMappingForDarkAppearance:) ((:CHAR)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|scrollToBeginningOfDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollToBeginningOfDocument:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|scrollToEndOfDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollToEndOfDocument:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|RTFFromRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(RTFFromRange:) (((:STRUCT NS::|_NSRange|))
                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|RTFDFromRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(RTFDFromRange:) (((:STRUCT NS::|_NSRange|))
                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|replaceCharactersInRange:withRTF:| (thing _ with-r-t-f)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withRTF:) (((:STRUCT
                                                                      NS::|_NSRange|)
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-r-t-f))))

(defun NS::|replaceCharactersInRange:withRTFD:| (thing _ with-r-t-f-d)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withRTFD:) (((:STRUCT
                                                                       NS::|_NSRange|)
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-r-t-f-d))))

(defun NS::|writeRTFDToFile:atomically:| (thing _ atomically)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeRTFDToFile:atomically:) ((:POINTER :CHAR)
                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if atomically 1 0)))) nil t))

(defun NS::|readRTFDFromFile:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(readRTFDFromFile:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|setTextColor:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setTextColor:range:) ((:POINTER
                                                       (:STRUCT
                                                        NS::|_NSRange|))
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) range)))

(defun NS::|setFont:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setFont:range:) ((:POINTER
                                                  (:STRUCT NS::|_NSRange|))
                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) range)))

(defun NS::|usesFontPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesFontPanel) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isHorizontallyResizable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHorizontallyResizable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isVerticallyResizable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isVerticallyResizable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|copyRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copyRuler:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pasteRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteRuler:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|alignLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignLeft:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|alignRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignRight:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|alignCenter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignCenter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleRuler:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isRulerVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRulerVisible) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityElementForAttachment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityElementForAttachment:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|clickedOnLink:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(clickedOnLink:atIndex:) ((:POINTER
                                                          :UNSIGNED-LONG-LONG)
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-index)))

(defun NS::|selectionAffinity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectionAffinity) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_boundingRectForTextRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_boundingRectForTextRange:) ((:POINTER)
                                                             (:STRUCT
                                                              NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_temporaryAttributesAtCharacterIndex:effectiveRange:| (thing _ effective-range)
  (let ((message-lambda 
         (make-message-lambda @(_temporaryAttributesAtCharacterIndex:effectiveRange:) ((:UNSIGNED-LONG-LONG
                                                                                        (:POINTER
                                                                                         (:STRUCT
                                                                                          NS::|_NSRange|)))
                                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr effective-range))))

(defun NS::|layoutOrientation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutOrientation) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_clickedCharIndex| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_clickedCharIndex) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|dragSelectionWithEvent:offset:slideBack:| (thing _ offset slide-back)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(dragSelectionWithEvent:offset:slideBack:) ((:POINTER
                                                                            (:STRUCT
                                                                             NS::|CGSize|)
                                                                            :CHAR)
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) offset (if slide-back 1 0)))) nil t))

(defun NS::|_sharingItemForAttachment:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(_sharingItemForAttachment:atIndex:) ((:POINTER
                                                                      :UNSIGNED-LONG-LONG)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-index)))

(defun NS::|_removeDataDetectionIndicator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeDataDetectionIndicator) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeSelectionRolloverTimer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeSelectionRolloverTimer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|sharingServicePicker:sharingServicesForItems:mask:proposedSharingServices:| (thing _ sharing-services-for-items mask proposed-sharing-services)
  (let ((message-lambda 
         (make-message-lambda @(sharingServicePicker:sharingServicesForItems:mask:proposedSharingServices:) ((:POINTER
                                                                                                              :POINTER
                                                                                                              :UNSIGNED-LONG-LONG
                                                                                                              :POINTER)
                                                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr sharing-services-for-items) mask (ns-object-ptr proposed-sharing-services))))

(defun NS::|sharingService:containerFrameOnScreenForShareItem:| (thing _ container-frame-on-screen-for-share-item)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:containerFrameOnScreenForShareItem:) ((:POINTER
                                                                                      :POINTER)
                                                                                     (:STRUCT
                                                                                      NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr container-frame-on-screen-for-share-item))))

(defun NS::|allowsCharacterPickerTouchBarItem| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsCharacterPickerTouchBarItem) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|allowedInputSourceLocales| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allowedInputSourceLocales) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|selectedTextAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedTextAttributes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setUsesRolloverButtonForSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesRolloverButtonForSelection:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_accessibilityTextViewCompletionWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityTextViewCompletionWindow) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityBoundsOfChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityBoundsOfChild:) ((:POINTER)
                                                               (:STRUCT
                                                                NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_clearMarkedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_clearMarkedRange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setUndoRedoInProgress:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setUndoRedoInProgress:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_updateContentHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateContentHeight) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_commonInitState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_commonInitState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_usesTextLayoutManager| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_usesTextLayoutManager) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|initWithFrame:textContainer:| (thing _ text-container)
  (let ((message-lambda 
         (make-message-lambda @(initWithFrame:textContainer:) (((:STRUCT
                                                                 NS::|CGRect|)
                                                                :POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr text-container))))

(defun NS::|_setPostTextLayoutAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setPostTextLayoutAction:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|inputContextAllowingInitialization:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(inputContextAllowingInitialization:) ((:CHAR)
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_invalidateBlinkTimer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateBlinkTimer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeToolTipAndTimer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeToolTipAndTimer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateTextFinder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateTextFinder) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_attributedString:hasTextLayoutManagerDisqualifyingAttributeInRange:| (thing _ has-text-layout-manager-disqualifying-attribute-in-range)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_attributedString:hasTextLayoutManagerDisqualifyingAttributeInRange:) ((:POINTER
                                                                                                        (:STRUCT
                                                                                                         NS::|_NSRange|))
                                                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) has-text-layout-manager-disqualifying-attribute-in-range))) nil t))

(defun NS::|_checkRotatedOrScaledFromBase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_checkRotatedOrScaledFromBase) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_textViewOwnsTextStorage| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_textViewOwnsTextStorage) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_upgradeDecodedLayoutManagerToTextLayoutManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_upgradeDecodedLayoutManagerToTextLayoutManager) (NIL
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|drawInsertionPointInRect:color:turnedOn:| (thing _ color turned-on)
  (let ((message-lambda 
         (make-message-lambda @(drawInsertionPointInRect:color:turnedOn:) (((:STRUCT
                                                                             NS::|CGRect|)
                                                                            :POINTER
                                                                            :CHAR)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr color) (if turned-on 1 0))))

(defun NS::|_setWatchingSuperviewClipView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWatchingSuperviewClipView:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|insertionPointColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(insertionPointColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setInsertionPointColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInsertionPointColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_selectedRangesAsIndexSet| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_selectedRangesAsIndexSet) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_configureViewportSupport| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_configureViewportSupport) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_textContentManagerDidEncounterUnsupportedAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_textContentManagerDidEncounterUnsupportedAttribute:) ((:POINTER)
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_fixSharedData| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fixSharedData) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|invalidateTextContainerOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateTextContainerOrigin) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|updateInsertionPointStateAndRestartTimer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateInsertionPointStateAndRestartTimer:) ((:CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_requestUpdateOfDragTypeRegistration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_requestUpdateOfDragTypeRegistration) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setNeedsDisplayInRect:avoidAdditionalLayout:| (thing _ avoid-additional-layout)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplayInRect:avoidAdditionalLayout:) (((:STRUCT
                                                                                 NS::|CGRect|)
                                                                                :CHAR)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if avoid-additional-layout 1 0))))

(defun NS::|textContainerInset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContainerInset) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_downgradeToLayoutManagerIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_downgradeToLayoutManagerIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setupSelectionColorOverrideQualifierForTextLayoutManager:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setupSelectionColorOverrideQualifierForTextLayoutManager:) ((:POINTER)
                                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_temporaryAttribute:atCharacterIndex:effectiveRange:| (thing _ at-character-index effective-range)
  (let ((message-lambda 
         (make-message-lambda @(_temporaryAttribute:atCharacterIndex:effectiveRange:) ((:POINTER
                                                                                        :UNSIGNED-LONG-LONG
                                                                                        (:POINTER
                                                                                         (:STRUCT
                                                                                          NS::|_NSRange|)))
                                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-character-index (ns-object-ptr effective-range))))

(defun NS::|_removeSpellingAttributeForRange:includeAccessibility:| (thing _ include-accessibility)
  (let ((message-lambda 
         (make-message-lambda @(_removeSpellingAttributeForRange:includeAccessibility:) (((:STRUCT
                                                                                           NS::|_NSRange|)
                                                                                          :CHAR)
                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if include-accessibility 1 0))))

(defun NS::|_removeGrammarAttributeForRange:includeAccessibility:| (thing _ include-accessibility)
  (let ((message-lambda 
         (make-message-lambda @(_removeGrammarAttributeForRange:includeAccessibility:) (((:STRUCT
                                                                                          NS::|_NSRange|)
                                                                                         :CHAR)
                                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if include-accessibility 1 0))))

(defun NS::|_considerTextCheckingForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_considerTextCheckingForRange:) (((:STRUCT
                                                                   NS::|_NSRange|))
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_considerDeferredTextChecking| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_considerDeferredTextChecking) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|checkTextInRange:types:options:| (thing _ types options)
  (let ((message-lambda 
         (make-message-lambda @(checkTextInRange:types:options:) (((:STRUCT
                                                                    NS::|_NSRange|)
                                                                   :UNSIGNED-LONG-LONG
                                                                   :POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ types (ns-object-ptr options))))

(defun NS::|checkTextInDocumentUsingTypes:options:restrictToSelection:| (thing _ options restrict-to-selection)
  (let ((message-lambda 
         (make-message-lambda @(checkTextInDocumentUsingTypes:options:restrictToSelection:) ((:UNSIGNED-LONG-LONG
                                                                                              :POINTER
                                                                                              :CHAR)
                                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr options) (if restrict-to-selection 1 0))))

(defun NS::|handleTextCheckingResults:forRange:types:options:orthography:wordCount:| (thing _ for-range types options orthography word-count)
  (let ((message-lambda 
         (make-message-lambda @(handleTextCheckingResults:forRange:types:options:orthography:wordCount:) ((:POINTER
                                                                                                           (:STRUCT
                                                                                                            NS::|_NSRange|)
                                                                                                           :UNSIGNED-LONG-LONG
                                                                                                           :POINTER
                                                                                                           :POINTER
                                                                                                           :LONG-LONG)
                                                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-range types (ns-object-ptr options) (ns-object-ptr orthography) word-count)))

(defun NS::|_insertText:replacementRange:| (thing _ replacement-range)
  (let ((message-lambda 
         (make-message-lambda @(_insertText:replacementRange:) ((:POINTER
                                                                 (:STRUCT
                                                                  NS::|_NSRange|))
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) replacement-range)))

(defun NS::|rangeForUserTextChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangeForUserTextChange) (NIL
                                                         (:STRUCT
                                                          NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_closeQuickLookPreviewPanelWithSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_closeQuickLookPreviewPanelWithSpace) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_writingDirectionAttributeForInsertText:replacementRange:| (thing _ replacement-range)
  (let ((message-lambda 
         (make-message-lambda @(_writingDirectionAttributeForInsertText:replacementRange:) ((:POINTER
                                                                                             (:STRUCT
                                                                                              NS::|_NSRange|))
                                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) replacement-range)))

(defun NS::|_writingDirectionAttributeForPeriodBeforeInsertText:replacementRange:| (thing _ replacement-range)
  (let ((message-lambda 
         (make-message-lambda @(_writingDirectionAttributeForPeriodBeforeInsertText:replacementRange:) ((:POINTER
                                                                                                         (:STRUCT
                                                                                                          NS::|_NSRange|))
                                                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) replacement-range)))

(defun NS::|acceptsGlyphInfo| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsGlyphInfo) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_addTemporaryAttribute:value:forCharacterRange:| (thing _ value for-character-range)
  (let ((message-lambda 
         (make-message-lambda @(_addTemporaryAttribute:value:forCharacterRange:) ((:POINTER
                                                                                   :POINTER
                                                                                   (:STRUCT
                                                                                    NS::|_NSRange|))
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr value) for-character-range)))

(defun NS::|updateRuler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateRuler) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|breakUndoCoalescing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(breakUndoCoalescing) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAlignment:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setAlignment:range:) ((:LONG-LONG
                                                       (:STRUCT
                                                        NS::|_NSRange|))
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ range)))

(defun NS::|setBaseWritingDirection:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setBaseWritingDirection:range:) ((:LONG-LONG
                                                                  (:STRUCT
                                                                   NS::|_NSRange|))
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ range)))

(defun NS::|rangesForUserCharacterAttributeChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangesForUserCharacterAttributeChange) (NIL
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addToTypingAttributes:value:| (thing _ value)
  (let ((message-lambda 
         (make-message-lambda @(_addToTypingAttributes:value:) ((:POINTER
                                                                 :POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr value))))

(defun NS::|_applyMarkerSettingsFromParagraphStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_applyMarkerSettingsFromParagraphStyle:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_canChangeRulerMarkers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canChangeRulerMarkers) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|usesInspectorBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesInspectorBar) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|usesRuler| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesRuler) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_ensureLayoutCompleteForVisibleRectWithExtension:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_ensureLayoutCompleteForVisibleRectWithExtension:) ((:CHAR)
                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0)))) nil t))

(defun NS::|_textLayoutManagerOwnsFirstResponderInWindow:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_textLayoutManagerOwnsFirstResponderInWindow:) ((:POINTER)
                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_textViewContainingTextLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_textViewContainingTextLocation:) ((:POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_installRulerAccViewForParagraphStyle:ruler:enabled:| (thing _ ruler enabled)
  (let ((message-lambda 
         (make-message-lambda @(_installRulerAccViewForParagraphStyle:ruler:enabled:) ((:POINTER
                                                                                        :POINTER
                                                                                        :CHAR)
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr ruler) (if enabled 1 0))))

(defun NS::|updateInspectorBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateInspectorBar) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|updateTextTouchBarItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateTextTouchBarItems) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|renderingColorForDocumentColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(renderingColorForDocumentColor:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|allowsDocumentBackgroundColorChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsDocumentBackgroundColorChange) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_renderingAttributesForDocumentAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_renderingAttributesForDocumentAttributes:) ((:POINTER)
                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_currentEditingColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentEditingColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|acceptableDragTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(acceptableDragTypes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|updateDragTypeRegistration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateDragTypeRegistration) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doubleClickAtIndex:limitedRangeOK:| (thing _ limited-range-o-k)
  (let ((message-lambda 
         (make-message-lambda @(_doubleClickAtIndex:limitedRangeOK:) ((:UNSIGNED-LONG-LONG
                                                                       :CHAR)
                                                                      (:STRUCT
                                                                       NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if limited-range-o-k 1 0))))

(defun NS::|_setNeedsLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsLayout) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|updateFontPanel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateFontPanel) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setDefaultParagraphStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDefaultParagraphStyle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setConstrainedFrameSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setConstrainedFrameSize:) (((:STRUCT
                                                             NS::|CGSize|))
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|rangesForUserTextChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangesForUserTextChange) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|documentColorForRenderingColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(documentColorForRenderingColor:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_convertAttributesByMappingRenderingColor:converter:| (thing _ converter)
  (let ((message-lambda 
         (make-message-lambda @(_convertAttributesByMappingRenderingColor:converter:) ((:POINTER
                                                                                        :POINTER)
                                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr converter))))

(defun NS::|_rangeForUserBaseWritingDirectionChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rangeForUserBaseWritingDirectionChange) (NIL
                                                                          (:STRUCT
                                                                           NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_rangesForUserBaseWritingDirectionChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rangesForUserBaseWritingDirectionChange) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_changeBaseWritingDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_changeBaseWritingDirection:) ((:LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_noteUndoOfCorrections:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_noteUndoOfCorrections:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_changeSpellingToWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_changeSpellingToWord:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeSpellingAttributeForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeSpellingAttributeForRange:) (((:STRUCT
                                                                      NS::|_NSRange|))
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_markAllForTextChecking| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_markAllForTextChecking) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unlearnSpellingFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_unlearnSpellingFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_replaceTextFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_replaceTextFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_unmarkTextEditedForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_unmarkTextEditedForRange:) (((:STRUCT
                                                               NS::|_NSRange|))
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|writeSelectionToPasteboard:types:| (thing _ types)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeSelectionToPasteboard:types:) ((:POINTER
                                                                     :POINTER)
                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr types)))) nil t))


(defun NS::|_revealItemAtCharacterIndex:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(_revealItemAtCharacterIndex:options:) ((:UNSIGNED-LONG-LONG
                                                                        :POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr options))))

(defun NS::|setRulerVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRulerVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_scrollRangeToVisible:forceCenter:| (thing _ force-center)
  (let ((message-lambda 
         (make-message-lambda @(_scrollRangeToVisible:forceCenter:) (((:STRUCT
                                                                       NS::|_NSRange|)
                                                                      :CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if force-center 1 0))))

(defun NS::|_createTrackingArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_createTrackingArea) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setFrameSize:forceScroll:| (thing _ force-scroll)
  (let ((message-lambda 
         (make-message-lambda @(_setFrameSize:forceScroll:) (((:STRUCT
                                                               NS::|CGSize|)
                                                              :CHAR)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if force-scroll 1 0))))

(defun NS::|_isDrawingLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isDrawingLayer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|_ensureMinAndMaxSizesConsistentWithBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_ensureMinAndMaxSizesConsistentWithBounds) (NIL
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_caretMustDraw| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_caretMustDraw) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_drawViewBackgroundInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_drawViewBackgroundInRect:) (((:STRUCT
                                                               NS::|CGRect|))
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_ensureLayoutCompleteForPreparingContentInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_ensureLayoutCompleteForPreparingContentInRect:) (((:STRUCT
                                                                                    NS::|CGRect|))
                                                                                  (:STRUCT
                                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_updateDarkEffectiveAppearanceFlagWithAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateDarkEffectiveAppearanceFlagWithAppearance:) ((:POINTER)
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|usesAdaptiveColorMappingForDarkAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesAdaptiveColorMappingForDarkAppearance) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_shouldDoAdaptiveColorMapping| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldDoAdaptiveColorMapping) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|drawViewBackgroundInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawViewBackgroundInRect:) (((:STRUCT
                                                              NS::|CGRect|))
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|drawPlaceholderInRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawPlaceholderInRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_extendedGlyphRangeForRange:maxGlyphIndex:drawingToScreen:| (thing _ max-glyph-index drawing-to-screen)
  (let ((message-lambda 
         (make-message-lambda @(_extendedGlyphRangeForRange:maxGlyphIndex:drawingToScreen:) (((:STRUCT
                                                                                               NS::|_NSRange|)
                                                                                              :UNSIGNED-LONG-LONG
                                                                                              :CHAR)
                                                                                             (:STRUCT
                                                                                              NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ max-glyph-index (if drawing-to-screen 1 0))))

(defun NS::|_showAllInsertionPointsForGlyphRange:atPoint:| (thing _ at-point)
  (let ((message-lambda 
         (make-message-lambda @(_showAllInsertionPointsForGlyphRange:atPoint:) (((:STRUCT
                                                                                  NS::|_NSRange|)
                                                                                 (:STRUCT
                                                                                  NS::|CGPoint|))
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ at-point)))

(defun NS::|_showParagraphDirectionalityForGlyphRange:atPoint:| (thing _ at-point)
  (let ((message-lambda 
         (make-message-lambda @(_showParagraphDirectionalityForGlyphRange:atPoint:) (((:STRUCT
                                                                                       NS::|_NSRange|)
                                                                                      (:STRUCT
                                                                                       NS::|CGPoint|))
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ at-point)))

(defun NS::|_deferConsiderationOfTextCheckingForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_deferConsiderationOfTextCheckingForRange:) (((:STRUCT
                                                                               NS::|_NSRange|))
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_getGlyphIndex:characterIndex:forWindowPoint:pinnedPoint:preferredTextView:partialFraction:| (thing _ character-index for-window-point pinned-point preferred-text-view partial-fraction)
  (let ((message-lambda 
         (make-message-lambda @(_getGlyphIndex:characterIndex:forWindowPoint:pinnedPoint:preferredTextView:partialFraction:) (((:POINTER
                                                                                                                                :UNSIGNED-LONG-LONG)
                                                                                                                               (:POINTER
                                                                                                                                :UNSIGNED-LONG-LONG)
                                                                                                                               (:STRUCT
                                                                                                                                NS::|CGPoint|)
                                                                                                                               (:STRUCT
                                                                                                                                NS::|CGPoint|)
                                                                                                                               :POINTER
                                                                                                                               (:POINTER
                                                                                                                                :DOUBLE))
                                                                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr character-index) for-window-point pinned-point (ns-object-ptr preferred-text-view) (ns-object-ptr partial-fraction))))

(defun NS::|_attachmentAtGlyphIndex:containsWindowPoint:| (thing _ contains-window-point)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_attachmentAtGlyphIndex:containsWindowPoint:) ((:UNSIGNED-LONG-LONG
                                                                                (:STRUCT
                                                                                 NS::|CGPoint|))
                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ contains-window-point))) nil t))

(defun NS::|_updateTextContainerSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateTextContainerSize:) (((:STRUCT
                                                              NS::|CGSize|))
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_shouldUpdateLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldUpdateLayout) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateBlinkRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateBlinkRect) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateTextLayoutManagerSelectionLayers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateTextLayoutManagerSelectionLayers) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_viewportBoundsForTextViewportLayoutController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_viewportBoundsForTextViewportLayoutController:) ((:POINTER)
                                                                                  (:STRUCT
                                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateContentSizeIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateContentSizeIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postTextLayoutAction| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postTextLayoutAction) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_contentSizeForLastContainerView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_contentSizeForLastContainerView) (NIL
                                                                   (:STRUCT
                                                                    NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|shouldRenderPlaceholder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRenderPlaceholder) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_textSelection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_textSelection) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|toggleBaseWritingDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleBaseWritingDirection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertNewlineIgnoringFieldEditor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertNewlineIgnoringFieldEditor:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertParagraphSeparator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertParagraphSeparator:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertLineBreak:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertLineBreak:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertLineSeparator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertLineSeparator:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|uppercaseWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(uppercaseWord:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|lowercaseWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lowercaseWord:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|capitalizeWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(capitalizeWord:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|makeBaseWritingDirectionNatural:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeBaseWritingDirectionNatural:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|makeBaseWritingDirectionLeftToRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeBaseWritingDirectionLeftToRight:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|makeBaseWritingDirectionRightToLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeBaseWritingDirectionRightToLeft:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|makeTextWritingDirectionNatural:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeTextWritingDirectionNatural:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|makeTextWritingDirectionLeftToRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeTextWritingDirectionLeftToRight:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|makeTextWritingDirectionRightToLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeTextWritingDirectionRightToLeft:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertPageBreak:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertPageBreak:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertContainerBreak:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertContainerBreak:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_changeSpellingFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_changeSpellingFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_changeAlternativesFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_changeAlternativesFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_ignoreSpellingFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_ignoreSpellingFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_ignoreGrammarFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_ignoreGrammarFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_learnSpellingFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_learnSpellingFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_forgetSpellingFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_forgetSpellingFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|replaceQuotesInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replaceQuotesInSelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|replaceDashesInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replaceDashesInSelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|replaceTextInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replaceTextInSelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|transliterateToLatin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(transliterateToLatin:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|removeAccents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeAccents:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|centerSelectionInVisibleArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(centerSelectionInVisibleArea:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pasteAsPlainText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteAsPlainText:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pasteAsRichText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteAsRichText:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|preferredPasteboardTypeFromArray:restrictedToTypesFromArray:| (thing _ restricted-to-types-from-array)
  (let ((message-lambda 
         (make-message-lambda @(preferredPasteboardTypeFromArray:restrictedToTypesFromArray:) ((:POINTER
                                                                                                :POINTER)
                                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr restricted-to-types-from-array))))

(defun NS::|spotlight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spotlight:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_searchWithGoogleFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_searchWithGoogleFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_lookUpDefiniteRangeInDictionaryFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_lookUpDefiniteRangeInDictionaryFromMenu:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_lookUpIndefiniteRangeInDictionaryFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_lookUpIndefiniteRangeInDictionaryFromMenu:) ((:POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleTraditionalCharacterShape:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTraditionalCharacterShape:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|copyLink:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copyLink:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|alignJustified:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignJustified:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|orderFrontSpacingPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontSpacingPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertTable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertTable:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|orderFrontLinkPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontLinkPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|orderFrontListPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontListPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|orderFrontTablePanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontTablePanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_makeLinkFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_makeLinkFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeLinkFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeLinkFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|addLinksInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addLinksInSelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_textViewFinder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_textViewFinder) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|changeBaseWritingDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeBaseWritingDirection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|changeLayoutOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeLayoutOrientation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleQuickLookPreviewPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleQuickLookPreviewPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_underlineIsOn| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_underlineIsOn) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_outlineIsOn| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_outlineIsOn) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_validateMenuItemForPreviewAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_validateMenuItemForPreviewAction:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setScrollingToEnd:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setScrollingToEnd:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|characterRangeForRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(characterRangeForRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         (:STRUCT
                                                          NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|displaysLinkToolTips| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(displaysLinkToolTips) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_showToolTip:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_showToolTip:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_toolTipOwnerResignKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_toolTipOwnerResignKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_contentRectForTextBlock:glyphRange:| (thing _ glyph-range)
  (let ((message-lambda 
         (make-message-lambda @(_contentRectForTextBlock:glyphRange:) ((:POINTER
                                                                        (:STRUCT
                                                                         NS::|_NSRange|))
                                                                       (:STRUCT
                                                                        NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) glyph-range)))

(defun NS::|_cellForPoint:characterIndex:level:row:column:range:| (thing _ character-index level row column range)
  (let ((message-lambda 
         (make-message-lambda @(_cellForPoint:characterIndex:level:row:column:range:) (((:STRUCT
                                                                                         NS::|CGPoint|)
                                                                                        :UNSIGNED-LONG-LONG
                                                                                        (:POINTER
                                                                                         :UNSIGNED-LONG-LONG)
                                                                                        (:POINTER
                                                                                         :LONG-LONG)
                                                                                        (:POINTER
                                                                                         :LONG-LONG)
                                                                                        (:POINTER
                                                                                         (:STRUCT
                                                                                          NS::|_NSRange|)))
                                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ character-index (ns-object-ptr level) (ns-object-ptr row) (ns-object-ptr column) (ns-object-ptr range))))

(defun NS::|linkTextAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(linkTextAttributes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_toolTipTimer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_toolTipTimer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_menuItemsForDataResult:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_menuItemsForDataResult:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_showDataDetectionIndicatorForRange:dataResult:windowPoint:| (thing _ data-result window-point)
  (let ((message-lambda 
         (make-message-lambda @(_showDataDetectionIndicatorForRange:dataResult:windowPoint:) (((:STRUCT
                                                                                                NS::|_NSRange|)
                                                                                               :POINTER
                                                                                               (:STRUCT
                                                                                                NS::|CGPoint|))
                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr data-result) window-point)))

(defun NS::|usesRolloverButtonForSelection| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesRolloverButtonForSelection) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_conditionallyRemoveDataDetectionIndicator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_conditionallyRemoveDataDetectionIndicator:) ((:POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_mouseInside:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_mouseInside:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_getGlyphIndex:characterIndex:forWindowPoint:pinnedPoint:anchorPoint:useAnchorPoint:preferredTextView:partialFraction:| (thing _ character-index for-window-point pinned-point anchor-point use-anchor-point preferred-text-view partial-fraction)
  (let ((message-lambda 
         (make-message-lambda @(_getGlyphIndex:characterIndex:forWindowPoint:pinnedPoint:anchorPoint:useAnchorPoint:preferredTextView:partialFraction:) (((:POINTER
                                                                                                                                                           :UNSIGNED-LONG-LONG)
                                                                                                                                                          (:POINTER
                                                                                                                                                           :UNSIGNED-LONG-LONG)
                                                                                                                                                          (:STRUCT
                                                                                                                                                           NS::|CGPoint|)
                                                                                                                                                          (:STRUCT
                                                                                                                                                           NS::|CGPoint|)
                                                                                                                                                          (:STRUCT
                                                                                                                                                           NS::|CGPoint|)
                                                                                                                                                          :CHAR
                                                                                                                                                          :POINTER
                                                                                                                                                          (:POINTER
                                                                                                                                                           :DOUBLE))
                                                                                                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr character-index) for-window-point pinned-point anchor-point (if use-anchor-point 1 0) (ns-object-ptr preferred-text-view) (ns-object-ptr partial-fraction))))

(defun NS::|selectionRangeForProposedRange:granularity:| (thing _ granularity)
  (let ((message-lambda 
         (make-message-lambda @(selectionRangeForProposedRange:granularity:) (((:STRUCT
                                                                                NS::|_NSRange|)
                                                                               :UNSIGNED-LONG-LONG)
                                                                              (:STRUCT
                                                                               NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ granularity)))

(defun NS::|_setTextSelection:withScrollBehavior:| (thing _ with-scroll-behavior)
  (let ((message-lambda 
         (make-message-lambda @(_setTextSelection:withScrollBehavior:) ((:POINTER
                                                                         :INT)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) with-scroll-behavior)))

(defun NS::|_shouldHavePeriodicEventsForPoint:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldHavePeriodicEventsForPoint:) (((:STRUCT
                                                                       NS::|CGPoint|))
                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|__performDataDetectorViewEvent:contextual:| (thing _ contextual)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(__performDataDetectorViewEvent:contextual:) ((:POINTER
                                                                              :CHAR)
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if contextual 1 0)))) nil t))

(defun NS::|selectionGranularity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectionGranularity) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_range:containsPoint:| (thing _ contains-point)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_range:containsPoint:) (((:STRUCT
                                                          NS::|_NSRange|)
                                                         (:STRUCT
                                                          NS::|CGPoint|))
                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ contains-point))) nil t))

(defun NS::|_consumeMouseEventsUntilMouseUpStartingWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_consumeMouseEventsUntilMouseUpStartingWithEvent:) ((:POINTER)
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_trackAttachmentClick:characterIndex:glyphIndex:attachmentCell:| (thing _ character-index glyph-index attachment-cell)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_trackAttachmentClick:characterIndex:glyphIndex:attachmentCell:) ((:POINTER
                                                                                                   :UNSIGNED-LONG-LONG
                                                                                                   :UNSIGNED-LONG-LONG
                                                                                                   :POINTER)
                                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) character-index glyph-index (ns-object-ptr attachment-cell)))) nil t))

(defun NS::|_resizeTable:level:range:row:heightDelta:| (thing _ level range row height-delta)
  (let ((message-lambda 
         (make-message-lambda @(_resizeTable:level:range:row:heightDelta:) ((:POINTER
                                                                             :UNSIGNED-LONG-LONG
                                                                             (:STRUCT
                                                                              NS::|_NSRange|)
                                                                             :LONG-LONG
                                                                             :DOUBLE)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) level range row height-delta)))

(defun NS::|_resizeTable:level:range:column:widthDelta:| (thing _ level range column width-delta)
  (let ((message-lambda 
         (make-message-lambda @(_resizeTable:level:range:column:widthDelta:) ((:POINTER
                                                                               :UNSIGNED-LONG-LONG
                                                                               (:STRUCT
                                                                                NS::|_NSRange|)
                                                                               :LONG-LONG
                                                                               :DOUBLE)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) level range column width-delta)))

(defun NS::|_bellerophonTrackMouseWithMouseDownEvent:originalSelection:granularity:extending:rectangular:toggling:multiple:autoscrollEvent:| (thing _ original-selection granularity extending rectangular toggling multiple autoscroll-event)
  (let ((message-lambda 
         (make-message-lambda @(_bellerophonTrackMouseWithMouseDownEvent:originalSelection:granularity:extending:rectangular:toggling:multiple:autoscrollEvent:) ((:POINTER
                                                                                                                                                                   :POINTER
                                                                                                                                                                   :LONG-LONG
                                                                                                                                                                   :CHAR
                                                                                                                                                                   :CHAR
                                                                                                                                                                   :CHAR
                                                                                                                                                                   :CHAR
                                                                                                                                                                   :POINTER)
                                                                                                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr original-selection) granularity (if extending 1 0) (if rectangular 1 0) (if toggling 1 0) (if multiple 1 0) (ns-object-ptr autoscroll-event))))

(defun NS::|_distForGlyphLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_distForGlyphLocation:) ((:UNSIGNED-LONG-LONG)
                                                         :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_rectangularCharacterRangesForGlyphRange:from:to:granularity:| (thing _ from to granularity)
  (let ((message-lambda 
         (make-message-lambda @(_rectangularCharacterRangesForGlyphRange:from:to:granularity:) (((:STRUCT
                                                                                                  NS::|_NSRange|)
                                                                                                 :DOUBLE
                                                                                                 :DOUBLE
                                                                                                 :UNSIGNED-LONG-LONG)
                                                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ from to granularity)))

(defun NS::|_selectedRangesByTogglingRanges:withRanges:initialCharacterIndex:granularity:| (thing _ with-ranges initial-character-index granularity)
  (let ((message-lambda 
         (make-message-lambda @(_selectedRangesByTogglingRanges:withRanges:initialCharacterIndex:granularity:) ((:POINTER
                                                                                                                 :POINTER
                                                                                                                 :UNSIGNED-LONG-LONG
                                                                                                                 :UNSIGNED-LONG-LONG)
                                                                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-ranges) initial-character-index granularity)))

(defun NS::|setSelectedRanges:affinity:stillSelecting:| (thing _ affinity still-selecting)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedRanges:affinity:stillSelecting:) ((:POINTER
                                                                              :UNSIGNED-LONG-LONG
                                                                              :CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) affinity (if still-selecting 1 0))))

(defun NS::|setSelectionGranularity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectionGranularity:) ((:UNSIGNED-LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_firstRectForCharacterRange:actualTextContainer:actualRange:| (thing _ actual-text-container actual-range)
  (let ((message-lambda 
         (make-message-lambda @(_firstRectForCharacterRange:actualTextContainer:actualRange:) (((:STRUCT
                                                                                                 NS::|_NSRange|)
                                                                                                (:POINTER
                                                                                                 :POINTER)
                                                                                                (:POINTER
                                                                                                 (:STRUCT
                                                                                                  NS::|_NSRange|)))
                                                                                               (:STRUCT
                                                                                                NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr actual-text-container) (ns-object-ptr actual-range))))

(defun NS::|_characterIndexForPoint:fractionOfDistanceThroughGlyph:| (thing _ fraction-of-distance-through-glyph)
  (let ((message-lambda 
         (make-message-lambda @(_characterIndexForPoint:fractionOfDistanceThroughGlyph:) (((:STRUCT
                                                                                            NS::|CGPoint|)
                                                                                           (:POINTER
                                                                                            :DOUBLE))
                                                                                          :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr fraction-of-distance-through-glyph))))

(defun NS::|_rvItemAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_rvItemAtIndex:) ((:UNSIGNED-LONG-LONG)
                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_characterRangeByTrimmingWhitespaceFromRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_characterRangeByTrimmingWhitespaceFromRange:) (((:STRUCT
                                                                                  NS::|_NSRange|))
                                                                                (:STRUCT
                                                                                 NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_configureSharingServicesMenuItemInRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_configureSharingServicesMenuItemInRange:) (((:STRUCT
                                                                              NS::|_NSRange|))
                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|shouldRemoveCaseTransformations| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRemoveCaseTransformations) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_shouldIncludePreviewActionInContextMenu| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldIncludePreviewActionInContextMenu) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|convertToSimplifiedChinese:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertToSimplifiedChinese:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|convertToTraditionalChinese:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertToTraditionalChinese:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|convertToFullWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertToFullWidth:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|convertToHalfWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertToHalfWidth:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|shouldRemoveTransformationAction:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRemoveTransformationAction:) ((:POINTER)
                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_changeToBidiControlCharacters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_changeToBidiControlCharacters:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_changeToWritingDirectionAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_changeToWritingDirectionAttribute:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|usesFindBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesFindBar) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|usesFindPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesFindPanel) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|drawCharactersInTextRange:atPoint:| (thing _ at-point)
  (let ((message-lambda 
         (make-message-lambda @(drawCharactersInTextRange:atPoint:) ((:POINTER
                                                                      (:STRUCT
                                                                       NS::|CGPoint|))
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-point)))

(defun NS::|setLayoutOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayoutOrientation:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|viewportBoundsForTextViewportLayoutController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewportBoundsForTextViewportLayoutController:) ((:POINTER)
                                                                                 (:STRUCT
                                                                                  NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|textViewportLayoutController:configureRenderingSurfaceForTextLayoutFragment:| (thing _ configure-rendering-surface-for-text-layout-fragment)
  (let ((message-lambda 
         (make-message-lambda @(textViewportLayoutController:configureRenderingSurfaceForTextLayoutFragment:) ((:POINTER
                                                                                                                :POINTER)
                                                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr configure-rendering-surface-for-text-layout-fragment))))

(defun NS::|textViewportLayoutControllerWillLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(textViewportLayoutControllerWillLayout:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|textViewportLayoutControllerDidLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(textViewportLayoutControllerDidLayout:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveForward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveForward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveBackward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveBackward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveWordForward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordForward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveWordBackward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordBackward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToBeginningOfParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfParagraph:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToEndOfParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfParagraph:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToBeginningOfDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfDocument:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveBackwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveBackwardAndModifySelection:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveForwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveForwardAndModifySelection:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveWordForwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordForwardAndModifySelection:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveWordBackwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordBackwardAndModifySelection:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveUpAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveUpAndModifySelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveDownAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveDownAndModifySelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToBeginningOfParagraphAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfParagraphAndModifySelection:) ((:POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToEndOfParagraphAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfParagraphAndModifySelection:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToEndOfDocumentAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfDocumentAndModifySelection:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveToBeginningOfDocumentAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfDocumentAndModifySelection:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pageDownAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pageDownAndModifySelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pageUpAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pageUpAndModifySelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveParagraphForwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveParagraphForwardAndModifySelection:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveParagraphBackwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveParagraphBackwardAndModifySelection:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveWordRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordRight:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveWordLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordLeft:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveRightAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveRightAndModifySelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveLeftAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveLeftAndModifySelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveWordRightAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordRightAndModifySelection:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveWordLeftAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordLeftAndModifySelection:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|scrollPageUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollPageUp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|scrollPageDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollPageDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|scrollLineUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollLineUp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|scrollLineDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollLineDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|transpose:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(transpose:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectParagraph:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectWord:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertTabIgnoringFieldEditor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertTabIgnoringFieldEditor:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertSingleQuoteIgnoringSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertSingleQuoteIgnoringSubstitution:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertDoubleQuoteIgnoringSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertDoubleQuoteIgnoringSubstitution:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|deleteForward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteForward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|deleteBackward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteBackward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|deleteBackwardByDecomposingPreviousCharacter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteBackwardByDecomposingPreviousCharacter:) ((:POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|deleteWordForward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteWordForward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|deleteWordBackward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteWordBackward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|deleteToBeginningOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToBeginningOfLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|deleteToEndOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToEndOfLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|deleteToBeginningOfParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToBeginningOfParagraph:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|deleteToEndOfParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToEndOfParagraph:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|yank:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(yank:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setMark:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMark:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|deleteToMark:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToMark:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectToMark:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectToMark:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|swapWithMark:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swapWithMark:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeAutiliaryUserInterfaceItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeAutiliaryUserInterfaceItems) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|replaceTextContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replaceTextContainer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setTextContainerInset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextContainerInset:) (((:STRUCT
                                                           NS::|CGSize|))
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|textContainerInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContainerInsets) (NIL
                                                      (:STRUCT
                                                       NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|textContentStorage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContentStorage) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeGrammarAttributeForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeGrammarAttributeForRange:) (((:STRUCT
                                                                     NS::|_NSRange|))
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_mightHaveSpellingAttributes| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_mightHaveSpellingAttributes) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_canUnlearnSpellingForRange:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canUnlearnSpellingForRange:) (((:STRUCT
                                                                 NS::|_NSRange|))
                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_checkLinksAfterChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_checkLinksAfterChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|inspectorBarItemIdentifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(inspectorBarItemIdentifiers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|shouldDrawInsertionPoint| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldDrawInsertionPoint) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|updateSpellingPanel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateSpellingPanel) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|performValidatedReplacementInRange:withAttributedString:| (thing _ with-attributed-string)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(performValidatedReplacementInRange:withAttributedString:) (((:STRUCT
                                                                                             NS::|_NSRange|)
                                                                                            :POINTER)
                                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-attributed-string)))) nil t))

(defun NS::|_turnOnSpellingCorrectionFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_turnOnSpellingCorrectionFromMenu:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_turnOnTextReplacementFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_turnOnTextReplacementFromMenu:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_openLinkFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_openLinkFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_restoreReplacedString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_restoreReplacedString:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_renderingColorForDocumentColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_renderingColorForDocumentColor:) ((:POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|viewportBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewportBounds) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|viewportAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewportAnchor) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|locationForPositionInViewport:offset:| (thing _ offset)
  (let ((message-lambda 
         (make-message-lambda @(locationForPositionInViewport:offset:) (((:STRUCT
                                                                          NS::|CGPoint|)
                                                                         (:POINTER
                                                                          (:STRUCT
                                                                           NS::|CGSize|)))
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr offset))))

(defun NS::|_setTextRangeNeedsDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTextRangeNeedsDisplay:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_copyFromDataDetectionIndicator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_copyFromDataDetectionIndicator:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_mouseExitedDataDetectionIndicator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_mouseExitedDataDetectionIndicator) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|mouseCancelled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseCancelled:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_characterRangeBetweenIndexes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_characterRangeBetweenIndexes:) (((:STRUCT
                                                                   NS::|_NSRange|))
                                                                 (:STRUCT
                                                                  NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|lockDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lockDocument) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|unlockDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unlockDocument) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|characterIndexForInsertionAtPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(characterIndexForInsertionAtPoint:) (((:STRUCT
                                                                       NS::|CGPoint|))
                                                                     :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_informTextFinderStringWillChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_informTextFinderStringWillChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|rectsForCharacterRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rectsForCharacterRange:) (((:STRUCT
                                                            NS::|_NSRange|))
                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|drawCharactersInRange:forContentView:| (thing _ for-content-view)
  (let ((message-lambda 
         (make-message-lambda @(drawCharactersInRange:forContentView:) (((:STRUCT
                                                                          NS::|_NSRange|)
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-content-view))))




(defun NS::|set_inLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(set_inLayout:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setUsesInspectorBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesInspectorBar:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setAllowsDocumentBackgroundColorChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsDocumentBackgroundColorChange:) ((:CHAR)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setUsesFindBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesFindBar:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_selectionBackgroundColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_selectionBackgroundColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityAttachmentCellForChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityAttachmentCellForChild:) ((:POINTER)
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_accessibilityCharacterRangeOfChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityCharacterRangeOfChild:) ((:POINTER)
                                                                       (:STRUCT
                                                                        NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySelectedTextRangesAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextRangesAttribute) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsSelectedTextRangesAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSelectedTextRangesAttributeSettable) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySetSelectedTextRangesAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetSelectedTextRangesAttribute:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySharedTextUIElementsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedTextUIElementsAttribute) (NIL
                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsSharedTextUIElementsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSharedTextUIElementsAttributeSettable) (NIL
                                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySharedCharacterRangeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedCharacterRangeAttribute) (NIL
                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsSharedCharacterRangeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSharedCharacterRangeAttributeSettable) (NIL
                                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySharedTextElementForIndexAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedTextElementForIndexAttributeForParameter:) ((:POINTER)
                                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityTextInputMarkedRangeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTextInputMarkedRangeAttribute) (NIL
                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsTextInputMarkedRangeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTextInputMarkedRangeAttributeSettable) (NIL
                                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setLinkTextAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLinkTextAttributes:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setMarkedTextAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMarkedTextAttributes:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAcceptsGlyphInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAcceptsGlyphInfo:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_distanceForVerticalArrowKeyMovement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_distanceForVerticalArrowKeyMovement) (NIL
                                                                       :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_fieldEditorUndoManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fieldEditorUndoManager) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_touchBarItemController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_touchBarItemController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_filePromiseResolutionQueue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_filePromiseResolutionQueue) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resolvedFilePromisePasteboard| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resolvedFilePromisePasteboard) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_insertionCharacterIndexForDrag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_insertionCharacterIndexForDrag:) ((:POINTER)
                                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shouldAcceptFilePromiseDrags| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldAcceptFilePromiseDrags) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateDragInsertionIndicatorWith:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateDragInsertionIndicatorWith:) (((:STRUCT
                                                                       NS::|CGRect|))
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setDragAndDropCharRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDragAndDropCharRanges:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_pasteboardHasFilePromises:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_pasteboardHasFilePromises:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_inlineablePasteboardTypeForPromisesOnPasteboard:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_inlineablePasteboardTypeForPromisesOnPasteboard:) ((:POINTER)
                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_pasteboardHasFilePromiseWithUnknownType:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_pasteboardHasFilePromiseWithUnknownType:) ((:POINTER)
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_preferredPasteboardTypeFromPasteboard:isPromise:| (thing _ is-promise)
  (let ((message-lambda 
         (make-message-lambda @(_preferredPasteboardTypeFromPasteboard:isPromise:) ((:POINTER
                                                                                     (:POINTER
                                                                                      :CHAR))
                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr is-promise))))

(defun NS::|dragOperationForDraggingInfo:type:| (thing _ type)
  (let ((message-lambda 
         (make-message-lambda @(dragOperationForDraggingInfo:type:) ((:POINTER
                                                                      :POINTER)
                                                                     :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr type))))

(defun NS::|cleanUpAfterDragOperation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cleanUpAfterDragOperation) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|smartDeleteRangeForProposedRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(smartDeleteRangeForProposedRange:) (((:STRUCT
                                                                      NS::|_NSRange|))
                                                                    (:STRUCT
                                                                     NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_readSelectionFromPasteboard:types:| (thing _ types)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readSelectionFromPasteboard:types:) ((:POINTER
                                                                       :POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr types)))) nil t))

(defun NS::|_resolveFilePromisesInPasteboard:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(_resolveFilePromisesInPasteboard:completionHandler:) ((:POINTER
                                                                                       :POINTER)
                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr completion-handler))))

(defun NS::|dragImageForSelectionWithEvent:origin:| (thing _ origin)
  (let ((message-lambda 
         (make-message-lambda @(dragImageForSelectionWithEvent:origin:) ((:POINTER
                                                                          (:POINTER
                                                                           (:STRUCT
                                                                            NS::|CGPoint|)))
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr origin))))

(defun NS::|_deletesForGenericDragging| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_deletesForGenericDragging) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_attributedSubstringForRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_attributedSubstringForRanges:) ((:POINTER)
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_draggingSession:endedAtPoint:operation:| (thing _ ended-at-point operation)
  (let ((message-lambda 
         (make-message-lambda @(_draggingSession:endedAtPoint:operation:) ((:POINTER
                                                                            (:STRUCT
                                                                             NS::|CGPoint|)
                                                                            :UNSIGNED-LONG-LONG)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) ended-at-point operation)))

(defun NS::|_insertionGlyphIndexForDrag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_insertionGlyphIndexForDrag:) ((:POINTER)
                                                               :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|drawDragInsertionIndicatorWithRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawDragInsertionIndicatorWithRect:) (((:STRUCT
                                                                        NS::|CGRect|))
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_pointForTopOfBeginningOfCharRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_pointForTopOfBeginningOfCharRange:) (((:STRUCT
                                                                        NS::|_NSRange|))
                                                                      (:STRUCT
                                                                       NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_forceRedrawDragInsertionIndicator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_forceRedrawDragInsertionIndicator) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setDragAndDropCharRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDragAndDropCharRange:) (((:STRUCT
                                                              NS::|_NSRange|))
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_fixDragAndDropCharRangesForChangeInRanges:replacementStrings:| (thing _ replacement-strings)
  (let ((message-lambda 
         (make-message-lambda @(_fixDragAndDropCharRangesForChangeInRanges:replacementStrings:) ((:POINTER
                                                                                                  :POINTER)
                                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr replacement-strings))))

(defun NS::|_verticalDistanceForPageScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_verticalDistanceForPageScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_ensureLayoutCompleteForVisibleRectWithExtensionFactor:minimumExtensionDistance:repetitions:| (thing _ minimum-extension-distance repetitions)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_ensureLayoutCompleteForVisibleRectWithExtensionFactor:minimumExtensionDistance:repetitions:) ((:DOUBLE
                                                                                                                                :DOUBLE
                                                                                                                                :UNSIGNED-LONG-LONG)
                                                                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ minimum-extension-distance repetitions))) nil t))

(defun NS::|_scrollUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scrollUp:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_scrollDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scrollDown:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_verticalDistanceForLineScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_verticalDistanceForLineScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_characterIndexForMoveForwardFromCharacterIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_characterIndexForMoveForwardFromCharacterIndex:) ((:UNSIGNED-LONG-LONG)
                                                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_characterIndexForMoveBackwardFromCharacterIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_characterIndexForMoveBackwardFromCharacterIndex:) ((:UNSIGNED-LONG-LONG)
                                                                                    :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_characterIndexForMoveRightFromCharacterIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_characterIndexForMoveRightFromCharacterIndex:) ((:UNSIGNED-LONG-LONG)
                                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_characterIndexForMoveLeftFromCharacterIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_characterIndexForMoveLeftFromCharacterIndex:) ((:UNSIGNED-LONG-LONG)
                                                                                :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_moveInDirection:withDestination:extending:confined:| (thing _ with-destination extending confined)
  (let ((message-lambda 
         (make-message-lambda @(_moveInDirection:withDestination:extending:confined:) ((:LONG-LONG
                                                                                        :LONG-LONG
                                                                                        :CHAR
                                                                                        :CHAR)
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ with-destination (if extending 1 0) (if confined 1 0))))

(defun NS::|_characterIndexForMoveForwardFromSelectedRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_characterIndexForMoveForwardFromSelectedRanges:) ((:POINTER)
                                                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_characterIndexForMoveBackwardFromSelectedRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_characterIndexForMoveBackwardFromSelectedRanges:) ((:POINTER)
                                                                                    :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_characterIndexForMoveRightFromSelectedRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_characterIndexForMoveRightFromSelectedRanges:) ((:POINTER)
                                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_characterIndexForMoveLeftFromSelectedRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_characterIndexForMoveLeftFromSelectedRanges:) ((:POINTER)
                                                                                :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_rangeForMoveUpFromRange:verticalDistance:desiredDistanceIntoContainer:selectionAffinity:| (thing _ vertical-distance desired-distance-into-container selection-affinity)
  (let ((message-lambda 
         (make-message-lambda @(_rangeForMoveUpFromRange:verticalDistance:desiredDistanceIntoContainer:selectionAffinity:) (((:STRUCT
                                                                                                                              NS::|_NSRange|)
                                                                                                                             :DOUBLE
                                                                                                                             (:POINTER
                                                                                                                              :DOUBLE)
                                                                                                                             (:POINTER
                                                                                                                              :UNSIGNED-LONG-LONG))
                                                                                                                            (:STRUCT
                                                                                                                             NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ vertical-distance (ns-object-ptr desired-distance-into-container) (ns-object-ptr selection-affinity))))

(defun NS::|_setDistanceForVerticalArrowKeyMovement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDistanceForVerticalArrowKeyMovement:) ((:DOUBLE)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_rangeForMoveDownFromRange:verticalDistance:desiredDistanceIntoContainer:selectionAffinity:| (thing _ vertical-distance desired-distance-into-container selection-affinity)
  (let ((message-lambda 
         (make-message-lambda @(_rangeForMoveDownFromRange:verticalDistance:desiredDistanceIntoContainer:selectionAffinity:) (((:STRUCT
                                                                                                                                NS::|_NSRange|)
                                                                                                                               :DOUBLE
                                                                                                                               (:POINTER
                                                                                                                                :DOUBLE)
                                                                                                                               (:POINTER
                                                                                                                                :UNSIGNED-LONG-LONG))
                                                                                                                              (:STRUCT
                                                                                                                               NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ vertical-distance (ns-object-ptr desired-distance-into-container) (ns-object-ptr selection-affinity))))

(defun NS::|_moveUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_moveUp:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_moveDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_moveDown:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_characterIndexForMoveWordRightFromCharacterIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_characterIndexForMoveWordRightFromCharacterIndex:) ((:UNSIGNED-LONG-LONG)
                                                                                     :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_characterIndexForMoveWordLeftFromCharacterIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_characterIndexForMoveWordLeftFromCharacterIndex:) ((:UNSIGNED-LONG-LONG)
                                                                                    :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|showFindIndicatorForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showFindIndicatorForRange:) (((:STRUCT
                                                               NS::|_NSRange|))
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_checkInList:listStart:markerRange:emptyItem:atEnd:inBlock:blockStart:forCharacterRange:| (thing _ list-start marker-range empty-item at-end in-block block-start for-character-range)
  (let ((message-lambda 
         (make-message-lambda @(_checkInList:listStart:markerRange:emptyItem:atEnd:inBlock:blockStart:forCharacterRange:) (((:POINTER
                                                                                                                             :CHAR)
                                                                                                                            (:POINTER
                                                                                                                             :CHAR)
                                                                                                                            (:POINTER
                                                                                                                             (:STRUCT
                                                                                                                              NS::|_NSRange|))
                                                                                                                            (:POINTER
                                                                                                                             :CHAR)
                                                                                                                            (:POINTER
                                                                                                                             :CHAR)
                                                                                                                            (:POINTER
                                                                                                                             :CHAR)
                                                                                                                            (:POINTER
                                                                                                                             :CHAR)
                                                                                                                            (:STRUCT
                                                                                                                             NS::|_NSRange|))
                                                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr list-start) (ns-object-ptr marker-range) (ns-object-ptr empty-item) (ns-object-ptr at-end) (ns-object-ptr in-block) (ns-object-ptr block-start) for-character-range)))

(defun NS::|_reformListAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_reformListAtIndex:) ((:UNSIGNED-LONG-LONG)
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_giveUpFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_giveUpFirstResponder:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_nestListAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_nestListAtIndex:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_moveToNextBlock| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_moveToNextBlock) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unnestListAtIndex:markerRange:| (thing _ marker-range)
  (let ((message-lambda 
         (make-message-lambda @(_unnestListAtIndex:markerRange:) ((:UNSIGNED-LONG-LONG
                                                                   (:STRUCT
                                                                    NS::|_NSRange|))
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ marker-range)))

(defun NS::|_moveToPreviousBlock| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_moveToPreviousBlock) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_completionsFromDocumentForPartialWordRange:language:| (thing _ language)
  (let ((message-lambda 
         (make-message-lambda @(_completionsFromDocumentForPartialWordRange:language:) (((:STRUCT
                                                                                          NS::|_NSRange|)
                                                                                         :POINTER)
                                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr language))))

(defun NS::|rangeForUserCompletion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangeForUserCompletion) (NIL
                                                         (:STRUCT
                                                          NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|completionsForPartialWordRange:indexOfSelectedItem:| (thing _ index-of-selected-item)
  (let ((message-lambda 
         (make-message-lambda @(completionsForPartialWordRange:indexOfSelectedItem:) (((:STRUCT
                                                                                        NS::|_NSRange|)
                                                                                       (:POINTER
                                                                                        :LONG-LONG))
                                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr index-of-selected-item))))

(defun NS::|_stripAttachmentCharactersFromString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_stripAttachmentCharactersFromString:) ((:POINTER)
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_characterRangesBetweenIndex:andIndex:| (thing _ and-index)
  (let ((message-lambda 
         (make-message-lambda @(_characterRangesBetweenIndex:andIndex:) ((:UNSIGNED-LONG-LONG
                                                                          :UNSIGNED-LONG-LONG)
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ and-index)))

(defun NS::|_moveUpAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_moveUpAndModifySelection:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_moveDownAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_moveDownAndModifySelection:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_changeTextWritingDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_changeTextWritingDirection:) ((:LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_checkInList:listStart:markerRange:emptyItem:atEnd:inBlock:blockStart:| (thing _ list-start marker-range empty-item at-end in-block block-start)
  (let ((message-lambda 
         (make-message-lambda @(_checkInList:listStart:markerRange:emptyItem:atEnd:inBlock:blockStart:) (((:POINTER
                                                                                                           :CHAR)
                                                                                                          (:POINTER
                                                                                                           :CHAR)
                                                                                                          (:POINTER
                                                                                                           (:STRUCT
                                                                                                            NS::|_NSRange|))
                                                                                                          (:POINTER
                                                                                                           :CHAR)
                                                                                                          (:POINTER
                                                                                                           :CHAR)
                                                                                                          (:POINTER
                                                                                                           :CHAR)
                                                                                                          (:POINTER
                                                                                                           :CHAR))
                                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr list-start) (ns-object-ptr marker-range) (ns-object-ptr empty-item) (ns-object-ptr at-end) (ns-object-ptr in-block) (ns-object-ptr block-start))))

(defun NS::|insertRightToLeftSlash:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertRightToLeftSlash:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_completionsFromDocumentForPartialWordRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_completionsFromDocumentForPartialWordRange:) (((:STRUCT
                                                                                 NS::|_NSRange|))
                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|insertCompletion:forPartialWordRange:movement:isFinal:| (thing _ for-partial-word-range movement is-final)
  (let ((message-lambda 
         (make-message-lambda @(insertCompletion:forPartialWordRange:movement:isFinal:) ((:POINTER
                                                                                          (:STRUCT
                                                                                           NS::|_NSRange|)
                                                                                          :LONG-LONG
                                                                                          :CHAR)
                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-partial-word-range movement (if is-final 1 0))))

(defun NS::|yankAndSelect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(yankAndSelect:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|tokenizingCharacterSet| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tokenizingCharacterSet) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_attachmentCellForSelection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_attachmentCellForSelection) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_attributedSubstringForCopyingFromRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_attributedSubstringForCopyingFromRange:) (((:STRUCT
                                                                             NS::|_NSRange|))
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_attributedSubstringForRanges:substringProvider:| (thing _ substring-provider)
  (let ((message-lambda 
         (make-message-lambda @(_attributedSubstringForRanges:substringProvider:) ((:POINTER
                                                                                    :POINTER)
                                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr substring-provider))))

(defun NS::|_writeRTFInRanges:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeRTFInRanges:toPasteboard:) ((:POINTER
                                                                   :POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_writeRTFDInRanges:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeRTFDInRanges:toPasteboard:) ((:POINTER
                                                                    :POINTER)
                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_old_writeStringInRanges:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_old_writeStringInRanges:toPasteboard:) ((:POINTER
                                                                          :POINTER)
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_writeFontInRange:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeFontInRange:toPasteboard:) (((:STRUCT
                                                                    NS::|_NSRange|)
                                                                   :POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_writeRulerInRange:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeRulerInRange:toPasteboard:) (((:STRUCT
                                                                     NS::|_NSRange|)
                                                                    :POINTER)
                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_writeURLInRange:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeURLInRange:toPasteboard:) (((:STRUCT
                                                                   NS::|_NSRange|)
                                                                  :POINTER)
                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_writeURLStringInRange:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeURLStringInRange:toPasteboard:) (((:STRUCT
                                                                         NS::|_NSRange|)
                                                                        :POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_writeURLNameInRange:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeURLNameInRange:toPasteboard:) (((:STRUCT
                                                                       NS::|_NSRange|)
                                                                      :POINTER)
                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_writeURLStringsWithNamesInRange:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeURLStringsWithNamesInRange:toPasteboard:) (((:STRUCT
                                                                                   NS::|_NSRange|)
                                                                                  :POINTER)
                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_writeLinkStringInRange:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeLinkStringInRange:toPasteboard:) (((:STRUCT
                                                                          NS::|_NSRange|)
                                                                         :POINTER)
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_writeMultipleTextSelectionRanges:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeMultipleTextSelectionRanges:toPasteboard:) ((:POINTER
                                                                                   :POINTER)
                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|readablePasteboardTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(readablePasteboardTypes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_readMultipleTextSelectionRangesForString:fromPasteboard:| (thing _ from-pasteboard)
  (let ((message-lambda 
         (make-message-lambda @(_readMultipleTextSelectionRangesForString:fromPasteboard:) ((:POINTER
                                                                                             :POINTER)
                                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-pasteboard))))

(defun NS::|smartInsertForString:replacingRange:beforeString:afterString:| (thing _ replacing-range before-string after-string)
  (let ((message-lambda 
         (make-message-lambda @(smartInsertForString:replacingRange:beforeString:afterString:) ((:POINTER
                                                                                                 (:STRUCT
                                                                                                  NS::|_NSRange|)
                                                                                                 (:POINTER
                                                                                                  :POINTER)
                                                                                                 (:POINTER
                                                                                                  :POINTER))
                                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) replacing-range (ns-object-ptr before-string) (ns-object-ptr after-string))))

(defun NS::|_readStringIntoRanges:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readStringIntoRanges:fromPasteboard:) ((:POINTER
                                                                         :POINTER)
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_stripAttachmentCharactersFromAttributedString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_stripAttachmentCharactersFromAttributedString:) ((:POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_replaceCharactersInRange:withPastedAttributedString:| (thing _ with-pasted-attributed-string)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_replaceCharactersInRange:withPastedAttributedString:) (((:STRUCT
                                                                                          NS::|_NSRange|)
                                                                                         :POINTER)
                                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-pasted-attributed-string)))) nil t))

(defun NS::|_readColorIntoRanges:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readColorIntoRanges:fromPasteboard:) ((:POINTER
                                                                        :POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_readFilenameStringsIntoRange:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readFilenameStringsIntoRange:fromPasteboard:) (((:STRUCT
                                                                                  NS::|_NSRange|)
                                                                                 :POINTER)
                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_setAttributes:newValues:range:| (thing _ new-values range)
  (let ((message-lambda 
         (make-message-lambda @(_setAttributes:newValues:range:) (((:POINTER
                                                                    :POINTER)
                                                                   :POINTER
                                                                   (:STRUCT
                                                                    NS::|_NSRange|))
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr new-values) range)))

(defun NS::|_remove:andAddMultipleToTypingAttributes:| (thing _ and-add-multiple-to-typing-attributes)
  (let ((message-lambda 
         (make-message-lambda @(_remove:andAddMultipleToTypingAttributes:) (((:POINTER
                                                                              :POINTER)
                                                                             :POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr and-add-multiple-to-typing-attributes))))

(defun NS::|_readFontIntoRanges:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readFontIntoRanges:fromPasteboard:) ((:POINTER
                                                                       :POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_addMultipleToTypingAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addMultipleToTypingAttributes:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_readRulerIntoRanges:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readRulerIntoRanges:fromPasteboard:) ((:POINTER
                                                                        :POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_rangesForMultipleTextSelectionPasteAtIndex:fromPasteboard:| (thing _ from-pasteboard)
  (let ((message-lambda 
         (make-message-lambda @(_rangesForMultipleTextSelectionPasteAtIndex:fromPasteboard:) ((:UNSIGNED-LONG-LONG
                                                                                               :POINTER)
                                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-pasteboard))))

(defun NS::|_readStringWithLinksIntoRanges:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readStringWithLinksIntoRanges:fromPasteboard:) ((:POINTER
                                                                                  :POINTER)
                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_readAttributedStringIntoRanges:fromPasteboard:stripAttachments:| (thing _ from-pasteboard strip-attachments)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readAttributedStringIntoRanges:fromPasteboard:stripAttachments:) ((:POINTER
                                                                                                    :POINTER
                                                                                                    :CHAR)
                                                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-pasteboard) (if strip-attachments 1 0)))) nil t))

(defun NS::|_readFilenamesIntoRange:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readFilenamesIntoRange:fromPasteboard:) (((:STRUCT
                                                                            NS::|_NSRange|)
                                                                           :POINTER)
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|rangesForUserParagraphAttributeChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangesForUserParagraphAttributeChange) (NIL
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_readURLIntoRange:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readURLIntoRange:fromPasteboard:) (((:STRUCT
                                                                      NS::|_NSRange|)
                                                                     :POINTER)
                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_readURLStringIntoRange:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readURLStringIntoRange:fromPasteboard:) (((:STRUCT
                                                                            NS::|_NSRange|)
                                                                           :POINTER)
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_readURLStringsWithNamesIntoRange:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readURLStringsWithNamesIntoRange:fromPasteboard:) (((:STRUCT
                                                                                      NS::|_NSRange|)
                                                                                     :POINTER)
                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_readImageIntoRange:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readImageIntoRange:fromPasteboard:) (((:STRUCT
                                                                        NS::|_NSRange|)
                                                                       :POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_readMovieIntoRange:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readMovieIntoRange:fromPasteboard:) (((:STRUCT
                                                                        NS::|_NSRange|)
                                                                       :POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_wantsPastedFile:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsPastedFile:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_wantsPastedFiles:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsPastedFiles:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_wantsPastedURL:allowFileURLs:| (thing _ allow-file-u-r-ls)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsPastedURL:allowFileURLs:) ((:POINTER
                                                                  :CHAR)
                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if allow-file-u-r-ls 1 0)))) nil t))

(defun NS::|readSelectionFromPasteboard:type:| (thing _ type)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(readSelectionFromPasteboard:type:) ((:POINTER
                                                                     :POINTER)
                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr type)))) nil t))

(defun NS::|_writeAttributedStringInRanges:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeAttributedStringInRanges:toPasteboard:) ((:POINTER
                                                                                :POINTER)
                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_writeStringInRanges:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeStringInRanges:toPasteboard:) ((:POINTER
                                                                      :POINTER)
                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_writeRTFInRange:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeRTFInRange:toPasteboard:) (((:STRUCT
                                                                   NS::|_NSRange|)
                                                                  :POINTER)
                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_writeRTFDInRange:toPasteboard:| (thing _ to-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeRTFDInRange:toPasteboard:) (((:STRUCT
                                                                    NS::|_NSRange|)
                                                                   :POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-pasteboard)))) nil t))

(defun NS::|_readStringIntoRange:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readStringIntoRange:fromPasteboard:) (((:STRUCT
                                                                         NS::|_NSRange|)
                                                                        :POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_readColorIntoRange:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readColorIntoRange:fromPasteboard:) (((:STRUCT
                                                                        NS::|_NSRange|)
                                                                       :POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_readFontIntoRange:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readFontIntoRange:fromPasteboard:) (((:STRUCT
                                                                       NS::|_NSRange|)
                                                                      :POINTER)
                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_readRulerIntoRange:fromPasteboard:| (thing _ from-pasteboard)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_readRulerIntoRange:fromPasteboard:) (((:STRUCT
                                                                        NS::|_NSRange|)
                                                                       :POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-pasteboard)))) nil t))

(defun NS::|_shouldDowngradeToLayoutManager| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldDowngradeToLayoutManager) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_downgradeToLayoutManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_downgradeToLayoutManager) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_commonInitIvarBlock| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_commonInitIvarBlock) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cuiSourceListBackgroundOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cuiSourceListBackgroundOptions) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_charIndexForTextLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_charIndexForTextLocation:) ((:POINTER)
                                                             :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_sizeDownIfPossible| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sizeDownIfPossible) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_forceResizingForClipViewInsetBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_forceResizingForClipViewInsetBounds:) (((:STRUCT
                                                                          NS::|CGRect|))
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_superviewClipViewFrameChangedWithNotification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_superviewClipViewFrameChangedWithNotification:) ((:POINTER)
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_superviewClipViewBoundsChangedWithNotification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_superviewClipViewBoundsChangedWithNotification:) ((:POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_superviewClipViewFrameChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_superviewClipViewFrameChanged:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_blinkCaret:animated:| (thing _ animated)
  (let ((message-lambda 
         (make-message-lambda @(_blinkCaret:animated:) ((:POINTER :CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if animated 1 0))))

(defun NS::|_animateBlinkUpdate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_animateBlinkUpdate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|switchBlinkTimersIfNecessaryWithSharedData:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(switchBlinkTimersIfNecessaryWithSharedData:) ((:POINTER)
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_updateCaretDisplayWithSharedData:textView:| (thing _ text-view)
  (let ((message-lambda 
         (make-message-lambda @(_updateCaretDisplayWithSharedData:textView:) ((:POINTER
                                                                               :POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr text-view))))

(defun NS::|_updateCaretViewWithSharedData:textView:animated:| (thing _ text-view animated)
  (let ((message-lambda 
         (make-message-lambda @(_updateCaretViewWithSharedData:textView:animated:) ((:POINTER
                                                                                     :POINTER
                                                                                     :CHAR)
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr text-view) (if animated 1 0))))

(defun NS::|_restartBlinkTimer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_restartBlinkTimer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_useUpdateBlinkRate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_useUpdateBlinkRate) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_restartBlinkDrawTimer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_restartBlinkDrawTimer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_ensureLayoutCompleteForRect:withExtensionFactor:minimumExtensionDistance:repetitions:preparedContentRect:| (thing _ with-extension-factor minimum-extension-distance repetitions prepared-content-rect)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_ensureLayoutCompleteForRect:withExtensionFactor:minimumExtensionDistance:repetitions:preparedContentRect:) (((:STRUCT
                                                                                                                                               NS::|CGRect|)
                                                                                                                                              :DOUBLE
                                                                                                                                              :DOUBLE
                                                                                                                                              :UNSIGNED-LONG-LONG
                                                                                                                                              (:POINTER
                                                                                                                                               (:STRUCT
                                                                                                                                                NS::|CGRect|)))
                                                                                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ with-extension-factor minimum-extension-distance repetitions (ns-object-ptr prepared-content-rect)))) nil t))

(defun NS::|_adjustedCenteredScrollRectToVisible:forceCenter:| (thing _ force-center)
  (let ((message-lambda 
         (make-message-lambda @(_adjustedCenteredScrollRectToVisible:forceCenter:) (((:STRUCT
                                                                                      NS::|CGRect|)
                                                                                     :CHAR)
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if force-center 1 0))))

(defun NS::|_scrollTextRangeToVisible:forceCenter:| (thing _ force-center)
  (let ((message-lambda 
         (make-message-lambda @(_scrollTextRangeToVisible:forceCenter:) ((:POINTER
                                                                          :CHAR)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if force-center 1 0))))

(defun NS::|_centeredScrollRectToVisible:forceCenter:| (thing _ force-center)
  (let ((message-lambda 
         (make-message-lambda @(_centeredScrollRectToVisible:forceCenter:) (((:STRUCT
                                                                              NS::|CGRect|)
                                                                             :CHAR)
                                                                            (:STRUCT
                                                                             NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if force-center 1 0))))

(defun NS::|_ensureLayoutFromTextLocation:verticalOffset:actualVerticalOffset:| (thing _ vertical-offset actual-vertical-offset)
  (let ((message-lambda 
         (make-message-lambda @(_ensureLayoutFromTextLocation:verticalOffset:actualVerticalOffset:) ((:POINTER
                                                                                                      :DOUBLE
                                                                                                      (:POINTER
                                                                                                       :DOUBLE))
                                                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) vertical-offset (ns-object-ptr actual-vertical-offset))))


(defun NS::|_calculatePageRectsWithOperation:pageSize:layoutAssuredComplete:| (thing _ page-size layout-assured-complete)
  (let ((message-lambda 
         (make-message-lambda @(_calculatePageRectsWithOperation:pageSize:layoutAssuredComplete:) ((:POINTER
                                                                                                    (:STRUCT
                                                                                                     NS::|CGSize|)
                                                                                                    :CHAR)
                                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) page-size (if layout-assured-complete 1 0))))

(defun NS::|_calculateTotalScaleForPrintingWithOperation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_calculateTotalScaleForPrintingWithOperation:) ((:POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_blockRowRectForCharRange:rect:| (thing _ rect)
  (let ((message-lambda 
         (make-message-lambda @(_blockRowRectForCharRange:rect:) (((:STRUCT
                                                                    NS::|_NSRange|)
                                                                   (:STRUCT
                                                                    NS::|CGRect|))
                                                                  (:STRUCT
                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ rect)))

(defun NS::|_userReplaceRange:withString:| (thing _ with-string)
  (let ((message-lambda 
         (make-message-lambda @(_userReplaceRange:withString:) (((:STRUCT
                                                                  NS::|_NSRange|)
                                                                 :POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-string))))

(defun NS::|showHighlightWithCharacterRange:highlightStyle:| (thing _ highlight-style)
  (let ((message-lambda 
         (make-message-lambda @(showHighlightWithCharacterRange:highlightStyle:) (((:STRUCT
                                                                                    NS::|_NSRange|)
                                                                                   :UNSIGNED-LONG-LONG)
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ highlight-style)))

(defun NS::|_showFindIndicatorWithCharRange:fade:| (thing _ fade)
  (let ((message-lambda 
         (make-message-lambda @(_showFindIndicatorWithCharRange:fade:) (((:STRUCT
                                                                          NS::|_NSRange|)
                                                                         :CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if fade 1 0))))

(defun NS::|highlightRectsForCharacterRange:highlightStyle:| (thing _ highlight-style)
  (let ((message-lambda 
         (make-message-lambda @(highlightRectsForCharacterRange:highlightStyle:) (((:STRUCT
                                                                                    NS::|_NSRange|)
                                                                                   :UNSIGNED-LONG-LONG)
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ highlight-style)))

(defun NS::|_createRectArrayForFindIndicatorForGlyphRange:rectCount:| (thing _ rect-count)
  (let ((message-lambda 
         (make-message-lambda @(_createRectArrayForFindIndicatorForGlyphRange:rectCount:) (((:STRUCT
                                                                                             NS::|_NSRange|)
                                                                                            (:POINTER
                                                                                             :UNSIGNED-LONG-LONG))
                                                                                           (:POINTER
                                                                                            (:STRUCT
                                                                                             NS::|CGRect|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr rect-count))))

(defun NS::|_menuItemsForTextCheckingResult:range:contextual:immediate:location:| (thing _ range contextual immediate location)
  (let ((message-lambda 
         (make-message-lambda @(_menuItemsForTextCheckingResult:range:contextual:immediate:location:) ((:POINTER
                                                                                                        (:STRUCT
                                                                                                         NS::|_NSRange|)
                                                                                                        :CHAR
                                                                                                        :CHAR
                                                                                                        (:STRUCT
                                                                                                         NS::|CGPoint|))
                                                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) range (if contextual 1 0) (if immediate 1 0) location)))


(defun NS::|hideHighlight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hideHighlight) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_scrollToEnd:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_scrollToEnd:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_sendZoomFocusChangedNotificationForSelectionChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sendZoomFocusChangedNotificationForSelectionChange) (NIL
                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_rangeForUserTextWritingDirectionChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rangeForUserTextWritingDirectionChange) (NIL
                                                                          (:STRUCT
                                                                           NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_rangesForUserTextWritingDirectionChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rangesForUserTextWritingDirectionChange) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_caretScreenRectForSelectionChangeFromRange:toRange:| (thing _ to-range)
  (let ((message-lambda 
         (make-message-lambda @(_caretScreenRectForSelectionChangeFromRange:toRange:) (((:STRUCT
                                                                                         NS::|_NSRange|)
                                                                                        (:STRUCT
                                                                                         NS::|_NSRange|))
                                                                                       (:STRUCT
                                                                                        NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ to-range)))

(defun NS::|_updateTextSelections:toTextSelections:| (thing _ to-text-selections)
  (let ((message-lambda 
         (make-message-lambda @(_updateTextSelections:toTextSelections:) ((:POINTER
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-text-selections))))

(defun NS::|_getGlyphIndex:forWindowPoint:pinnedPoint:anchorPoint:useAnchorPoint:preferredTextView:partialFraction:| (thing _ for-window-point pinned-point anchor-point use-anchor-point preferred-text-view partial-fraction)
  (let ((message-lambda 
         (make-message-lambda @(_getGlyphIndex:forWindowPoint:pinnedPoint:anchorPoint:useAnchorPoint:preferredTextView:partialFraction:) (((:POINTER
                                                                                                                                            :UNSIGNED-LONG-LONG)
                                                                                                                                           (:STRUCT
                                                                                                                                            NS::|CGPoint|)
                                                                                                                                           (:STRUCT
                                                                                                                                            NS::|CGPoint|)
                                                                                                                                           (:STRUCT
                                                                                                                                            NS::|CGPoint|)
                                                                                                                                           :CHAR
                                                                                                                                           :POINTER
                                                                                                                                           (:POINTER
                                                                                                                                            :DOUBLE))
                                                                                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-window-point pinned-point anchor-point (if use-anchor-point 1 0) (ns-object-ptr preferred-text-view) (ns-object-ptr partial-fraction))))

(defun NS::|_getGlyphIndex:forWindowPoint:pinnedPoint:preferredTextView:partialFraction:| (thing _ for-window-point pinned-point preferred-text-view partial-fraction)
  (let ((message-lambda 
         (make-message-lambda @(_getGlyphIndex:forWindowPoint:pinnedPoint:preferredTextView:partialFraction:) (((:POINTER
                                                                                                                 :UNSIGNED-LONG-LONG)
                                                                                                                (:STRUCT
                                                                                                                 NS::|CGPoint|)
                                                                                                                (:STRUCT
                                                                                                                 NS::|CGPoint|)
                                                                                                                :POINTER
                                                                                                                (:POINTER
                                                                                                                 :DOUBLE))
                                                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-window-point pinned-point (ns-object-ptr preferred-text-view) (ns-object-ptr partial-fraction))))

(defun NS::|_charRangeIsHighlightOptimizable:fromOldCharRange:| (thing _ from-old-char-range)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_charRangeIsHighlightOptimizable:fromOldCharRange:) (((:STRUCT
                                                                                       NS::|_NSRange|)
                                                                                      (:STRUCT
                                                                                       NS::|_NSRange|))
                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ from-old-char-range))) nil t))

(defun NS::|_optimizeHighlightForCharRange:charRange:fullSelectionCharRange:oldSelectionFullCharRange:| (thing _ char-range full-selection-char-range old-selection-full-char-range)
  (let ((message-lambda 
         (make-message-lambda @(_optimizeHighlightForCharRange:charRange:fullSelectionCharRange:oldSelectionFullCharRange:) (((:STRUCT
                                                                                                                               NS::|_NSRange|)
                                                                                                                              (:STRUCT
                                                                                                                               NS::|_NSRange|)
                                                                                                                              (:STRUCT
                                                                                                                               NS::|_NSRange|)
                                                                                                                              (:STRUCT
                                                                                                                               NS::|_NSRange|))
                                                                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ char-range full-selection-char-range old-selection-full-char-range)))

(defun NS::|_fastHighlightGlyphRange:withinSelectedGlyphRange:| (thing _ within-selected-glyph-range)
  (let ((message-lambda 
         (make-message-lambda @(_fastHighlightGlyphRange:withinSelectedGlyphRange:) (((:STRUCT
                                                                                       NS::|_NSRange|)
                                                                                      (:STRUCT
                                                                                       NS::|_NSRange|))
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ within-selected-glyph-range)))

(defun NS::|_stripAttachmentCharactersAndParagraphStylesFromAttributedString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_stripAttachmentCharactersAndParagraphStylesFromAttributedString:) ((:POINTER)
                                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_openWithMenuItemForLink:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_openWithMenuItemForLink:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_canAcceptRichText| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canAcceptRichText) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_canImportGraphics| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canImportGraphics) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_blinkCaret:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_blinkCaret:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shouldHaveBlinkTimer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldHaveBlinkTimer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_couldHaveBlinkTimer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_couldHaveBlinkTimer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_fixSelectionAfterChangeInCharacterRange:changeInLength:| (thing _ change-in-length)
  (let ((message-lambda 
         (make-message-lambda @(_fixSelectionAfterChangeInCharacterRange:changeInLength:) (((:STRUCT
                                                                                             NS::|_NSRange|)
                                                                                            :LONG-LONG)
                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ change-in-length)))

(defun NS::|_ensureLayoutCompleteToEndOfCharacterRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_ensureLayoutCompleteToEndOfCharacterRange:) (((:STRUCT
                                                                                NS::|_NSRange|))
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|_userDeleteRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_userDeleteRange:) (((:STRUCT NS::|_NSRange|))
                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_undoRedoInProgress| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_undoRedoInProgress) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_clearUndoRegistrations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_clearUndoRegistrations) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_performUndoCoalescingAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_performUndoCoalescingAction:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|attributedSubstringForMarkedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributedSubstringForMarkedRange) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isInsertingText| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isInsertingText) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setTypingText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTypingText:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_hasVisisbleGlyphsInCharRange:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasVisisbleGlyphsInCharRange:) (((:STRUCT
                                                                   NS::|_NSRange|))
                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_showFindIndicatorWithCharRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_showFindIndicatorWithCharRange:) (((:STRUCT
                                                                     NS::|_NSRange|))
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|highlightBoundingRectForCharacterRange:highlightStyle:| (thing _ highlight-style)
  (let ((message-lambda 
         (make-message-lambda @(highlightBoundingRectForCharacterRange:highlightStyle:) (((:STRUCT
                                                                                           NS::|_NSRange|)
                                                                                          :UNSIGNED-LONG-LONG)
                                                                                         (:STRUCT
                                                                                          NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ highlight-style)))

(defun NS::|menuItemsForTextCheckingResult:range:contextual:event:| (thing _ range contextual event)
  (let ((message-lambda 
         (make-message-lambda @(menuItemsForTextCheckingResult:range:contextual:event:) ((:POINTER
                                                                                          (:STRUCT
                                                                                           NS::|_NSRange|)
                                                                                          :CHAR
                                                                                          :POINTER)
                                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) range (if contextual 1 0) (ns-object-ptr event))))

(defun NS::|_immediateActionMenuItemForTextCheckingResult:range:location:| (thing _ range location)
  (let ((message-lambda 
         (make-message-lambda @(_immediateActionMenuItemForTextCheckingResult:range:location:) ((:POINTER
                                                                                                 (:STRUCT
                                                                                                  NS::|_NSRange|)
                                                                                                 (:STRUCT
                                                                                                  NS::|CGPoint|))
                                                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) range location)))


(defun NS::|revealContext:shouldUseDefaultHighlightForItem:| (thing _ should-use-default-highlight-for-item)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(revealContext:shouldUseDefaultHighlightForItem:) ((:POINTER
                                                                                   :POINTER)
                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr should-use-default-highlight-for-item)))) nil t))

(defun NS::|revealContext:drawRectsForItem:| (thing _ draw-rects-for-item)
  (let ((message-lambda 
         (make-message-lambda @(revealContext:drawRectsForItem:) ((:POINTER
                                                                   :POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr draw-rects-for-item))))

(defun NS::|revealContext:startHighlightingItem:| (thing _ start-highlighting-item)
  (let ((message-lambda 
         (make-message-lambda @(revealContext:startHighlightingItem:) ((:POINTER
                                                                        :POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr start-highlighting-item))))

(defun NS::|revealContext:stopHighlightingItem:| (thing _ stop-highlighting-item)
  (let ((message-lambda 
         (make-message-lambda @(revealContext:stopHighlightingItem:) ((:POINTER
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr stop-highlighting-item))))

(defun NS::|_isScrollingToEnd| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isScrollingToEnd) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_hasScaledBacking| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasScaledBacking) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setDeletesForGenericDragging:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDeletesForGenericDragging:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_appearanceForExporting| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_appearanceForExporting) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|layoutManager:effectiveCUICatalogForTextEffect:| (thing _ effective-c-u-i-catalog-for-text-effect)
  (let ((message-lambda 
         (make-message-lambda @(layoutManager:effectiveCUICatalogForTextEffect:) ((:POINTER
                                                                                   :POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr effective-c-u-i-catalog-for-text-effect))))

(defun NS::|_textLocationForCharIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_textLocationForCharIndex:) ((:UNSIGNED-LONG-LONG)
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_textSelectionForSelectedRanges:affinity:stillSelecting:| (thing _ affinity still-selecting)
  (let ((message-lambda 
         (make-message-lambda @(_textSelectionForSelectedRanges:affinity:stillSelecting:) ((:POINTER
                                                                                            :UNSIGNED-LONG-LONG
                                                                                            :CHAR)
                                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) affinity (if still-selecting 1 0))))

(defun NS::|_charRangesForTextSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_charRangesForTextSelection:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_temporaryAttributeWithGetter:atCharacterIndex:longestEffectiveRange:inRange:| (thing _ at-character-index longest-effective-range in-range)
  (let ((message-lambda 
         (make-message-lambda @(_temporaryAttributeWithGetter:atCharacterIndex:longestEffectiveRange:inRange:) ((:POINTER
                                                                                                                 :UNSIGNED-LONG-LONG
                                                                                                                 (:POINTER
                                                                                                                  (:STRUCT
                                                                                                                   NS::|_NSRange|))
                                                                                                                 (:STRUCT
                                                                                                                  NS::|_NSRange|))
                                                                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-character-index (ns-object-ptr longest-effective-range) in-range)))

(defun NS::|_setTextSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTextSelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setTemporaryAttributes:forCharacterRange:| (thing _ for-character-range)
  (let ((message-lambda 
         (make-message-lambda @(_setTemporaryAttributes:forCharacterRange:) ((:POINTER
                                                                              (:STRUCT
                                                                               NS::|_NSRange|))
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-character-range)))

(defun NS::|_fixedSelectionRangeForRange:affinity:| (thing _ affinity)
  (let ((message-lambda 
         (make-message-lambda @(_fixedSelectionRangeForRange:affinity:) (((:STRUCT
                                                                           NS::|_NSRange|)
                                                                          :UNSIGNED-LONG-LONG)
                                                                         (:STRUCT
                                                                          NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ affinity)))

(defun NS::|_fixedSelectionRangesForRanges:affinity:| (thing _ affinity)
  (let ((message-lambda 
         (make-message-lambda @(_fixedSelectionRangesForRanges:affinity:) ((:POINTER
                                                                            :UNSIGNED-LONG-LONG)
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) affinity)))

(defun NS::|_invalidateDisplayForChangeOfSelectionFromRange:toRange:| (thing _ to-range)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateDisplayForChangeOfSelectionFromRange:toRange:) (((:STRUCT
                                                                                             NS::|_NSRange|)
                                                                                            (:STRUCT
                                                                                             NS::|_NSRange|))
                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ to-range)))

(defun NS::|updateQuickLookPreviewPanel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateQuickLookPreviewPanel) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateBlinkTimersWithSharedData:restartFlag:forceBlink:| (thing _ restart-flag force-blink)
  (let ((message-lambda 
         (make-message-lambda @(_updateBlinkTimersWithSharedData:restartFlag:forceBlink:) ((:POINTER
                                                                                            :CHAR
                                                                                            :CHAR)
                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if restart-flag 1 0) (if force-blink 1 0))))

(defun NS::|_usesSplitCursor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_usesSplitCursor) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_restartBlinkTimersWithSharedData:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_restartBlinkTimersWithSharedData:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_preflightSpellChecker:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_preflightSpellChecker:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_blockSafeRangesForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_blockSafeRangesForRange:) (((:STRUCT
                                                              NS::|_NSRange|))
                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|updateTouchBarItemIdentifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateTouchBarItemIdentifiers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|showFindIndicatorForRange:fade:| (thing _ fade)
  (let ((message-lambda 
         (make-message-lambda @(showFindIndicatorForRange:fade:) (((:STRUCT
                                                                    NS::|_NSRange|)
                                                                   :CHAR)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if fade 1 0))))

(defun NS::|performPendingTextChecking| (thing)
  (let ((message-lambda 
         (make-message-lambda @(performPendingTextChecking) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|pendingCandidateUpdate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(pendingCandidateUpdate) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_invalidateDisplayForMarkedOrSelectedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateDisplayForMarkedOrSelectedRange) (NIL
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|acquireKeyFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(acquireKeyFocus) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|resignKeyFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignKeyFocus) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|smartInsertBeforeStringForString:replacingRange:| (thing _ replacing-range)
  (let ((message-lambda 
         (make-message-lambda @(smartInsertBeforeStringForString:replacingRange:) ((:POINTER
                                                                                    (:STRUCT
                                                                                     NS::|_NSRange|))
                                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) replacing-range)))

(defun NS::|smartInsertAfterStringForString:replacingRange:| (thing _ replacing-range)
  (let ((message-lambda 
         (make-message-lambda @(smartInsertAfterStringForString:replacingRange:) ((:POINTER
                                                                                   (:STRUCT
                                                                                    NS::|_NSRange|))
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) replacing-range)))

(defun NS::|isAutomaticLanguageIdentificationEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticLanguageIdentificationEnabled) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAutomaticLanguageIdentificationEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticLanguageIdentificationEnabled:) ((:CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setDisplaysLinkToolTips:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDisplaysLinkToolTips:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setCentersOnScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCentersOnScroll:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|centersOnScroll| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(centersOnScroll) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_blinkerHeightForExtraLineFragment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_blinkerHeightForExtraLineFragment) (NIL
                                                                     :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_blinkerPositionForExtraLineFragment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_blinkerPositionForExtraLineFragment) (NIL
                                                                       :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|markedTextAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markedTextAttributes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isCoalescingUndo| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isCoalescingUndo) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|allowsImageEditing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsImageEditing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAllowsImageEditing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsImageEditing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setUsesFindPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesFindPanel:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setUsesColorsWithInvertedLightness:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesColorsWithInvertedLightness:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|usesColorsWithInvertedLightness| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesColorsWithInvertedLightness) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|toggleUsesAdaptiveColorMappingForDarkAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleUsesAdaptiveColorMappingForDarkAppearance:) ((:POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_validateAndCommitTokens| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_validateAndCommitTokens) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|toggleAutomaticLanguageIdentification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticLanguageIdentification:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleAutomaticTextCompletion:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticTextCompletion:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setEnabledTextCheckingTypes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEnabledTextCheckingTypes:) ((:UNSIGNED-LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setupCandidateListTouchBarItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setupCandidateListTouchBarItem) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_rangeForUserCompletion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rangeForUserCompletion) (NIL
                                                          (:STRUCT
                                                           NS::|_NSRange|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|insertCandidateString:replacementRange:fromTextCheckingResult:| (thing _ replacement-range from-text-checking-result)
  (let ((message-lambda 
         (make-message-lambda @(insertCandidateString:replacementRange:fromTextCheckingResult:) ((:POINTER
                                                                                                  (:STRUCT
                                                                                                   NS::|_NSRange|)
                                                                                                  :CHAR)
                                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) replacement-range (if from-text-checking-result 1 0))))

(defun NS::|insertCandidateTextCheckingResult:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertCandidateTextCheckingResult:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_touchBarItemIdentifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_touchBarItemIdentifiers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_configureTouchBar:withIdentifiers:| (thing _ with-identifiers)
  (let ((message-lambda 
         (make-message-lambda @(_configureTouchBar:withIdentifiers:) ((:POINTER
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-identifiers))))

(defun NS::|candidateListTouchBarItem:changedCandidateListVisibility:| (thing _ changed-candidate-list-visibility)
  (let ((message-lambda 
         (make-message-lambda @(candidateListTouchBarItem:changedCandidateListVisibility:) ((:POINTER
                                                                                             :CHAR)
                                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if changed-candidate-list-visibility 1 0))))

(defun NS::|_selectionDragTimerFire:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_selectionDragTimerFire:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_markUpAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_markUpAction:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|invokeImmediateActionMenuItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(invokeImmediateActionMenuItem:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|applyActionForRanges:block:| (thing _ block)
  (let ((message-lambda 
         (make-message-lambda @(applyActionForRanges:block:) ((:POINTER
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr block))))

(defun NS::|showDefinitionFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showDefinitionFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|immediateActionRecognizerWillPrepare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerWillPrepare:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|immediateActionRecognizerWillBeginAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerWillBeginAnimation:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|immediateActionRecognizerDidUpdateAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerDidUpdateAnimation:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|immediateActionRecognizerDidCancelAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerDidCancelAnimation:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|immediateActionRecognizerDidCompleteAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerDidCompleteAnimation:) ((:POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateAllowsCollapsingWithTouchBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateAllowsCollapsingWithTouchBar:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|touchBarItemController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBarItemController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_restoreSelectedRangeAfterUndoOfCandidateSelection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_restoreSelectedRangeAfterUndoOfCandidateSelection) (NIL
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|changeAttributesWithModifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeAttributesWithModifier:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|functionBar:makeItemForIdentifier:| (thing _ make-item-for-identifier)
  (let ((message-lambda 
         (make-message-lambda @(functionBar:makeItemForIdentifier:) ((:POINTER
                                                                      :POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr make-item-for-identifier))))

(defun NS::|_rangesForPreview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rangesForPreview) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|quickLookPreviewableItemsInRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(quickLookPreviewableItemsInRanges:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_characterIndexForPreviewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_characterIndexForPreviewItem:) ((:POINTER)
                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_quickLookPreviewItemsInRange:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_quickLookPreviewItemsInRange:) (((:STRUCT
                                                                   NS::|_NSRange|))
                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|acceptsPreviewPanelControl:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsPreviewPanelControl:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|beginPreviewPanelControl:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(beginPreviewPanelControl:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|endPreviewPanelControl:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endPreviewPanelControl:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|numberOfPreviewItemsInPreviewPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(numberOfPreviewItemsInPreviewPanel:) ((:POINTER)
                                                                      :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|previewPanel:previewItemAtIndex:| (thing _ preview-item-at-index)
  (let ((message-lambda 
         (make-message-lambda @(previewPanel:previewItemAtIndex:) ((:POINTER
                                                                    :UNSIGNED-LONG-LONG)
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) preview-item-at-index)))

(defun NS::|previewPanel:sourceFrameOnScreenForPreviewItem:| (thing _ source-frame-on-screen-for-preview-item)
  (let ((message-lambda 
         (make-message-lambda @(previewPanel:sourceFrameOnScreenForPreviewItem:) ((:POINTER
                                                                                   :POINTER)
                                                                                  (:STRUCT
                                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr source-frame-on-screen-for-preview-item))))

(defun NS::|previewPanel:transitionImageForPreviewItem:contentRect:| (thing _ transition-image-for-preview-item content-rect)
  (let ((message-lambda 
         (make-message-lambda @(previewPanel:transitionImageForPreviewItem:contentRect:) ((:POINTER
                                                                                           :POINTER
                                                                                           (:POINTER
                                                                                            (:STRUCT
                                                                                             NS::|CGRect|)))
                                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr transition-image-for-preview-item) (ns-object-ptr content-rect))))

(defun NS::|_hasJapaneseInPreferredLanguages| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasJapaneseInPreferredLanguages) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_sharingServiceItemsInRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_sharingServiceItemsInRanges:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_replaceSelectionWithSharingServiceItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_replaceSelectionWithSharingServiceItems:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|orderFrontSharingServicePicker:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontSharingServicePicker:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_invokeSharingService:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_invokeSharingService:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setIsDrawingLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIsDrawingLayer:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))




(defun NS::|_sheetParentForService| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sheetParentForService) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setSheetParentForService:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSheetParentForService:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|viewBridgeBecomingChild| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(viewBridgeBecomingChild) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_lastDragRegionDataDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lastDragRegionDataDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setViewBridgeBecomingChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setViewBridgeBecomingChild:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|viewBridgeHostApp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewBridgeHostApp) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setViewBridgeHostApp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setViewBridgeHostApp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_isPopoverWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isPopoverWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|swizzledBackgroundColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(swizzledBackgroundColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|swizzledSetBackgroundColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledSetBackgroundColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|swizzledAddChildWindow:ordered:| (thing _ ordered)
  (let ((message-lambda 
         (make-message-lambda @(swizzledAddChildWindow:ordered:) ((:POINTER
                                                                   :LONG-LONG)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) ordered)))

(defun NS::|swizzledRemoveChildWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledRemoveChildWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|swizzledDragWindowRelativeToMouseDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledDragWindowRelativeToMouseDown:) (((:STRUCT
                                                                           NS::|CGPoint|))
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|swizzledSetFrameCommon:display:stashSize:| (thing _ display stash-size)
  (let ((message-lambda 
         (make-message-lambda @(swizzledSetFrameCommon:display:stashSize:) (((:STRUCT
                                                                              NS::|CGRect|)
                                                                             :CHAR
                                                                             :CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if display 1 0) (if stash-size 1 0))))

(defun NS::|swizzledWindowForSheetMovementAndOrderingGroups| (thing)
  (let ((message-lambda 
         (make-message-lambda @(swizzledWindowForSheetMovementAndOrderingGroups) (NIL
                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|swizzledSetMouseMovedEventsEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledSetMouseMovedEventsEnabled:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|swizzledSetEventMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledSetEventMask:) ((:UNSIGNED-LONG-LONG)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|swizzledOrderedDrawerAndWindowKeyLoopGroupingViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(swizzledOrderedDrawerAndWindowKeyLoopGroupingViews) (NIL
                                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|swizzledSetHidesOnDeactivate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledSetHidesOnDeactivate:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|swizzledStyleMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(swizzledStyleMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|swizzledSetStyleMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledSetStyleMask:) ((:UNSIGNED-LONG-LONG)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|swizzledHierarchyDidChangeInView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledHierarchyDidChangeInView:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|swizzledBeginCriticalSheet:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(swizzledBeginCriticalSheet:completionHandler:) ((:POINTER
                                                                                 :POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr completion-handler))))

(defun NS::|swizzledBeginSheet:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(swizzledBeginSheet:completionHandler:) ((:POINTER
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr completion-handler))))

(defun NS::|beginServiceSheet:completionHandler:isCritical:| (thing _ completion-handler is-critical)
  (let ((message-lambda 
         (make-message-lambda @(beginServiceSheet:completionHandler:isCritical:) ((:POINTER
                                                                                   :POINTER
                                                                                   :CHAR)
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr completion-handler) (if is-critical 1 0))))

(defun NS::|_beginSheet:isCritical:completionHandler:| (thing _ is-critical completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(_beginSheet:isCritical:completionHandler:) ((:POINTER
                                                                             :CHAR
                                                                             :POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if is-critical 1 0) (ns-object-ptr completion-handler))))

(defun NS::|swizzledEndSheet:returnCode:| (thing _ return-code)
  (let ((message-lambda 
         (make-message-lambda @(swizzledEndSheet:returnCode:) ((:POINTER
                                                                :LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) return-code)))

(defun NS::|endHostSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endHostSheet:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|swizzledConstrainFrameRect:toScreen:| (thing _ to-screen)
  (let ((message-lambda 
         (make-message-lambda @(swizzledConstrainFrameRect:toScreen:) (((:STRUCT
                                                                         NS::|CGRect|)
                                                                        :POINTER)
                                                                       (:STRUCT
                                                                        NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-screen))))

(defun NS::|_addViewServiceNameToTitleOfColorPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addViewServiceNameToTitleOfColorPanel:) ((:LONG-LONG)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|swizzledDoOrderWindow:relativeTo:findKey:forCounter:force:isModal:| (thing _ relative-to find-key for-counter force is-modal)
  (let ((message-lambda 
         (make-message-lambda @(swizzledDoOrderWindow:relativeTo:findKey:forCounter:force:isModal:) ((:LONG-LONG
                                                                                                      :LONG-LONG
                                                                                                      :CHAR
                                                                                                      :CHAR
                                                                                                      :CHAR
                                                                                                      :CHAR)
                                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ relative-to (if find-key 1 0) (if for-counter 1 0) (if force 1 0) (if is-modal 1 0))))

(defun NS::|swizzledOrderFrontRelativeToWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledOrderFrontRelativeToWindow:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|swizzledSendEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledSendEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|swizzledCanBecomeKeyWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(swizzledCanBecomeKeyWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|swizzledRegionForOpaqueViewsBlockingDraggableFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledRegionForOpaqueViewsBlockingDraggableFrame:) (((:STRUCT
                                                                                        NS::|CGRect|))
                                                                                      (:POINTER
                                                                                       (:STRUCT
                                                                                        NS::|CGSRegionObject|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|swizzledSetCursorForMouseLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledSetCursorForMouseLocation:) (((:STRUCT
                                                                       NS::|CGPoint|))
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|swizzledResignKeyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(swizzledResignKeyWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|swizzledBecomeKeyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(swizzledBecomeKeyWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|swizzledIsKeyWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(swizzledIsKeyWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|swizzledHostWindowIsKey| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(swizzledHostWindowIsKey) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|swizzledMakeFirstResponder:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(swizzledMakeFirstResponder:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|swizzledBackingScaleFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(swizzledBackingScaleFactor) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|swizzledIsEffectivelyVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(swizzledIsEffectivelyVisible) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|swizzledIsRunningADocModalAttachedSheet| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(swizzledIsRunningADocModalAttachedSheet) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|swizzledSelectKeyViewPrecedingView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledSelectKeyViewPrecedingView:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|swizzledSelectKeyViewFollowingView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledSelectKeyViewFollowingView:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|swizzledUpdateConstraintsIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(swizzledUpdateConstraintsIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|swizzledCanBecomeMainWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(swizzledCanBecomeMainWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|swizzledEndSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swizzledEndSheet:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_localizedInfoDictionaryObjectForKey:ifAvailableFromBundle:| (thing _ if-available-from-bundle)
  (let ((message-lambda 
         (make-message-lambda @(_localizedInfoDictionaryObjectForKey:ifAvailableFromBundle:) ((:POINTER
                                                                                               :POINTER)
                                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr if-available-from-bundle))))

(defun NS::|swizzledShake| (thing)
  (let ((message-lambda 
         (make-message-lambda @(swizzledShake) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setSheetParentForHost:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSheetParentForHost:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_sheetParentForHost| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sheetParentForHost) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_sheetsForHost| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sheetsForHost) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_touchBarProviders| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_touchBarProviders) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_sheetsForService| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sheetsForService) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))







(defun NS::|close| (thing)
  (let ((message-lambda 
         (make-message-lambda @(close) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_isHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isHidden) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))




(defun NS::|update| (thing)
  (let ((message-lambda 
         (make-message-lambda @(update) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_displayName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_displayName) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))




(defun NS::|parentWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(parentWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|hasTitleBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasTitleBar) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|level| (thing)
  (let ((message-lambda 
         (make-message-lambda @(level) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))





(defun NS::|document| (thing)
  (let ((message-lambda 
         (make-message-lambda @(document) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|subtitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(subtitle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setSubtitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSubtitle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_screenForAutomatedLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_screenForAutomatedLiveResize) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_inFullScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_inFullScreen) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_confirmSize:force:| (thing _ force)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_confirmSize:force:) (((:POINTER
                                                        (:STRUCT NS::|CGSize|))
                                                       :CHAR)
                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if force 1 0)))) nil t))

(defun NS::|setFrame:display:| (thing _ display)
  (let ((message-lambda 
         (make-message-lambda @(setFrame:display:) (((:STRUCT NS::|CGRect|)
                                                     :CHAR)
                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if display 1 0))))

(defun NS::|_liveResizeOperation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_liveResizeOperation) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|minFullScreenContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minFullScreenContentSize) (NIL
                                                           (:STRUCT
                                                            NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setStartingSizeAndPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setStartingSizeAndPosition) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_fullScreenContentController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fullScreenContentController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|convertScreenToBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertScreenToBase:) (((:STRUCT
                                                         NS::|CGPoint|))
                                                       (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))




(defun NS::|_markStartOfLiveResizeForPerformanceMeasurement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_markStartOfLiveResizeForPerformanceMeasurement) (NIL
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_markEndOfLiveResizeForPerformanceMeasurement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_markEndOfLiveResizeForPerformanceMeasurement) (NIL
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_synthesizeEventsForLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_synthesizeEventsForLiveResize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_automateLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_automateLiveResize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))





(defun NS::|gestureRecognizer:shouldAttemptToRecognizeWithEvent:| (thing _ should-attempt-to-recognize-with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(gestureRecognizer:shouldAttemptToRecognizeWithEvent:) ((:POINTER
                                                                                        :POINTER)
                                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr should-attempt-to-recognize-with-event)))) nil t))



(defun NS::|isVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isVisible) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setColorSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setColorSpace:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_setForceIsOnActiveSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setForceIsOnActiveSpace:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isOnActiveSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isOnActiveSpace) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_makeKeyRegardlessOfVisibility| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_makeKeyRegardlessOfVisibility) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_refreshTilingConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_refreshTilingConstraints:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))










(defun NS::|_hasActiveAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasActiveAppearance) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityFocusRingBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusRingBounds) (NIL
                                                               (:STRUCT
                                                                NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|accessibilityWindowAttributeValueHelper| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowAttributeValueHelper) (NIL
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityTopLevelUIElementAttributeValueHelper| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTopLevelUIElementAttributeValueHelper) (NIL
                                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|convertRectToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectToScreen:) (((:STRUCT NS::|CGRect|))
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))





(defun NS::|_presenterOnly| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_presenterOnly) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|remoteUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(remoteUIElement) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|windowRef| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowRef) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|accessibilityWindowNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowNumber) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isTabOverviewVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isTabOverviewVisible) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_toggleTabOverview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_toggleTabOverview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_windowStackController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowStackController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|titleVisibility| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titleVisibility) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|tabbingIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabbingIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|windowController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_titlebarDisplayIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_titlebarDisplayIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_storedTabbingIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_storedTabbingIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_implicitTabbingIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_implicitTabbingIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTabbingIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabbingIdentifier:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_aux| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_aux) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|tabbingMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabbingMode) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTabbingMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabbingMode:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_tabBarAccessoryViewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabBarAccessoryViewController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_ensureStackControllerExists| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_ensureStackControllerExists) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_ignoreWindowStackController| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_ignoreWindowStackController) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setIgnoreWindowStackController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIgnoreWindowStackController:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|tab| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tab) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasTabBarItem| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasTabBarItem) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_implicitlyAllowsWindowTabbing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_implicitlyAllowsWindowTabbing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|styleMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(styleMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_supportsTitlebarAccessoryViewControllers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_supportsTitlebarAccessoryViewControllers) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_borderViewCanAddWindowTabs| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_borderViewCanAddWindowTabs) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|sheetParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sheetParent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|titlebarAppearsTransparent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarAppearsTransparent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isResizable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isResizable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isKeyWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isKeyWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|makeKeyAndOrderFront:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeKeyAndOrderFront:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_supportsTabbing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_supportsTabbing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_canAutoParticipateInWindowTabs| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canAutoParticipateInWindowTabs) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isInHiddenWindowTab| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isInHiddenWindowTab) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isPerformingRestoration| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isPerformingRestoration) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_shouldJoinTabbingStackOnOrderIn| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldJoinTabbingStackOnOrderIn) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_doWindowTabSetupAttemptingToJoinExistingStack:makeIfNeeded:| (thing _ make-if-needed)
  (let ((message-lambda 
         (make-message-lambda @(_doWindowTabSetupAttemptingToJoinExistingStack:makeIfNeeded:) ((:CHAR
                                                                                                :CHAR)
                                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if make-if-needed 1 0))))

(defun NS::|_fixIgnoredKeyMainAppearancesIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fixIgnoredKeyMainAppearancesIfNeeded) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doWindowTabOrderAbove:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_doWindowTabOrderAbove:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_doTabbedWindowOrderInWithWasVisible:mode:| (thing _ mode)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_doTabbedWindowOrderInWithWasVisible:mode:) ((:CHAR
                                                                              :LONG-LONG)
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) mode))) nil t))

(defun NS::|_setIsInHiddenWindowTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIsInHiddenWindowTab:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_unscheduleWindowForBatchOrdering| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unscheduleWindowForBatchOrdering) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doWindowTabOrderOut| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doWindowTabOrderOut) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isTabbedWithOtherWindows| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isTabbedWithOtherWindows) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_canTabMergeWithIdentifier:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canTabMergeWithIdentifier:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|isMiniaturized| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMiniaturized) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_canTabWithIdentifier:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canTabWithIdentifier:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))



(defun NS::|_supportsNewTabButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_supportsNewTabButton) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_runningDocModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_runningDocModal) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|selectNextTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectNextTab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_canSelectNextOrPreviousTab| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canSelectNextOrPreviousTab) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|selectPreviousTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectPreviousTab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|moveTabToNewWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveTabToNewWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_canMoveTabToNewWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canMoveTabToNewWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|mergeAllWindows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mergeAllWindows:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_canMergeWindows| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canMergeWindows) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|toggleTabBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTabBar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_validateToggleTabBarItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_validateToggleTabBarItem:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|toggleTabOverview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTabOverview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_validateShowAllTabsMenuItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_validateShowAllTabsMenuItem:) ((:POINTER)
                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|performCloseOtherTabs:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performCloseOtherTabs:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_canCloseOtherTabs| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canCloseOtherTabs) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_nextResponderChainValidateUIItem:withResult:| (thing _ with-result)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_nextResponderChainValidateUIItem:withResult:) ((:POINTER
                                                                                 :CHAR)
                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if with-result 1 0)))) nil t))

(defun NS::|_attemptToCloseAllTabs:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_attemptToCloseAllTabs:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|performClose:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performClose:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isTabbed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isTabbed) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|performCloseTabbedWindowGroup:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performCloseTabbedWindowGroup:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_eventIsOldSelectNextPreviousTabKeyEquivalent:direction:| (thing _ direction)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_eventIsOldSelectNextPreviousTabKeyEquivalent:direction:) ((:POINTER
                                                                                            (:POINTER
                                                                                             :CHAR))
                                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr direction)))) nil t))


(defun NS::|_setTemporarilyIgnoresMoves:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTemporarilyIgnoresMoves:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_prepareToMinimizeCore| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_prepareToMinimizeCore) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_finishMinimizeToDock| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_finishMinimizeToDock) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_prepareToUnMinimizeFromDock:forceActivation:wantsToBeKey:| (thing _ force-activation wants-to-be-key)
  (let ((message-lambda 
         (make-message-lambda @(_prepareToUnMinimizeFromDock:forceActivation:wantsToBeKey:) ((:CHAR
                                                                                              :CHAR
                                                                                              :CHAR)
                                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if force-activation 1 0) (if wants-to-be-key 1 0))))

(defun NS::|_finishDeminiaturizeFromDock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_finishDeminiaturizeFromDock:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_currentlySelectedTabbedWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentlySelectedTabbedWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|pinTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pinTab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|unpinTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unpinTab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|tabGroup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabGroup) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_toggleTabOverview:animated:| (thing _ animated)
  (let ((message-lambda 
         (make-message-lambda @(_toggleTabOverview:animated:) ((:POINTER :CHAR)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if animated 1 0))))

(defun NS::|_beforeTabPickerResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_beforeTabPickerResponder) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_themeFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_themeFrame) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTabOverviewVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabOverviewVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setTabBarAccessoryViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTabBarAccessoryViewController:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_tabGroup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabGroup) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setWindowStackController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWindowStackController:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_tabBarItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabBarItem) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doTabbedWindowSyncTitleToTabBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doTabbedWindowSyncTitleToTabBar) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_isFullScreenModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isFullScreenModal) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_fullScreenModalStackController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fullScreenModalStackController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_makeNewWindowInTab| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_makeNewWindowInTab) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_makeTabStackActive| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_makeTabStackActive) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_beginNextQueuedSheetInGroupIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_beginNextQueuedSheetInGroupIfNecessary) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_nextTabbedWindowToSelect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_nextTabbedWindowToSelect) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_moveToModalStackController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_moveToModalStackController:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_tabRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tabBarIsVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tabBarIsVisible) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_willBecomeTabbedWithOtherWindows| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_willBecomeTabbedWithOtherWindows) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_doWindowTabCleanupForStyleMaskChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doWindowTabCleanupForStyleMaskChange) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doTabbedWindowCleanupForOrderOut| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doTabbedWindowCleanupForOrderOut) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doTabbedWindowOrderFront| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doTabbedWindowOrderFront) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doTabbedWindowMadeKey| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doTabbedWindowMadeKey) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doTabbedWindowSyncToolbar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doTabbedWindowSyncToolbar) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_validateTabUserInterfaceItem:withResult:| (thing _ with-result)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_validateTabUserInterfaceItem:withResult:) ((:POINTER
                                                                             :CHAR)
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if with-result 1 0)))) nil t))

(defun NS::|_tabbingPerformKeyEquivalent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tabbingPerformKeyEquivalent:) ((:POINTER)
                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_temporarilyIgnoreMoves| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_temporarilyIgnoreMoves) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_prepareTabbedWindowMinimize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_prepareTabbedWindowMinimize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_doNonVisibleTabMinimize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doNonVisibleTabMinimize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_prepareTabbedWindowDeminimize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_prepareTabbedWindowDeminimize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_doNonVisibleTabDeminimize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doNonVisibleTabDeminimize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tabsFinishDeminiaturizeFromDock| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabsFinishDeminiaturizeFromDock) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_encodeTabbedWindowRestorableStateWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_encodeTabbedWindowRestorableStateWithCoder:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_restoreTabbedWindowStateWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_restoreTabbedWindowStateWithCoder:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setIsPerformingRestoration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIsPerformingRestoration:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_windowForLayoutEncoding| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowForLayoutEncoding) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tabbedWindowsWillEnterFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabbedWindowsWillEnterFullScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tabbedWindowsDidEnterFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabbedWindowsDidEnterFullScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tabbedWindowsDidExitFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabbedWindowsDidExitFullScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_moveWindowToSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_moveWindowToSpace:) ((:UNSIGNED-LONG-LONG)
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_tabbedWindowsHandleEnterFullScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tabbedWindowsHandleEnterFullScreen) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_doTabbedWindowWillEnterVersionsEditor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doTabbedWindowWillEnterVersionsEditor) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doTabbedWindowWillExitVersionsEditor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doTabbedWindowWillExitVersionsEditor) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|orderOutTabbedWindowGroup:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderOutTabbedWindowGroup:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_selectNextTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_selectNextTab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_selectPreviousTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_selectPreviousTab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_moveTabToNewWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_moveTabToNewWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_mergeAllWindows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_mergeAllWindows:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_toggleTabBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_toggleTabBar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|windowDidBecomeTabbed| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowDidBecomeTabbed) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tabbedWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tabbedWindows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doTabbedWindowDidChangeToolbar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doTabbedWindowDidChangeToolbar) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addTabbedWindow:ordered:| (thing _ ordered)
  (let ((message-lambda 
         (make-message-lambda @(_addTabbedWindow:ordered:) ((:POINTER
                                                             :LONG-LONG)
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) ordered)))

(defun NS::|set_beforeTabPickerResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(set_beforeTabPickerResponder:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setTemporaryContentView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTemporaryContentView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|setReleasedWhenClosed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setReleasedWhenClosed:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|orderWindow:relativeTo:| (thing _ relative-to)
  (let ((message-lambda 
         (make-message-lambda @(orderWindow:relativeTo:) ((:LONG-LONG
                                                           :LONG-LONG)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ relative-to)))

(defun NS::|orderOut:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderOut:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|initWithContentRect:styleMask:backing:defer:| (thing _ style-mask backing defer)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentRect:styleMask:backing:defer:) (((:STRUCT
                                                                                 NS::|CGRect|)
                                                                                :UNSIGNED-LONG-LONG
                                                                                :UNSIGNED-LONG-LONG
                                                                                :CHAR)
                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ style-mask backing (if defer 1 0))))



(defun NS::|orderFront:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFront:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|flushWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flushWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))











(defun NS::|accessibilitySubroleAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySubroleAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsSubroleAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSubroleAttributeSettable) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))
















(defun NS::|convertRectFromScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectFromScreen:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|convertPointFromScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointFromScreen:) (((:STRUCT
                                                            NS::|CGPoint|))
                                                          (:STRUCT
                                                           NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))




(defun NS::|setCollectionBehavior:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCollectionBehavior:) ((:UNSIGNED-LONG-LONG)
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLevel:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_lockToAbsoluteSubLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_lockToAbsoluteSubLevel:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setHidesOnDeactivate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHidesOnDeactivate:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setIgnoresMouseEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIgnoresMouseEvents:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|_shouldSnapWindowsClientSide| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldSnapWindowsClientSide) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_allowsSnapping| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsSnapping) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_canBeSnappingTarget| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canBeSnappingTarget) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_allowsExteriorResizing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsExteriorResizing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_canMiniaturize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canMiniaturize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|canBecomeKeyWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBecomeKeyWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|canBecomeMainWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBecomeMainWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_ignoreForFullScreenTransition| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_ignoreForFullScreenTransition) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setWindowTag| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setWindowTag) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|graphicsPort| (thing)
  (let ((message-lambda 
         (make-message-lambda @(graphicsPort) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|mouseLocationOutsideOfEventStream| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mouseLocationOutsideOfEventStream) (NIL
                                                                    (:STRUCT
                                                                     NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setAlertWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAlertWindow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setRestorable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRestorable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setMovableByWindowBackground:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMovableByWindowBackground:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setDefaultButtonCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDefaultButtonCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|animationBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animationBehavior) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAnimationBehavior:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAnimationBehavior:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_orderOutAnimationType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_orderOutAnimationType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setOrderOutAnimationType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setOrderOutAnimationType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|beginCriticalSheet:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(beginCriticalSheet:completionHandler:) ((:POINTER
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr completion-handler))))

(defun NS::|beginSheet:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(beginSheet:completionHandler:) ((:POINTER
                                                                 :POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr completion-handler))))


(defun NS::|isSheet| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSheet) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setInitialFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInitialFirstResponder:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_setAvoidsActivation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAvoidsActivation:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|initialFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(initialFirstResponder) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_borderView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_borderView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|layoutIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAnchorAttribute:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setAnchorAttribute:forOrientation:) ((:LONG-LONG
                                                                      :LONG-LONG)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ for-orientation)))



(defun NS::|_enableToolTipCreationAndDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enableToolTipCreationAndDisplay) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_disableToolTipCreationAndDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_disableToolTipCreationAndDisplay) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_scheduleWindowForBatchOrdering:relativeTo:| (thing _ relative-to)
  (let ((message-lambda 
         (make-message-lambda @(_scheduleWindowForBatchOrdering:relativeTo:) ((:LONG-LONG
                                                                               :LONG-LONG)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ relative-to)))

(defun NS::|_updateButtonsForModeChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateButtonsForModeChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_closeForTermination| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_closeForTermination) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|canHide| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canHide) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_tempHide:relWin:| (thing _ rel-win)
  (let ((message-lambda 
         (make-message-lambda @(_tempHide:relWin:) ((:CHAR :LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) rel-win)))

(defun NS::|_tempHideHODWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tempHideHODWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_tempUnhideHODWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tempUnhideHODWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_getPositionFromServer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_getPositionFromServer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|makeKeyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(makeKeyWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_registerDragTypesIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_registerDragTypesIfNeeded) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setWindowDidExistAtLaunch:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWindowDidExistAtLaunch:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|_resetDisableCounts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetDisableCounts) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resetPostingCounts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetPostingCounts) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasWindowRef| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasWindowRef) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_wrapsCarbonWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wrapsCarbonWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSheet:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|center| (thing)
  (let ((message-lambda 
         (make-message-lambda @(center) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFrameTopLeftPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameTopLeftPoint:) (((:STRUCT
                                                          NS::|CGPoint|))
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setModal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setModal:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setUpFirstResponderBeforeBecomingVisible| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setUpFirstResponderBeforeBecomingVisible) (NIL
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doOrderWindow:relativeTo:findKey:forCounter:force:isModal:| (thing _ relative-to find-key for-counter force is-modal)
  (let ((message-lambda 
         (make-message-lambda @(_doOrderWindow:relativeTo:findKey:forCounter:force:isModal:) ((:LONG-LONG
                                                                                               :LONG-LONG
                                                                                               :CHAR
                                                                                               :CHAR
                                                                                               :CHAR
                                                                                               :CHAR)
                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ relative-to (if find-key 1 0) (if for-counter 1 0) (if force 1 0) (if is-modal 1 0))))

(defun NS::|deminiaturize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deminiaturize:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_realWindowNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_realWindowNumber) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_rebuildOrderingGroup:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_rebuildOrderingGroup:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_wantsUserAttention| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsUserAttention) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|hidesOnDeactivate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hidesOnDeactivate) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setWantsHideOnDeactivate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWantsHideOnDeactivate:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_blocksActionWhenModal:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_blocksActionWhenModal:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|attachedSheet| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attachedSheet) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setSheetParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSheetParent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_clearModalWindowLevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_clearModalWindowLevel) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|sheets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sheets) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dismissModalForTerminate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dismissModalForTerminate) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))




(defun NS::|_isNonactivatingPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isNonactivatingPanel) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_bestScreenBySpaceAssignmentOrGeometry| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_bestScreenBySpaceAssignmentOrGeometry) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_visibleAndCanBecomeKey| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_visibleAndCanBecomeKey) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isActiveAndOnScreen:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isActiveAndOnScreen:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_sharesParentFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_sharesParentFirstResponder) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_canBecomeMainWindowRegardlessOfVisibility| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canBecomeMainWindowRegardlessOfVisibility) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|makeMainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(makeMainWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateFrameToScreenConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateFrameToScreenConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_restoreModalWindowLevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_restoreModalWindowLevel) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_activateTrackingRectsForApplicationActivation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_activateTrackingRectsForApplicationActivation) (NIL
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_deactivateTrackingRectsForApplicationDeactivation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_deactivateTrackingRectsForApplicationDeactivation) (NIL
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_deferQuickLookIfPossible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_deferQuickLookIfPossible) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))




(defun NS::|_setFrameNeedsDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setFrameNeedsDisplay:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_orderOutInProgress| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_orderOutInProgress) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_documentWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_documentWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isUtilityWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isUtilityWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_takeApplicationMenuIfNeeded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_takeApplicationMenuIfNeeded:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_sendWindowWillMoveNoteWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_sendWindowWillMoveNoteWithEvent:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_startWindowMoveWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_startWindowMoveWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_endWindowMoveWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_endWindowMoveWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_handleResignKeyAppearanceEvent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_handleResignKeyAppearanceEvent) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_handleResignMainAppearanceEvent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_handleResignMainAppearanceEvent) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_toggleOrderedFrontMostWillOrderOut| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_toggleOrderedFrontMostWillOrderOut) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|_updateButtonsForFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateButtonsForFullScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))











(defun NS::|toggleFullScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleFullScreen:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setWindowController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindowController:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_restoreLevelAfterRunningModal| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_restoreLevelAfterRunningModal) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_wantsHideOnDeactivate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsHideOnDeactivate) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityIsChildOfApp| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsChildOfApp) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_titlebarContainerView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_titlebarContainerView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_toolbarView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_toolbarView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))






(defun NS::|firstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstResponder) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|constrainFrameRect:toScreen:| (thing _ to-screen)
  (let ((message-lambda 
         (make-message-lambda @(constrainFrameRect:toScreen:) (((:STRUCT
                                                                 NS::|CGRect|)
                                                                :POINTER)
                                                               (:STRUCT
                                                                NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-screen))))

(defun NS::|_hostsLayersInWindowServer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hostsLayersInWindowServer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isImageCache| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isImageCache) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|representedURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(representedURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|toolbar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toolbar) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_effectiveToolbarStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveToolbarStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|collectionBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(collectionBehavior) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTitlebarAppearsTransparent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarAppearsTransparent:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setContentViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentViewController:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|maxFullScreenContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maxFullScreenContentSize) (NIL
                                                           (:STRUCT
                                                            NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setHasShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasShadow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_cgsMoveWindow:moveGroup:| (thing _ move-group)
  (let ((message-lambda 
         (make-message-lambda @(_cgsMoveWindow:moveGroup:) (((:STRUCT
                                                              NS::|CGRect|)
                                                             :CHAR)
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if move-group 1 0))))

(defun NS::|_tileSpaceID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tileSpaceID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setFullScreenSavedFrameFromWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setFullScreenSavedFrameFromWindow:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_changeKeyAndMainLimitedOK:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_changeKeyAndMainLimitedOK:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_effectiveOrderFrontAnimationTypeIfModal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveOrderFrontAnimationTypeIfModal:) ((:CHAR)
                                                                            :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_effectiveOrderOutAnimationTypeIfModal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveOrderOutAnimationTypeIfModal:) ((:CHAR)
                                                                          :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_windowTransformAnimationForOrdering:animationType:interruptingAnimation:| (thing _ animation-type interrupting-animation)
  (let ((message-lambda 
         (make-message-lambda @(_windowTransformAnimationForOrdering:animationType:interruptingAnimation:) ((:LONG-LONG
                                                                                                             :LONG-LONG
                                                                                                             :POINTER)
                                                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ animation-type (ns-object-ptr interrupting-animation))))

(defun NS::|_wantsSnapshotProxyWindowForOrderOutAnimation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsSnapshotProxyWindowForOrderOutAnimation) (NIL
                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_wantsFullScreenCleanupOnOrderOut| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsFullScreenCleanupOnOrderOut) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_doFullScreenCleanupForOrderOut| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doFullScreenCleanupForOrderOut) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_canJoinActiveFullScreenSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canJoinActiveFullScreenSpace) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_joinActiveFullScreenSpaceUsingPosition:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_joinActiveFullScreenSpaceUsingPosition:) ((:UNSIGNED-LONG-LONG)
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_setExcludedFromVisibleWindowList:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setExcludedFromVisibleWindowList:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setStyleMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStyleMask:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|accessibilityActivationPointAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityActivationPointAttribute) (NIL
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|setFrameFromString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameFromString:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|stringWithSavedFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringWithSavedFrame) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shadowOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_shadowOffset) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_ultimateParentWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_ultimateParentWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_noteExteriorResizeMarginsMayHaveChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_noteExteriorResizeMarginsMayHaveChanged) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_noteAllowedResizeDirectionsMayHaveChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_noteAllowedResizeDirectionsMayHaveChanged) (NIL
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unlockSublevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unlockSublevel) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_fullScreenTileFillsScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_fullScreenTileFillsScreen) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|titlePosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlePosition) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_effectiveTitlePosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveTitlePosition) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_updateTitleTextField| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateTitleTextField) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|setTitlePosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlePosition:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))





(defun NS::|accessibilityTitleUIElementAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTitleUIElementAttribute) (NIL
                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|convertBaseToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertBaseToScreen:) (((:STRUCT
                                                         NS::|CGPoint|))
                                                       (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|accessibilityIsTitleUIElementAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTitleUIElementAttributeSettable) (NIL
                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|hasKeyAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasKeyAppearance) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_newFirstResponderAfterResigning| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_newFirstResponderAfterResigning) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|makeFirstResponder:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(makeFirstResponder:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|disableFlushWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableFlushWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|enableFlushWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableFlushWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|_oldFirstResponderBeforeBecoming| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_oldFirstResponderBeforeBecoming) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|_frame:resizedFromEdge:withDelta:withEvent:| (thing _ resized-from-edge with-delta with-event)
  (let ((message-lambda 
         (make-message-lambda @(_frame:resizedFromEdge:withDelta:withEvent:) (((:STRUCT
                                                                                NS::|CGRect|)
                                                                               :UNSIGNED-LONG-LONG
                                                                               (:STRUCT
                                                                                NS::|CGSize|)
                                                                               :POINTER)
                                                                              (:STRUCT
                                                                               NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ resized-from-edge with-delta (ns-object-ptr with-event))))








(defun NS::|draggingEnded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingEnded:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))




(defun NS::|_lastLeftHit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lastLeftHit) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|setViewsNeedDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setViewsNeedDisplay:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|disableKeyEquivalentForDefaultButtonCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableKeyEquivalentForDefaultButtonCell) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|enableKeyEquivalentForDefaultButtonCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableKeyEquivalentForDefaultButtonCell) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_verifyDefaultButtonCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_verifyDefaultButtonCell:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))




(defun NS::|_setDefaultButtonCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDefaultButtonCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_viewIsInContentBorder:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_viewIsInContentBorder:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_shouldForceRolloverStylingForControl:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldForceRolloverStylingForControl:) ((:POINTER)
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_setDefaultButtonSuppressed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDefaultButtonSuppressed:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_controlAppearanceChangesOnKeyStateChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_controlAppearanceChangesOnKeyStateChange) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_defaultButtonSuppressed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_defaultButtonSuppressed) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hasActiveControls| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasActiveControls) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_worksWhenModalOrChildOfModalWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_worksWhenModalOrChildOfModalWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|cancelOperation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cancelOperation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setDepthLimit:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDepthLimit:) ((:INT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|depthLimit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(depthLimit) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_convertViewRootPointToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_convertViewRootPointToScreen:) (((:STRUCT
                                                                   NS::|CGPoint|))
                                                                 (:STRUCT
                                                                  NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|appearanceParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(appearanceParent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAppearanceParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAppearanceParent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|deviceDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_initContent:styleMask:backing:defer:contentView:| (thing _ style-mask backing defer content-view)
  (let ((message-lambda 
         (make-message-lambda @(_initContent:styleMask:backing:defer:contentView:) (((:POINTER
                                                                                      (:STRUCT
                                                                                       NS::|CGRect|))
                                                                                     :UNSIGNED-LONG-LONG
                                                                                     :UNSIGNED-LONG-LONG
                                                                                     :CHAR
                                                                                     :POINTER)
                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) style-mask backing (if defer 1 0) (ns-object-ptr content-view))))

(defun NS::|_setWindowNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWindowNumber:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setFrame:) (((:STRUCT NS::|CGRect|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setResizeIncrements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setResizeIncrements:) (((:STRUCT NS::|CGSize|))
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_oldPlaceWindow:fromServer:| (thing _ from-server)
  (let ((message-lambda 
         (make-message-lambda @(_oldPlaceWindow:fromServer:) (((:STRUCT
                                                                NS::|CGRect|)
                                                               :CHAR)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if from-server 1 0))))

(defun NS::|_isDocWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isDocWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_adjustWindowToScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_adjustWindowToScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_selectFirstKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_selectFirstKeyView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_disableEnablingKeyEquivalentForDefaultButtonCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_disableEnablingKeyEquivalentForDefaultButtonCell) (NIL
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postInvalidCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postInvalidCursorRects) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_orderFrontRelativeToWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_orderFrontRelativeToWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_orderOutRelativeToWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_orderOutRelativeToWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_orderOutAndCalcKeyWithCounter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_orderOutAndCalcKeyWithCounter:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isExcludedFromWindowsMenu| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isExcludedFromWindowsMenu) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_miniaturizedOrCanBecomeMain| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_miniaturizedOrCanBecomeMain) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateFrameWidgets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateFrameWidgets) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowMovedToRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_windowMovedToRect:) (((:STRUCT NS::|CGRect|))
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|isMainWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMainWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|ignoresMouseEvents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ignoresMouseEvents) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setEventMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setEventMask:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_cleanupAndRemoveFullScreenContentController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cleanupAndRemoveFullScreenContentController) (NIL
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|resignMainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignMainWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isAutodisplay| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutodisplay) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAutodisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutodisplay:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_carbonWindowClass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_carbonWindowClass) (NIL :UNSIGNED-INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|startRectForSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(startRectForSheet:) ((:POINTER)
                                                     (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|redo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(redo:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|undo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(undo:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_allowsActiveInputContext| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsActiveInputContext) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_managesWindowRef| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_managesWindowRef) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_removeWindowRef| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeWindowRef) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setWindowRef:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWindowRef:) (((:POINTER
                                                   (:STRUCT
                                                    NS::|OpaqueWindowPtr|)))
                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cancelKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cancelKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_destroyRealWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_destroyRealWindow:) ((:CHAR) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_reallyDoOrderWindow:relativeTo:findKey:forCounter:force:isModal:| (thing _ relative-to find-key for-counter force is-modal)
  (let ((message-lambda 
         (make-message-lambda @(_reallyDoOrderWindow:relativeTo:findKey:forCounter:force:isModal:) ((:LONG-LONG
                                                                                                     :LONG-LONG
                                                                                                     :CHAR
                                                                                                     :CHAR
                                                                                                     :CHAR
                                                                                                     :CHAR)
                                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ relative-to (if find-key 1 0) (if for-counter 1 0) (if force 1 0) (if is-modal 1 0))))

(defun NS::|_termWindowIfOwner| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_termWindowIfOwner) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resetDragMargins| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetDragMargins) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_setModalWindowLevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setModalWindowLevel) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowRef| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowRef) (NIL
                                             (:POINTER
                                              (:STRUCT NS::|OpaqueWindowPtr|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setOrderOutInProgress:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setOrderOutInProgress:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setMiniaturized:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setMiniaturized:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|contentViewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentViewController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|frameRectForContentRect:styleMask:| (thing _ style-mask)
  (let ((message-lambda 
         (make-message-lambda @(frameRectForContentRect:styleMask:) (((:STRUCT
                                                                       NS::|CGRect|)
                                                                      :UNSIGNED-LONG-LONG)
                                                                     (:STRUCT
                                                                      NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ style-mask)))

(defun NS::|contentRectForFrameRect:styleMask:| (thing _ style-mask)
  (let ((message-lambda 
         (make-message-lambda @(contentRectForFrameRect:styleMask:) (((:STRUCT
                                                                       NS::|CGRect|)
                                                                      :UNSIGNED-LONG-LONG)
                                                                     (:STRUCT
                                                                      NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ style-mask)))

(defun NS::|minFrameSizeForMinContentSize:styleMask:| (thing _ style-mask)
  (let ((message-lambda 
         (make-message-lambda @(minFrameSizeForMinContentSize:styleMask:) (((:STRUCT
                                                                             NS::|CGSize|)
                                                                            :UNSIGNED-LONG-LONG)
                                                                           (:STRUCT
                                                                            NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ style-mask)))

(defun NS::|windowTitleController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowTitleController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_toolbarIsShown| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_toolbarIsShown) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|dragRectForFrameRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dragRectForFrameRect:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setNonactivatingPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNonactivatingPanel:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|resizeIncrements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resizeIncrements) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAspectRatio:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAspectRatio:) (((:STRUCT NS::|CGSize|))
                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|aspectRatio| (thing)
  (let ((message-lambda 
         (make-message-lambda @(aspectRatio) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_hasActiveAppearanceIgnoringKeyFocus| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasActiveAppearanceIgnoringKeyFocus) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setNeedsToRemoveFieldEditor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsToRemoveFieldEditor:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|invalidateCursorRectsForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(invalidateCursorRectsForView:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))









(defun NS::|_accessibilityTitleCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityTitleCell) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidateAllRevealoversForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateAllRevealoversForView:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isMovableByWindowBackground| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMovableByWindowBackground) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setNeedsToResetDragMargins:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsToResetDragMargins:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|keyViewSelectionDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyViewSelectionDirection) (NIL
                                                            :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentRectForFrameRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentRectForFrameRect:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           (:STRUCT
                                                            NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|contentBorderThicknessForEdge:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentBorderThicknessForEdge:) ((:UNSIGNED-LONG-LONG)
                                                                 :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|canRepresentDisplayGamut:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canRepresentDisplayGamut:) ((:LONG-LONG) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|setToolbar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setToolbar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setRestorationClass:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRestorationClass:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setFrame:display:animate:| (thing _ display animate)
  (let ((message-lambda 
         (make-message-lambda @(setFrame:display:animate:) (((:STRUCT
                                                              NS::|CGRect|)
                                                             :CHAR :CHAR)
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if display 1 0) (if animate 1 0))))

(defun NS::|recalculateKeyViewLoop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(recalculateKeyViewLoop) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setShowingModalFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setShowingModalFrame:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|frameAutosaveName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameAutosaveName) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|saveFrameUsingName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(saveFrameUsingName:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setUtilityWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setUtilityWindow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setFrameUsingName:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setFrameUsingName:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|setFrameAutosaveName:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setFrameAutosaveName:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|standardWindowButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(standardWindowButton:) ((:UNSIGNED-LONG-LONG)
                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_adjustedFrameFromDefaults:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_adjustedFrameFromDefaults:) (((:STRUCT
                                                                NS::|CGRect|))
                                                              (:STRUCT
                                                               NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_adjustedFrameForSaving:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_adjustedFrameForSaving:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           (:STRUCT
                                                            NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_toggleOrderedFrontMost:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_toggleOrderedFrontMost:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectNextKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectNextKeyView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectPreviousKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectPreviousKeyView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|convertPointToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointToScreen:) (((:STRUCT
                                                          NS::|CGPoint|))
                                                        (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_hasGradientBackground| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasGradientBackground) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_runningWindowTransformAnimation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_runningWindowTransformAnimation) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_effectiveCollectionBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveCollectionBehavior) (NIL
                                                               :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|endEditingFor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endEditingFor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|fieldEditor:forObject:| (thing _ for-object)
  (let ((message-lambda 
         (make-message-lambda @(fieldEditor:forObject:) ((:CHAR :POINTER)
                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (ns-object-ptr for-object))))


(defun NS::|setTitleVisibility:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleVisibility:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setForceActiveControls:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setForceActiveControls:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|canBecomeVisibleWithoutLogin| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBecomeVisibleWithoutLogin) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|shadowOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowOptions) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|hasShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasShadow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_allowsImplicitRemovalFromMovementGroup| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsImplicitRemovalFromMovementGroup) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_enableFullScreenMenubarAutohiding| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enableFullScreenMenubarAutohiding) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_disableFullScreenMenubarAutohiding| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_disableFullScreenMenubarAutohiding) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|addChildWindow:ordered:| (thing _ ordered)
  (let ((message-lambda 
         (make-message-lambda @(addChildWindow:ordered:) ((:POINTER :LONG-LONG)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) ordered)))

(defun NS::|removeChildWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeChildWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_contentViewControllerChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_contentViewControllerChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isEffectivelyVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isEffectivelyVisible) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setViewsNeedUpdateLayoutDependentMetrics:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setViewsNeedUpdateLayoutDependentMetrics:) ((:CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|sharingIndicator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharingIndicator) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_sheetDimmingMaterialRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sheetDimmingMaterialRect) (NIL
                                                            (:STRUCT
                                                             NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|selectKeyViewPrecedingView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectKeyViewPrecedingView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|selectKeyViewFollowingView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectKeyViewFollowingView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setRepresentedFilename:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepresentedFilename:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|isDocumentEdited| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDocumentEdited) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setDocumentAutosavingError:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDocumentAutosavingError:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|editTitleWithCompletionHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(editTitleWithCompletionHandler:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cancelTitleEditing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_cancelTitleEditing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_invalidateDocumentIcon| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateDocumentIcon) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setDocumentShowsPanelOnClose:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDocumentShowsPanelOnClose:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setDocumentEdited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDocumentEdited:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_documentEditingState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_documentEditingState) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setDocumentEditingState:animate:| (thing _ animate)
  (let ((message-lambda 
         (make-message-lambda @(_setDocumentEditingState:animate:) ((:LONG-LONG
                                                                     :CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if animate 1 0))))

(defun NS::|_documentShowsPanelOnClose| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_documentShowsPanelOnClose) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setNonModalDocumentError:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNonModalDocumentError:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_resetDragMarginsIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetDragMarginsIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isFloatingPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFloatingPanel) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_nextTrackingNum| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_nextTrackingNum) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setTrackingRect:inside:owner:userData:useTrackingNum:install:| (thing _ inside owner user-data use-tracking-num install)
  (let ((message-lambda 
         (make-message-lambda @(_setTrackingRect:inside:owner:userData:useTrackingNum:install:) (((:STRUCT
                                                                                                   NS::|CGRect|)
                                                                                                  :CHAR
                                                                                                  :POINTER
                                                                                                  (:POINTER
                                                                                                   :VOID)
                                                                                                  :LONG-LONG
                                                                                                  :CHAR)
                                                                                                 (:POINTER
                                                                                                  (:ARRAY
                                                                                                   :CHAR
                                                                                                   56)))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if inside 1 0) (ns-object-ptr owner) (ns-object-ptr user-data) use-tracking-num (if install 1 0))))

(defun NS::|_synchronizeConfigurationForTrackingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_synchronizeConfigurationForTrackingArea:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_didInstallTrackingRect:assumeInside:userData:trackingNum:| (thing _ assume-inside user-data tracking-num)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_didInstallTrackingRect:assumeInside:userData:trackingNum:) (((:STRUCT
                                                                                               NS::|CGRect|)
                                                                                              :CHAR
                                                                                              (:POINTER
                                                                                               :VOID)
                                                                                              :LONG-LONG)
                                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if assume-inside 1 0) (ns-object-ptr user-data) tracking-num))) nil t))

(defun NS::|_setTrackingRect:inside:owner:userData:useTrackingNum:| (thing _ inside owner user-data use-tracking-num)
  (let ((message-lambda 
         (make-message-lambda @(_setTrackingRect:inside:owner:userData:useTrackingNum:) (((:STRUCT
                                                                                           NS::|CGRect|)
                                                                                          :CHAR
                                                                                          :POINTER
                                                                                          (:POINTER
                                                                                           :VOID)
                                                                                          :LONG-LONG)
                                                                                         :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if inside 1 0) (ns-object-ptr owner) (ns-object-ptr user-data) use-tracking-num)))


(defun NS::|_removeTrackingRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeTrackingRect:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_layerHostedContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layerHostedContext) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setTrackingAreasDirty| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setTrackingAreasDirty) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_verifyTrackingRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_verifyTrackingRects) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setEventMask:forTrackingRect:| (thing _ for-tracking-rect)
  (let ((message-lambda 
         (make-message-lambda @(_setEventMask:forTrackingRect:) ((:UNSIGNED-LONG-LONG
                                                                  :LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ for-tracking-rect)))

(defun NS::|_resetClipForTrackingRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_resetClipForTrackingRect:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_trackingAreaIDForTrackingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_trackingAreaIDForTrackingArea:) ((:POINTER)
                                                                  :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setTrackingRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setTrackingRects) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_clearTrackingRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_clearTrackingRects) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setTrackingRects:insideList:owner:userDataList:trackingNums:count:| (thing _ inside-list owner user-data-list tracking-nums count)
  (let ((message-lambda 
         (make-message-lambda @(_setTrackingRects:insideList:owner:userDataList:trackingNums:count:) (((:POINTER
                                                                                                        (:STRUCT
                                                                                                         NS::|CGRect|))
                                                                                                       (:POINTER
                                                                                                        :CHAR)
                                                                                                       :POINTER
                                                                                                       (:POINTER
                                                                                                        (:POINTER
                                                                                                         :VOID))
                                                                                                       (:POINTER
                                                                                                        :LONG-LONG)
                                                                                                       :LONG-LONG)
                                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr inside-list) (ns-object-ptr owner) (ns-object-ptr user-data-list) (ns-object-ptr tracking-nums) count)))

(defun NS::|_setTrackingRect:inside:owner:userData:| (thing _ inside owner user-data)
  (let ((message-lambda 
         (make-message-lambda @(_setTrackingRect:inside:owner:userData:) (((:STRUCT
                                                                            NS::|CGRect|)
                                                                           :CHAR
                                                                           :POINTER
                                                                           (:POINTER
                                                                            :VOID))
                                                                          :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if inside 1 0) (ns-object-ptr owner) (ns-object-ptr user-data))))

(defun NS::|_discardTrackingRects:count:| (thing _ count)
  (let ((message-lambda 
         (make-message-lambda @(_discardTrackingRects:count:) (((:POINTER
                                                                 :LONG-LONG)
                                                                :LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) count)))

(defun NS::|_discardTrackingRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_discardTrackingRect:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_disableTrackingRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_disableTrackingRect:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_enableTrackingRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_enableTrackingRect:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_containsTrackingRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_containsTrackingRect:) ((:LONG-LONG) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_handleTrackingRectEnterExitEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_handleTrackingRectEnterExitEvent:) ((:POINTER)
                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))



(defun NS::|_moveTrackingArea:toRect:| (thing _ to-rect)
  (let ((message-lambda 
         (make-message-lambda @(_moveTrackingArea:toRect:) ((:POINTER
                                                             (:STRUCT
                                                              NS::|CGRect|))
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) to-rect)))

(defun NS::|_updateTrackingAreasDueToEndScrolling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateTrackingAreasDueToEndScrolling) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recursiveResetTrackingAreasToPending| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recursiveResetTrackingAreasToPending) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldShowCursorRects| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldShowCursorRects) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setCursorRect:index:| (thing _ index)
  (let ((message-lambda 
         (make-message-lambda @(_setCursorRect:index:) (((:STRUCT NS::|CGRect|)
                                                         :LONG-LONG)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ index)))

(defun NS::|_discardCursorRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_discardCursorRect:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_updateEventMaskDueToDisableCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateEventMaskDueToDisableCursorRects) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateEventMaskDueToEnableCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateEventMaskDueToEnableCursorRects) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateStructuralRegionsOnNextDisplayCycle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateStructuralRegionsOnNextDisplayCycle) (NIL
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidateCursorRectsForViewsWithNoTrackingAreas| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateCursorRectsForViewsWithNoTrackingAreas) (NIL
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasCursorRectsForView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasCursorRectsForView:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_invalidateCursorRectsForView:force:| (thing _ force)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateCursorRectsForView:force:) ((:POINTER
                                                                        :CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if force 1 0))))

(defun NS::|allowsCursorRectsWhenInactive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsCursorRectsWhenInactive) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_setCursorForMouseLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCursorForMouseLocation:) (((:STRUCT
                                                                NS::|CGPoint|))
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|GDBDumpCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(GDBDumpCursorRects) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_edgeResizingCursorUpdate:atLocation:| (thing _ at-location)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_edgeResizingCursorUpdate:atLocation:) ((:POINTER
                                                                         (:STRUCT
                                                                          NS::|CGPoint|))
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-location))) nil t))


(defun NS::|_shouldResetCursorRects| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldResetCursorRects) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isViewScrolling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isViewScrolling) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_addCursorRect:cursor:forView:| (thing _ cursor for-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_addCursorRect:cursor:forView:) (((:STRUCT
                                                                   NS::|CGRect|)
                                                                  :POINTER
                                                                  :POINTER)
                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr cursor) (ns-object-ptr for-view)))) nil t))

(defun NS::|_removeCursorRect:cursor:forView:| (thing _ cursor for-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_removeCursorRect:cursor:forView:) (((:STRUCT
                                                                      NS::|CGRect|)
                                                                     :POINTER
                                                                     :POINTER)
                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr cursor) (ns-object-ptr for-view)))) nil t))

(defun NS::|_hasCursorRects| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasCursorRects) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAllowsCursorRectsWhenInactive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsCursorRectsWhenInactive:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_discardCursorRectsForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_discardCursorRectsForView:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_markCursorRectsForRemovedView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_markCursorRectsForRemovedView:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_deallocCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_deallocCursorRects) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_findCursorForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_findCursorForView:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateCursorRectsDueToBecomingVisible| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateCursorRectsDueToBecomingVisible) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateCursorRectsDueToBecomingKey| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateCursorRectsDueToBecomingKey) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateCursorRectsDueToResigningKey| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateCursorRectsDueToResigningKey) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentLayoutRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentLayoutRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|handleSaveScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleSaveScriptCommand:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|handleCloseScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleCloseScriptCommand:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_screenChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_screenChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_isDocModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isDocModal) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))





(defun NS::|wantsPeriodicDraggingUpdates| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsPeriodicDraggingUpdates) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_findDragTargetFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_findDragTargetFrom:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_openDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_openDrawers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|drawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|openDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(openDrawers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setParentWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setParentWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setOneShot:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOneShot:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setCanHide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanHide:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_effectiveLevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveLevel) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setCanBecomeVisibleWithoutLogin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanBecomeVisibleWithoutLogin:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_changeKeyState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_changeKeyState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_changeMainState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_changeMainState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_changeFirstResponderToParentsFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_changeFirstResponderToParentsFirstResponder) (NIL
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addToGroups:ordered:| (thing _ ordered)
  (let ((message-lambda 
         (make-message-lambda @(_addToGroups:ordered:) ((:POINTER :LONG-LONG)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) ordered)))

(defun NS::|_keepChildrenAttached| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_keepChildrenAttached) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_removeFromGroups:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeFromGroups:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setFrameCommon:display:fromServer:| (thing _ display from-server)
  (let ((message-lambda 
         (make-message-lambda @(_setFrameCommon:display:fromServer:) (((:STRUCT
                                                                        NS::|CGRect|)
                                                                       :CHAR
                                                                       :CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if display 1 0) (if from-server 1 0))))



(defun NS::|_setFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setFirstResponder:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_isKeyWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isKeyWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hiliteWindow:fromWindow:| (thing _ from-window)
  (let ((message-lambda 
         (make-message-lambda @(_hiliteWindow:fromWindow:) (((:POINTER
                                                              (:STRUCT
                                                               NS::|OpaqueWindowPtr|))
                                                             :POINTER)
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-window))))


(defun NS::|showToolbar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showToolbar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|hideToolbar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(hideToolbar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|toggleToolbarShown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleToolbarShown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|runToolbarCustomizationPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runToolbarCustomizationPalette:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|performZoom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performZoom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|performMiniaturize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performMiniaturize:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_resetFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetFirstResponder) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cycleDrawersReversed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cycleDrawersReversed:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_hideAttachedWindows:findKey:| (thing _ find-key)
  (let ((message-lambda 
         (make-message-lambda @(_hideAttachedWindows:findKey:) ((:CHAR :CHAR)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if find-key 1 0))))

(defun NS::|_minContentSizeForDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_minContentSizeForDrawers) (NIL
                                                            (:STRUCT
                                                             NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|titlebarAccessoryViewControllers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarAccessoryViewControllers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hideAllDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_hideAllDrawers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unhideAllDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unhideAllDrawers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_moveAllDrawersByOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_moveAllDrawersByOffset:) (((:STRUCT
                                                             NS::|CGSize|))
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_displayAllDrawersIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_displayAllDrawersIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_positionAllDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_positionAllDrawers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_sizeAllDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sizeAllDrawers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_sizeAllDrawersWithRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_sizeAllDrawersWithRect:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_standardFrameForDrawersInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_standardFrameForDrawersInRect:) (((:STRUCT
                                                                    NS::|CGRect|))
                                                                  (:STRUCT
                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_minSizeForDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_minSizeForDrawers) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeAllDrawersImmediately:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeAllDrawersImmediately:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_registerAllDrawersForDraggedTypesIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_registerAllDrawersForDraggedTypesIfNeeded) (NIL
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resetAllDrawersDisableCounts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetAllDrawersDisableCounts) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resetAllDrawersPostingCounts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetAllDrawersPostingCounts) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_startLiveResizeForAllDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_startLiveResizeForAllDrawers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_endLiveResizeForAllDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endLiveResizeForAllDrawers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setLevelForAllDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setLevelForAllDrawers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_orderedDrawerAndWindowKeyLoopGroupingViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_orderedDrawerAndWindowKeyLoopGroupingViews) (NIL
                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_changeAllDrawersKeyState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_changeAllDrawersKeyState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_changeAllDrawersMainState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_changeAllDrawersMainState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_changeAllDrawersFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_changeAllDrawersFirstResponder) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setVisibleWithoutLoginForAllDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setVisibleWithoutLoginForAllDrawers) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|performWindowDragWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performWindowDragWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySetSizeAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetSizeAttribute:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_parentSpaceID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_parentSpaceID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resizeWeighting| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resizeWeighting) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|acquireKeyAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(acquireKeyAppearance) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|resignKeyAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignKeyAppearance) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_setViewsNeedUpdateConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setViewsNeedUpdateConstraints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setViewsNeedLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setViewsNeedLayout) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setViewsNeedBuildLayerTree| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setViewsNeedBuildLayerTree) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setViewsNeedDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setViewsNeedDisplay) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setNeedsDisplayInRegion:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsDisplayInRegion:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_convertViewRootPointFromScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_convertViewRootPointFromScreen:) (((:STRUCT
                                                                     NS::|CGPoint|))
                                                                   (:STRUCT
                                                                    NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_rootViewForViewRoot| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rootViewForViewRoot) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_addMouseMovedListener:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addMouseMovedListener:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeMouseMovedListener:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeMouseMovedListener:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isInKeyWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInKeyWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_displayScale| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_displayScale) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_scaleFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scaleFactor) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|childWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(childWindows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|restorationClass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restorationClass) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|inspectorBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(inspectorBar) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_activeGestureRecognizers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_activeGestureRecognizers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lastDragRegionData| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lastDragRegionData) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_savedScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_savedScreen) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_fullScreenSidebarToolbarMaterial| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fullScreenSidebarToolbarMaterial) (NIL
                                                                    :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_gestureRecognizersForTouch:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_gestureRecognizersForTouch:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_allowsOrdering| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsOrdering) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_cornerMaskChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cornerMaskChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cornerMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cornerMask) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unlockViewHierarchyForReading| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unlockViewHierarchyForReading) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowDeviceRoundWithContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_windowDeviceRoundWithContext:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateFullHeightDividerStatus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateFullHeightDividerStatus) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setKeyViewLoopNeedsRecalc:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setKeyViewLoopNeedsRecalc:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setAppearanceSource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAppearanceSource:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|frameRectForContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(frameRectForContentRect:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           (:STRUCT
                                                            NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_accessibilityTitleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityTitleRect) (NIL
                                                          (:STRUCT
                                                           NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setRepresentedURL:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepresentedURL:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|representedFilename| (thing)
  (let ((message-lambda 
         (make-message-lambda @(representedFilename) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateEdgeResizingTrackingAreas| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_updateEdgeResizingTrackingAreas) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isSheet| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isSheet) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|graphicsContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(graphicsContext) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_fromConstraintsGetWindowMinSize:maxSize:allowDynamicLayout:changingOnlySlightly:| (thing _ max-size allow-dynamic-layout changing-only-slightly)
  (let ((message-lambda 
         (make-message-lambda @(_fromConstraintsGetWindowMinSize:maxSize:allowDynamicLayout:changingOnlySlightly:) (((:POINTER
                                                                                                                      (:STRUCT
                                                                                                                       NS::|CGSize|))
                                                                                                                     (:POINTER
                                                                                                                      (:STRUCT
                                                                                                                       NS::|CGSize|))
                                                                                                                     :CHAR
                                                                                                                     :CHAR)
                                                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr max-size) (if allow-dynamic-layout 1 0) (if changing-only-slightly 1 0))))

(defun NS::|anchorAttributeForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(anchorAttributeForOrientation:) ((:LONG-LONG)
                                                                 :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|updateConstraintsIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateConstraintsIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isInSomeVisibleSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isInSomeVisibleSpace) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_blocksKeyAndMainWindowTouchBarsWhenModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_blocksKeyAndMainWindowTouchBarsWhenModal) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_windowForToolbar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowForToolbar) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_needsBehindWindowBlendingForFullScreenTitlebar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_needsBehindWindowBlendingForFullScreenTitlebar) (NIL
                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_toggleSelectAnyValidResponderOverride| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_toggleSelectAnyValidResponderOverride) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_handleFocusToolbarHotKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleFocusToolbarHotKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cycleWindowsBackwards:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cycleWindowsBackwards:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cycleWindows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cycleWindows:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cycleDrawers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cycleDrawers:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cycleDrawersBackwards:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cycleDrawersBackwards:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_makingFirstResponderForMouseDown| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_makingFirstResponderForMouseDown) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setSharesParentFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSharesParentFirstResponder:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|becomesKeyOnlyIfNeeded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(becomesKeyOnlyIfNeeded) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateEventMaskDueToBecomingKey| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateEventMaskDueToBecomingKey) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_allowsActiveInputContextDuringMenuTracking| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsActiveInputContextDuringMenuTracking) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_overrideDefeatingConstrainFrameRect:toScreen:fullScreenConstrainToTile:| (thing _ to-screen full-screen-constrain-to-tile)
  (let ((message-lambda 
         (make-message-lambda @(_overrideDefeatingConstrainFrameRect:toScreen:fullScreenConstrainToTile:) (((:STRUCT
                                                                                                             NS::|CGRect|)
                                                                                                            :POINTER
                                                                                                            :CHAR)
                                                                                                           (:STRUCT
                                                                                                            NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-screen) (if full-screen-constrain-to-tile 1 0))))

(defun NS::|_updateMouseMovedState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateMouseMovedState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_visibleAndCanBecomeKeyLimitedOK:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_visibleAndCanBecomeKeyLimitedOK:) ((:CHAR)
                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0)))) nil t))

(defun NS::|zoom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(zoom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_tileLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_tileLeft:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_zoomLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_zoomLeft:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_tileRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_tileRight:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_zoomRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_zoomRight:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_toggleIPad:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_toggleIPad:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_moveToDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_moveToDisplay:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|tabbedWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabbedWindows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|addTitlebarAccessoryViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addTitlebarAccessoryViewController:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|_dragWindowRelativeToMouseDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_dragWindowRelativeToMouseDown:) (((:STRUCT
                                                                    NS::|CGPoint|))
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setBackingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackingType:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|miniaturize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(miniaturize:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_close:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_close:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_resizeWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_resizeWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_resizeDirectionForMouseLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_resizeDirectionForMouseLocation:) (((:STRUCT
                                                                      NS::|CGPoint|))
                                                                    :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_currentDividerResizeDirections| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentDividerResizeDirections) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_performDividerDragWithEvent:forResizeDirection:| (thing _ for-resize-direction)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_performDividerDragWithEvent:forResizeDirection:) ((:POINTER
                                                                                    :LONG-LONG)
                                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-resize-direction))) nil t))

(defun NS::|_lastRightHit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lastRightHit) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lockViewHierarchyForReading| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lockViewHierarchyForReading) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentLayoutGuide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentLayoutGuide) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateManagedDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateManagedDisplay) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_locationTemporary| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_locationTemporary) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_persistFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_persistFrame) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setPreservesContentDuringLiveResize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreservesContentDuringLiveResize:) ((:CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setLocationTemporary:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setLocationTemporary:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|animationResizeTime:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(animationResizeTime:) (((:STRUCT NS::|CGRect|))
                                                       :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_isEventShapeOccluded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isEventShapeOccluded) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_contextForLayerHosting| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_contextForLayerHosting) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isRunningADocModalAttachedSheet| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isRunningADocModalAttachedSheet) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|preventsApplicationTerminationWhenModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(preventsApplicationTerminationWhenModal) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setPreventsApplicationTerminationWhenModal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreventsApplicationTerminationWhenModal:) ((:CHAR)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_showToolTip| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_showToolTip) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|allowsToolTipsWhenApplicationIsInactive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsToolTipsWhenApplicationIsInactive) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_toggleFrameAutosaveEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_toggleFrameAutosaveEnabled:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setTempHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTempHidden:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_implicitlyAllowsFullScreenPrimary| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_implicitlyAllowsFullScreenPrimary) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setPreventsActivation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setPreventsActivation:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_containedMenusAreEligibleForKeyEquivalents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_containedMenusAreEligibleForKeyEquivalents) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|initWithContentRect:styleMask:backing:defer:screen:| (thing _ style-mask backing defer screen)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentRect:styleMask:backing:defer:screen:) (((:STRUCT
                                                                                        NS::|CGRect|)
                                                                                       :UNSIGNED-LONG-LONG
                                                                                       :UNSIGNED-LONG-LONG
                                                                                       :CHAR
                                                                                       :POINTER)
                                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ style-mask backing (if defer 1 0) (ns-object-ptr screen))))

(defun NS::|_fullScreenPresentationOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fullScreenPresentationOptions) (NIL
                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowMoved:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_windowMoved:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setIncludedInParentWindowShare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIncludedInParentWindowShare:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_isOnActiveScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isOnActiveScreen) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|flushWindowIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flushWindowIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_frameForFullScreenMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_frameForFullScreenMode) (NIL
                                                          (:STRUCT
                                                           NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateContentLayoutGuideFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateContentLayoutGuideFrame) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_surrenderToolbarViewForFullScreenWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_surrenderToolbarViewForFullScreenWindow) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setShowsToolbarButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsToolbarButton:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_minXTitlebarButtonsWidth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_minXTitlebarButtonsWidth) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_maxXTitlebarButtonsWidth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_maxXTitlebarButtonsWidth) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setContentMinSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentMinSize:) (((:STRUCT NS::|CGSize|))
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setContentMaxSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentMaxSize:) (((:STRUCT NS::|CGSize|))
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))





(defun NS::|_setLastDragRegion:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setLastDragRegion:) (((:POINTER :VOID)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAutorecalculatesKeyViewLoop:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutorecalculatesKeyViewLoop:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setTitlebarAlphaValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarAlphaValue:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_justOrderOut| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_justOrderOut) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldUseTexturedAppearanceForSegmentedCellInView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldUseTexturedAppearanceForSegmentedCellInView:) ((:POINTER)
                                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_isTitleHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isTitleHidden) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_allowsRootLayerBacking| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsRootLayerBacking) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_preserveAnimatingFrames| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_preserveAnimatingFrames) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|titlebarViewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarViewController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasFullSizeContentView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasFullSizeContentView) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setFrameAutosaveName:changeFrame:| (thing _ change-frame)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_setFrameAutosaveName:changeFrame:) ((:POINTER
                                                                      :CHAR)
                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if change-frame 1 0)))) nil t))

(defun NS::|_hasTitlebarContent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasTitlebarContent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|deepestScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deepestScreen) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|userSpaceScaleFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userSpaceScaleFactor) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isConsideredOpenForPersistentState| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isConsideredOpenForPersistentState) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setCanCycle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCanCycle:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_adjustMinAndMaxSizeForSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_adjustMinAndMaxSizeForSheet:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|sheetBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sheetBehavior) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowForSheetMovementAndOrderingGroups| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowForSheetMovementAndOrderingGroups) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateWindowIsFullScreenCapable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateWindowIsFullScreenCapable) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_positionSheet:constrained:andDisplay:| (thing _ constrained and-display)
  (let ((message-lambda 
         (make-message-lambda @(_positionSheet:constrained:andDisplay:) ((:POINTER
                                                                          :CHAR
                                                                          :CHAR)
                                                                         (:STRUCT
                                                                          NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if constrained 1 0) (if and-display 1 0))))

(defun NS::|_positionSheetsConstrained:andDisplay:| (thing _ and-display)
  (let ((message-lambda 
         (make-message-lambda @(_positionSheetsConstrained:andDisplay:) ((:CHAR
                                                                          :CHAR)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if and-display 1 0))))

(defun NS::|_keepOnScreenSheetFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_keepOnScreenSheetFrame:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           (:STRUCT
                                                            NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_positioningRectForSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_positioningRectForSheet:) ((:POINTER)
                                                            (:STRUCT
                                                             NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_centerSheetFrame:forParent:inParentFrame:| (thing _ for-parent in-parent-frame)
  (let ((message-lambda 
         (make-message-lambda @(_centerSheetFrame:forParent:inParentFrame:) (((:STRUCT
                                                                               NS::|CGRect|)
                                                                              :POINTER
                                                                              (:STRUCT
                                                                               NS::|CGRect|))
                                                                             (:STRUCT
                                                                              NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-parent) in-parent-frame)))

(defun NS::|_adjustFrame:constrained:forSheet:positioningFrame:| (thing _ constrained for-sheet positioning-frame)
  (let ((message-lambda 
         (make-message-lambda @(_adjustFrame:constrained:forSheet:positioningFrame:) (((:STRUCT
                                                                                        NS::|CGRect|)
                                                                                       :CHAR
                                                                                       :POINTER
                                                                                       (:POINTER
                                                                                        (:STRUCT
                                                                                         NS::|CGRect|)))
                                                                                      (:STRUCT
                                                                                       NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if constrained 1 0) (ns-object-ptr for-sheet) (ns-object-ptr positioning-frame))))

(defun NS::|_hideSheetWindow:findKey:| (thing _ find-key)
  (let ((message-lambda 
         (make-message-lambda @(_hideSheetWindow:findKey:) ((:POINTER :CHAR)
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if find-key 1 0))))

(defun NS::|_beginNextQueuedSheetIfNecessary| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_beginNextQueuedSheetIfNecessary) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setKeepChildrenAttached:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setKeepChildrenAttached:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_isSheetOnModalWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isSheetOnModalWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isSheetOnWindowWithWindowNumber:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isSheetOnWindowWithWindowNumber:) ((:LONG-LONG)
                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_setDocModal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDocModal:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_moveSheetByItself:delta:| (thing _ delta)
  (let ((message-lambda 
         (make-message-lambda @(_moveSheetByItself:delta:) ((:POINTER
                                                             (:STRUCT
                                                              NS::|CGPoint|))
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) delta)))

(defun NS::|_reparentSheetsToSelfOnFullScreenExit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_reparentSheetsToSelfOnFullScreenExit) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_attachSheetWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_attachSheetWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_detachSheetWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_detachSheetWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_attachedSheet| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_attachedSheet) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_wantsSheetDimmingMaterial| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsSheetDimmingMaterial) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_xOffsetForSheetFrame:inParentFrame:| (thing _ in-parent-frame)
  (let ((message-lambda 
         (make-message-lambda @(_xOffsetForSheetFrame:inParentFrame:) (((:STRUCT
                                                                         NS::|CGRect|)
                                                                        (:STRUCT
                                                                         NS::|CGRect|))
                                                                       :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ in-parent-frame)))

(defun NS::|_stashOrigin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_stashOrigin:) (((:STRUCT NS::|CGPoint|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_stashedOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_stashedOrigin) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_stashCollapsedOrigin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_stashCollapsedOrigin:) (((:STRUCT
                                                           NS::|CGPoint|))
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_collapsedOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_collapsedOrigin) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hideSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_hideSheet:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_unhideSheet| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unhideSheet) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|showsAutosaveButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsAutosaveButton) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setShowsAutosaveButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsAutosaveButton:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_documentAutosavingError| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_documentAutosavingError) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_nonModalDocumentError| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_nonModalDocumentError) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_visualEffectViewAlwaysUseWSAwareBackdrops| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_visualEffectViewAlwaysUseWSAwareBackdrops) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_registerBackdropView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_registerBackdropView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_unregisterBackdropView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_unregisterBackdropView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_doingCacheDisplayInRect| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_doingCacheDisplayInRect) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_shouldGetCornerMaskFromVisualEffectView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldGetCornerMaskFromVisualEffectView) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_viewsNeedUpdateConstraints| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_viewsNeedUpdateConstraints) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_sidebarAdapterWasAddedToWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_sidebarAdapterWasAddedToWindow:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_sidebarProviderWillRemoveFromWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_sidebarProviderWillRemoveFromWindow:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_trailingSidebarAdapterWasAddedToWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_trailingSidebarAdapterWasAddedToWindow:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_trailingSidebarProviderWillRemoveFromWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_trailingSidebarProviderWillRemoveFromWindow:) ((:POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_resetSplitViewUserPreferredThicknessFromSetAlignmentFrames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetSplitViewUserPreferredThicknessFromSetAlignmentFrames) (NIL
                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lockViewHierarchyForWriting| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lockViewHierarchyForWriting) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unlockViewHierarchyForWriting| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unlockViewHierarchyForWriting) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_measuringMinFullScreenContentSize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_measuringMinFullScreenContentSize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|unregisterSplitViewItemSeparatorTrackingAdapter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unregisterSplitViewItemSeparatorTrackingAdapter:) ((:POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|registerSplitViewItemSeparatorTrackingAdapter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerSplitViewItemSeparatorTrackingAdapter:) ((:POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|statusItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(statusItem) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAllowsToolTipsWhenApplicationIsInactive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsToolTipsWhenApplicationIsInactive:) ((:CHAR)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_startWindowDragWithEvent:options:animate:completionHandler:| (thing _ options animate completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(_startWindowDragWithEvent:options:animate:completionHandler:) ((:POINTER
                                                                                                :UNSIGNED-LONG-LONG
                                                                                                :CHAR
                                                                                                :POINTER)
                                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) options (if animate 1 0) (ns-object-ptr completion-handler))))

(defun NS::|_lighterViewDetaching:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_lighterViewDetaching:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_dragWindowRelativeToMouseDown:options:completionHandler:| (thing _ options completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(_dragWindowRelativeToMouseDown:options:completionHandler:) (((:STRUCT
                                                                                              NS::|CGPoint|)
                                                                                             :UNSIGNED-LONG-LONG
                                                                                             :POINTER)
                                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ options (ns-object-ptr completion-handler))))

(defun NS::|_appearanceForAttachedPopovers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_appearanceForAttachedPopovers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_bestScreenByGeometryOfFrame:respectingSpaceAssignment:| (thing _ respecting-space-assignment)
  (let ((message-lambda 
         (make-message-lambda @(_bestScreenByGeometryOfFrame:respectingSpaceAssignment:) (((:STRUCT
                                                                                            NS::|CGRect|)
                                                                                           :CHAR)
                                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if respecting-space-assignment 1 0))))

(defun NS::|_orderForwardWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_orderForwardWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cgsPositionManagedByWindowServer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_cgsPositionManagedByWindowServer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_viewAttaching:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_viewAttaching:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|acceptsMouseMovedEvents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsMouseMovedEvents) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hasMouseMovedListeners| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasMouseMovedListeners) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isChildOfWindowWithWindowNumber:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isChildOfWindowWithWindowNumber:) ((:LONG-LONG)
                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_lmouseUpPending| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_lmouseUpPending) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_performKeyEquivalentConditionally:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_performKeyEquivalentConditionally:) ((:POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_hostWindowIsKey| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hostWindowIsKey) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_latchViewForPressureEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_latchViewForPressureEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_latchViewForScrollEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_latchViewForScrollEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_acceptsSecondaryKey| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_acceptsSecondaryKey) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_forwardActionToParent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_forwardActionToParent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_isChildOfWindow:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isChildOfWindow:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_sharesParentKeyState| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_sharesParentKeyState) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|bottomCornerRounded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(bottomCornerRounded) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_shouldRoundCornersForSurface| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldRoundCornersForSurface) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_intersectBottomCornersWithRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_intersectBottomCornersWithRect:) (((:STRUCT
                                                                     NS::|CGRect|))
                                                                   (:STRUCT
                                                                    NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_copyAcquiredViewHierarchyLockForReading| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_copyAcquiredViewHierarchyLockForReading) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_wantsFullScreenTileDropTargets| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsFullScreenTileDropTargets) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_isKeyWindowIgnoringFocus| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isKeyWindowIgnoringFocus) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_allowsAnyValidResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsAnyValidResponder) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_supplementalSharingServicePickerToolbarItemDelegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_supplementalSharingServicePickerToolbarItemDelegate) (NIL
                                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|setAcceptsMouseMovedEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAcceptsMouseMovedEvents:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_reallyIsVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_reallyIsVisible) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_postingDisabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_postingDisabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_postWindowNeedsUpdateConstraintsUnlessPostingDisabled| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postWindowNeedsUpdateConstraintsUnlessPostingDisabled) (NIL
                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postWindowNeedsLayoutUnlessPostingDisabled| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postWindowNeedsLayoutUnlessPostingDisabled) (NIL
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postWindowNeedsDisplayUnlessPostingDisabled| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postWindowNeedsDisplayUnlessPostingDisabled) (NIL
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layoutDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|autorecalculatesContentBorderThicknessForEdge:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autorecalculatesContentBorderThicknessForEdge:) ((:UNSIGNED-LONG-LONG)
                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_needsToResetDragMargins| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_needsToResetDragMargins) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_windowControlMenuItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowControlMenuItems) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowTilingMenuItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowTilingMenuItems) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_endWindowSharingSession| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endWindowSharingSession) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|disableScreenUpdatesUntilFlush| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableScreenUpdatesUntilFlush) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_recalculateKeyViewLoopIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_recalculateKeyViewLoopIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setKeyViewSelectionDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setKeyViewSelectionDirection:) ((:UNSIGNED-LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|setInspectorBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInspectorBar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_bottomBarHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_bottomBarHeight) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_movableByBottomBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_movableByBottomBar) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_addKnownSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addKnownSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_topBarHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_topBarHeight) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|showsContentSeparatorForEdge:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsContentSeparatorForEdge:) ((:UNSIGNED-LONG-LONG)
                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_hasToolbar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasToolbar) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hasKeyAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasKeyAppearance) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hasMainAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasMainAppearance) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_customTitleCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_customTitleCell) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasBackgroundColor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasBackgroundColor) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_themeBackgroundStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_themeBackgroundStyle) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|removeUnderTitlebarView:withAssociatedWithView:| (thing _ with-associated-with-view)
  (let ((message-lambda 
         (make-message-lambda @(removeUnderTitlebarView:withAssociatedWithView:) ((:POINTER
                                                                                   :POINTER)
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-associated-with-view))))

(defun NS::|_zoomButtonIsFullScreenButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_zoomButtonIsFullScreenButton) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|showsToolbarButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsToolbarButton) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|showsLockButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsLockButton) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|showsFullScreenButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsFullScreenButton) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|singleWindowSharingActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(singleWindowSharingActive) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_autohidesToolbar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_autohidesToolbar) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setContentRect:) (((:STRUCT NS::|CGRect|))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|prefersFullWidthTitlebarWhenAccessoriesVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(prefersFullWidthTitlebarWhenAccessoriesVisible) (NIL
                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_toolbarFrameSizeChanged:oldSize:| (thing _ old-size)
  (let ((message-lambda 
         (make-message-lambda @(_toolbarFrameSizeChanged:oldSize:) ((:POINTER
                                                                     (:STRUCT
                                                                      NS::|CGSize|))
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) old-size)))

(defun NS::|_toolbarLeadingSpace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_toolbarLeadingSpace) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setResizeWeighting:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setResizeWeighting:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|contentMinSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentMinSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentMaxSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentMaxSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setContentBorderThickness:forEdge:| (thing _ for-edge)
  (let ((message-lambda 
         (make-message-lambda @(setContentBorderThickness:forEdge:) ((:DOUBLE
                                                                      :UNSIGNED-LONG-LONG)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ for-edge)))

(defun NS::|_hitTestInResizeRegionShouldReturnNil| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hitTestInResizeRegionShouldReturnNil) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_remoteRenameSession| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_remoteRenameSession) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|windowTitlebarLayoutDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowTitlebarLayoutDirection) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|toolbarStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toolbarStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldToolbarCompressWithSeamlessBottomAccessory| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldToolbarCompressWithSeamlessBottomAccessory) (NIL
                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_localSharingWindowController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_localSharingWindowController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_canMiniaturizeCheckingMask:forButtonEnabledState:| (thing _ for-button-enabled-state)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canMiniaturizeCheckingMask:forButtonEnabledState:) ((:CHAR
                                                                                      :CHAR)
                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if for-button-enabled-state 1 0)))) nil t))

(defun NS::|_titlebarEditingDidEndNormally:title:editingRange:grantHandler:| (thing _ title editing-range grant-handler)
  (let ((message-lambda 
         (make-message-lambda @(_titlebarEditingDidEndNormally:title:editingRange:grantHandler:) ((:CHAR
                                                                                                   :POINTER
                                                                                                   (:STRUCT
                                                                                                    NS::|_NSRange|)
                                                                                                   :POINTER)
                                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (ns-object-ptr title) editing-range (ns-object-ptr grant-handler))))

(defun NS::|_renamingDidEndNormally:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_renamingDidEndNormally:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_attemptToSnapWindowSizeWithEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_attemptToSnapWindowSizeWithEvent:) ((:POINTER)
                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_attemptToModifyAlwaysOnTopWithEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_attemptToModifyAlwaysOnTopWithEvent:) ((:POINTER)
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_doClientSideDraggingWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_doClientSideDraggingWithEvent:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_startWindowDragWithEvent:options:animate:| (thing _ options animate)
  (let ((message-lambda 
         (make-message-lambda @(_startWindowDragWithEvent:options:animate:) ((:POINTER
                                                                              :UNSIGNED-LONG-LONG
                                                                              :CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) options (if animate 1 0))))

(defun NS::|_setMovableByBottomBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setMovableByBottomBar:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setBottomCornerRounded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBottomCornerRounded:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_hasContiguousBottomAccessoryViewController| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasContiguousBottomAccessoryViewController) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setDocumentButtonEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDocumentButtonEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|addUnderTitlebarView:withAssociatedWithView:| (thing _ with-associated-with-view)
  (let ((message-lambda 
         (make-message-lambda @(addUnderTitlebarView:withAssociatedWithView:) ((:POINTER
                                                                                :POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-associated-with-view))))

(defun NS::|setPrefersFullWidthTitlebarWhenAccessoriesVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPrefersFullWidthTitlebarWhenAccessoriesVisible:) ((:CHAR)
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|titlebarBlendingMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarBlendingMode) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_toolbarTrailingSpace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_toolbarTrailingSpace) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_willStartRenameWithTitle:editingRange:| (thing _ editing-range)
  (let ((message-lambda 
         (make-message-lambda @(_willStartRenameWithTitle:editingRange:) ((:POINTER
                                                                           (:STRUCT
                                                                            NS::|_NSRange|))
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) editing-range)))

(defun NS::|titlebarAlphaValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarAlphaValue) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_sidebarTrackingAdapter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sidebarTrackingAdapter) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_trailingSidebarTrackingAdapter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_trailingSidebarTrackingAdapter) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|removeTitlebarAccessoryViewControllerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeTitlebarAccessoryViewControllerAtIndex:) ((:LONG-LONG)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_showToolbar:animate:| (thing _ animate)
  (let ((message-lambda 
         (make-message-lambda @(_showToolbar:animate:) ((:POINTER :CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if animate 1 0))))

(defun NS::|_hideToolbar:animate:| (thing _ animate)
  (let ((message-lambda 
         (make-message-lambda @(_hideToolbar:animate:) ((:POINTER :CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if animate 1 0))))

(defun NS::|_addToWindowsMenuIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_addToWindowsMenuIfNecessary) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasQueuedSheets| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasQueuedSheets) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_validSize:forFullScreen:force:| (thing _ for-full-screen force)
  (let ((message-lambda 
         (make-message-lambda @(_validSize:forFullScreen:force:) (((:POINTER
                                                                    (:STRUCT
                                                                     NS::|CGSize|))
                                                                   :CHAR :CHAR)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if for-full-screen 1 0) (if force 1 0))))

(defun NS::|disableSnapshotRestoration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableSnapshotRestoration) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|enableSnapshotRestoration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableSnapshotRestoration) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_transferWindowSharingSessionToWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_transferWindowSharingSessionToWindow:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_tabbedFullHeightSidebarsAreIndependent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tabbedFullHeightSidebarsAreIndependent) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|snapshotFromRect:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(snapshotFromRect:options:) (((:STRUCT
                                                              NS::|CGRect|)
                                                             :UNSIGNED-LONG-LONG)
                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ options)))

(defun NS::|_doRestoreComingFromDock:forceActivation:wantsToBeKey:| (thing _ force-activation wants-to-be-key)
  (let ((message-lambda 
         (make-message-lambda @(_doRestoreComingFromDock:forceActivation:wantsToBeKey:) ((:CHAR
                                                                                          :CHAR
                                                                                          :CHAR)
                                                                                         :INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if force-activation 1 0) (if wants-to-be-key 1 0))))

(defun NS::|_regularMinimizeToDock| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_regularMinimizeToDock) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|topLeftPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topLeftPoint) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|cascadeTopLeftFromPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cascadeTopLeftFromPoint:) (((:STRUCT
                                                             NS::|CGPoint|))
                                                           (:STRUCT
                                                            NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setExcludedFromWindowsMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setExcludedFromWindowsMenu:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setToolbarStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setToolbarStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_disablePosting| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_disablePosting) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_enablePosting| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enablePosting) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setNeedsZoom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsZoom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shouldZoomInDragRegionAtLocation:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldZoomInDragRegionAtLocation:) (((:STRUCT
                                                                       NS::|CGPoint|))
                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_validFrameForFrame:resizedFromEdge:| (thing _ resized-from-edge)
  (let ((message-lambda 
         (make-message-lambda @(_validFrameForFrame:resizedFromEdge:) (((:STRUCT
                                                                         NS::|CGRect|)
                                                                        :UNSIGNED-LONG-LONG)
                                                                       (:STRUCT
                                                                        NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ resized-from-edge)))

(defun NS::|resizeFlags| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resizeFlags) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|windowSectionController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowSectionController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|toggleUsingSmallToolbarIcons:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleUsingSmallToolbarIcons:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_newStandardItemWithItemIdentifier:willBeInsertedIntoToolbar:| (thing _ will-be-inserted-into-toolbar)
  (let ((message-lambda 
         (make-message-lambda @(_newStandardItemWithItemIdentifier:willBeInsertedIntoToolbar:) ((:POINTER
                                                                                                 :CHAR)
                                                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if will-be-inserted-into-toolbar 1 0))))

(defun NS::|_showingModalSheet| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_showingModalSheet) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_positionsToolbarInExternalWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_positionsToolbarInExternalWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_noteInstantiationFromWindowTemplate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_noteInstantiationFromWindowTemplate) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTitlebarSeparatorStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarSeparatorStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_windowResolution| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowResolution) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setWindowResolution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWindowResolution:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_backingStoreResolution| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_backingStoreResolution) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setBackingStoreResolution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setBackingStoreResolution:) ((:DOUBLE) :INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|changeToolbarDisplayModeToNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeToolbarDisplayModeToNumber:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_evilHackToClearlastLeftHitInWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_evilHackToClearlastLeftHitInWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|changeToolbarDisplayMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeToolbarDisplayMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_frameIsCurrentlyAnimating| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_frameIsCurrentlyAnimating) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_findFirstKeyViewInDirection:forKeyLoopGroupingView:| (thing _ for-key-loop-grouping-view)
  (let ((message-lambda 
         (make-message-lambda @(_findFirstKeyViewInDirection:forKeyLoopGroupingView:) ((:UNSIGNED-LONG-LONG
                                                                                        :POINTER)
                                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-key-loop-grouping-view))))

(defun NS::|_pauseUIHeartBeatingInView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_pauseUIHeartBeatingInView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_resumeUIHeartBeatingInView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_resumeUIHeartBeatingInView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setAnyViewCanDrawConcurrently:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAnyViewCanDrawConcurrently:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_incrementViewCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_incrementViewCount) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_decrementViewCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_decrementViewCount) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeAsSavedFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeAsSavedFirstResponder:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_viewDetaching:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_viewDetaching:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeTouchListener:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeTouchListener:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_didEndViewScrolling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_didEndViewScrolling) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_willBeginViewScrolling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_willBeginViewScrolling) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resumeWindowServerLayerHosting| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resumeWindowServerLayerHosting) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_suspendWindowServerLayerHosting| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_suspendWindowServerLayerHosting) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addTouchListener:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addTouchListener:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setNeedsDisplayInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNeedsDisplayInRect:) (((:STRUCT
                                                            NS::|CGRect|))
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_markDefaultButtonCellDirty| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_markDefaultButtonCellDirty) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasRegisteredForDragTypes| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasRegisteredForDragTypes) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_registerDragTypesLater| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_registerDragTypesLater) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_keyViewRedirectionDisabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_keyViewRedirectionDisabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setKeyViewRedirectionDisabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setKeyViewRedirectionDisabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setDisableInteraction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDisableInteraction:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_hierarchyDidChangeInView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_hierarchyDidChangeInView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_windowValidForDrawing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_windowValidForDrawing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_threadContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_threadContext) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|backingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backingType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_allowsCompositing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsCompositing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_copyNeedsDisplayRegionInRect:validateSubtractedRegion:| (thing _ validate-subtracted-region)
  (let ((message-lambda 
         (make-message-lambda @(_copyNeedsDisplayRegionInRect:validateSubtractedRegion:) (((:STRUCT
                                                                                            NS::|CGRect|)
                                                                                           :CHAR)
                                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if validate-subtracted-region 1 0))))

(defun NS::|_verifyDefaultButtonCellIfDirty| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_verifyDefaultButtonCellIfDirty) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_getRetainedLastFocusRingView:bleedRegion:| (thing _ bleed-region)
  (let ((message-lambda 
         (make-message-lambda @(_getRetainedLastFocusRingView:bleedRegion:) (((:POINTER
                                                                               :POINTER)
                                                                              (:POINTER
                                                                               :POINTER))
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr bleed-region))))

(defun NS::|_subtractFromNeedsDisplayRegion:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_subtractFromNeedsDisplayRegion:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_needsDisplayForEntireRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_needsDisplayForEntireRect:) (((:STRUCT
                                                                NS::|CGRect|))
                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_refreshWindowResizeConstraintsWithSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_refreshWindowResizeConstraintsWithSize:) (((:STRUCT
                                                                             NS::|CGSize|))
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_maskRoundedBottomCorners:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_maskRoundedBottomCorners:) (((:STRUCT
                                                               NS::|CGRect|))
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setDoingCacheDisplayInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDoingCacheDisplayInRect:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|canStoreColor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canStoreColor) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setKeyViewGroupBoundaryNeedsRecalc:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setKeyViewGroupBoundaryNeedsRecalc:) ((:CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_windowDidChangeAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowDidChangeAppearance) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_anyViewCanDrawConcurrently| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_anyViewCanDrawConcurrently) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|allowsConcurrentViewDrawing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsConcurrentViewDrawing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_registeredBackdropViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_registeredBackdropViews) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldSyncSurfaceToView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldSyncSurfaceToView) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|_synchronizeOverrideForActiveGestureRecognizers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_synchronizeOverrideForActiveGestureRecognizers) (NIL
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))









(defun NS::|_hasIncompatibleAppearanceOverride| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasIncompatibleAppearanceOverride) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_windowDeviceRound| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowDeviceRound) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_findKeyLoopGroupingViewFollowingKeyLoopGroupingView:direction:| (thing _ direction)
  (let ((message-lambda 
         (make-message-lambda @(_findKeyLoopGroupingViewFollowingKeyLoopGroupingView:direction:) ((:POINTER
                                                                                                   :UNSIGNED-LONG-LONG)
                                                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) direction)))

(defun NS::|_hasWindowRefCreatedForCarbonControl| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasWindowRefCreatedForCarbonControl) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|hasKeyAppearanceIncludingSheets:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasKeyAppearanceIncludingSheets:) ((:CHAR)
                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0)))) nil t))

(defun NS::|_autoPositionMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_autoPositionMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_adjustWindowFrame:fromScreen:toScreen:| (thing _ from-screen to-screen)
  (let ((message-lambda 
         (make-message-lambda @(_adjustWindowFrame:fromScreen:toScreen:) (((:POINTER
                                                                            (:STRUCT
                                                                             NS::|CGRect|))
                                                                           :POINTER
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-screen) (ns-object-ptr to-screen))))

(defun NS::|_isScreenLayoutAware| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isScreenLayoutAware) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setFrame:fromAdjustmentToScreen:animate:| (thing _ from-adjustment-to-screen animate)
  (let ((message-lambda 
         (make-message-lambda @(_setFrame:fromAdjustmentToScreen:animate:) (((:STRUCT
                                                                              NS::|CGRect|)
                                                                             :POINTER
                                                                             :CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-adjustment-to-screen) (if animate 1 0))))

(defun NS::|_setFrame:fromAdjustmentToScreen:anchorIfNeeded:animate:| (thing _ from-adjustment-to-screen anchor-if-needed animate)
  (let ((message-lambda 
         (make-message-lambda @(_setFrame:fromAdjustmentToScreen:anchorIfNeeded:animate:) (((:STRUCT
                                                                                             NS::|CGRect|)
                                                                                            :POINTER
                                                                                            (:POINTER
                                                                                             (:STRUCT
                                                                                              NS::|CGPoint|))
                                                                                            :CHAR)
                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-adjustment-to-screen) (ns-object-ptr anchor-if-needed) (if animate 1 0))))

(defun NS::|_suspendSavingWindowLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_suspendSavingWindowLayout) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resumeSavingWindowLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resumeSavingWindowLayout) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_saveWindowLayoutFrame:forScreen:| (thing _ for-screen)
  (let ((message-lambda 
         (make-message-lambda @(_saveWindowLayoutFrame:forScreen:) (((:STRUCT
                                                                      NS::|CGRect|)
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-screen))))

(defun NS::|_saveWindowLayoutForScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_saveWindowLayoutForScreen:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_screenForWindowLayoutAdjustment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_screenForWindowLayoutAdjustment) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_moveWindowFrame:fromScreen:toScreen:| (thing _ from-screen to-screen)
  (let ((message-lambda 
         (make-message-lambda @(_moveWindowFrame:fromScreen:toScreen:) (((:POINTER
                                                                          (:STRUCT
                                                                           NS::|CGRect|))
                                                                         :POINTER
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-screen) (ns-object-ptr to-screen))))

(defun NS::|_applyWindowLayoutForScreen:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_applyWindowLayoutForScreen:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_setFrame:fromAdjustmentToScreen:anchor:animate:| (thing _ from-adjustment-to-screen anchor animate)
  (let ((message-lambda 
         (make-message-lambda @(_setFrame:fromAdjustmentToScreen:anchor:animate:) (((:STRUCT
                                                                                     NS::|CGRect|)
                                                                                    :POINTER
                                                                                    (:STRUCT
                                                                                     NS::|CGPoint|)
                                                                                    :CHAR)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-adjustment-to-screen) anchor (if animate 1 0))))

(defun NS::|_adjustWindowFrame:forMoveFromScreen:toScreen:location:| (thing _ for-move-from-screen to-screen location)
  (let ((message-lambda 
         (make-message-lambda @(_adjustWindowFrame:forMoveFromScreen:toScreen:location:) (((:POINTER
                                                                                            (:STRUCT
                                                                                             NS::|CGRect|))
                                                                                           :POINTER
                                                                                           :POINTER
                                                                                           (:STRUCT
                                                                                            NS::|CGPoint|))
                                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-move-from-screen) (ns-object-ptr to-screen) location)))

(defun NS::|_windowLayoutWillResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowLayoutWillResize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_saveWindowLayoutForScreenLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_saveWindowLayoutForScreenLayout) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_restoreWindowLayoutsByScreenLayoutWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_restoreWindowLayoutsByScreenLayoutWithCoder:) ((:POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_encodeWindowLayoutsByScreenLayoutWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_encodeWindowLayoutsByScreenLayoutWithCoder:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_isToolTipCreationAndDisplayEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isToolTipCreationAndDisplayEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setWantsToBeOnMainScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWantsToBeOnMainScreen:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_fromScreenCommonCode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_fromScreenCommonCode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setBackingScaleFactor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setBackingScaleFactor:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_borderViewChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_borderViewChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setDisplaysWhenScreenProfileChanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDisplaysWhenScreenProfileChanges:) ((:CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setAutorecalculatesContentBorderThickness:forEdge:| (thing _ for-edge)
  (let ((message-lambda 
         (make-message-lambda @(setAutorecalculatesContentBorderThickness:forEdge:) ((:CHAR
                                                                                      :UNSIGNED-LONG-LONG)
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) for-edge)))

(defun NS::|_creationCallStackSymbols| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_creationCallStackSymbols) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowResizeConstraints_borderViewChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowResizeConstraints_borderViewChanged) (NIL
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setViewsNeedLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setViewsNeedLayout:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_commonInitFrame:styleMask:backing:defer:| (thing _ style-mask backing defer)
  (let ((message-lambda 
         (make-message-lambda @(_commonInitFrame:styleMask:backing:defer:) (((:STRUCT
                                                                              NS::|CGRect|)
                                                                             :UNSIGNED-LONG-LONG
                                                                             :UNSIGNED-LONG-LONG
                                                                             :CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ style-mask backing (if defer 1 0))))

(defun NS::|_updateEventMaskDueToInit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateEventMaskDueToInit) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setOrderFrontAnimationType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setOrderFrontAnimationType:) ((:LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_initFromGlobalWindow:inRect:styleMask:| (thing _ in-rect style-mask)
  (let ((message-lambda 
         (make-message-lambda @(_initFromGlobalWindow:inRect:styleMask:) ((:LONG-LONG
                                                                           (:POINTER
                                                                            (:STRUCT
                                                                             NS::|CGRect|))
                                                                           :UNSIGNED-LONG-LONG)
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-rect) style-mask)))

(defun NS::|_unregisterDragTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unregisterDragTypes) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cancelPerformSelectors| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cancelPerformSelectors) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeEventHandlers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeEventHandlers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unbindTitleIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unbindTitleIfNecessary) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setFirstResponderIvar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setFirstResponderIvar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_resetUndoManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resetUndoManager) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_getActiveUndoManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_getActiveUndoManager) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_firstResponderIvar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_firstResponderIvar) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_changeAllAttachmentsFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_changeAllAttachmentsFirstResponder) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_alwaysOnTop| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_alwaysOnTop) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_preventsActivation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_preventsActivation) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_allowedInOtherAppsFullScreenSpaceWithCollectionBehavior:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowedInOtherAppsFullScreenSpaceWithCollectionBehavior:) ((:UNSIGNED-LONG-LONG)
                                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_allowedInDashboardSpaceWithCollectionBehavior:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowedInDashboardSpaceWithCollectionBehavior:) ((:UNSIGNED-LONG-LONG)
                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_supportsDockInitiatedFullScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_supportsDockInitiatedFullScreen) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_canEnterTileMode| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canEnterTileMode) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_adjustWindowResolution| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_adjustWindowResolution) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_adjustColorSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_adjustColorSpace:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|hasDynamicDepthLimit| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasDynamicDepthLimit) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateEventMaskDueToCommonAwake| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateEventMaskDueToCommonAwake) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_registerWithDockIfNeeded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_registerWithDockIfNeeded) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_backingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_backingType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_titleForWindowsMenuItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_titleForWindowsMenuItem) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dosetTitle:andDefeatWrap:| (thing _ and-defeat-wrap)
  (let ((message-lambda 
         (make-message-lambda @(_dosetTitle:andDefeatWrap:) ((:POINTER :CHAR)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if and-defeat-wrap 1 0))))

(defun NS::|_setRepresentedURL:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setRepresentedURL:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_calcAndSetFilenameTitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_calcAndSetFilenameTitle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|guessDockTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(guessDockTitle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_toolbarPillButtonClicked:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_toolbarPillButtonClicked:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|lockButtonClicked:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lockButtonClicked:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_isView:standardWindowButtonOfType:| (thing _ standard-window-button-of-type)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isView:standardWindowButtonOfType:) ((:POINTER
                                                                       :UNSIGNED-LONG-LONG)
                                                                      :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) standard-window-button-of-type))) nil t))

(defun NS::|_findOrMakeStandardWindowButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_findOrMakeStandardWindowButton:) ((:UNSIGNED-LONG-LONG)
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_needsToRemoveFieldEditor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_needsToRemoveFieldEditor) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_reallySetFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_reallySetFrame:) (((:STRUCT NS::|CGRect|))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_cgsPlaceWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cgsPlaceWindow:) (((:STRUCT NS::|CGRect|))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setWindowResizeConstraintSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWindowResizeConstraintSize:) (((:STRUCT
                                                                    NS::|CGSize|))
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_layoutViewTree| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutViewTree) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_invalidateCompositedBackground| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateCompositedBackground) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_saveUserFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_saveUserFrame) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_checkForImplicitRemovalFromMovementGroupWhenMovingToFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_checkForImplicitRemovalFromMovementGroupWhenMovingToFrame:) (((:STRUCT
                                                                                                NS::|CGRect|))
                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_stopClientSideMove| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_stopClientSideMove) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cgsWindowRelativeMoveChildrenWithGroupWithDelta:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cgsWindowRelativeMoveChildrenWithGroupWithDelta:) (((:STRUCT
                                                                                      NS::|CGPoint|))
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_adjustChildWindowMovementOffsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_adjustChildWindowMovementOffsets) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|allowsInteriorShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsInteriorShadow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_cornerMaskShouldDefineShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_cornerMaskShouldDefineShadow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateSettingsSendingScreenChangeNotificationToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateSettingsSendingScreenChangeNotificationToScreen:) ((:POINTER)
                                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_updateInheritedColorSpaceIfNeeded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_updateInheritedColorSpaceIfNeeded) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateInheritedBackingScaleFactorIfNeeded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_updateInheritedBackingScaleFactorIfNeeded) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_postWindowDidChangeBackingPropertiesAndDisplayWindowForPreviousBackingScaleFactor:previousColorSpace:| (thing _ previous-color-space)
  (let ((message-lambda 
         (make-message-lambda @(_postWindowDidChangeBackingPropertiesAndDisplayWindowForPreviousBackingScaleFactor:previousColorSpace:) ((:DOUBLE
                                                                                                                                          :POINTER)
                                                                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr previous-color-space))))

(defun NS::|_frameOriginIsCurrentlyAnimating| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_frameOriginIsCurrentlyAnimating) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_canAdjustSizeForScreensHaveSeparateSpacesIfFillingSecondaryScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canAdjustSizeForScreensHaveSeparateSpacesIfFillingSecondaryScreen) (NIL
                                                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_ownerOnly| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_ownerOnly) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_startClientSideMove| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_startClientSideMove) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_adjustNeedsDisplayRegionForNewFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_adjustNeedsDisplayRegionForNewFrame:) (((:STRUCT
                                                                          NS::|CGRect|))
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_updateStateForMoveBackToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateStateForMoveBackToScreen:) ((:LONG-LONG)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setFrame:display:allowImplicitAnimation:stashSize:| (thing _ display allow-implicit-animation stash-size)
  (let ((message-lambda 
         (make-message-lambda @(_setFrame:display:allowImplicitAnimation:stashSize:) (((:STRUCT
                                                                                        NS::|CGRect|)
                                                                                       :CHAR
                                                                                       :CHAR
                                                                                       :CHAR)
                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if display 1 0) (if allow-implicit-animation 1 0) (if stash-size 1 0))))

(defun NS::|_setFrameCommon:display:stashSize:| (thing _ display stash-size)
  (let ((message-lambda 
         (make-message-lambda @(_setFrameCommon:display:stashSize:) (((:STRUCT
                                                                       NS::|CGRect|)
                                                                      :CHAR
                                                                      :CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if display 1 0) (if stash-size 1 0))))

(defun NS::|_adjustedOriginAroundAnchorPointForSize:fromFrame:| (thing _ from-frame)
  (let ((message-lambda 
         (make-message-lambda @(_adjustedOriginAroundAnchorPointForSize:fromFrame:) (((:STRUCT
                                                                                       NS::|CGSize|)
                                                                                      (:STRUCT
                                                                                       NS::|CGRect|))
                                                                                     (:STRUCT
                                                                                      NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ from-frame)))

(defun NS::|_windowIsBeingMoved| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_windowIsBeingMoved) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_shouldIgnoreSetFrameOrigin| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldIgnoreSetFrameOrigin) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setShadowParameters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setShadowParameters) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_bestScreenBySpaceAssignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_bestScreenBySpaceAssignment) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateSettingsSendingScreenChangeNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateSettingsSendingScreenChangeNotification) (NIL
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isEffectivelyTitled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isEffectivelyTitled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hasCornerMask| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasCornerMask) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_fullScreenStatusChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fullScreenStatusChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateFullHeightSidebarStatus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateFullHeightSidebarStatus) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateCollectionBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateCollectionBehavior) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setRegisteredBackdropViews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setRegisteredBackdropViews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isFlushWindowDisabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFlushWindowDisabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|shadowStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowStyle) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_forceInactiveShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_forceInactiveShadow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|shadowParameters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowParameters) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setShadowActiveState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setShadowActiveState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_viewsNeedLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_viewsNeedLayout) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|viewsNeedDisplay| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(viewsNeedDisplay) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_postWindowNeedsToResetDragMarginsUnlessPostingDisabled| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postWindowNeedsToResetDragMarginsUnlessPostingDisabled) (NIL
                                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_functionRowContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_functionRowContext) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_lockFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_lockFirstResponder) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_saveFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_saveFirstResponder) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unlockFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unlockFirstResponder) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_makeParentWindowHaveFirstResponder:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_makeParentWindowHaveFirstResponder:) ((:POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_secondaryKeyMakeFirstResponder:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_secondaryKeyMakeFirstResponder:) ((:POINTER)
                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_realMakeFirstResponder:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_realMakeFirstResponder:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_validateFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_validateFirstResponder:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_drawKeyboardUILoopStartingAtResponder:validOnly:| (thing _ valid-only)
  (let ((message-lambda 
         (make-message-lambda @(_drawKeyboardUILoopStartingAtResponder:validOnly:) ((:POINTER
                                                                                     :CHAR)
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if valid-only 1 0))))

(defun NS::|_keyViewLoopsMayCrossWindows| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_keyViewLoopsMayCrossWindows) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_drawKeyboardUIIndicationForView:debuggingIndex:| (thing _ debugging-index)
  (let ((message-lambda 
         (make-message-lambda @(_drawKeyboardUIIndicationForView:debuggingIndex:) ((:POINTER
                                                                                    :POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr debugging-index))))

(defun NS::|_shouldIncludeTitlebarAccessoryViewsInKeyViewLoop| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldIncludeTitlebarAccessoryViewsInKeyViewLoop) (NIL
                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_performToggleToolbarShown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_performToggleToolbarShown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|changeToolBarDisplayModeToDisplayMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeToolBarDisplayModeToDisplayMode:) ((:UNSIGNED-LONG-LONG)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_toolbarButtonIsClickable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_toolbarButtonIsClickable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_toggleToolbarConfigPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_toggleToolbarConfigPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setNextToolbarSizeAndDisplayMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNextToolbarSizeAndDisplayMode:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setPreviousToolbarSizeAndDisplayMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setPreviousToolbarSizeAndDisplayMode:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shouldDoClientSideDragging| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldDoClientSideDragging) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_beginWindowDragWithEvent:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(_beginWindowDragWithEvent:options:) ((:POINTER
                                                                      :UNSIGNED-LONG-LONG)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) options)))

(defun NS::|_beginWindowDragWithEvent:options:completionHandler:| (thing _ options completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(_beginWindowDragWithEvent:options:completionHandler:) ((:POINTER
                                                                                        :UNSIGNED-LONG-LONG
                                                                                        :POINTER)
                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) options (ns-object-ptr completion-handler))))

(defun NS::|_dragWindowRelativeToMouseDown:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(_dragWindowRelativeToMouseDown:options:) (((:STRUCT
                                                                            NS::|CGPoint|)
                                                                           :UNSIGNED-LONG-LONG)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ options)))

(defun NS::|_shouldStartWindowDragForEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldStartWindowDragForEvent:) ((:POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_isDraggable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isDraggable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_showDragBeginFeedback| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_showDragBeginFeedback) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tryWindowDragWithEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tryWindowDragWithEvent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_allowsMoving| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsMoving) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_startWindowDragWithEvent:animate:| (thing _ animate)
  (let ((message-lambda 
         (make-message-lambda @(_startWindowDragWithEvent:animate:) ((:POINTER
                                                                      :CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if animate 1 0))))

(defun NS::|_canEnterFullScreenOrTileMode| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canEnterFullScreenOrTileMode) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_maximizeTileToFillScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_maximizeTileToFillScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|mouseConfinementRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mouseConfinementRect) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_adjustDynamicDepthLimit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_adjustDynamicDepthLimit) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setFrameAfterMove:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setFrameAfterMove:) (((:STRUCT NS::|CGRect|))
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_windowMovedToRect:dueToMoveEvent:| (thing _ due-to-move-event)
  (let ((message-lambda 
         (make-message-lambda @(_windowMovedToRect:dueToMoveEvent:) (((:STRUCT
                                                                       NS::|CGRect|)
                                                                      :CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if due-to-move-event 1 0))))

(defun NS::|_bestScreenByGeometryOfFrame:avoidingFullScreen:| (thing _ avoiding-full-screen)
  (let ((message-lambda 
         (make-message-lambda @(_bestScreenByGeometryOfFrame:avoidingFullScreen:) (((:STRUCT
                                                                                     NS::|CGRect|)
                                                                                    :CHAR)
                                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if avoiding-full-screen 1 0))))

(defun NS::|_updateSavedFrameForFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateSavedFrameForFullScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resolveAnySpaceMisassignmentByUpdatingManagedDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resolveAnySpaceMisassignmentByUpdatingManagedDisplay) (NIL
                                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_displayChangedSoAdjustWindows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_displayChangedSoAdjustWindows:) ((:CHAR)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_displayResolutionChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_displayResolutionChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|displaysWhenScreenProfileChanges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(displaysWhenScreenProfileChanges) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_colorSpaceIsInherited| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_colorSpaceIsInherited) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_defaultColorSpaceForScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_defaultColorSpaceForScreen) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setColorSpace:sendNotification:displayIfChanged:| (thing _ send-notification display-if-changed)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_setColorSpace:sendNotification:displayIfChanged:) ((:POINTER
                                                                                     :CHAR
                                                                                     :CHAR)
                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if send-notification 1 0) (if display-if-changed 1 0)))) nil t))

(defun NS::|_displayProfileChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_displayProfileChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldDockWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldDockWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_attemptToShowDockWindowFeedbackWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_attemptToShowDockWindowFeedbackWithEvent:) ((:POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_windowDockRectEdgesFromPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_windowDockRectEdgesFromPoint:) (((:STRUCT
                                                                   NS::|CGPoint|))
                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_updateWindowDockFeedbackAtRectEdges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateWindowDockFeedbackAtRectEdges:) ((:UNSIGNED-LONG-LONG)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_rectEdgesForDocking| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_rectEdgesForDocking) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowDockFeedbackWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowDockFeedbackWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_attemptToDockWindowOnRectEdges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_attemptToDockWindowOnRectEdges:) ((:UNSIGNED-LONG-LONG)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_validSize:force:| (thing _ force)
  (let ((message-lambda 
         (make-message-lambda @(_validSize:force:) (((:POINTER
                                                      (:STRUCT NS::|CGSize|))
                                                     :CHAR)
                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if force 1 0))))

(defun NS::|setUnsnappedFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUnsnappedFrame:) (((:STRUCT NS::|CGRect|))
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_unsnapFrameWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_unsnapFrameWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setWindowDockFeedbackWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWindowDockFeedbackWindow:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_makeGhostContentViewWithFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_makeGhostContentViewWithFrame:) (((:STRUCT
                                                                    NS::|CGRect|))
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_makeGhostFeedbackWindowWithFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_makeGhostFeedbackWindowWithFrame:) (((:STRUCT
                                                                       NS::|CGRect|))
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_windowDockingEventMonitor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowDockingEventMonitor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setWindowDockingEventMonitor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWindowDockingEventMonitor:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_showDockFeedbackWindowAtRectEdges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_showDockFeedbackWindowAtRectEdges:) ((:UNSIGNED-LONG-LONG)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_interruptFrameAnimations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_interruptFrameAnimations) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_makeSnappingInfo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_makeSnappingInfo) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|unsnappedFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsnappedFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_attemptToUndockWindowWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_attemptToUndockWindowWithEvent:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_sendWindowWillStartDragging| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sendWindowWillStartDragging) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_attemptToDockWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_attemptToDockWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeWindowDockingEventMonitor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeWindowDockingEventMonitor) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unsnapCatchupAnimation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unsnapCatchupAnimation) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setUnsnapCatchupAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setUnsnapCatchupAnimation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_sendWindowDidEndDragging| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sendWindowDidEndDragging) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_frameFromMoveData:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_frameFromMoveData:) ((:POINTER)
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shouldSnapForEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldSnapForEvent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_makeCatchupAnimationWithMoveData:catchupSize:| (thing _ catchup-size)
  (let ((message-lambda 
         (make-message-lambda @(_makeCatchupAnimationWithMoveData:catchupSize:) ((:POINTER
                                                                                  (:STRUCT
                                                                                   NS::|CGSize|))
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) catchup-size)))

(defun NS::|_internalHandleWindowMovedWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_internalHandleWindowMovedWithEvent:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_attemptSnapFrameWithMoveData:event:| (thing _ event)
  (let ((message-lambda 
         (make-message-lambda @(_attemptSnapFrameWithMoveData:event:) ((:POINTER
                                                                        :POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr event))))

(defun NS::|_windowExposed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_windowExposed:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_hideMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_hideMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_handleWindowShouldCloseEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleWindowShouldCloseEvent:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_doDockingForWindowMovementWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_doDockingForWindowMovementWithEvent:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_addWindowDockingEventMonitorIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_addWindowDockingEventMonitorIfNeeded) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_startShowingWindowDockingFeedback| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_startShowingWindowDockingFeedback) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setRectEdgesForDocking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setRectEdgesForDocking:) ((:UNSIGNED-LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_hideDockFeedbackWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_hideDockFeedbackWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cancelShowingDockWindowFeedback| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cancelShowingDockWindowFeedback) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_scheduleShowingDockWindowFeedback| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scheduleShowingDockWindowFeedback) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_changeJustMain| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_changeJustMain) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_childWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_childWindows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_canBecomeSecondaryKeyWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canBecomeSecondaryKeyWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_enableEnablingKeyEquivalentForDefaultButtonCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enableEnablingKeyEquivalentForDefaultButtonCell) (NIL
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|defaultButtonCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(defaultButtonCell) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowWillBecomeFullScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_windowWillBecomeFullScreen) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_updateEventMaskDueToResigningKey| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateEventMaskDueToResigningKey) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|resignMainAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignMainAppearance) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateWindowsMenuItemIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateWindowsMenuItemIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|acquireMainAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(acquireMainAppearance) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_changeAllAttachmentsMainState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_changeAllAttachmentsMainState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setTransformForAnimation:anchorPoint:| (thing _ anchor-point)
  (let ((message-lambda 
         (make-message-lambda @(_setTransformForAnimation:anchorPoint:) (((:STRUCT
                                                                           NS::|CGAffineTransform|)
                                                                          (:STRUCT
                                                                           NS::|CGPoint|))
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ anchor-point)))

(defun NS::|_enumerateAnimatedGlobalWindowsUsingBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_enumerateAnimatedGlobalWindowsUsingBlock:) ((:POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_orderFrontAnimationType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_orderFrontAnimationType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_effectiveAnimationBehaviorIfModal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveAnimationBehaviorIfModal:) ((:CHAR)
                                                                      :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_sendWindowChangedKeyStateIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sendWindowChangedKeyStateIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_changeAllAttachmentsKeyState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_changeAllAttachmentsKeyState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_commonPerformKeyEquivalent:conditionally:| (thing _ conditionally)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_commonPerformKeyEquivalent:conditionally:) ((:POINTER
                                                                              :CHAR)
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if conditionally 1 0)))) nil t))

(defun NS::|_setPreferredNextWindowToSelect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setPreferredNextWindowToSelect:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setIsMinimized:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIsMinimized:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_finishClosingWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_finishClosingWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_close| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_close) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hasSiblingSpaceWhenFullScreenPrefersModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasSiblingSpaceWhenFullScreenPrefersModal) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_miniturizeFromFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_miniturizeFromFullScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_minimizeToDock| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_minimizeToDock) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_beginWindowSharingSessionWithWindowController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_beginWindowSharingSessionWithWindowController:) ((:POINTER)
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_standardFrameForScreen:isMoveToiPad:| (thing _ is-move-toi-pad)
  (let ((message-lambda 
         (make-message-lambda @(_standardFrameForScreen:isMoveToiPad:) ((:POINTER
                                                                         :CHAR)
                                                                        (:STRUCT
                                                                         NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if is-move-toi-pad 1 0))))

(defun NS::|_adjustFrame:fittingRect:| (thing _ fitting-rect)
  (let ((message-lambda 
         (make-message-lambda @(_adjustFrame:fittingRect:) (((:STRUCT
                                                              NS::|CGRect|)
                                                             (:STRUCT
                                                              NS::|CGRect|))
                                                            (:STRUCT
                                                             NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ fitting-rect)))

(defun NS::|_validateSizeUsingConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_validateSizeUsingConstraints:) (((:POINTER
                                                                   (:STRUCT
                                                                    NS::|CGSize|)))
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_visibleTileFrameForFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_visibleTileFrameForFullScreen) (NIL
                                                                 (:STRUCT
                                                                  NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_standardFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_standardFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_zoomToScreenEdge:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_zoomToScreenEdge:) ((:UNSIGNED-LONG-LONG)
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_revertZoomToEdge| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_revertZoomToEdge) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_enterATUWithTileOnLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_enterATUWithTileOnLeft:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_screenForMoveBack| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_screenForMoveBack) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_zoomToFrame:willChangeScreens:toIPad:zoomState:| (thing _ will-change-screens to-i-pad zoom-state)
  (let ((message-lambda 
         (make-message-lambda @(_zoomToFrame:willChangeScreens:toIPad:zoomState:) (((:STRUCT
                                                                                     NS::|CGRect|)
                                                                                    :CHAR
                                                                                    :CHAR
                                                                                    :UNSIGNED-LONG-LONG)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if will-change-screens 1 0) (if to-i-pad 1 0) zoom-state)))

(defun NS::|_crossfadeMoveToFrame:forAdjustmentToScreen:| (thing _ for-adjustment-to-screen)
  (let ((message-lambda 
         (make-message-lambda @(_crossfadeMoveToFrame:forAdjustmentToScreen:) (((:STRUCT
                                                                                 NS::|CGRect|)
                                                                                :POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-adjustment-to-screen))))

(defun NS::|_zoomToScreen:isMoveToiPad:| (thing _ is-move-toi-pad)
  (let ((message-lambda 
         (make-message-lambda @(_zoomToScreen:isMoveToiPad:) ((:POINTER :CHAR)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if is-move-toi-pad 1 0))))

(defun NS::|_prepareToZoom| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_prepareToZoom) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_saveCurrentZoomState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_saveCurrentZoomState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_divideFrameForEdge:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_divideFrameForEdge:) ((:UNSIGNED-LONG-LONG)
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_sidecarMenuController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sidecarMenuController) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_generateCompositedBackground| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_generateCompositedBackground) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_compositedBackground| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_compositedBackground) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateWindowCanServerSideDrag| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateWindowCanServerSideDrag) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowDepth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowDepth) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resolveAutomaticEnterFullScreenFlags| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resolveAutomaticEnterFullScreenFlags) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_preferredNextWindowToSelect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_preferredNextWindowToSelect) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_orderOutAndCalcKeyWithCounter:stillVisible:docWindow:| (thing _ still-visible doc-window)
  (let ((message-lambda 
         (make-message-lambda @(_orderOutAndCalcKeyWithCounter:stillVisible:docWindow:) ((:CHAR
                                                                                          :CHAR
                                                                                          :POINTER)
                                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if still-visible 1 0) (ns-object-ptr doc-window))))

(defun NS::|_setUpFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setUpFirstResponder) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postWindowWillOrderOnScreenNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postWindowWillOrderOnScreenNotification) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_postWillOrderOffScreenNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_postWillOrderOffScreenNotification) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldReallyOrderWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldReallyOrderWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_preferredPositionForTileJoin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_preferredPositionForTileJoin) (NIL
                                                                :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_enterAutomaticFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enterAutomaticFullScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_markAppropriateForAutomaticFullScreenMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_markAppropriateForAutomaticFullScreenMode:) ((:CHAR)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isRestorable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRestorable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_positionWindowOnBestScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_positionWindowOnBestScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doWindowWillBeVisibleAsSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_doWindowWillBeVisibleAsSheet:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_performSpecialWindowOrderingWasEffectivelyVisible:place:relativeTo:| (thing _ place relative-to)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_performSpecialWindowOrderingWasEffectivelyVisible:place:relativeTo:) ((:CHAR
                                                                                                        :LONG-LONG
                                                                                                        :LONG-LONG)
                                                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) place relative-to))) nil t))

(defun NS::|_orderPanelIfActiveWithOrderingMode:otherWin:| (thing _ other-win)
  (let ((message-lambda 
         (make-message-lambda @(_orderPanelIfActiveWithOrderingMode:otherWin:) ((:LONG-LONG
                                                                                 :LONG-LONG)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ other-win)))

(defun NS::|_shouldParticipateInBatchOrdering:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldParticipateInBatchOrdering:) ((:LONG-LONG)
                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_doWindowWillBecomeHidden| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doWindowWillBecomeHidden) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_endWindowSharingSessionForOrderOutIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endWindowSharingSessionForOrderOutIfNeeded) (NIL
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doWindowOrderOutWithWithKeyCalc:forCounter:orderingDone:docWindow:| (thing _ for-counter ordering-done doc-window)
  (let ((message-lambda 
         (make-message-lambda @(_doWindowOrderOutWithWithKeyCalc:forCounter:orderingDone:docWindow:) ((:CHAR
                                                                                                       :CHAR
                                                                                                       :CHAR
                                                                                                       :POINTER)
                                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if for-counter 1 0) (if ordering-done 1 0) (ns-object-ptr doc-window))))

(defun NS::|_updateEventMaskDueToOrderedOut| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateEventMaskDueToOrderedOut) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doOrderOutEndedButAttachedSheets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doOrderOutEndedButAttachedSheets) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_reallyDoOrderWindowAboveOrBelow:relativeTo:findKey:forCounter:force:isModal:| (thing _ relative-to find-key for-counter force is-modal)
  (let ((message-lambda 
         (make-message-lambda @(_reallyDoOrderWindowAboveOrBelow:relativeTo:findKey:forCounter:force:isModal:) ((:LONG-LONG
                                                                                                                 :LONG-LONG
                                                                                                                 :CHAR
                                                                                                                 :CHAR
                                                                                                                 :CHAR
                                                                                                                 :CHAR)
                                                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ relative-to (if find-key 1 0) (if for-counter 1 0) (if force 1 0) (if is-modal 1 0))))

(defun NS::|_reallyDoOrderWindowOutRelativeTo:findKey:forCounter:force:isModal:| (thing _ find-key for-counter force is-modal)
  (let ((message-lambda 
         (make-message-lambda @(_reallyDoOrderWindowOutRelativeTo:findKey:forCounter:force:isModal:) ((:LONG-LONG
                                                                                                       :CHAR
                                                                                                       :CHAR
                                                                                                       :CHAR
                                                                                                       :CHAR)
                                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if find-key 1 0) (if for-counter 1 0) (if force 1 0) (if is-modal 1 0))))

(defun NS::|_windowTransformAnimationDidEnd:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_windowTransformAnimationDidEnd:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shouldRemoveFromParentIfPossible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldRemoveFromParentIfPossible) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_shouldEnterFullScreenModeOnOrderIn| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldEnterFullScreenModeOnOrderIn) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_removeFromParentIfPossible| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeFromParentIfPossible) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doOrderWindowWithoutAnimation:relativeTo:findKey:forCounter:force:isModal:| (thing _ relative-to find-key for-counter force is-modal)
  (let ((message-lambda 
         (make-message-lambda @(_doOrderWindowWithoutAnimation:relativeTo:findKey:forCounter:force:isModal:) ((:LONG-LONG
                                                                                                               :LONG-LONG
                                                                                                               :CHAR
                                                                                                               :CHAR
                                                                                                               :CHAR
                                                                                                               :CHAR)
                                                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ relative-to (if find-key 1 0) (if for-counter 1 0) (if force 1 0) (if is-modal 1 0))))

(defun NS::|_setRunningWindowTransformAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setRunningWindowTransformAnimation:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_applyWindowLevelWithTagUpdateNeeded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_applyWindowLevelWithTagUpdateNeeded:) ((:CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setAlwaysOnTop:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAlwaysOnTop:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_hideChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_hideChildren) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_unhideChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_unhideChildren) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|cacheMiniwindowTitle:guess:| (thing _ guess)
  (let ((message-lambda 
         (make-message-lambda @(cacheMiniwindowTitle:guess:) ((:POINTER :CHAR)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if guess 1 0))))

(defun NS::|_setDocumentEdited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDocumentEdited:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_windowDidExistAtLaunch| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_windowDidExistAtLaunch) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|timeMachineDelegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeMachineDelegate) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|__close| (thing)
  (let ((message-lambda 
         (make-message-lambda @(__close) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|miniwindowTitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(miniwindowTitle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_minimizeSucceeded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_minimizeSucceeded:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_changeAllAttachmentsVisibleWithoutLogin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_changeAllAttachmentsVisibleWithoutLogin) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_defaultCollectionBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_defaultCollectionBehavior) (NIL
                                                             :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_implicitlyAllowsFullScreenAuxiliary| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_implicitlyAllowsFullScreenAuxiliary) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_implicitlyDisallowTiling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_implicitlyDisallowTiling) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_implicitlyTileable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_implicitlyTileable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_allowsFullScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsFullScreen) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_allowsTiling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsTiling) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_cacheAndSetPropertiesForCollectionBehavior:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cacheAndSetPropertiesForCollectionBehavior:) ((:UNSIGNED-LONG-LONG)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_validateCollectionBehavior:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_validateCollectionBehavior:) ((:UNSIGNED-LONG-LONG)
                                                               :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_canEnterTileModeForBehavior:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canEnterTileModeForBehavior:) ((:UNSIGNED-LONG-LONG)
                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_topmostVisibleCanBecomeKeyAttachedSheet| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_topmostVisibleCanBecomeKeyAttachedSheet) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|hasMainAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasMainAppearance) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|_invalidateWindowConstraintsMinMaxSizeCache| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateWindowConstraintsMinMaxSizeCache) (NIL
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_registerSidebarAdapter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_registerSidebarAdapter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setSidebarTrackingAdapter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSidebarTrackingAdapter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|registerScrollViewSeparatorTrackingAdapter:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(registerScrollViewSeparatorTrackingAdapter:) ((:POINTER)
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|unregisterScrollViewSeparatorTrackingAdapter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unregisterScrollViewSeparatorTrackingAdapter:) ((:POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setTrailingSidebarTrackingAdapter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTrailingSidebarTrackingAdapter:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_stringWithFrame:onScreen:adjustingForToolbar:| (thing _ on-screen adjusting-for-toolbar)
  (let ((message-lambda 
         (make-message-lambda @(_stringWithFrame:onScreen:adjustingForToolbar:) (((:STRUCT
                                                                                   NS::|CGRect|)
                                                                                  :POINTER
                                                                                  :CHAR)
                                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr on-screen) (if adjusting-for-toolbar 1 0))))

(defun NS::|_stringWithSavedFrameAdjustingForToolbar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_stringWithSavedFrameAdjustingForToolbar:) ((:CHAR)
                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_stringWithSavedFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_stringWithSavedFrame) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_convertAdjustedFrameFromDefaults:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_convertAdjustedFrameFromDefaults:) (((:STRUCT
                                                                       NS::|CGRect|))
                                                                     (:STRUCT
                                                                      NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setFrameFromString:overrideTopLeft:preferActiveDisplay:constrainFullFrame:force:| (thing _ override-top-left prefer-active-display constrain-full-frame force)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_setFrameFromString:overrideTopLeft:preferActiveDisplay:constrainFullFrame:force:) ((:POINTER
                                                                                                                     (:POINTER
                                                                                                                      (:STRUCT
                                                                                                                       NS::|CGPoint|))
                                                                                                                     :CHAR
                                                                                                                     :CHAR
                                                                                                                     :CHAR)
                                                                                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr override-top-left) (if prefer-active-display 1 0) (if constrain-full-frame 1 0) (if force 1 0)))) nil t))

(defun NS::|_setFrameUsingName:domain:force:| (thing _ domain force)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_setFrameUsingName:domain:force:) ((:POINTER
                                                                    :POINTER
                                                                    :CHAR)
                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr domain) (if force 1 0)))) nil t))

(defun NS::|_wouldBeSufficientlyUnclippedOnSpace:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wouldBeSufficientlyUnclippedOnSpace:) ((:UNSIGNED-LONG-LONG)
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_enterFullScreenModeOnTileSpaceWithName:takeOwnership:| (thing _ take-ownership)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_enterFullScreenModeOnTileSpaceWithName:takeOwnership:) ((:POINTER
                                                                                          :CHAR)
                                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if take-ownership 1 0)))) nil t))

(defun NS::|_enterFullScreenModeForRestoration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enterFullScreenModeForRestoration) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_minimizationSeed| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_minimizationSeed) (NIL :UNSIGNED-INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_copyTileSpaceName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_copyTileSpaceName) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_copyWorkspaceIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_copyWorkspaceIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_restorableStateRepresentedURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_restorableStateRepresentedURL) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_fullScreenTileFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fullScreenTileFrame) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_enforceFullScreenRestrictionForFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_enforceFullScreenRestrictionForFrame:) (((:STRUCT
                                                                           NS::|CGRect|))
                                                                         (:STRUCT
                                                                          NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_enforceMenuBarAvoidanceForFrame:onScreen:| (thing _ on-screen)
  (let ((message-lambda 
         (make-message-lambda @(_enforceMenuBarAvoidanceForFrame:onScreen:) (((:STRUCT
                                                                               NS::|CGRect|)
                                                                              :POINTER)
                                                                             (:STRUCT
                                                                              NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr on-screen))))

(defun NS::|_defeatsOverrideOfFullScreenAvoidance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_defeatsOverrideOfFullScreenAvoidance) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_minFullScreenContentSizeForFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_minFullScreenContentSizeForFrame:) (((:STRUCT
                                                                       NS::|CGRect|))
                                                                     (:STRUCT
                                                                      NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_tilePreferredSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tilePreferredSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setTileMinSize:tileMaxSize:tilePreferredSize:| (thing _ tile-max-size tile-preferred-size)
  (let ((message-lambda 
         (make-message-lambda @(_setTileMinSize:tileMaxSize:tilePreferredSize:) (((:STRUCT
                                                                                   NS::|CGSize|)
                                                                                  (:STRUCT
                                                                                   NS::|CGSize|)
                                                                                  (:STRUCT
                                                                                   NS::|CGSize|))
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ tile-max-size tile-preferred-size)))

(defun NS::|_getConstrainedWindowMinSize:maxSize:| (thing _ max-size)
  (let ((message-lambda 
         (make-message-lambda @(_getConstrainedWindowMinSize:maxSize:) (((:POINTER
                                                                          (:STRUCT
                                                                           NS::|CGSize|))
                                                                         (:POINTER
                                                                          (:STRUCT
                                                                           NS::|CGSize|)))
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr max-size))))

(defun NS::|_commonMinMaxSizeChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_commonMinMaxSizeChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_discardWindowResizeConstraintsAndMarkAsNeedingUpdate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_discardWindowResizeConstraintsAndMarkAsNeedingUpdate) (NIL
                                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doesOwnRealWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_doesOwnRealWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_runningDocModalOrFauxModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_runningDocModalOrFauxModal) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|editTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(editTitle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_titleMightBeEditable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_titleMightBeEditable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_userInterfaceItemIsTemporarilyDisabled:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_userInterfaceItemIsTemporarilyDisabled:) ((:POINTER)
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_validateZoom| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_validateZoom) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_validateTile| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_validateTile) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_changeWindowTileLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_changeWindowTileLocation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeTileFromFullScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeTileFromFullScreen:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_validateTileChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_validateTileChange) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_beginWindowBlockingModalSessionForSheet:service:completionHandler:isCritical:| (thing _ service completion-handler is-critical)
  (let ((message-lambda 
         (make-message-lambda @(_beginWindowBlockingModalSessionForSheet:service:completionHandler:isCritical:) ((:POINTER
                                                                                                                  :POINTER
                                                                                                                  :POINTER
                                                                                                                  :CHAR)
                                                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr service) (ns-object-ptr completion-handler) (if is-critical 1 0))))

(defun NS::|_beginSheet:completionHandler:isCritical:| (thing _ completion-handler is-critical)
  (let ((message-lambda 
         (make-message-lambda @(_beginSheet:completionHandler:isCritical:) ((:POINTER
                                                                             :POINTER
                                                                             :CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr completion-handler) (if is-critical 1 0))))

(defun NS::|_endWindowBlockingModalSession:returnCode:| (thing _ return-code)
  (let ((message-lambda 
         (make-message-lambda @(_endWindowBlockingModalSession:returnCode:) (((:POINTER
                                                                               (:STRUCT
                                                                                NS::|_NSModalSession|))
                                                                              :LONG-LONG)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) return-code)))

(defun NS::|_endWindowBlockingModalSessionForShownService:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_endWindowBlockingModalSessionForShownService:) ((:POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_parentWindowForAddingToMovementGroupWithProposedParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_parentWindowForAddingToMovementGroupWithProposedParent:) ((:POINTER)
                                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_excludeFromOrderingGroup| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_excludeFromOrderingGroup) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_willRemoveChildWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_willRemoveChildWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_didAddChildWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_didAddChildWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_childWindowOrderingPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_childWindowOrderingPriority) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setIsRemovingFromParentWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIsRemovingFromParentWindow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_didRemoveChildWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_didRemoveChildWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|animationForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(animationForKeyPath:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|adjustLayoutForResolutionChangeToRetina:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(adjustLayoutForResolutionChangeToRetina:) ((:CHAR)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|rebuildLayoutFromScratch| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rebuildLayoutFromScratch) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setCGColorSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setCGColorSpace:) (((:POINTER
                                                      (:STRUCT
                                                       NS::|CGColorSpace|)))
                                                    :INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_effectiveToolbarStyleAssumingExpandedIfHidden| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveToolbarStyleAssumingExpandedIfHidden) (NIL
                                                                                 :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_eventMonitorForRenaming| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_eventMonitorForRenaming) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_savedFirstResponderForRenaming| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_savedFirstResponderForRenaming) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_editingModeForTitle:editingRange:selectedRange:| (thing _ editing-range selected-range)
  (let ((message-lambda 
         (make-message-lambda @(_editingModeForTitle:editingRange:selectedRange:) ((:POINTER
                                                                                    (:POINTER
                                                                                     (:STRUCT
                                                                                      NS::|_NSRange|))
                                                                                    (:POINTER
                                                                                     (:STRUCT
                                                                                      NS::|_NSRange|)))
                                                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr editing-range) (ns-object-ptr selected-range))))

(defun NS::|_setSavedFirstResponderForRenaming:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSavedFirstResponderForRenaming:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setEventMonitorForRenaming:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setEventMonitorForRenaming:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_titleBarRenamingApplicationDidResignActive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_titleBarRenamingApplicationDidResignActive:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setRemoteRenameSession:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setRemoteRenameSession:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_endTitlebarRenamingPrecleanup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endTitlebarRenamingPrecleanup) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_canEditTitle| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canEditTitle) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_internalEditTitleWithCompletionHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_internalEditTitleWithCompletionHandler:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_bindTitleToContentViewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_bindTitleToContentViewController) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isPreferenceToolbarWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isPreferenceToolbarWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hasBottomAccessoryViewController| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasBottomAccessoryViewController) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_initContent:styleMask:backing:defer:screen:contentView:| (thing _ style-mask backing defer screen content-view)
  (let ((message-lambda 
         (make-message-lambda @(_initContent:styleMask:backing:defer:screen:contentView:) (((:POINTER
                                                                                             (:STRUCT
                                                                                              NS::|CGRect|))
                                                                                            :UNSIGNED-LONG-LONG
                                                                                            :UNSIGNED-LONG-LONG
                                                                                            :CHAR
                                                                                            :POINTER
                                                                                            :POINTER)
                                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) style-mask backing (if defer 1 0) (ns-object-ptr screen) (ns-object-ptr content-view))))

(defun NS::|_usesCustomDrawing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_usesCustomDrawing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isAlertWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isAlertWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_initFromGlobalWindow:inRect:| (thing _ in-rect)
  (let ((message-lambda 
         (make-message-lambda @(_initFromGlobalWindow:inRect:) ((:LONG-LONG
                                                                 (:POINTER
                                                                  (:STRUCT
                                                                   NS::|CGRect|)))
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-rect))))

(defun NS::|_setTexturedBackground:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTexturedBackground:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_pointRectInPixels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_pointRectInPixels:) (((:STRUCT NS::|CGRect|))
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_pixelRectInPoints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_pixelRectInPoints:) (((:STRUCT NS::|CGRect|))
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_enableScreenUpdatesIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enableScreenUpdatesIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setOcclusionStateIsVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setOcclusionStateIsVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|titlebarSeparatorStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarSeparatorStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentTitlebarSeparatorStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentTitlebarSeparatorStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setContentTitlebarSeparatorStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentTitlebarSeparatorStyle:) ((:LONG-LONG)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_resetUndoManagerIfNecessary:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_resetUndoManagerIfNecessary:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_wantToBeModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantToBeModal) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isFunctionRowWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isFunctionRowWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_layerTransformToHost| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layerTransformToHost) (NIL
                                                        (:STRUCT
                                                         NS::|CGAffineTransform|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_titleIsRepresentedFilename| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_titleIsRepresentedFilename) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setTitleWithRepresentedFilename:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleWithRepresentedFilename:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_titleFrameForEditingWithProposedFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_titleFrameForEditingWithProposedFrame:) (((:STRUCT
                                                                            NS::|CGRect|))
                                                                          (:STRUCT
                                                                           NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_customTitleFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_customTitleFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|addDocumentIconButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(addDocumentIconButton) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isWindowPointInStandardWindowButtonGroup:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isWindowPointInStandardWindowButtonGroup:) (((:STRUCT
                                                                               NS::|CGPoint|))
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_globalWindowNum| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_globalWindowNum) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cachedGlobalWindowNum| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cachedGlobalWindowNum) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tryLockViewHierarchyForWriting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_tryLockViewHierarchyForWriting) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_canAddUnderTitlebarViews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canAddUnderTitlebarViews) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|insertTitlebarAccessoryViewController:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertTitlebarAccessoryViewController:atIndex:) ((:POINTER
                                                                                  :LONG-LONG)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-index)))

(defun NS::|_titlebarBackdropGroupName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_titlebarBackdropGroupName) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setHasActiveAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setHasActiveAppearance:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|titlebarBlurFiltersDisabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarBlurFiltersDisabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setTitlebarBlurFiltersDisabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarBlurFiltersDisabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_handleMouseDraggedEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_handleMouseDraggedEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|frameTopLeftPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameTopLeftPoint) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setContentResizeIncrements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentResizeIncrements:) (((:STRUCT
                                                                NS::|CGSize|))
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|contentResizeIncrements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentResizeIncrements) (NIL
                                                          (:STRUCT
                                                           NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setContentAspectRatio:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentAspectRatio:) (((:STRUCT
                                                           NS::|CGSize|))
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|contentAspectRatio| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentAspectRatio) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_backdropBleedAmount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_backdropBleedAmount) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|shadowOptionsForActiveAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(shadowOptionsForActiveAppearance:) ((:CHAR)
                                                                    :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_animationShouldCallFlushWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_animationShouldCallFlushWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_forceFlushWindowToScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_forceFlushWindowToScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_disableDelayedWindowDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_disableDelayedWindowDisplay) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_enableDelayedWindowDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enableDelayedWindowDisplay) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_delayedWindowDisplayEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_delayedWindowDisplayEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|useOptimizedDrawing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(useOptimizedDrawing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setWasCGOrderingEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWasCGOrderingEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_wasCGOrderingEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wasCGOrderingEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setWasReshapingEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWasReshapingEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_wasReshapingEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wasReshapingEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_drawKeyboardUILoopIfNeededForEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_drawKeyboardUILoopIfNeededForEvent:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKeyView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_selectAnyValidResponderOverride| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_selectAnyValidResponderOverride) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_clearAnyValidResponderOverride| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_clearAnyValidResponderOverride) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|autorecalculatesKeyViewLoop| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autorecalculatesKeyViewLoop) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|runToolbarConfigurationPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runToolbarConfigurationPalette:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setNextToolbarDisplayMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNextToolbarDisplayMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setNextToolbarSizeMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setNextToolbarSizeMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setShowsLockButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsLockButton:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setMouseConfinementRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMouseConfinementRect:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setAutoPositionMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setAutoPositionMask:) ((:UNSIGNED-LONG-LONG)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_displayChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_displayChanged) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_displayChangedWithoutAdjusting| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_displayChangedWithoutAdjusting) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_internalHandleAppKitDefinedEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_internalHandleAppKitDefinedEvent:) ((:POINTER)
                                                                     :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_isResigningKeyFocusOnly| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isResigningKeyFocusOnly) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_moveOffscreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_moveOffscreen) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_moveOnscreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_moveOnscreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_addGlobalWindowToAnimationsWithWindowNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addGlobalWindowToAnimationsWithWindowNumber:) ((:UNSIGNED-INT)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_removeGlobalWindowFromAnimationsWithWindowNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeGlobalWindowFromAnimationsWithWindowNumber:) ((:UNSIGNED-INT)
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_shake| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_shake) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_sendForcedWindowChangedKeyState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sendForcedWindowChangedKeyState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_absorbDeferredNeedsDisplayRegion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_absorbDeferredNeedsDisplayRegion) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setLastFocusRingView:bleedRegion:| (thing _ bleed-region)
  (let ((message-lambda 
         (make-message-lambda @(_setLastFocusRingView:bleedRegion:) ((:POINTER
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr bleed-region))))

(defun NS::|_shouldCloseForTermination| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldCloseForTermination) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isReleasedWhenClosed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isReleasedWhenClosed) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isZoomed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isZoomed) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_currentZoomState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentZoomState) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_revertZoomToScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_revertZoomToScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_moveToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_moveToScreen:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_zoomToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_zoomToScreen:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_texturePattern| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_texturePattern) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_gradientImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_gradientImage) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_sheetDimmingParentView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_sheetDimmingParentView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentSeparatorColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentSeparatorColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentInsetColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentInsetColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setShowsContentSeparator:forEdge:| (thing _ for-edge)
  (let ((message-lambda 
         (make-message-lambda @(setShowsContentSeparator:forEdge:) ((:CHAR
                                                                     :UNSIGNED-LONG-LONG)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) for-edge)))

(defun NS::|_setModeDisablesServerSideDrag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setModeDisablesServerSideDrag:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setDynamicDepthLimit:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDynamicDepthLimit:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setWindowDepth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWindowDepth:) ((:INT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|orderBack:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderBack:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|orderFrontRegardless| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontRegardless) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doOrderWindow:relativeTo:findKey:| (thing _ relative-to find-key)
  (let ((message-lambda 
         (make-message-lambda @(_doOrderWindow:relativeTo:findKey:) ((:LONG-LONG
                                                                      :LONG-LONG
                                                                      :CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ relative-to (if find-key 1 0))))

(defun NS::|_doOrderWindow:relativeTo:findKey:forCounter:force:| (thing _ relative-to find-key for-counter force)
  (let ((message-lambda 
         (make-message-lambda @(_doOrderWindow:relativeTo:findKey:forCounter:force:) ((:LONG-LONG
                                                                                       :LONG-LONG
                                                                                       :CHAR
                                                                                       :CHAR
                                                                                       :CHAR)
                                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ relative-to (if find-key 1 0) (if for-counter 1 0) (if force 1 0))))

(defun NS::|_orderOutWhenAppHiddenRelativeToWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_orderOutWhenAppHiddenRelativeToWindow:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_windowTransformAnimationWillBegin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_windowTransformAnimationWillBegin:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setTransformDidCompleteHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTransformDidCompleteHandler:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_wantsToDestroyRealWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsToDestroyRealWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setWantsToDestroyRealWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWantsToDestroyRealWindow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_destroyRealWindowIfNotVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_destroyRealWindowIfNotVisible:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_childLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_childLevel:) ((:LONG-LONG) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setMiniwindowImage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMiniwindowImage:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setMiniwindowTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMiniwindowTitle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|miniwindowImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(miniwindowImage) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowCanBeRestored| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_windowCanBeRestored) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_batchClose| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_batchClose) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_copyMinimizeDictionary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_copyMinimizeDictionary) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_batchZoom| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_batchZoom) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isOneShot| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isOneShot) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_isTitledWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isTitledWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setEventShapeOccluded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setEventShapeOccluded:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_wasModalAtSometime| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wasModalAtSometime) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_cgsWindowSaysSupportsTiling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_cgsWindowSaysSupportsTiling) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_avoidsActivation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_avoidsActivation) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setFullScreenSidebarUsesWithinWindowBlending:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setFullScreenSidebarUsesWithinWindowBlending:) ((:CHAR)
                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_fullScreenSidebarUsesWithinWindowBlending| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_fullScreenSidebarUsesWithinWindowBlending) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setTabbedFullHeightSidebarsAreIndependent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setTabbedFullHeightSidebarsAreIndependent:) ((:CHAR)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setFullScreenSidebarToolbarMaterial:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setFullScreenSidebarToolbarMaterial:) ((:LONG-LONG)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_depthOfSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_depthOfSubview:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_shouldShowResizeCursor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldShowResizeCursor) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|cacheImageInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cacheImageInRect:) (((:STRUCT NS::|CGRect|))
                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|restoreCachedImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restoreCachedImage) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|discardCachedImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(discardCachedImage) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_saveFrameUsingName:domain:| (thing _ domain)
  (let ((message-lambda 
         (make-message-lambda @(_saveFrameUsingName:domain:) ((:POINTER
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr domain))))

(defun NS::|_setFrameUsingName:domain:| (thing _ domain)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_setFrameUsingName:domain:) ((:POINTER
                                                              :POINTER)
                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr domain)))) nil t))

(defun NS::|setFrameUsingName:force:| (thing _ force)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setFrameUsingName:force:) ((:POINTER :CHAR)
                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if force 1 0)))) nil t))

(defun NS::|_enterFullScreenModeOnTileSpaceWithName:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_enterFullScreenModeOnTileSpaceWithName:) ((:POINTER)
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_setFrameSavedUsingTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setFrameSavedUsingTitle:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_bestScreenByGeometry| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_bestScreenByGeometry) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|invalidateShadow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateShadow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|canMoveToCurrentSpaceOnScreen:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canMoveToCurrentSpaceOnScreen:) ((:POINTER)
                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|setMinFullScreenContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinFullScreenContentSize:) (((:STRUCT
                                                                 NS::|CGSize|))
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setMaxFullScreenContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaxFullScreenContentSize:) (((:STRUCT
                                                                 NS::|CGSize|))
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setOwnsRealWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setOwnsRealWindow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_termOneShotWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_termOneShotWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAutofill:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutofill:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|autofill| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autofill) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAutofillColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutofillColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|autofillColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autofillColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_effectiveAlphaValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_effectiveAlphaValue) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setShowsResizeIndicator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsResizeIndicator:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|showsResizeIndicator| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsResizeIndicator) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_beginWindowBlockingModalSessionForShownService:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_beginWindowBlockingModalSessionForShownService:) ((:POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_beginFauxModalSession| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_beginFauxModalSession) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_endFauxModalSession| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_endFauxModalSession) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateMovementGroup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateMovementGroup) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateFirstResponderForIgnoredChildWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_updateFirstResponderForIgnoredChildWindow:) ((:POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_orderedAttachedWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_orderedAttachedWindows) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|addChildWindow:ordered:shareKey:| (thing _ ordered share-key)
  (let ((message-lambda 
         (make-message-lambda @(addChildWindow:ordered:shareKey:) ((:POINTER
                                                                    :LONG-LONG
                                                                    :CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) ordered (if share-key 1 0))))

(defun NS::|_includedInParentWindowShare| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_includedInParentWindowShare) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_topmostChild| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_topmostChild) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_excludedFromVisibleWindowList| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_excludedFromVisibleWindowList) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setSharingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSharingType:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|sharingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharingType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setPreferredBackingLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreferredBackingLocation:) ((:UNSIGNED-LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|preferredBackingLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredBackingLocation) (NIL
                                                           :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|backingLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backingLocation) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAllowsConcurrentViewDrawing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsConcurrentViewDrawing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|maxTitlebarTitleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maxTitlebarTitleRect) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|titlebarTitleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarTitleRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|titlebarTitleFont| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarTitleFont) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|appearanceSource| (thing)
  (let ((message-lambda 
         (make-message-lambda @(appearanceSource) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|titleHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titleHidden) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setTitleHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleHidden:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setTitleMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleMode:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|titleMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titleMode) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|titlebarAppearsTransparentWhenFullscreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarAppearsTransparentWhenFullscreen) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setTitlebarAppearsTransparentWhenFullscreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarAppearsTransparentWhenFullscreen:) ((:CHAR)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|titlebarDrawsBottomDividerWhenTransparent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarDrawsBottomDividerWhenTransparent) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setTitlebarDrawsBottomDividerWhenTransparent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarDrawsBottomDividerWhenTransparent:) ((:CHAR)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|titlebarHandlesDoubleClickWhenTransparent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarHandlesDoubleClickWhenTransparent) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setTitlebarHandlesDoubleClickWhenTransparent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarHandlesDoubleClickWhenTransparent:) ((:CHAR)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|addTabbedWindow:ordered:| (thing _ ordered)
  (let ((message-lambda 
         (make-message-lambda @(addTabbedWindow:ordered:) ((:POINTER
                                                            :LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) ordered)))

(defun NS::|canBeVisibleOnAllSpaces| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBeVisibleOnAllSpaces) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setCanBeVisibleOnAllSpaces:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanBeVisibleOnAllSpaces:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|standardWindowTitleButtonsAlphaValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(standardWindowTitleButtonsAlphaValue) (NIL
                                                                       :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setStandardWindowTitleButtonsAlphaValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStandardWindowTitleButtonsAlphaValue:) ((:DOUBLE)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|titlebarHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarHeight) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTitlebarHeight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarHeight:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|standardWindowButtonGroupOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(standardWindowButtonGroupOffset) (NIL
                                                                  (:STRUCT
                                                                   NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setStandardWindowButtonGroupOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStandardWindowButtonGroupOffset:) (((:STRUCT
                                                                        NS::|CGSize|))
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|hasColorSensitiveUI| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasColorSensitiveUI) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setHasColorSensitiveUI:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasColorSensitiveUI:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_contextIDRemoteStatusChangeShouldAffectWindow:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_contextIDRemoteStatusChangeShouldAffectWindow:) ((:UNSIGNED-INT)
                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|windowRefWithCompositedAttribute:andFrameworkScaledAttribute:| (thing _ and-framework-scaled-attribute)
  (let ((message-lambda 
         (make-message-lambda @(windowRefWithCompositedAttribute:andFrameworkScaledAttribute:) ((:CHAR
                                                                                                 :CHAR)
                                                                                                (:POINTER
                                                                                                 :VOID))))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if and-framework-scaled-attribute 1 0))))

(defun NS::|initWithWindowRef:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithWindowRef:) (((:POINTER :VOID))
                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cgImageScreenShot| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cgImageScreenShot) (NIL
                                                     (:POINTER
                                                      (:STRUCT NS::|CGImage|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cgImageScreenShotIncludingShadow:clipRect:visualEffectViewWithDesktopBleedOnly:spaceID:| (thing _ clip-rect visual-effect-view-with-desktop-bleed-only space-i-d)
  (let ((message-lambda 
         (make-message-lambda @(_cgImageScreenShotIncludingShadow:clipRect:visualEffectViewWithDesktopBleedOnly:spaceID:) ((:CHAR
                                                                                                                            (:STRUCT
                                                                                                                             NS::|CGRect|)
                                                                                                                            :CHAR
                                                                                                                            :UNSIGNED-LONG-LONG)
                                                                                                                           (:POINTER
                                                                                                                            (:STRUCT
                                                                                                                             NS::|CGImage|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) clip-rect (if visual-effect-view-with-desktop-bleed-only 1 0) space-i-d)))

(defun NS::|_hasDescendentThatSharesKeyStatusWithSelfAndHasKeyAppearanceIncludingSheets:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasDescendentThatSharesKeyStatusWithSelfAndHasKeyAppearanceIncludingSheets:) ((:CHAR)
                                                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0)))) nil t))

(defun NS::|_sendAcquireKeyAppearanceChangeToResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_sendAcquireKeyAppearanceChangeToResponder:) ((:POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_sendResignKeyAppearanceChangeToResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_sendResignKeyAppearanceChangeToResponder:) ((:POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_sendAcquireMainAppearanceToResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_sendAcquireMainAppearanceToResponder:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_draggableFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_draggableFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_regionForOpaqueViewsBlockingDraggableFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_regionForOpaqueViewsBlockingDraggableFrame:) (((:STRUCT
                                                                                 NS::|CGRect|))
                                                                               (:POINTER
                                                                                (:STRUCT
                                                                                 NS::|CGSRegionObject|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_regionForOpaqueViewsModifiedForResizing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_regionForOpaqueViewsModifiedForResizing:) (((:POINTER
                                                                              (:STRUCT
                                                                               NS::|CGSRegionObject|)))
                                                                            (:POINTER
                                                                             (:STRUCT
                                                                              NS::|CGSRegionObject|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_titlebarActivationRegion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_titlebarActivationRegion) (NIL
                                                            (:POINTER
                                                             (:STRUCT
                                                              NS::|CGSRegionObject|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_titlebarButtonsPreventingActivationRegion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_titlebarButtonsPreventingActivationRegion) (NIL
                                                                             (:POINTER
                                                                              (:STRUCT
                                                                               NS::|CGSRegionObject|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_titlebarCommandModifierExclusionRegion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_titlebarCommandModifierExclusionRegion) (NIL
                                                                          (:POINTER
                                                                           (:STRUCT
                                                                            NS::|CGSRegionObject|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_getEdgeResizingRects:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_getEdgeResizingRects:) (((:POINTER
                                                           (:STRUCT
                                                            NS::|CGRect|)))
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_acquireNextMinimizationSeed| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_acquireNextMinimizationSeed) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_prepareToMinimize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_prepareToMinimize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|dockTitleIsGuess| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(dockTitleIsGuess) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_sendDockFullScreenTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_sendDockFullScreenTitle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|showDeminiaturizedWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(showDeminiaturizedWindow) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_enterFullScreenIfNeededAfterMiniturized| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enterFullScreenIfNeededAfterMiniturized) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_selectWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_selectWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_prepareToRestoreFromDock:forceActivation:wantsToBeKey:| (thing _ force-activation wants-to-be-key)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_prepareToRestoreFromDock:forceActivation:wantsToBeKey:) ((:CHAR
                                                                                           :CHAR
                                                                                           :CHAR)
                                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if force-activation 1 0) (if wants-to-be-key 1 0)))) nil t))

(defun NS::|_prepareToRestoreRegularFromDock:forceActivation:wantsToBeKey:| (thing _ force-activation wants-to-be-key)
  (let ((message-lambda 
         (make-message-lambda @(_prepareToRestoreRegularFromDock:forceActivation:wantsToBeKey:) ((:CHAR
                                                                                                  :CHAR
                                                                                                  :CHAR)
                                                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0) (if force-activation 1 0) (if wants-to-be-key 1 0))))

(defun NS::|_cgImageInRect:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(_cgImageInRect:options:) (((:STRUCT
                                                            NS::|CGRect|)
                                                           :UNSIGNED-INT)
                                                          (:POINTER
                                                           (:STRUCT
                                                            NS::|CGImage|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ options)))

(defun NS::|setShadowStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowStyle:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_shadowRadius| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_shadowRadius) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shadowOffsetForActiveAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_shadowOffsetForActiveAppearance:) ((:CHAR)
                                                                    (:STRUCT
                                                                     NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setContentHasShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setContentHasShadow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_contentHasShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_contentHasShadow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setForceInactiveShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setForceInactiveShadow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setForceMainAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setForceMainAppearance:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_forceMainAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_forceMainAppearance) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_viewTreeDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_viewTreeDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dumpImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dumpImage) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cgImageScreenShotIncludingSpaceID:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cgImageScreenShotIncludingSpaceID:) ((:UNSIGNED-LONG-LONG)
                                                                      (:POINTER
                                                                       (:STRUCT
                                                                        NS::|CGImage|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_hasActiveAppearanceForStandardWindowButton:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_hasActiveAppearanceForStandardWindowButton:) ((:UNSIGNED-LONG-LONG)
                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_customImageForStandardWindowButton:state:dirty:controlTint:| (thing _ state dirty control-tint)
  (let ((message-lambda 
         (make-message-lambda @(_customImageForStandardWindowButton:state:dirty:controlTint:) ((:UNSIGNED-LONG-LONG
                                                                                                :UNSIGNED-LONG-LONG
                                                                                                :CHAR
                                                                                                :UNSIGNED-LONG-LONG)
                                                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ state (if dirty 1 0) control-tint)))

(defun NS::|_growBoxRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_growBoxRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_transparency| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_transparency) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dockItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dockItem) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|restoreWindowOnDockDeath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restoreWindowOnDockDeath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|restoreWindowOnDockReincarnation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restoreWindowOnDockReincarnation) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|updateInDock| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateInDock) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_createWindowsMenuEntryWithTitle:enabled:| (thing _ enabled)
  (let ((message-lambda 
         (make-message-lambda @(_createWindowsMenuEntryWithTitle:enabled:) ((:POINTER
                                                                             :CHAR)
                                                                            (:POINTER
                                                                             (:STRUCT
                                                                              NS::|__CFDictionary|)))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if enabled 1 0))))

(defun NS::|_setDefaultButtonPaused:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setDefaultButtonPaused:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_defaultButtonPaused| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_defaultButtonPaused) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_installCocoaWindowEventHandlers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_installCocoaWindowEventHandlers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowRefCreatedForCarbonApp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowRefCreatedForCarbonApp) (NIL
                                                                (:POINTER
                                                                 (:STRUCT
                                                                  NS::|OpaqueWindowPtr|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowRefCreatedForCarbonControl| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowRefCreatedForCarbonControl) (NIL
                                                                    (:POINTER
                                                                     (:STRUCT
                                                                      NS::|OpaqueWindowPtr|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setFrameworkScaleFactor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setFrameworkScaleFactor:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_frameworkScaleFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_frameworkScaleFactor) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setScaleFactor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setScaleFactor:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_transformsDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_transformsDescription) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_baseTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_baseTransform) (NIL
                                                 (:STRUCT
                                                  NS::|CGAffineTransform|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setTimeMachineDelegate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTimeMachineDelegate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_isInactiveRevisionWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isInactiveRevisionWindow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setInactiveRevisionWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setInactiveRevisionWindow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_dropSharedFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dropSharedFirstResponder) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_changeVisibleWithoutLogin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_changeVisibleWithoutLogin) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityTitleCellRemoved| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_accessibilityTitleCellRemoved) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_accessibilitySetTitleCellRemoved:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySetTitleCellRemoved:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))


(defun NS::|hostsLayersInWindowServer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hostsLayersInWindowServer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|canHostLayersInWindowServer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canHostLayersInWindowServer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setCanHostLayersInWindowServer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanHostLayersInWindowServer:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setShouldAutoFlattenLayerTree:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setShouldAutoFlattenLayerTree:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_switchDragRegistrationToRemoteContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_switchDragRegistrationToRemoteContext:) ((:UNSIGNED-INT)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_accessibilityIsModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_accessibilityIsModal) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_expandedTitleCellRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_expandedTitleCellRect) (NIL
                                                         (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_inlineTitleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_inlineTitleRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_expandedTitleCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_expandedTitleCell) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_inlineTitleCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_inlineTitleCell) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_inlineSubtitleCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_inlineSubtitleCell) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_wholeAccessibilityTitleString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_wholeAccessibilityTitleString) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilitySheetParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySheetParent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilitySubtitleCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySubtitleCell) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilitySubtitleUIElementAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySubtitleUIElementAttribute) (NIL
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_newAutoGeneratedSectionsWithSearchKeys:searchDepth:existingElements:| (thing _ search-depth existing-elements)
  (let ((message-lambda 
         (make-message-lambda @(_newAutoGeneratedSectionsWithSearchKeys:searchDepth:existingElements:) ((:POINTER
                                                                                                         :LONG-LONG
                                                                                                         :POINTER)
                                                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) search-depth (ns-object-ptr existing-elements))))

(defun NS::|_sectionsForElement:keys:depth:allowMultiple:| (thing _ keys depth allow-multiple)
  (let ((message-lambda 
         (make-message-lambda @(_sectionsForElement:keys:depth:allowMultiple:) ((:POINTER
                                                                                 :POINTER
                                                                                 :LONG-LONG
                                                                                 :CHAR)
                                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr keys) depth (if allow-multiple 1 0))))

(defun NS::|_localizedDescriptionForSectionIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_localizedDescriptionForSectionIdentifier:) ((:POINTER)
                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_preliminaryUpdateSectionResult:element:keys:| (thing _ element keys)
  (let ((message-lambda 
         (make-message-lambda @(_preliminaryUpdateSectionResult:element:keys:) ((:POINTER
                                                                                 :POINTER
                                                                                 :POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr element) (ns-object-ptr keys))))

(defun NS::|_filterDownPotentialSectionResult:keys:| (thing _ keys)
  (let ((message-lambda 
         (make-message-lambda @(_filterDownPotentialSectionResult:keys:) ((:POINTER
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr keys))))

(defun NS::|_updateSectionSearchElements:keys:element:| (thing _ keys element)
  (let ((message-lambda 
         (make-message-lambda @(_updateSectionSearchElements:keys:element:) ((:POINTER
                                                                              :POINTER
                                                                              :POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr keys) (ns-object-ptr element))))

(defun NS::|_largestElementInElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_largestElementInElements:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_newSectionCandidatesForSearchElements:depth:| (thing _ depth)
  (let ((message-lambda 
         (make-message-lambda @(_newSectionCandidatesForSearchElements:depth:) ((:POINTER
                                                                                 :LONG-LONG)
                                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) depth)))

(defun NS::|_potentialCandidateKeyForSectionKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_potentialCandidateKeyForSectionKey:) ((:POINTER)
                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_finalUpdateSectionResult:withCandidates:element:keys:allowMultiple:| (thing _ with-candidates element keys allow-multiple)
  (let ((message-lambda 
         (make-message-lambda @(_finalUpdateSectionResult:withCandidates:element:keys:allowMultiple:) ((:POINTER
                                                                                                        :POINTER
                                                                                                        :POINTER
                                                                                                        :POINTER
                                                                                                        :CHAR)
                                                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with-candidates) (ns-object-ptr element) (ns-object-ptr keys) (if allow-multiple 1 0))))

(defun NS::|_isSearchField:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isSearchField:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_isToolbar:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isToolbar:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_accessibilityFrameForElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityFrameForElement:) ((:POINTER)
                                                                 (:STRUCT
                                                                  NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_closestElementToPosition:inElements:| (thing _ in-elements)
  (let ((message-lambda 
         (make-message-lambda @(_closestElementToPosition:inElements:) (((:STRUCT
                                                                          NS::|CGPoint|)
                                                                         :POINTER)
                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-elements))))

(defun NS::|_accessibilitySwiftUIDelegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySwiftUIDelegate) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityViewCorrectedForFieldEditor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityViewCorrectedForFieldEditor:) ((:POINTER)
                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityAddDeferredNotification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAddDeferredNotification:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_accessibilitySetSwiftUIDelegate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilitySetSwiftUIDelegate:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySetPositionAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetPositionAttribute:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityMainAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMainAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsMainAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMainAttributeSettable) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySetMainAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetMainAttribute:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityMinimizedAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinimizedAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsMinimizedAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMinimizedAttributeSettable) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySetMinimizedAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetMinimizedAttribute:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityCloseButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCloseButtonAttribute) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsCloseButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsCloseButtonAttributeSettable) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityZoomButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityZoomButtonAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsZoomButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsZoomButtonAttributeSettable) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityMinimizeButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinimizeButtonAttribute) (NIL
                                                                       :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsMinimizeButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMinimizeButtonAttributeSettable) (NIL
                                                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityToolbarButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityToolbarButtonAttribute) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsToolbarButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsToolbarButtonAttributeSettable) (NIL
                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityFullScreenButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFullScreenButtonAttribute) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsFullScreenButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFullScreenButtonAttributeSettable) (NIL
                                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityFullScreenAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFullScreenAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsFullScreenAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFullScreenAttributeSettable) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilitySetFullScreenAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetFullScreenAttribute:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilityProxyAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityProxyAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsProxyAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsProxyAttributeSettable) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityIsGrowAreaAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsGrowAreaAttributeSettable) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityDefaultButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDefaultButtonAttribute) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsDefaultButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsDefaultButtonAttributeSettable) (NIL
                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityCancelButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCancelButtonAttribute) (NIL
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsCancelButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsCancelButtonAttributeSettable) (NIL
                                                                               :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityDocumentAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDocumentAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsDocumentAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsDocumentAttributeSettable) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityModalAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityModalAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityIsModalAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsModalAttributeSettable) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|accessibilityIsSectionsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSectionsAttributeSettable) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|hasCloseBox| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasCloseBox) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isMiniaturizable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMiniaturizable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isModalPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isModalPanel) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isZoomable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isZoomable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|orderedIndex| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orderedIndex) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setIsMiniaturized:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsMiniaturized:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setIsVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setIsZoomed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsZoomed:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setOrderedIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOrderedIndex:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|boundsAsQDRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(boundsAsQDRect) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setBoundsAsQDRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBoundsAsQDRect:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_beginDraggingSessionWithItems:clipRect:event:source:| (thing _ clip-rect event source)
  (let ((message-lambda 
         (make-message-lambda @(_beginDraggingSessionWithItems:clipRect:event:source:) ((:POINTER
                                                                                         (:STRUCT
                                                                                          NS::|CGRect|)
                                                                                         :POINTER
                                                                                         :POINTER)
                                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) clip-rect (ns-object-ptr event) (ns-object-ptr source))))

(defun NS::|_registerDragTypes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_registerDragTypes:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_windowResizeEventHandlingRectForRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_windowResizeEventHandlingRectForRect:) (((:STRUCT
                                                                           NS::|CGRect|))
                                                                         (:STRUCT
                                                                          NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_syncFrameMetrics| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_syncFrameMetrics) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setWindowDepth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setWindowDepth) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_installRootMetricsHandler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_installRootMetricsHandler) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_installCarbonAppDockHandlers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_installCarbonAppDockHandlers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_installCarbonWindowEventHandlers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_installCarbonWindowEventHandlers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_installCocoaWindowEventHandlersForCocoaSheetsAttachedToCarbonModalParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_installCocoaWindowEventHandlersForCocoaSheetsAttachedToCarbonModalParent) (NIL
                                                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_removeCocoaWindowEventHandlersForCocoaSheetsAttachedToCarbonModalParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_removeCocoaWindowEventHandlersForCocoaSheetsAttachedToCarbonModalParent) (NIL
                                                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setMouseMovedEventsEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setMouseMovedEventsEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_sendEventToGestureRecognizers:requireAcceptsFirstMouse:| (thing _ require-accepts-first-mouse)
  (let ((message-lambda 
         (make-message-lambda @(_sendEventToGestureRecognizers:requireAcceptsFirstMouse:) ((:POINTER
                                                                                            :CHAR)
                                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if require-accepts-first-mouse 1 0))))

(defun NS::|_reallySendEvent:isDelayedEvent:| (thing _ is-delayed-event)
  (let ((message-lambda 
         (make-message-lambda @(_reallySendEvent:isDelayedEvent:) ((:POINTER
                                                                    :CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if is-delayed-event 1 0))))

(defun NS::|_processKeyboardUIKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_processKeyboardUIKey:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_shouldSnapSizeOnDoubleClick| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldSnapSizeOnDoubleClick) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hitTestWithHysteresisCheck:forEvent:allowWindowDragging:| (thing _ for-event allow-window-dragging)
  (let ((message-lambda 
         (make-message-lambda @(_hitTestWithHysteresisCheck:forEvent:allowWindowDragging:) (((:STRUCT
                                                                                              NS::|CGPoint|)
                                                                                             :POINTER
                                                                                             (:POINTER
                                                                                              :CHAR))
                                                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr for-event) (ns-object-ptr allow-window-dragging))))

(defun NS::|view:acceptsFirstMouseEvent:initialKeyWindow:| (thing _ accepts-first-mouse-event initial-key-window)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(view:acceptsFirstMouseEvent:initialKeyWindow:) ((:POINTER
                                                                                 :POINTER
                                                                                 :POINTER)
                                                                                :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr accepts-first-mouse-event) (ns-object-ptr initial-key-window)))) nil t))

(defun NS::|_wantsMouseMoveEventsInBackground| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsMouseMoveEventsInBackground) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setWantsMouseMoveEventsInBackground:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWantsMouseMoveEventsInBackground:) ((:CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_gestureRecognizersHaveDelayedEvents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_gestureRecognizersHaveDelayedEvents) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_handleMouseDownEvent:isDelayedEvent:| (thing _ is-delayed-event)
  (let ((message-lambda 
         (make-message-lambda @(_handleMouseDownEvent:isDelayedEvent:) ((:POINTER
                                                                         :CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if is-delayed-event 1 0))))

(defun NS::|_setIgnoresCurrentEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setIgnoresCurrentEvent:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_eventWasFiltered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_eventWasFiltered:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_wasActiveBeforeCurrentEvent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wasActiveBeforeCurrentEvent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_gestureRecognizersStartingWithView:onEvent:requireAcceptsFirstMouse:| (thing _ on-event require-accepts-first-mouse)
  (let ((message-lambda 
         (make-message-lambda @(_gestureRecognizersStartingWithView:onEvent:requireAcceptsFirstMouse:) ((:POINTER
                                                                                                         :POINTER
                                                                                                         :CHAR)
                                                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr on-event) (if require-accepts-first-mouse 1 0))))

(defun NS::|_pressRecognized:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_pressRecognized:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_clickRecognized:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_clickRecognized:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_magnificationRecognized:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_magnificationRecognized:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_rotationRecognized:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_rotationRecognized:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_removeActiveGestureRecognizer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_removeActiveGestureRecognizer:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_gatheringActiveGestureRecognizers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_gatheringActiveGestureRecognizers) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_latchView:forEvent:| (thing _ for-event)
  (let ((message-lambda 
         (make-message-lambda @(_latchView:forEvent:) ((:POINTER :POINTER)
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-event))))

(defun NS::|_beginATUWindowDragForGreenButtonPressAtLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_beginATUWindowDragForGreenButtonPressAtLocation:) (((:STRUCT
                                                                                      NS::|CGPoint|))
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_firstResponderCanBeWeak| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_firstResponderCanBeWeak) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_didExitFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_didExitFullScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_didFailToExitFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_didFailToExitFullScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_ignoreForFullScreenTransitionSnapshot| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_ignoreForFullScreenTransitionSnapshot) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setViewsNeedUpdateConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setViewsNeedUpdateConstraints:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_willEnterFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_willEnterFullScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateFullScreenSpaceDockTitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateFullScreenSpaceDockTitle) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_didEnterFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_didEnterFullScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_fullScreenUpdateUserSpaceSavedFrameIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fullScreenUpdateUserSpaceSavedFrameIfNeeded) (NIL
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_didFailToEnterFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_didFailToEnterFullScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_createFullScreenContentControllerIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_createFullScreenContentControllerIfNeeded) (NIL
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_saveFrameBeforeFullScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_saveFrameBeforeFullScreen:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_setSidecarMenuController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setSidecarMenuController:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_cursorForResizeDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_cursorForResizeDirection:) ((:LONG-LONG)
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_getResizeEdgeAndCornerThicknesses:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_getResizeEdgeAndCornerThicknesses:) (((:ARRAY
                                                                        :DOUBLE
                                                                        8))
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_windowDying| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_windowDying) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_setFullScreenPresentationOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setFullScreenPresentationOptions:) ((:UNSIGNED-LONG-LONG)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_frameForFullScreenModeInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_frameForFullScreenModeInRect:) (((:STRUCT
                                                                   NS::|CGRect|))
                                                                 (:STRUCT
                                                                  NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_actualMinFullScreenContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_actualMinFullScreenContentSize) (NIL
                                                                  (:STRUCT
                                                                   NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_saveTilePreferredSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_saveTilePreferredSize) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_queryCanAddSiblingTileForWindow:responseHandler:| (thing _ response-handler)
  (let ((message-lambda 
         (make-message-lambda @(_queryCanAddSiblingTileForWindow:responseHandler:) ((:POINTER
                                                                                     :POINTER)
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr response-handler))))

(defun NS::|_createSiblingTileForWindow:preferredPositions:responseHandler:| (thing _ preferred-positions response-handler)
  (let ((message-lambda 
         (make-message-lambda @(_createSiblingTileForWindow:preferredPositions:responseHandler:) ((:POINTER
                                                                                                   :UNSIGNED-LONG-LONG
                                                                                                   :POINTER)
                                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) preferred-positions (ns-object-ptr response-handler))))




(defun NS::|_isSnapshotRestorationEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isSnapshotRestorationEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|_markAsEverHavingInvalidRestorableState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_markAsEverHavingInvalidRestorableState) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|_fromConstraintsSetWindowFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_fromConstraintsSetWindowFrame:) (((:STRUCT
                                                                    NS::|CGRect|))
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|_frameForVisualizedConstraintsWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_frameForVisualizedConstraintsWindow:) ((:POINTER)
                                                                        (:STRUCT
                                                                         NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_visualizedConstraintsView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_visualizedConstraintsView) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateConstraintVisualization| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_updateConstraintVisualization) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_teardownVisualizedConstraintsView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_teardownVisualizedConstraintsView) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|visualizeConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(visualizeConstraints:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|accessibilitySendDeferredNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySendDeferredNotifications) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setRemoteUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRemoteUIElement:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_resizableEdgesForGrowing:shrinking:| (thing _ shrinking)
  (let ((message-lambda 
         (make-message-lambda @(_resizableEdgesForGrowing:shrinking:) (((:POINTER
                                                                         :UNSIGNED-LONG-LONG)
                                                                        (:POINTER
                                                                         :UNSIGNED-LONG-LONG))
                                                                       :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr shrinking))))

(defun NS::|_getEdgeResizingRects:allowedEdges:| (thing _ allowed-edges)
  (let ((message-lambda 
         (make-message-lambda @(_getEdgeResizingRects:allowedEdges:) (((:POINTER
                                                                        (:STRUCT
                                                                         NS::|CGRect|))
                                                                       :UNSIGNED-LONG-LONG)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) allowed-edges)))

(defun NS::|_getConstrainedWindowMinSize:maxSize:changingOnlySlightly:| (thing _ max-size changing-only-slightly)
  (let ((message-lambda 
         (make-message-lambda @(_getConstrainedWindowMinSize:maxSize:changingOnlySlightly:) (((:POINTER
                                                                                               (:STRUCT
                                                                                                NS::|CGSize|))
                                                                                              (:POINTER
                                                                                               (:STRUCT
                                                                                                NS::|CGSize|))
                                                                                              :CHAR)
                                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr max-size) (if changing-only-slightly 1 0))))

(defun NS::|_getExteriorResizeEdgeThicknesses:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_getExteriorResizeEdgeThicknesses:) (((:ARRAY
                                                                       :DOUBLE
                                                                       8))
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_snapWindowSizeInDirection:withEvent:| (thing _ with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_snapWindowSizeInDirection:withEvent:) ((:LONG-LONG
                                                                         :POINTER)
                                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-event)))) nil t))

(defun NS::|_frame:resizedFromEdge:withDelta:withEvent:withState:| (thing _ resized-from-edge with-delta with-event with-state)
  (let ((message-lambda 
         (make-message-lambda @(_frame:resizedFromEdge:withDelta:withEvent:withState:) (((:STRUCT
                                                                                          NS::|CGRect|)
                                                                                         :UNSIGNED-LONG-LONG
                                                                                         (:STRUCT
                                                                                          NS::|CGSize|)
                                                                                         :POINTER
                                                                                         (:POINTER
                                                                                          (:ARRAY
                                                                                           :CHAR
                                                                                           33)))
                                                                                        (:STRUCT
                                                                                         NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ resized-from-edge with-delta (ns-object-ptr with-event) (ns-object-ptr with-state))))

(defun NS::|_resizeSetFrame:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(_resizeSetFrame:withEvent:) (((:STRUCT
                                                               NS::|CGRect|)
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-event))))

(defun NS::|_stopSnappingToFrameTimer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_stopSnappingToFrameTimer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resizingShouldSnapToWindows| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_resizingShouldSnapToWindows) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_opaqueAspectDimensionForDimension:isHorizontal:| (thing _ is-horizontal)
  (let ((message-lambda 
         (make-message-lambda @(_opaqueAspectDimensionForDimension:isHorizontal:) ((:DOUBLE
                                                                                    :CHAR)
                                                                                   :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if is-horizontal 1 0))))

(defun NS::|_sizeForProposedSize:resizeEdges:| (thing _ resize-edges)
  (let ((message-lambda 
         (make-message-lambda @(_sizeForProposedSize:resizeEdges:) (((:STRUCT
                                                                      NS::|CGSize|)
                                                                     :UNSIGNED-LONG-LONG)
                                                                    (:STRUCT
                                                                     NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ resize-edges)))

(defun NS::|_wantsConstraintEngineSizeValidation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_wantsConstraintEngineSizeValidation) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_commonValidFrameForResizeFrame:fromResizeEdge:| (thing _ from-resize-edge)
  (let ((message-lambda 
         (make-message-lambda @(_commonValidFrameForResizeFrame:fromResizeEdge:) (((:STRUCT
                                                                                    NS::|CGRect|)
                                                                                   :UNSIGNED-LONG-LONG)
                                                                                  (:STRUCT
                                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ from-resize-edge)))

(defun NS::|_allowsSizeSnapping| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_allowsSizeSnapping) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_doScreenSizeSnappingFromResizedEdge:frame:state:| (thing _ frame state)
  (let ((message-lambda 
         (make-message-lambda @(_doScreenSizeSnappingFromResizedEdge:frame:state:) ((:UNSIGNED-LONG-LONG
                                                                                     (:STRUCT
                                                                                      NS::|CGRect|)
                                                                                     (:POINTER
                                                                                      (:ARRAY
                                                                                       :CHAR
                                                                                       33)))
                                                                                    (:STRUCT
                                                                                     NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ frame (ns-object-ptr state))))

(defun NS::|_sizeSnappedFrameForOppositeEdge:frame:state:| (thing _ frame state)
  (let ((message-lambda 
         (make-message-lambda @(_sizeSnappedFrameForOppositeEdge:frame:state:) ((:UNSIGNED-LONG-LONG
                                                                                 (:STRUCT
                                                                                  NS::|CGRect|)
                                                                                 (:POINTER
                                                                                  (:ARRAY
                                                                                   :CHAR
                                                                                   33)))
                                                                                (:STRUCT
                                                                                 NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ frame (ns-object-ptr state))))

(defun NS::|_startSnappingToFrameTimerAfterDelay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_startSnappingToFrameTimerAfterDelay:) ((:DOUBLE)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_unsnapSizeFromFrame:fromEdge:state:| (thing _ from-edge state)
  (let ((message-lambda 
         (make-message-lambda @(_unsnapSizeFromFrame:fromEdge:state:) (((:STRUCT
                                                                         NS::|CGRect|)
                                                                        :UNSIGNED-LONG-LONG
                                                                        (:POINTER
                                                                         (:ARRAY
                                                                          :CHAR
                                                                          33)))
                                                                       (:STRUCT
                                                                        NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ from-edge (ns-object-ptr state))))

(defun NS::|_doSnapToFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doSnapToFrame) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setFrameHeightDelta:resizingFromTop:frame:| (thing _ resizing-from-top frame)
  (let ((message-lambda 
         (make-message-lambda @(_setFrameHeightDelta:resizingFromTop:frame:) ((:DOUBLE
                                                                               :CHAR
                                                                               (:POINTER
                                                                                (:STRUCT
                                                                                 NS::|CGRect|)))
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if resizing-from-top 1 0) (ns-object-ptr frame))))

(defun NS::|_setFrameWidthDelta:resizingFromRight:frame:| (thing _ resizing-from-right frame)
  (let ((message-lambda 
         (make-message-lambda @(_setFrameWidthDelta:resizingFromRight:frame:) ((:DOUBLE
                                                                                :CHAR
                                                                                (:POINTER
                                                                                 (:STRUCT
                                                                                  NS::|CGRect|)))
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if resizing-from-right 1 0) (ns-object-ptr frame))))

(defun NS::|_snapWindowSizeWithFrame:resizeDirection:state:| (thing _ resize-direction state)
  (let ((message-lambda 
         (make-message-lambda @(_snapWindowSizeWithFrame:resizeDirection:state:) (((:STRUCT
                                                                                    NS::|CGRect|)
                                                                                   :LONG-LONG
                                                                                   (:POINTER
                                                                                    (:ARRAY
                                                                                     :CHAR
                                                                                     33)))
                                                                                  (:STRUCT
                                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ resize-direction (ns-object-ptr state))))

(defun NS::|_snapSizeToFrame:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(_snapSizeToFrame:withEvent:) (((:STRUCT
                                                                NS::|CGRect|)
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr with-event))))

(defun NS::|_provideActuationFeedbackWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_provideActuationFeedbackWithEvent:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setLiveResizedFrame:animated:| (thing _ animated)
  (let ((message-lambda 
         (make-message-lambda @(_setLiveResizedFrame:animated:) (((:STRUCT
                                                                   NS::|CGRect|)
                                                                  :CHAR)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (if animated 1 0))))

(defun NS::|_scrollViewIntersectsSoutheastGrowCorner:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scrollViewIntersectsSoutheastGrowCorner:) ((:POINTER)
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|liveResizeEdges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(liveResizeEdges) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isConsideredSheetForResizing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isConsideredSheetForResizing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_shouldDoScreenSizeSnappingFromResizedEdge:frame:state:| (thing _ frame state)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldDoScreenSizeSnappingFromResizedEdge:frame:state:) ((:UNSIGNED-LONG-LONG
                                                                                           (:STRUCT
                                                                                            NS::|CGRect|)
                                                                                           (:POINTER
                                                                                            (:ARRAY
                                                                                             :CHAR
                                                                                             33)))
                                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ frame (ns-object-ptr state)))) nil t))

(defun NS::|_shouldSnapSizeWhenResizing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldSnapSizeWhenResizing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_autolayoutEngagedSomewhereInWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_autolayoutEngagedSomewhereInWindow) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_windowResizeConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_windowResizeConstraints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layout_primitiveAnchorInfo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layout_primitiveAnchorInfo) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layout_defaultAnchorInfo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layout_defaultAnchorInfo) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layout_anchorInfo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layout_anchorInfo) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layout_setPrimitiveAnchorInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_layout_setPrimitiveAnchorInfo:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_setWindowResizeConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setWindowResizeConstraints:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_fromConstraintsCalculateWindowMinSize:maxSize:allowDynamicLayout:changingOnlySlightly:| (thing _ max-size allow-dynamic-layout changing-only-slightly)
  (let ((message-lambda 
         (make-message-lambda @(_fromConstraintsCalculateWindowMinSize:maxSize:allowDynamicLayout:changingOnlySlightly:) (((:POINTER
                                                                                                                            (:STRUCT
                                                                                                                             NS::|CGSize|))
                                                                                                                           (:POINTER
                                                                                                                            (:STRUCT
                                                                                                                             NS::|CGSize|))
                                                                                                                           :CHAR
                                                                                                                           :CHAR)
                                                                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr max-size) (if allow-dynamic-layout 1 0) (if changing-only-slightly 1 0))))

(defun NS::|anchorItemForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(anchorItemForOrientation:) ((:LONG-LONG)
                                                            :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_layout_anchorPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layout_anchorPoint) (NIL
                                                      (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layout_anchorPointInEngine| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layout_anchorPointInEngine) (NIL
                                                              (:STRUCT
                                                               NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_nsib_candidateRedundantConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_nsib_candidateRedundantConstraints) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_changeWindowFrameFromConstraintsIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_changeWindowFrameFromConstraintsIfNecessary) (NIL
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateConstraintsForEngineHostingViews:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_updateConstraintsForEngineHostingViews:) ((:POINTER)
                                                                           :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_layoutEngineIfAvailable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutEngineIfAvailable) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layoutEngineEngaging| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutEngineEngaging) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setAnchorItem:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setAnchorItem:forOrientation:) ((:POINTER
                                                                 :LONG-LONG)
                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) for-orientation)))

(defun NS::|_redundantConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_redundantConstraints) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_cleanupToolbarFromFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cleanupToolbarFromFullScreen) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_fullScreenTitlebarMinHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fullScreenTitlebarMinHeight) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_shouldOpenInFullScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldOpenInFullScreen) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_willBeInFullScreenSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_willBeInFullScreenSpace) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_someFullScreenInstanceHasSuppressedImplicitFullScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_someFullScreenInstanceHasSuppressedImplicitFullScreen) (NIL
                                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_reacquireToolbarViewFromFullScreenWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_reacquireToolbarViewFromFullScreenWindow) (NIL
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_enterFullScreenModeWithTransition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_enterFullScreenModeWithTransition:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_fullScreenPreferredJoinRatioDefaultsKey| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_fullScreenPreferredJoinRatioDefaultsKey) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doUpdateTilingConstraintsImmediately| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doUpdateTilingConstraintsImmediately) (NIL
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_needsTilingConstraintUpdate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_needsTilingConstraintUpdate) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_explicitlyAllowsFullScreenPrimary| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_explicitlyAllowsFullScreenPrimary) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_shouldJoinActiveSpaceOnOrderIn| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_shouldJoinActiveSpaceOnOrderIn) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_explicitlyAllowsFullScreenAuxiliary| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_explicitlyAllowsFullScreenAuxiliary) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_tileFrameForFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tileFrameForFullScreen) (NIL
                                                          (:STRUCT
                                                           NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_savedFrameForExitingFullScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_savedFrameForExitingFullScreen) (NIL
                                                                  (:STRUCT
                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_isInFullScreenSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isInFullScreenSpace) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_enterFullScreenModeForRestorationAndSwitchToSpace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_enterFullScreenModeForRestorationAndSwitchToSpace) (NIL
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_tearDownFullScreenWithoutDestroyingSpace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_tearDownFullScreenWithoutDestroyingSpace) (NIL
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))






(defun NS::|set| (thing)
  (let ((message-lambda 
         (make-message-lambda @(set) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))





(defun NS::|CGColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CGColor) (NIL
                                          (:POINTER (:STRUCT NS::|CGColor|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setStroke| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setStroke) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|cyanComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cyanComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|magentaComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(magentaComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|yellowComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(yellowComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|blackComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(blackComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|alphaComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alphaComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|colorWithAlphaComponent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorWithAlphaComponent:) ((:DOUBLE) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|colorUsingColorSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorUsingColorSpace:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|redComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(redComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|greenComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(greenComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|blueComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(blueComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_colorWithModifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_colorWithModifier:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_luminance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_luminance) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|colorUsingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorUsingType:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|numberOfComponents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(numberOfComponents) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|getComponents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(getComponents:) (((:POINTER :DOUBLE)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))





(defun NS::|colorUsingColorSpaceName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorUsingColorSpaceName:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|initWithPasteboardPropertyList:ofType:| (thing _ of-type)
  (let ((message-lambda 
         (make-message-lambda @(initWithPasteboardPropertyList:ofType:) ((:POINTER
                                                                          :POINTER)
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr of-type))))

(defun NS::|getRed:green:blue:alpha:| (thing _ green blue alpha)
  (let ((message-lambda 
         (make-message-lambda @(getRed:green:blue:alpha:) (((:POINTER :DOUBLE)
                                                            (:POINTER :DOUBLE)
                                                            (:POINTER :DOUBLE)
                                                            (:POINTER :DOUBLE))
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr green) (ns-object-ptr blue) (ns-object-ptr alpha))))

(defun NS::|colorSpaceName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorSpaceName) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|blendedColorWithFraction:ofColor:| (thing _ of-color)
  (let ((message-lambda 
         (make-message-lambda @(blendedColorWithFraction:ofColor:) ((:DOUBLE
                                                                     :POINTER)
                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr of-color))))

(defun NS::|getWhite:alpha:| (thing _ alpha)
  (let ((message-lambda 
         (make-message-lambda @(getWhite:alpha:) (((:POINTER :DOUBLE)
                                                   (:POINTER :DOUBLE))
                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr alpha))))

(defun NS::|getCyan:magenta:yellow:black:alpha:| (thing _ magenta yellow black alpha)
  (let ((message-lambda 
         (make-message-lambda @(getCyan:magenta:yellow:black:alpha:) (((:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE))
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr magenta) (ns-object-ptr yellow) (ns-object-ptr black) (ns-object-ptr alpha))))

(defun NS::|_getSemanticallyEquivalentVisualEffectMaterial:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_getSemanticallyEquivalentVisualEffectMaterial:) (((:POINTER
                                                                                    :LONG-LONG))
                                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|setFill| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setFill) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|getHue:saturation:brightness:alpha:| (thing _ saturation brightness alpha)
  (let ((message-lambda 
         (make-message-lambda @(getHue:saturation:brightness:alpha:) (((:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE))
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr saturation) (ns-object-ptr brightness) (ns-object-ptr alpha))))

(defun NS::|patternImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(patternImage) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|whiteComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(whiteComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|colorUsingColorSpaceName:device:| (thing _ device)
  (let ((message-lambda 
         (make-message-lambda @(colorUsingColorSpaceName:device:) ((:POINTER
                                                                    :POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr device))))

(defun NS::|writableTypesForPasteboard:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(writableTypesForPasteboard:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|pasteboardPropertyListForType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteboardPropertyListForType:) ((:POINTER)
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_addColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_addColor:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_subtractColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_subtractColor:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isUniform| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isUniform) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|writeToPasteboard:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(writeToPasteboard:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|drawSwatchInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawSwatchInRect:) (((:STRUCT NS::|CGRect|))
                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_setAsSystemColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_setAsSystemColor) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|catalogNameComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(catalogNameComponent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|colorNameComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorNameComponent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|localizedCatalogNameComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedCatalogNameComponent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|localizedColorNameComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedColorNameComponent) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|hueComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hueComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|saturationComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(saturationComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|brightnessComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(brightnessComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_colorWithDynamicAlphaComponent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_colorWithDynamicAlphaComponent:) ((:DOUBLE)
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|highlightWithLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(highlightWithLevel:) ((:DOUBLE) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|shadowWithLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(shadowWithLevel:) ((:DOUBLE) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_isSourceListColor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isSourceListColor) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|colorWithSystemEffect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorWithSystemEffect:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_colorForSelectedTextBackground| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_colorForSelectedTextBackground) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_accessibilityValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_accessibilityValue) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_hsbColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_hsbColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|accessibilityName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityName) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_colorWithValue:forComponent:backupHue:backupSaturation:| (thing _ for-component backup-hue backup-saturation)
  (let ((message-lambda 
         (make-message-lambda @(_colorWithValue:forComponent:backupHue:backupSaturation:) ((:DOUBLE
                                                                                            :LONG-LONG
                                                                                            :DOUBLE
                                                                                            :DOUBLE)
                                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ for-component backup-hue backup-saturation)))

(defun NS::|scriptingColorDescriptor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scriptingColorDescriptor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))





(defun NS::|_count| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_count) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|allKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allKeys) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|initWithName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithName:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|writeToURL:error:| (thing _ error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeToURL:error:) ((:POINTER
                                                     (:POINTER :POINTER))
                                                    :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr error)))) nil t))


(defun NS::|colorWithKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorWithKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_localizedColorListName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_localizedColorListName) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_localizedNameForColorWithName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_localizedNameForColorWithName:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_initWithName:fromPath:forDeviceType:lazy:| (thing _ from-path for-device-type lazy)
  (let ((message-lambda 
         (make-message-lambda @(_initWithName:fromPath:forDeviceType:lazy:) ((:POINTER
                                                                              :POINTER
                                                                              :POINTER
                                                                              :CHAR)
                                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-path) (ns-object-ptr for-device-type) (if lazy 1 0))))

(defun NS::|_loadColors| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_loadColors) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|initWithName:fromFile:| (thing _ from-file)
  (let ((message-lambda 
         (make-message-lambda @(initWithName:fromFile:) ((:POINTER :POINTER)
                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-file))))

(defun NS::|_decodeWithoutNameWithCoder:newStyle:| (thing _ new-style)
  (let ((message-lambda 
         (make-message-lambda @(_decodeWithoutNameWithCoder:newStyle:) ((:POINTER
                                                                         :CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if new-style 1 0))))

(defun NS::|_rawAddColor:key:| (thing _ key)
  (let ((message-lambda 
         (make-message-lambda @(_rawAddColor:key:) ((:POINTER :POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr key))))

(defun NS::|_invalidateKeyToIndexTable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_invalidateKeyToIndexTable) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_parseKeyedArchivedList:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_parseKeyedArchivedList:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_parseArchivedList:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_parseArchivedList:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_parseReleaseTwoList:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_parseReleaseTwoList:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_parsePantoneLikeList:fileName:| (thing _ file-name)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_parsePantoneLikeList:fileName:) ((:POINTER
                                                                   :POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr file-name)))) nil t))

(defun NS::|_indexOfKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_indexOfKey:) ((:POINTER) :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_changed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_changed:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertColor:key:atIndex:| (thing _ key at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertColor:key:atIndex:) ((:POINTER :POINTER
                                                            :UNSIGNED-LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr key) at-index)))

(defun NS::|_localizedKeyFromBundleStringFileForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_localizedKeyFromBundleStringFileForKey:) ((:POINTER)
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_isProfileBased| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isProfileBased) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_encodeWithoutNameWithCoder:newStyle:| (thing _ new-style)
  (let ((message-lambda 
         (make-message-lambda @(_encodeWithoutNameWithCoder:newStyle:) ((:POINTER
                                                                         :CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if new-style 1 0))))

(defun NS::|_writeToURL:keyedArchive:error:| (thing _ keyed-archive error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_writeToURL:keyedArchive:error:) ((:POINTER
                                                                   :CHAR
                                                                   (:POINTER
                                                                    :POINTER))
                                                                  :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if keyed-archive 1 0) (ns-object-ptr error)))) nil t))

(defun NS::|removeFile| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeFile) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_rename:as:| (thing _ as)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_rename:as:) ((:POINTER :POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr as)))) nil t))

(defun NS::|setColor:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setColor:forKey:) ((:POINTER :POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))

(defun NS::|removeColorWithKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeColorWithKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_localizedColorListCopyrightString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_localizedColorListCopyrightString) (NIL
                                                                     :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setUpdated:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setUpdated:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_isUpdated| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isUpdated) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|writeToFile:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeToFile:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_pageForIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_pageForIndex:) ((:UNSIGNED-LONG-LONG)
                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_initWithName:fromColorSyncProfileRef:| (thing _ from-color-sync-profile-ref)
  (let ((message-lambda 
         (make-message-lambda @(_initWithName:fromColorSyncProfileRef:) ((:POINTER
                                                                          :POINTER)
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr from-color-sync-profile-ref))))

(defun NS::|_colorAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_colorAtIndex:) ((:UNSIGNED-LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_nameAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_nameAtIndex:) ((:UNSIGNED-LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_isPaged| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isPaged) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_pageCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_pageCount) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_infoForPage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_infoForPage:) ((:UNSIGNED-LONG-LONG)
                                                (:ARRAY :CHAR 24))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))





(defun NS::|depth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(depth) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_displayID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_displayID) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|visibleFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(visibleFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_UUIDString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_UUIDString) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|displayLinkWithTarget:selector:| (thing _ selector)
  (let ((message-lambda 
         (make-message-lambda @(displayLinkWithTarget:selector:) ((:POINTER
                                                                   :POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr selector))))



(defun NS::|_currentSpace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentSpace) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))






(defun NS::|_screenNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_screenNumber) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_copy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_copy) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dockOrientation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dockOrientation) (NIL :UNSIGNED-INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_revealedMenuBarHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_revealedMenuBarHeight) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|devicePixelCounts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(devicePixelCounts) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_initWithDisplay:sharedInfo:| (thing _ shared-info)
  (let ((message-lambda 
         (make-message-lambda @(_initWithDisplay:sharedInfo:) ((:POINTER
                                                                :POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr shared-info))))

(defun NS::|_isZeroScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isZeroScreen) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_layoutMenuBarHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutMenuBarHeight) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|_dockRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dockRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layoutFrameForSafeVisibleFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutFrameForSafeVisibleFrame) (NIL
                                                                  (:STRUCT
                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_daisyFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_daisyFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_resolution| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_resolution) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_updateWithDisplay:sharedInfo:| (thing _ shared-info)
  (let ((message-lambda 
         (make-message-lambda @(_updateWithDisplay:sharedInfo:) ((:POINTER
                                                                  :POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr shared-info))))

(defun NS::|maximumExtendedDynamicRangeColorComponentValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumExtendedDynamicRangeColorComponentValue) (NIL
                                                                                 :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|maximumPotentialExtendedDynamicRangeColorComponentValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumPotentialExtendedDynamicRangeColorComponentValue) (NIL
                                                                                          :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|maximumReferenceExtendedDynamicRangeColorComponentValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumReferenceExtendedDynamicRangeColorComponentValue) (NIL
                                                                                          :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_dockHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_dockHidden) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_daisyFrameForSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_daisyFrameForSpace:) ((:UNSIGNED-LONG-LONG)
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_restingMenuBarHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_restingMenuBarHeight) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layoutForcingRevealedMenuBarHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutForcingRevealedMenuBarHeight) (NIL
                                                                      :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_safeVisibleFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_safeVisibleFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_safeAreaFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_safeAreaFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|supportedWindowDepths| (thing)
  (let ((message-lambda 
         (make-message-lambda @(supportedWindowDepths) (NIL (:POINTER :INT))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|bezelPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bezelPath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|imageInRect:underWindow:| (thing _ under-window)
  (let ((message-lambda 
         (make-message-lambda @(imageInRect:underWindow:) (((:STRUCT
                                                             NS::|CGRect|)
                                                            :POINTER)
                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr under-window))))

(defun NS::|_isActiveScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isActiveScreen) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_hwModel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_hwModel) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|maximumFramesPerSecond| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumFramesPerSecond) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|minimumRefreshInterval| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minimumRefreshInterval) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|maximumRefreshInterval| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumRefreshInterval) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|displayUpdateGranularity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayUpdateGranularity) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|lastDisplayUpdateTimestamp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lastDisplayUpdateTimestamp) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|auxiliaryTopLeftArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(auxiliaryTopLeftArea) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|auxiliaryTopRightArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(auxiliaryTopRightArea) (NIL
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|displayLinkWithHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayLinkWithHandler:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_bestSettingWithBitsPerPixel:width:height:refreshRate:exactMatch:| (thing _ width height refresh-rate exact-match)
  (let ((message-lambda 
         (make-message-lambda @(_bestSettingWithBitsPerPixel:width:height:refreshRate:exactMatch:) ((:INT
                                                                                                     :INT
                                                                                                     :INT
                                                                                                     :DOUBLE
                                                                                                     (:POINTER
                                                                                                      :CHAR))
                                                                                                    :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ width height refresh-rate (ns-object-ptr exact-match))))

(defun NS::|_capture:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_capture:) (((:POINTER :POINTER)) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_isCaptured| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_isCaptured) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_releaseCapture:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_releaseCapture:) (((:POINTER :POINTER)) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_currentSetting| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_currentSetting) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_availableSettings| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_availableSettings) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_bestSettingWithBitsPerPixel:width:height:exactMatch:| (thing _ width height exact-match)
  (let ((message-lambda 
         (make-message-lambda @(_bestSettingWithBitsPerPixel:width:height:exactMatch:) ((:INT
                                                                                         :INT
                                                                                         :INT
                                                                                         (:POINTER
                                                                                          :CHAR))
                                                                                        :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ width height (ns-object-ptr exact-match))))

(defun NS::|_bestSettingSimilarToSetting:exactMatch:| (thing _ exact-match)
  (let ((message-lambda 
         (make-message-lambda @(_bestSettingSimilarToSetting:exactMatch:) ((:POINTER
                                                                            (:POINTER
                                                                             :CHAR))
                                                                           :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr exact-match))))

(defun NS::|_switchToSetting:error:| (thing _ error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_switchToSetting:error:) ((:POINTER
                                                           (:POINTER :POINTER))
                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr error)))) nil t))

(defun NS::|attributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributes) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|CGContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CGContext) (NIL
                                            (:POINTER
                                             (:STRUCT NS::|CGContext|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|saveGraphicsState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(saveGraphicsState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|restoreGraphicsState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restoreGraphicsState) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|patternPhase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(patternPhase) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setPatternPhase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPatternPhase:) (((:STRUCT NS::|CGPoint|))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_releaseCIContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_releaseCIContext) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|flushGraphics| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flushGraphics) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setShouldAntialias:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShouldAntialias:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|shouldAntialias| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldAntialias) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))





(defun NS::|colorRenderingIntent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorRenderingIntent) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setColorRenderingIntent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setColorRenderingIntent:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|CIContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CIContext) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isDrawingToScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDrawingToScreen) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|CALayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CALayer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|focusStack| (thing)
  (let ((message-lambda 
         (make-message-lambda @(focusStack) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFocusStack:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFocusStack:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|colorFactory| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorFactory) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))








(defun NS::|setLineWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineWidth:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|lineWidth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineWidth) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|elementCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(elementCount) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|elementAtIndex:associatedPoints:| (thing _ associated-points)
  (let ((message-lambda 
         (make-message-lambda @(elementAtIndex:associatedPoints:) ((:LONG-LONG
                                                                    (:POINTER
                                                                     (:STRUCT
                                                                      NS::|CGPoint|)))
                                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr associated-points))))

(defun NS::|transformUsingAffineTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(transformUsingAffineTransform:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|appendBezierPathWithRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithRect:) (((:STRUCT
                                                              NS::|CGRect|))
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|appendBezierPathWithOvalInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithOvalInRect:) (((:STRUCT
                                                                    NS::|CGRect|))
                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|appendBezierPathWithRoundedRect:xRadius:yRadius:| (thing _ x-radius y-radius)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithRoundedRect:xRadius:yRadius:) (((:STRUCT
                                                                                     NS::|CGRect|)
                                                                                    :DOUBLE
                                                                                    :DOUBLE)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ x-radius y-radius)))

(defun NS::|appendBezierPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPath:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|windingRule| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windingRule) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setWindingRule:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindingRule:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|lineCapStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineCapStyle) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setLineCapStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineCapStyle:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|lineJoinStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineJoinStyle) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setLineJoinStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineJoinStyle:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|miterLimit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(miterLimit) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setMiterLimit:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMiterLimit:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|flatness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flatness) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFlatness:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFlatness:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setLineDash:count:phase:| (thing _ count phase)
  (let ((message-lambda 
         (make-message-lambda @(setLineDash:count:phase:) (((:POINTER :DOUBLE)
                                                            :LONG-LONG :DOUBLE)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) count phase)))

(defun NS::|_deviceMoveToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_deviceMoveToPoint:) (((:STRUCT NS::|CGPoint|))
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_deviceLineToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_deviceLineToPoint:) (((:STRUCT NS::|CGPoint|))
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_deviceCurveToPoint:controlPoint1:controlPoint2:| (thing _ control-point1 control-point2)
  (let ((message-lambda 
         (make-message-lambda @(_deviceCurveToPoint:controlPoint1:controlPoint2:) (((:STRUCT
                                                                                     NS::|CGPoint|)
                                                                                    (:STRUCT
                                                                                     NS::|CGPoint|)
                                                                                    (:STRUCT
                                                                                     NS::|CGPoint|))
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ control-point1 control-point2)))

(defun NS::|_deviceClosePath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_deviceClosePath) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|currentPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentPoint) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_doPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_doPath) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|addClip| (thing)
  (let ((message-lambda 
         (make-message-lambda @(addClip) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|lineToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lineToPoint:) (((:STRUCT NS::|CGPoint|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|moveToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToPoint:) (((:STRUCT NS::|CGPoint|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|closePath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(closePath) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|subdivideBezierWithFlatness:startPoint:controlPoint1:controlPoint2:endPoint:| (thing _ start-point control-point1 control-point2 end-point)
  (let ((message-lambda 
         (make-message-lambda @(subdivideBezierWithFlatness:startPoint:controlPoint1:controlPoint2:endPoint:) ((:DOUBLE
                                                                                                                (:STRUCT
                                                                                                                 NS::|CGPoint|)
                                                                                                                (:STRUCT
                                                                                                                 NS::|CGPoint|)
                                                                                                                (:STRUCT
                                                                                                                 NS::|CGPoint|)
                                                                                                                (:STRUCT
                                                                                                                 NS::|CGPoint|))
                                                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ start-point control-point1 control-point2 end-point)))

(defun NS::|flattenIntoPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(flattenIntoPath:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|curveToPoint:controlPoint1:controlPoint2:| (thing _ control-point1 control-point2)
  (let ((message-lambda 
         (make-message-lambda @(curveToPoint:controlPoint1:controlPoint2:) (((:STRUCT
                                                                              NS::|CGPoint|)
                                                                             (:STRUCT
                                                                              NS::|CGPoint|)
                                                                             (:STRUCT
                                                                              NS::|CGPoint|))
                                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ control-point1 control-point2)))

(defun NS::|controlPointBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(controlPointBounds) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_appendToPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_appendToPath:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:| (thing _ radius start-angle end-angle)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:) (((:STRUCT
                                                                                                  NS::|CGPoint|)
                                                                                                 :DOUBLE
                                                                                                 :DOUBLE
                                                                                                 :DOUBLE)
                                                                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ radius start-angle end-angle)))

(defun NS::|_appendArcSegmentWithCenter:radius:angle1:angle2:| (thing _ radius angle1 angle2)
  (let ((message-lambda 
         (make-message-lambda @(_appendArcSegmentWithCenter:radius:angle1:angle2:) (((:STRUCT
                                                                                      NS::|CGPoint|)
                                                                                     :DOUBLE
                                                                                     :DOUBLE
                                                                                     :DOUBLE)
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ radius angle1 angle2)))

(defun NS::|appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:| (thing _ radius start-angle end-angle clockwise)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:) (((:STRUCT
                                                                                                            NS::|CGPoint|)
                                                                                                           :DOUBLE
                                                                                                           :DOUBLE
                                                                                                           :DOUBLE
                                                                                                           :CHAR)
                                                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ radius start-angle end-angle (if clockwise 1 0))))

(defun NS::|appendBezierPathWithNativeGlyphs:advances:count:inFont:| (thing _ advances count in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithNativeGlyphs:advances:count:inFont:) (((:POINTER
                                                                                            :UNSIGNED-SHORT)
                                                                                           (:POINTER
                                                                                            (:STRUCT
                                                                                             NS::|CGSize|))
                                                                                           :UNSIGNED-LONG-LONG
                                                                                           :POINTER)
                                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr advances) count (ns-object-ptr in-font))))

(defun NS::|_initializeSegmentsFromDecodedBytes:length:requiresSecureCoding:error:| (thing _ length requires-secure-coding error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_initializeSegmentsFromDecodedBytes:length:requiresSecureCoding:error:) (((:POINTER
                                                                                                           :VOID)
                                                                                                          :UNSIGNED-LONG-LONG
                                                                                                          :CHAR
                                                                                                          (:POINTER
                                                                                                           :POINTER))
                                                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) length (if requires-secure-coding 1 0) (ns-object-ptr error)))) nil t))

(defun NS::|_initializeDashPatternFromDecodedBytes:length:requiresSecureCoding:error:| (thing _ length requires-secure-coding error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_initializeDashPatternFromDecodedBytes:length:requiresSecureCoding:error:) (((:POINTER
                                                                                                              :VOID)
                                                                                                             :UNSIGNED-LONG-LONG
                                                                                                             :CHAR
                                                                                                             (:POINTER
                                                                                                              :POINTER))
                                                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) length (if requires-secure-coding 1 0) (ns-object-ptr error)))) nil t))

(defun NS::|removeAllPoints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeAllPoints) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|relativeMoveToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(relativeMoveToPoint:) (((:STRUCT
                                                         NS::|CGPoint|))
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|relativeLineToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(relativeLineToPoint:) (((:STRUCT
                                                         NS::|CGPoint|))
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|relativeCurveToPoint:controlPoint1:controlPoint2:| (thing _ control-point1 control-point2)
  (let ((message-lambda 
         (make-message-lambda @(relativeCurveToPoint:controlPoint1:controlPoint2:) (((:STRUCT
                                                                                      NS::|CGPoint|)
                                                                                     (:STRUCT
                                                                                      NS::|CGPoint|)
                                                                                     (:STRUCT
                                                                                      NS::|CGPoint|))
                                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ control-point1 control-point2)))

(defun NS::|getLineDash:count:phase:| (thing _ count phase)
  (let ((message-lambda 
         (make-message-lambda @(getLineDash:count:phase:) (((:POINTER :DOUBLE)
                                                            (:POINTER
                                                             :LONG-LONG)
                                                            (:POINTER :DOUBLE))
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr count) (ns-object-ptr phase))))

(defun NS::|CGPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CGPath) (NIL (:POINTER (:STRUCT NS::|CGPath|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|stroke| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stroke) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|fill| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fill) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setClip| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setClip) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|bezierPathByFlatteningPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bezierPathByFlatteningPath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_copyFlattenedPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_copyFlattenedPath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|bezierPathByReversingPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bezierPathByReversingPath) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|elementAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(elementAtIndex:) ((:LONG-LONG)
                                                  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAssociatedPoints:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(setAssociatedPoints:atIndex:) (((:POINTER
                                                                 (:STRUCT
                                                                  NS::|CGPoint|))
                                                                :LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-index)))

(defun NS::|appendBezierPathWithPoints:count:| (thing _ count)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithPoints:count:) (((:POINTER
                                                                      (:STRUCT
                                                                       NS::|CGPoint|))
                                                                     :LONG-LONG)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) count)))

(defun NS::|appendBezierPathWithArcFromPoint:toPoint:radius:| (thing _ to-point radius)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithArcFromPoint:toPoint:radius:) (((:STRUCT
                                                                                     NS::|CGPoint|)
                                                                                    (:STRUCT
                                                                                     NS::|CGPoint|)
                                                                                    :DOUBLE)
                                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ to-point radius)))

(defun NS::|appendBezierPathWithCGGlyph:inFont:| (thing _ in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithCGGlyph:inFont:) ((:UNSIGNED-SHORT
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-font))))

(defun NS::|appendBezierPathWithCGGlyphs:count:inFont:| (thing _ count in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithCGGlyphs:count:inFont:) (((:POINTER
                                                                               :UNSIGNED-SHORT)
                                                                              :LONG-LONG
                                                                              :POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) count (ns-object-ptr in-font))))

(defun NS::|containsPoint:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(containsPoint:) (((:STRUCT NS::|CGPoint|))
                                                 :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|_addPathSegment:point:| (thing _ point)
  (let ((message-lambda 
         (make-message-lambda @(_addPathSegment:point:) ((:LONG-LONG
                                                          (:STRUCT
                                                           NS::|CGPoint|))
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ point)))

(defun NS::|cachesBezierPath| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(cachesBezierPath) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setCachesBezierPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCachesBezierPath:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|appendBezierPathWithGlyph:inFont:| (thing _ in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithGlyph:inFont:) ((:UNSIGNED-INT
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-font))))

(defun NS::|appendBezierPathWithGlyphs:count:inFont:| (thing _ count in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithGlyphs:count:inFont:) (((:POINTER
                                                                             :UNSIGNED-INT)
                                                                            :LONG-LONG
                                                                            :POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) count (ns-object-ptr in-font))))

(defun NS::|appendBezierPathWithPackedGlyphs:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithPackedGlyphs:) ((:STRING)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_appendBezierPathWithRoundRect:cornerRadius:| (thing _ corner-radius)
  (let ((message-lambda 
         (make-message-lambda @(_appendBezierPathWithRoundRect:cornerRadius:) (((:STRUCT
                                                                                 NS::|CGRect|)
                                                                                :DOUBLE)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ corner-radius)))

(defun NS::|_appendBezierPathWithTopRoundRect:cornerRadius:| (thing _ corner-radius)
  (let ((message-lambda 
         (make-message-lambda @(_appendBezierPathWithTopRoundRect:cornerRadius:) (((:STRUCT
                                                                                    NS::|CGRect|)
                                                                                   :DOUBLE)
                                                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ corner-radius)))

(defun NS::|_appendBezierPathWithBottomRoundRect:cornerRadius:| (thing _ corner-radius)
  (let ((message-lambda 
         (make-message-lambda @(_appendBezierPathWithBottomRoundRect:cornerRadius:) (((:STRUCT
                                                                                       NS::|CGRect|)
                                                                                      :DOUBLE)
                                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ corner-radius)))

(defun NS::|ak_serverFriendlyString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ak_serverFriendlyString) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isAfterDate:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAfterDate:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|isBeforeDate:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isBeforeDate:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|bs_dateByAddingDays:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_dateByAddingDays:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|daysSince1970| (thing)
  (let ((message-lambda 
         (make-message-lambda @(daysSince1970) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))





(defun NS::|dateWithCalendarFormat:timeZone:| (thing _ time-zone)
  (let ((message-lambda 
         (make-message-lambda @(dateWithCalendarFormat:timeZone:) ((:POINTER
                                                                    :POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr time-zone))))

(defun NS::|descriptionWithCalendarFormat:timeZone:locale:| (thing _ time-zone locale)
  (let ((message-lambda 
         (make-message-lambda @(descriptionWithCalendarFormat:timeZone:locale:) ((:POINTER
                                                                                  :POINTER
                                                                                  :POINTER)
                                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr time-zone) (ns-object-ptr locale))))

(defun NS::|_web_compareDay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_web_compareDay:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_web_RFC1123DateString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_web_RFC1123DateString) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_web_isToday| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_web_isToday) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_scriptingDateDescriptor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_scriptingDateDescriptor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|timeIntervalSince1970WithBucket:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSince1970WithBucket:) ((:UNSIGNED-INT)
                                                                   :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|bucketToRoundingFactor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bucketToRoundingFactor:) ((:UNSIGNED-INT)
                                                          :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))






(defun NS::|timeIntervalSince1970| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSince1970) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))




(defun NS::|descriptionWithLocale:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(descriptionWithLocale:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|timeIntervalSinceReferenceDate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSinceReferenceDate) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|initWithTimeIntervalSinceReferenceDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithTimeIntervalSinceReferenceDate:) ((:DOUBLE)
                                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|isEqualToDate:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqualToDate:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|initWithString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithString:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|dateByAddingTimeInterval:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dateByAddingTimeInterval:) ((:DOUBLE) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|earlierDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(earlierDate:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|laterDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(laterDate:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|timeIntervalSinceDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSinceDate:) ((:POINTER) :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|timeIntervalSinceNow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSinceNow) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|initWithTimeIntervalSinceNow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithTimeIntervalSinceNow:) ((:DOUBLE)
                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|initWithTimeIntervalSince1970:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithTimeIntervalSince1970:) ((:DOUBLE)
                                                                 :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|initWithTimeInterval:sinceDate:| (thing _ since-date)
  (let ((message-lambda 
         (make-message-lambda @(initWithTimeInterval:sinceDate:) ((:DOUBLE
                                                                   :POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr since-date))))

(defun NS::|initWithDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithDate:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|addTimeInterval:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addTimeInterval:) ((:DOUBLE) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|isInToday| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInToday) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isInTomorrow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInTomorrow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isInYesterday| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInYesterday) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isInSameDayAsDate:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInSameDayAsDate:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|isEqual:toUnitGranularity:| (thing _ to-unit-granularity)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqual:toUnitGranularity:) ((:POINTER
                                                              :UNSIGNED-LONG-LONG)
                                                             :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) to-unit-granularity))) nil t))

(defun NS::|compare:toUnitGranularity:| (thing _ to-unit-granularity)
  (let ((message-lambda 
         (make-message-lambda @(compare:toUnitGranularity:) ((:POINTER
                                                              :UNSIGNED-LONG-LONG)
                                                             :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) to-unit-granularity)))

(defun NS::|NS_view| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_view) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|NS_setView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_setView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|NS_managesOpenGLDrawable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_managesOpenGLDrawable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|NS_wantsToPrefetchTiles| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_wantsToPrefetchTiles) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|NS_showPrefetchedContentsIfNecessaryInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_showPrefetchedContentsIfNecessaryInRect:) (((:STRUCT
                                                                                NS::|CGRect|))
                                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|NS_setPresentationRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_setPresentationRect:) (((:STRUCT
                                                            NS::|CGRect|))
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|NS_suggestedContentsScale| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_suggestedContentsScale) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|NS_suggestedContentsScaleDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_suggestedContentsScaleDidChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|NS_invalidatePreparedContentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_invalidatePreparedContentRect) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|NS_prepareContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_prepareContentRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|NS_convertTriangle:toLayer:| (thing _ to-layer)
  (let ((message-lambda 
         (make-message-lambda @(NS_convertTriangle:toLayer:) (((:ARRAY :CHAR
                                                                48)
                                                               :POINTER)
                                                              (:ARRAY :CHAR 48))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-layer))))

(defun NS::|NS_defersTransformInvalidation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_defersTransformInvalidation) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|NS_setDefersTransformInvalidation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_setDefersTransformInvalidation:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|NS_contextDefaultContentsScaleDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_contextDefaultContentsScaleDidChange) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|visualTabPicker_hitTestIgnoringTransformLayers:inRootLayer:| (thing _ in-root-layer)
  (let ((message-lambda 
         (make-message-lambda @(visualTabPicker_hitTestIgnoringTransformLayers:inRootLayer:) (((:STRUCT
                                                                                                NS::|CGPoint|)
                                                                                               :POINTER)
                                                                                              :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr in-root-layer))))

(defun NS::|nearestAncestorIgnoringTransformLayers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nearestAncestorIgnoringTransformLayers) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|NS_prefetchContentsInRect:scrollVelocity:| (thing _ scroll-velocity)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_prefetchContentsInRect:scrollVelocity:) (((:STRUCT
                                                                              NS::|CGRect|)
                                                                             (:STRUCT
                                                                              NS::|CGPoint|))
                                                                            :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ scroll-velocity))) nil t))

(defun NS::|NS_isDebugOverlay| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_isDebugOverlay) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|NS_setIsScrolling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_setIsScrolling:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|NS_setPreparedContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_setPreparedContentRect:) (((:STRUCT
                                                               NS::|CGRect|))
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|NS_renderedRectInRect:scrollVelocity:| (thing _ scroll-velocity)
  (let ((message-lambda 
         (make-message-lambda @(NS_renderedRectInRect:scrollVelocity:) (((:STRUCT
                                                                          NS::|CGRect|)
                                                                         (:STRUCT
                                                                          NS::|CGPoint|))
                                                                        (:STRUCT
                                                                         NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ scroll-velocity)))

(defun NS::|NS_activeVisibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_activeVisibleRect) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|NS_visibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_visibleRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|NS_makeContentsLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_makeContentsLayer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|NS_hasPrefetchedContentsForRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_hasPrefetchedContentsForRect:) (((:STRUCT
                                                                     NS::|CGRect|))
                                                                   :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|NS_hasPrefetchedContents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_hasPrefetchedContents) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|NS_hasPartialPrefetchedContentsForRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_hasPartialPrefetchedContentsForRect:) (((:STRUCT
                                                                            NS::|CGRect|))
                                                                          :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  _))) nil t))

(defun NS::|NS_backingLayerContentsClass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_backingLayerContentsClass) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|NS_dropPrefetchedContentsIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_dropPrefetchedContentsIfNecessary) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_NS_dumpContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_NS_dumpContents) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|PKG_updateLayerKey| (thing)
  (let ((message-lambda 
         (make-message-lambda @(PKG_updateLayerKey) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|PKG_materialLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(PKG_materialLayer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|PKG_setUpdateLayerKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(PKG_setUpdateLayerKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|PKG_setMaterialLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(PKG_setMaterialLayer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))




(defun NS::|size| (thing)
  (let ((message-lambda 
         (make-message-lambda @(size) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))














(defun NS::|hidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hidden) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))





(defun NS::|style| (thing)
  (let ((message-lambda 
         (make-message-lambda @(style) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|contents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contents) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|borderColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(borderColor) (NIL
                                              (:POINTER
                                               (:STRUCT NS::|CGColor|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|transform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(transform) (NIL (:STRUCT NS::|CATransform3D|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|position| (thing)
  (let ((message-lambda 
         (make-message-lambda @(position) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))




(defun NS::|duration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(duration) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPosition:) (((:STRUCT NS::|CGPoint|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStyle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setDuration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDuration:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|shadowOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowOffset) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|shadowColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowColor) (NIL
                                              (:POINTER
                                               (:STRUCT NS::|CGColor|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|addSublayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addSublayer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))



(defun NS::|removeFromSuperlayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeFromSuperlayer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))












(defun NS::|modelLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(modelLayer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|insertSublayer:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertSublayer:atIndex:) ((:POINTER
                                                           :UNSIGNED-INT)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-index)))

(defun NS::|setFilters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFilters:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setContentsGravity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsGravity:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContents:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertSublayer:below:| (thing _ below)
  (let ((message-lambda 
         (make-message-lambda @(insertSublayer:below:) ((:POINTER :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr below))))

(defun NS::|setSpeed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSpeed:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAutoreverses:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoreverses:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setRepeatCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepeatCount:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|addAnimation:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(addAnimation:forKey:) ((:POINTER :POINTER)
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr for-key))))

(defun NS::|setBorderColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBorderColor:) (((:POINTER
                                                    (:STRUCT NS::|CGColor|)))
                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setContentsScale:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsScale:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|setOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOpacity:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAnchorPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAnchorPoint:) (((:STRUCT NS::|CGPoint|))
                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))



(defun NS::|repeatDuration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(repeatDuration) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|repeatCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(repeatCount) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|beginTime| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginTime) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|speed| (thing)
  (let ((message-lambda 
         (make-message-lambda @(speed) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|autoreverses| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoreverses) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))



(defun NS::|superlayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(superlayer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setMasksToBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMasksToBounds:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|_dealloc| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_dealloc) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|anchorPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(anchorPoint) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setBorderWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBorderWidth:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|mask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mask) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMask:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|sublayers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sublayers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|opaque| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(opaque) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))


(defun NS::|borderWidth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(borderWidth) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))






(defun NS::|setFillMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFillMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|contentsCenter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsCenter) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentsScale| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsScale) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|sublayerTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sublayerTransform) (NIL
                                                    (:STRUCT
                                                     NS::|CATransform3D|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setSublayerTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSublayerTransform:) (((:STRUCT
                                                          NS::|CATransform3D|))
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setBeginTime:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBeginTime:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|insertSublayer:above:| (thing _ above)
  (let ((message-lambda 
         (make-message-lambda @(insertSublayer:above:) ((:POINTER :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr above))))

(defun NS::|_preferredSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_preferredSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|convertRect:toLayer:| (thing _ to-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertRect:toLayer:) (((:STRUCT NS::|CGRect|)
                                                        :POINTER)
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-layer))))

(defun NS::|setShadowOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowOpacity:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setShadowRadius:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowRadius:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setShadowColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowColor:) (((:POINTER
                                                    (:STRUCT NS::|CGColor|)))
                                                  :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|setMinificationFilter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinificationFilter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setMinificationFilterBias:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinificationFilterBias:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|presentationLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(presentationLayer) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setShadowOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowOffset:) (((:STRUCT NS::|CGSize|))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|shadowOpacity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowOpacity) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|shadowRadius| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowRadius) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|removeAnimationForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeAnimationForKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setTimeOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTimeOffset:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setSublayers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSublayers:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))




(defun NS::|_display| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_display) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setCornerCurve:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerCurve:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setMaskedCorners:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaskedCorners:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setZPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setZPosition:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|setContentsCenter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsCenter:) (((:STRUCT NS::|CGRect|))
                                                     :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setGeometryFlipped:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGeometryFlipped:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setHitTestsAsOpaque:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHitTestsAsOpaque:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|contentsAreFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsAreFlipped) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|actionForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(actionForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTransform:) (((:STRUCT NS::|CATransform3D|))
                                                :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setContentsTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsTransform:) (((:STRUCT
                                                          NS::|CGAffineTransform|))
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setContentsScaling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsScaling:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setContentsMultiplyColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsMultiplyColor:) (((:POINTER
                                                              (:STRUCT
                                                               NS::|CGColor|)))
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setContentsSwizzle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsSwizzle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|layoutSublayers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutSublayers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_renderForegroundInContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_renderForegroundInContext:) (((:POINTER
                                                                (:STRUCT
                                                                 NS::|CGContext|)))
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setLayoutManager:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayoutManager:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setNeedsLayoutOnGeometryChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsLayoutOnGeometryChange:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setNeedsLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsLayout) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|layerDidBecomeVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(layerDidBecomeVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|initWithLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithLayer:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|drawInContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawInContext:) (((:POINTER
                                                   (:STRUCT NS::|CGContext|)))
                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|setContentsRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsRect:) (((:STRUCT NS::|CGRect|))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAffineTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAffineTransform:) (((:STRUCT
                                                        NS::|CGAffineTransform|))
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|zPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(zPosition) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|reloadValueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(reloadValueForKeyPath:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setWantsExtendedDynamicRangeContent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsExtendedDynamicRangeContent:) ((:CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|convertPoint:fromLayer:| (thing _ from-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertPoint:fromLayer:) (((:STRUCT
                                                            NS::|CGPoint|)
                                                           :POINTER)
                                                          (:STRUCT
                                                           NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-layer))))

(defun NS::|filters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(filters) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|opacity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(opacity) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|replaceSublayer:with:| (thing _ with)
  (let ((message-lambda 
         (make-message-lambda @(replaceSublayer:with:) ((:POINTER :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr with))))

(defun NS::|setEdgeAntialiasingMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEdgeAntialiasingMask:) ((:UNSIGNED-INT)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAllowsGroupBlending:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsGroupBlending:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setShouldRasterize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShouldRasterize:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setRasterizationScale:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRasterizationScale:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setMagnificationFilter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMagnificationFilter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setActions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setActions:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setAllowsGroupOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsGroupOpacity:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|animationKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animationKeys) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|hasBeenCommitted| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasBeenCommitted) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|wantsExtendedDynamicRangeContent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsExtendedDynamicRangeContent) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setContentsFormat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsFormat:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|layoutBelowIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutBelowIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setDrawsAsynchronously:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawsAsynchronously:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|clearHasBeenCommitted| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clearHasBeenCommitted) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|renderInContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(renderInContext:) (((:POINTER
                                                     (:STRUCT
                                                      NS::|CGContext|)))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setShadowPathIsBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowPathIsBounds:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|removeAllAnimations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeAllAnimations) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|convertRect:fromLayer:| (thing _ from-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertRect:fromLayer:) (((:STRUCT
                                                           NS::|CGRect|)
                                                          :POINTER)
                                                         (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-layer))))

(defun NS::|masksToBounds| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(masksToBounds) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|invalidateContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateContents) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setLiteralContentsCenter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLiteralContentsCenter:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setFloating:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFloating:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|isFloating| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFloating) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setAllowsHitTesting:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsHitTesting:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|floating| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(floating) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setHitTestsContentsAlphaChannel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHitTestsContentsAlphaChannel:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setAllowsEdgeAntialiasing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsEdgeAntialiasing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|fillMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fillMode) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setCornerContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerContents:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setCornerContentsCenter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerContentsCenter:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setContentsOpaque:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsOpaque:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setNeedsDisplayOnBoundsChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplayOnBoundsChange:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|convertPoint:toLayer:| (thing _ to-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertPoint:toLayer:) (((:STRUCT
                                                          NS::|CGPoint|)
                                                         :POINTER)
                                                        (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-layer))))

(defun NS::|clearsContext| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(clearsContext) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setClearsContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setClearsContext:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|drawsAsynchronously| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsAsynchronously) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|minificationFilter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minificationFilter) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|magnificationFilter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(magnificationFilter) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|layerBeingDrawn| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layerBeingDrawn) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setContentsChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setContentsChanged) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|meshTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(meshTransform) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|affineTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(affineTransform) (NIL
                                                  (:STRUCT
                                                   NS::|CGAffineTransform|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setMeshTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMeshTransform:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|isFrozen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFrozen) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|CAMLParser:setValue:forKey:| (thing _ set-value for-key)
  (let ((message-lambda 
         (make-message-lambda @(CAMLParser:setValue:forKey:) ((:POINTER
                                                               :POINTER
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr set-value) (ns-object-ptr for-key))))



(defun NS::|implicitAnimationForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(implicitAnimationForKeyPath:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_copyRenderLayer:layerFlags:commitFlags:| (thing _ layer-flags commit-flags)
  (let ((message-lambda 
         (make-message-lambda @(_copyRenderLayer:layerFlags:commitFlags:) (((:POINTER
                                                                             :VOID)
                                                                            :UNSIGNED-INT
                                                                            (:POINTER
                                                                             :UNSIGNED-INT))
                                                                           (:POINTER
                                                                            :VOID))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) layer-flags (ns-object-ptr commit-flags))))

(defun NS::|_colorSpaceDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_colorSpaceDidChange) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_renderLayerDefinesProperty:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_renderLayerDefinesProperty:) ((:UNSIGNED-INT)
                                                               :BOOL)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_renderLayerPropertyAnimationFlags:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_renderLayerPropertyAnimationFlags:) ((:UNSIGNED-INT)
                                                                      :UNSIGNED-INT)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|_initWithReference:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_initWithReference:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|attributesForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(attributesForKeyPath:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))


(defun NS::|preferredFrameSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredFrameSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|sublayerEnumerator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sublayerEnumerator) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|layoutIsActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(layoutIsActive) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|shouldArchiveValueForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldArchiveValueForKey:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _)))) nil t))

(defun NS::|_canDisplayConcurrently| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_canDisplayConcurrently) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setUnsafeUnretainedDelegate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUnsafeUnretainedDelegate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|acceleratesDrawing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceleratesDrawing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setSizeRequisition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSizeRequisition:) (((:STRUCT NS::|CGSize|))
                                                      :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_prepareContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_prepareContext:) (((:POINTER
                                                     (:STRUCT
                                                      NS::|CGContext|)))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|insertState:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertState:atIndex:) ((:POINTER :UNSIGNED-INT)
                                                       :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) at-index)))

(defun NS::|addState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addState:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|removeState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeState:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|stateWithName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stateWithName:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|dependentStatesOfState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dependentStatesOfState:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|stateTransitionFrom:to:| (thing _ to)
  (let ((message-lambda 
         (make-message-lambda @(stateTransitionFrom:to:) ((:POINTER :POINTER)
                                                          :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to))))

(defun NS::|_scrollPoint:fromLayer:| (thing _ from-layer)
  (let ((message-lambda 
         (make-message-lambda @(_scrollPoint:fromLayer:) (((:STRUCT
                                                            NS::|CGPoint|)
                                                           :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-layer))))

(defun NS::|_scrollRect:fromLayer:| (thing _ from-layer)
  (let ((message-lambda 
         (make-message-lambda @(_scrollRect:fromLayer:) (((:STRUCT
                                                           NS::|CGRect|)
                                                          :POINTER)
                                                         :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-layer))))

(defun NS::|_visibleRectOfLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_visibleRectOfLayer:) ((:POINTER)
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|timeOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeOffset) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|minificationFilterBias| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minificationFilterBias) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentsRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setRepeatDuration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepeatDuration:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|_didCommitLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_didCommitLayer:) (((:POINTER :VOID)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_defersDidBecomeVisiblePostCommit| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_defersDidBecomeVisiblePostCommit) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_retainColorSpace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_retainColorSpace) (NIL
                                                    (:POINTER
                                                     (:STRUCT
                                                      NS::|CGColorSpace|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|anchorPointZ| (thing)
  (let ((message-lambda 
         (make-message-lambda @(anchorPointZ) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|needsLayoutOnGeometryChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsLayoutOnGeometryChange) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_renderImageCopyFlags| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_renderImageCopyFlags) (NIL :UNSIGNED-INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|layerDidChangeDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(layerDidChangeDisplay:) ((:UNSIGNED-INT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|contentsScaling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsScaling) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|needsDisplayOnBoundsChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsDisplayOnBoundsChange) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|separatedOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(separatedOptions) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|resizeSublayersWithOldSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(resizeSublayersWithOldSize:) (((:STRUCT
                                                                NS::|CGSize|))
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|ancestorSharedWithLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(ancestorSharedWithLayer:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|ignoresHitTesting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ignoresHitTesting) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|allowsHitTesting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsHitTesting) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|isDoubleSided| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDoubleSided) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|sortsSublayers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(sortsSublayers) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_scheduleAnimationTimer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_scheduleAnimationTimer) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_cancelAnimationTimer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_cancelAnimationTimer) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_continuousCorners| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(_continuousCorners) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_renderBackgroundInContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_renderBackgroundInContext:) (((:POINTER
                                                                (:STRUCT
                                                                 NS::|CGContext|)))
                                                              :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_renderSublayersInContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_renderSublayersInContext:) (((:POINTER
                                                               (:STRUCT
                                                                NS::|CGContext|)))
                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_renderBorderInContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_renderBorderInContext:) (((:POINTER
                                                            (:STRUCT
                                                             NS::|CGContext|)))
                                                          :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|edgeAntialiasingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(edgeAntialiasingMask) (NIL :UNSIGNED-INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentsTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsTransform) (NIL
                                                    (:STRUCT
                                                     NS::|CGAffineTransform|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentsMultiplyColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsMultiplyColor) (NIL
                                                        (:POINTER
                                                         (:STRUCT
                                                          NS::|CGColor|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentsSwizzle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsSwizzle) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|isSeparated| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSeparated) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_overrideImageFormat| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_overrideImageFormat) (NIL :INT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|drawsMipmapLevels| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsMipmapLevels) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|_previousLayoutHash| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_previousLayoutHash) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_layoutHash| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_layoutHash) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_setPreviousLayoutHash:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_setPreviousLayoutHash:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|_saveCurrentLayoutHash| (thing)
  (let ((message-lambda 
         (make-message-lambda @(_saveCurrentLayoutHash) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_validateLayoutHashHasChangedWithLayoutTime:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_validateLayoutHashHasChangedWithLayoutTime:) ((:DOUBLE)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|sizeRequisition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sizeRequisition) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|resizeWithOldSuperlayerSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(resizeWithOldSuperlayerSize:) (((:STRUCT
                                                                 NS::|CGSize|))
                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|isGeometryFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGeometryFlipped) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|convertTime:fromLayer:| (thing _ from-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertTime:fromLayer:) ((:DOUBLE :POINTER)
                                                         :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr from-layer))))

(defun NS::|convertTime:toLayer:| (thing _ to-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertTime:toLayer:) ((:DOUBLE :POINTER)
                                                       :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ (ns-object-ptr to-layer))))

(defun NS::|rasterizationScale| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rasterizationScale) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|securityMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(securityMode) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setSecurityMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSecurityMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|contentsFormat| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsFormat) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentsGravity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsGravity) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|contentsGravityEnum| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsGravityEnum) (NIL :LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|unsafeUnretainedDelegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsafeUnretainedDelegate) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|_contentsFormatDidChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(_contentsFormatDidChange:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|maskedCorners| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maskedCorners) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|cornerCurve| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cornerCurve) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|continuousCorners| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(continuousCorners) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setContinuousCorners:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContinuousCorners:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setAnchorPointZ:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAnchorPointZ:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|cornerContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cornerContents) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setDoubleSided:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDoubleSided:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|cornerContentsCenter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cornerContentsCenter) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|cornerContentsMasksEdges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(cornerContentsMasksEdges) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setCornerContentsMasksEdges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerContentsMasksEdges:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|contentsContainsSubtitles| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsContainsSubtitles) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setContentsContainsSubtitles:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsContainsSubtitles:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|gain| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gain) (NIL :FLOAT)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setGain:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGain:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|actions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(actions) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setShadowPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowPath:) (((:POINTER
                                                   (:STRUCT NS::|CGPath|)))
                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|shadowPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowPath) (NIL
                                             (:POINTER (:STRUCT NS::|CGPath|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|shouldRasterize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRasterize) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|rasterizationPrefersDisplayCompositing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rasterizationPrefersDisplayCompositing) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setRasterizationPrefersDisplayCompositing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRasterizationPrefersDisplayCompositing:) ((:CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|allowsEdgeAntialiasing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsEdgeAntialiasing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|allowsGroupOpacity| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsGroupOpacity) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|invertsContentsAreFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(invertsContentsAreFlipped) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setInvertsContentsAreFlipped:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInvertsContentsAreFlipped:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|doubleSided| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(doubleSided) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|backgroundColorPhase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backgroundColorPhase) (NIL
                                                       (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|separatedState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(separatedState) (NIL :UNSIGNED-CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|preloadsCache| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(preloadsCache) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|createsCompositingGroup| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(createsCompositingGroup) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|allowsDisplayCompositing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsDisplayCompositing) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|toneMapToStandardDynamicRange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(toneMapToStandardDynamicRange) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|allowsGroupBlending| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsGroupBlending) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|hitTestsContentsAlphaChannel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hitTestsContentsAlphaChannel) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|hitTestsAsOpaque| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hitTestsAsOpaque) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|literalContentsCenter| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(literalContentsCenter) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|inheritsTiming| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(inheritsTiming) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|treatRec709AsSRGB| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(treatRec709AsSRGB) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|invertsShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(invertsShadow) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|shadowPathIsBounds| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shadowPathIsBounds) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setSeparatedState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSeparatedState:) ((:UNSIGNED-CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|regionBeingDrawn| (thing)
  (let ((message-lambda 
         (make-message-lambda @(regionBeingDrawn) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|layerAtTime:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(layerAtTime:) ((:DOUBLE) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|addPresentationModifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addPresentationModifier:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|removePresentationModifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removePresentationModifier:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|presentationModifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(presentationModifiers) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setPresentationModifiers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPresentationModifiers:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setSeparated:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSeparated:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setFrozen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrozen:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setSortsSublayers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSortsSublayers:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|flipsHorizontalAxis| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(flipsHorizontalAxis) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setFlipsHorizontalAxis:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFlipsHorizontalAxis:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setInvertsShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInvertsShadow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|contentsAlignsToPixels| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsAlignsToPixels) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setContentsAlignsToPixels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsAlignsToPixels:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|contentsDither| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsDither) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setContentsDither:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsDither:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|contentsOpaque| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsOpaque) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setInheritsTiming:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInheritsTiming:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setPreloadsCache:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreloadsCache:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setCreatesCompositingGroup:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCreatesCompositingGroup:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setAllowsDisplayCompositing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsDisplayCompositing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setToneMapToStandardDynamicRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setToneMapToStandardDynamicRange:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setBackgroundColorPhase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackgroundColorPhase:) (((:STRUCT
                                                             NS::|CGSize|))
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|setAcceleratesDrawing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAcceleratesDrawing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setSeparatedOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSeparatedOptions:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|setTreatRec709AsSRGB:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTreatRec709AsSRGB:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|motionBlurAmount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(motionBlurAmount) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setMotionBlurAmount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMotionBlurAmount:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|getRendererInfo:size:| (thing _ size)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getRendererInfo:size:) (((:POINTER
                                                          (:STRUCT
                                                           NS::|_CARenderRendererInfo|))
                                                         :UNSIGNED-LONG-LONG)
                                                        :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) size))) nil t))

(defun NS::|optimizationOpportunities:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(optimizationOpportunities:) ((:CHAR) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))




(defun NS::|device| (thing)
  (let ((message-lambda 
         (make-message-lambda @(device) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setProtectionOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setProtectionOptions:) ((:UNSIGNED-LONG-LONG)
                                                        :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|protectionOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(protectionOptions) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setPixelFormat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPixelFormat:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|pixelFormat| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pixelFormat) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|framebufferOnly| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(framebufferOnly) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))




(defun NS::|drawableSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawableSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setDrawableSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawableSize:) (((:STRUCT NS::|CGSize|))
                                                   :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|isDrawableAvailable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDrawableAvailable) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|nextDrawable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nextDrawable) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|presentsWithTransaction| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(presentsWithTransaction) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|maximumDrawableCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumDrawableCount) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))


(defun NS::|setPresentsWithTransaction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPresentsWithTransaction:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|discardContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(discardContents) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setMaximumDrawableCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaximumDrawableCount:) ((:UNSIGNED-LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|lowLatency| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(lowLatency) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setLowLatency:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLowLatency:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setDrawableTimeoutSeconds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawableTimeoutSeconds:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))

(defun NS::|drawableTimeoutSeconds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawableTimeoutSeconds) (NIL :DOUBLE)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFramebufferOnly:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFramebufferOnly:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|allowsNextDrawableTimeout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsNextDrawableTimeout) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|fenceEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(fenceEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|serverSyncEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(serverSyncEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|displaySyncEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(displaySyncEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|colorspace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorspace) (NIL
                                             (:POINTER
                                              (:STRUCT NS::|CGColorSpace|)))))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|nonDefaultColorspace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nonDefaultColorspace) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|setColorspace:nonDefault:| (thing _ non-default)
  (let ((message-lambda 
         (make-message-lambda @(setColorspace:nonDefault:) (((:POINTER
                                                              (:STRUCT
                                                               NS::|CGColorSpace|))
                                                             :CHAR)
                                                            :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (if non-default 1 0))))

(defun NS::|setNonDefaultColorspace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNonDefaultColorspace:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setDevice:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDevice:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|preferredDevice| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredDevice) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setColorspace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setColorspace:) (((:POINTER
                                                   (:STRUCT
                                                    NS::|CGColorSpace|)))
                                                 :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|EDRMetadata| (thing)
  (let ((message-lambda 
         (make-message-lambda @(EDRMetadata) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setEDRMetadata:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEDRMetadata:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|newDrawable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(newDrawable) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setDisplaySyncEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDisplaySyncEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setAllowsNextDrawableTimeout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsNextDrawableTimeout:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|displayCompositingInternalStatus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayCompositingInternalStatus) (NIL
                                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|removeBackBuffers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeBackBuffers) (NIL :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|setFenceEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFenceEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setServerSyncEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setServerSyncEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|setMuxLockEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMuxLockEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (if _ 1 0))))

(defun NS::|muxLockEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(muxLockEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (ns-object-ptr thing) ))) nil t))

(defun NS::|detachNewThreadSelector:toTarget:withObject:| (thing _ to-target with-object)
  (let ((message-lambda 
         (make-message-lambda @(detachNewThreadSelector:toTarget:withObject:) ((:POINTER
                                                                                :POINTER
                                                                                :POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _) (ns-object-ptr to-target) (ns-object-ptr with-object))))

(defun NS::|sharedApplication| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedApplication) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|standardUserDefaults| (thing)
  (let ((message-lambda 
         (make-message-lambda @(standardUserDefaults) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|defaultCenter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(defaultCenter) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|currentApplication| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentApplication) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|strokeRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(strokeRect:) (((:STRUCT NS::|CGRect|)) :VOID)))) 
   (funcall message-lambda (ns-object-ptr thing)  _)))


(defun NS::|graphicsContextWithWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(graphicsContextWithWindow:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))

(defun NS::|whiteColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(whiteColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|clearColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clearColor) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|distantPast| (thing)
  (let ((message-lambda 
         (make-message-lambda @(distantPast) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|distantFuture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(distantFuture) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))

(defun NS::|otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:| (thing _ location modifier-flags timestamp window-number context subtype data1 data2)
  (let ((message-lambda 
         (make-message-lambda @(otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:) ((:UNSIGNED-LONG-LONG
                                                                                                                                 (:STRUCT
                                                                                                                                  NS::|CGPoint|)
                                                                                                                                 :UNSIGNED-LONG-LONG
                                                                                                                                 :DOUBLE
                                                                                                                                 :LONG-LONG
                                                                                                                                 :POINTER
                                                                                                                                 :SHORT
                                                                                                                                 :LONG-LONG
                                                                                                                                 :LONG-LONG)
                                                                                                                                :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  _ location modifier-flags timestamp window-number (ns-object-ptr context) subtype data1 data2)))

(defun NS::|new| (thing)
  (let ((message-lambda 
         (make-message-lambda @(new) (NIL :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing) )))



(defun NS::|bundleWithPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bundleWithPath:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (ns-object-ptr thing)  (ns-object-ptr _))))
