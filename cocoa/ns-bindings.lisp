(in-package :abstract-os)
(named-readtables:in-readtable :objc-readtable)


(defun NS::|accessibilityOverriddenAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityOverriddenAttributes) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityReplaceRange:withText:| (thing _ with-text)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityReplaceRange:withText:) (((:STRUCT
                                                                        NS::|_NSRange|)
                                                                       :POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-text)))) nil t))

(defun NS::|accessibilityVisibleArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleArea) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityArrayAttributeCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityArrayAttributeCount:) ((:POINTER)
                                                                    :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityIndexOfChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIndexOfChild:) ((:POINTER)
                                                             :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityArrayAttributeValues:index:maxCount:| (thing _ index max-count)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityArrayAttributeValues:index:maxCount:) ((:POINTER
                                                                                     :UNSIGNED-LONG-LONG
                                                                                     :UNSIGNED-LONG-LONG)
                                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) index max-count)))

(defun NS::|accessibilityParameterizedAttributeNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityParameterizedAttributeNames) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityAttributeValue:forParameter:| (thing _ for-parameter)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributeValue:forParameter:) ((:POINTER
                                                                             :POINTER)
                                                                            :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-parameter))))

(defun NS::|accessibilityIndexForChildUIElementAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIndexForChildUIElementAttributeForParameter:) ((:POINTER)
                                                                                            :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityAttributedValueForStringAttributeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributedValueForStringAttributeAttributeForParameter:) ((:POINTER)
                                                                                                       :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityTemporaryChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTemporaryChildren) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityPerformShowMenuOfChild:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformShowMenuOfChild:) ((:POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|accessibilityPresenterProcessIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPresenterProcessIdentifier) (NIL
                                                                          :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityShouldUseUniqueId| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityShouldUseUniqueId) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySupportsOverriddenAttributes| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilitySupportsOverriddenAttributes) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySupportsNotifications| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilitySupportsNotifications) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityShouldSendNotification:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityShouldSendNotification:) ((:POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|accessibilityAllowsOverriddenAttributesWhenIgnored| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityAllowsOverriddenAttributesWhenIgnored) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySetOverrideValue:forAttribute:| (thing _ for-attribute)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetOverrideValue:forAttribute:) ((:POINTER
                                                                               :POINTER)
                                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-attribute)))) nil t))

(defun NS::|accessibilityEncodeOverriddenAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityEncodeOverriddenAttributes:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityDecodeOverriddenAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDecodeOverriddenAttributes:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySupportsCustomElementData| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilitySupportsCustomElementData) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|bind:toObject:withKeyPath:options:| (thing _ to-object with-key-path options)
  (let ((message-lambda 
         (make-message-lambda @(bind:toObject:withKeyPath:options:) ((:POINTER
                                                                      :POINTER
                                                                      :POINTER
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-object) (objc-object-id with-key-path) (objc-object-id options))))

(defun NS::|awakeFromNib| (thing)
  (let ((message-lambda 
         (make-message-lambda @(awakeFromNib) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|userInterfaceItemIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userInterfaceItemIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setUserInterfaceItemIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUserInterfaceItemIdentifier:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|unbind:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unbind:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|valueClassForBinding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueClassForBinding:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|NS_observationForKeyPath:options:block:| (thing _ options block)
  (let ((message-lambda 
         (make-message-lambda @(NS_observationForKeyPath:options:block:) ((:POINTER
                                                                           :UNSIGNED-LONG-LONG
                                                                           :POINTER)
                                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options (objc-object-id block))))

(defun NS::|NS_observationForKeyPaths:options:block:| (thing _ options block)
  (let ((message-lambda 
         (make-message-lambda @(NS_observationForKeyPaths:options:block:) ((:POINTER
                                                                            :UNSIGNED-LONG-LONG
                                                                            :POINTER)
                                                                           :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options (objc-object-id block))))

(defun NS::|optionDescriptionsForBinding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(optionDescriptionsForBinding:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|exposedBindings| (thing)
  (let ((message-lambda 
         (make-message-lambda @(exposedBindings) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|infoForBinding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(infoForBinding:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|prepareForInterfaceBuilder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(prepareForInterfaceBuilder) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityAddTemporaryChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAddTemporaryChild:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityRemoveTemporaryChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRemoveTemporaryChild:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|NSLifeguard_autorelease| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NSLifeguard_autorelease) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilitySetPresenterProcessIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetPresenterProcessIdentifier:) ((:INT)
                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|NS_tiledLayerVisibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_tiledLayerVisibleRect) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|NS_addTiledLayerDescendent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_addTiledLayerDescendent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|NS_removeTiledLayerDescendent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_removeTiledLayerDescendent:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|CA_addValue:multipliedBy:| (thing _ multiplied-by)
  (let ((message-lambda 
         (make-message-lambda @(CA_addValue:multipliedBy:) ((:POINTER :INT)
                                                            :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) multiplied-by)))

(defun NS::|CA_interpolateValue:byFraction:| (thing _ by-fraction)
  (let ((message-lambda 
         (make-message-lambda @(CA_interpolateValue:byFraction:) ((:POINTER
                                                                   :FLOAT)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) by-fraction)))

(defun NS::|CA_distanceToValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_distanceToValue:) ((:POINTER) :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|CA_roundToIntegerFromValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_roundToIntegerFromValue:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|CA_prepareRenderValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CA_prepareRenderValue) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|CA_copyRenderValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CA_copyRenderValue) (NIL
                                                     (:POINTER
                                                      (:STRUCT NS::|Object|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|CA_copyRenderValueWithColorspace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_copyRenderValueWithColorspace:) (((:POINTER
                                                                      (:STRUCT
                                                                       NS::|CGColorSpace|)))
                                                                    (:POINTER
                                                                     (:STRUCT
                                                                      NS::|Object|)))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|CA_copyNumericValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_copyNumericValue:) (((:ARRAY :DOUBLE 20))
                                                       :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|CAMLTypeForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CAMLTypeForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|CAMLTypeSupportedForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(CAMLTypeSupportedForKey:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|CA_validateValue:forKey:| (thing _ for-key)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(CA_validateValue:forKey:) ((:POINTER :POINTER)
                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key)))) nil t))

(defun NS::|encodeWithCAMLWriter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(encodeWithCAMLWriter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|CA_interpolateValues:::interpolator:| (thing _ g766 g767 interpolator)
  (let ((message-lambda 
         (make-message-lambda @(CA_interpolateValues:::interpolator:) ((:POINTER
                                                                        :POINTER
                                                                        :POINTER
                                                                        (:POINTER
                                                                         (:STRUCT
                                                                          NS::|ValueInterpolator|)))
                                                                       :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id g766) (objc-object-id g767) (objc-object-id interpolator))))

(defun NS::|CAMLType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CAMLType) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|CA_archivingValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_archivingValueForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|supportsRBSXPCSecureCoding| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(supportsRBSXPCSecureCoding) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|RBSIsXPCObject| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(RBSIsXPCObject) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|NSRepresentation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NSRepresentation) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|supportsBSXPCSecureCoding| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(supportsBSXPCSecureCoding) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|bs_isPlistableType| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(bs_isPlistableType) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|bs_secureEncoded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bs_secureEncoded) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|bs_encoded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bs_encoded) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|classForCoder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classForCoder) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|replacementObjectForCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replacementObjectForCoder:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|awakeAfterUsingCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(awakeAfterUsingCoder:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|implementsSelector:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(implementsSelector:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|setObservationInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setObservationInfo:) (((:POINTER :VOID)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forKey:) ((:POINTER :POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun NS::|replacementObjectForPortCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replacementObjectForPortCoder:) ((:POINTER)
                                                                 :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|willChangeValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(willChangeValueForKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|didChangeValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(didChangeValueForKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|valueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|valueForUndefinedKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueForUndefinedKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|addObserver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addObserver:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|classForKeyedArchiver| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classForKeyedArchiver) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|replacementObjectForKeyedArchiver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replacementObjectForKeyedArchiver:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|dictionaryWithValuesForKeys:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dictionaryWithValuesForKeys:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|valueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueForKeyPath:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|objectSpecifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(objectSpecifier) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|replacementObjectForArchiver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replacementObjectForArchiver:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|classForArchiver| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classForArchiver) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|attributeKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributeKeys) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|toOneRelationshipKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toOneRelationshipKeys) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|toManyRelationshipKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toManyRelationshipKeys) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|inverseForRelationshipKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(inverseForRelationshipKey:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|classDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classDescription) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|copyScriptingValue:forKey:withProperties:| (thing _ for-key with-properties)
  (let ((message-lambda 
         (make-message-lambda @(copyScriptingValue:forKey:withProperties:) ((:POINTER
                                                                             :POINTER
                                                                             :POINTER)
                                                                            :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key) (objc-object-id with-properties))))

(defun NS::|methodDescriptionForSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(methodDescriptionForSelector:) ((:POINTER)
                                                                (:POINTER
                                                                 (:STRUCT
                                                                  NS::|objc_method_description|)))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:| (thing _ for-value-for-key with-contents-value properties)
  (let ((message-lambda 
         (make-message-lambda @(newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:) ((:POINTER
                                                                                                          :POINTER
                                                                                                          :POINTER
                                                                                                          :POINTER)
                                                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-value-for-key) (objc-object-id with-contents-value) (objc-object-id properties))))

(defun NS::|handleQueryWithUnboundKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleQueryWithUnboundKey:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|handleTakeValue:forUnboundKey:| (thing _ for-unbound-key)
  (let ((message-lambda 
         (make-message-lambda @(handleTakeValue:forUnboundKey:) ((:POINTER
                                                                  :POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-unbound-key))))

(defun NS::|storedValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(storedValueForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|takeStoredValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(takeStoredValue:forKey:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun NS::|takeValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(takeValue:forKey:) ((:POINTER :POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun NS::|takeValue:forKeyPath:| (thing _ for-key-path)
  (let ((message-lambda 
         (make-message-lambda @(takeValue:forKeyPath:) ((:POINTER :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path))))

(defun NS::|valuesForKeys:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valuesForKeys:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|takeValuesFromDictionary:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeValuesFromDictionary:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|unableToSetNilForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unableToSetNilForKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|keyValueBindingForKey:typeMask:| (thing _ type-mask)
  (let ((message-lambda 
         (make-message-lambda @(keyValueBindingForKey:typeMask:) ((:POINTER
                                                                   :UNSIGNED-LONG-LONG)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) type-mask)))

(defun NS::|createKeyValueBindingForKey:typeMask:| (thing _ type-mask)
  (let ((message-lambda 
         (make-message-lambda @(createKeyValueBindingForKey:typeMask:) ((:POINTER
                                                                         :UNSIGNED-LONG-LONG)
                                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) type-mask)))

(defun NS::|validateValue:forKeyPath:error:| (thing _ for-key-path error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateValue:forKeyPath:error:) (((:POINTER
                                                                    :POINTER)
                                                                   :POINTER
                                                                   (:POINTER
                                                                    :POINTER))
                                                                  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path) (objc-object-id error)))) nil t))

(defun NS::|setValue:forKeyPath:| (thing _ for-key-path)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forKeyPath:) ((:POINTER :POINTER)
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path))))

(defun NS::|mutableArrayValueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableArrayValueForKeyPath:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|mutableOrderedSetValueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableOrderedSetValueForKeyPath:) ((:POINTER)
                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|mutableSetValueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableSetValueForKeyPath:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|addObserver:forObservableKeyPath:| (thing _ for-observable-key-path)
  (let ((message-lambda 
         (make-message-lambda @(addObserver:forObservableKeyPath:) ((:POINTER
                                                                     :POINTER)
                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-observable-key-path))))

(defun NS::|removeObservation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeObservation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|receiveObservedValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(receiveObservedValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|receiveObservedError:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(receiveObservedError:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|finishObserving| (thing)
  (let ((message-lambda 
         (make-message-lambda @(finishObserving) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setObservation:forObservingKeyPath:| (thing _ for-observing-key-path)
  (let ((message-lambda 
         (make-message-lambda @(setObservation:forObservingKeyPath:) ((:POINTER
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-observing-key-path))))

(defun NS::|addObserver:forKeyPath:options:context:| (thing _ for-key-path options context)
  (let ((message-lambda 
         (make-message-lambda @(addObserver:forKeyPath:options:context:) ((:POINTER
                                                                           :POINTER
                                                                           :UNSIGNED-LONG-LONG
                                                                           (:POINTER
                                                                            :VOID))
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path) options (objc-object-id context))))

(defun NS::|observeValueForKeyPath:ofObject:change:context:| (thing _ of-object change context)
  (let ((message-lambda 
         (make-message-lambda @(observeValueForKeyPath:ofObject:change:context:) ((:POINTER
                                                                                   :POINTER
                                                                                   :POINTER
                                                                                   (:POINTER
                                                                                    :VOID))
                                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id of-object) (objc-object-id change) (objc-object-id context))))

(defun NS::|removeObserver:forKeyPath:context:| (thing _ for-key-path context)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:forKeyPath:context:) ((:POINTER
                                                                      :POINTER
                                                                      (:POINTER
                                                                       :VOID))
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path) (objc-object-id context))))

(defun NS::|removeObservation:forObservableKeyPath:| (thing _ for-observable-key-path)
  (let ((message-lambda 
         (make-message-lambda @(removeObservation:forObservableKeyPath:) ((:POINTER
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-observable-key-path))))

(defun NS::|className| (thing)
  (let ((message-lambda 
         (make-message-lambda @(className) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|addChainedObservers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addChainedObservers:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|addObserverBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addObserverBlock:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|addObservationTransformer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addObservationTransformer:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setValue:forUndefinedKey:| (thing _ for-undefined-key)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forUndefinedKey:) ((:POINTER :POINTER)
                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-undefined-key))))

(defun NS::|setNilValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNilValueForKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|validateValue:forKey:error:| (thing _ for-key error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateValue:forKey:error:) (((:POINTER
                                                                :POINTER)
                                                               :POINTER
                                                               (:POINTER
                                                                :POINTER))
                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key) (objc-object-id error)))) nil t))

(defun NS::|mutableArrayValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableArrayValueForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|mutableOrderedSetValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableOrderedSetValueForKey:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|mutableSetValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableSetValueForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setValuesForKeysWithDictionary:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setValuesForKeysWithDictionary:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|willChange:valuesAtIndexes:forKey:| (thing _ values-at-indexes for-key)
  (let ((message-lambda 
         (make-message-lambda @(willChange:valuesAtIndexes:forKey:) ((:UNSIGNED-LONG-LONG
                                                                      :POINTER
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id values-at-indexes) (objc-object-id for-key))))

(defun NS::|didChange:valuesAtIndexes:forKey:| (thing _ values-at-indexes for-key)
  (let ((message-lambda 
         (make-message-lambda @(didChange:valuesAtIndexes:forKey:) ((:UNSIGNED-LONG-LONG
                                                                     :POINTER
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id values-at-indexes) (objc-object-id for-key))))

(defun NS::|willChangeValueForKey:withSetMutation:usingObjects:| (thing _ with-set-mutation using-objects)
  (let ((message-lambda 
         (make-message-lambda @(willChangeValueForKey:withSetMutation:usingObjects:) ((:POINTER
                                                                                       :UNSIGNED-LONG-LONG
                                                                                       :POINTER)
                                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) with-set-mutation (objc-object-id using-objects))))

(defun NS::|didChangeValueForKey:withSetMutation:usingObjects:| (thing _ with-set-mutation using-objects)
  (let ((message-lambda 
         (make-message-lambda @(didChangeValueForKey:withSetMutation:usingObjects:) ((:POINTER
                                                                                      :UNSIGNED-LONG-LONG
                                                                                      :POINTER)
                                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) with-set-mutation (objc-object-id using-objects))))

(defun NS::|observationInfo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(observationInfo) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|removeObserver:forKeyPath:| (thing _ for-key-path)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:forKeyPath:) ((:POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path))))

(defun NS::|autoContentAccessingProxy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autoContentAccessingProxy) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|coerceValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(coerceValue:forKey:) ((:POINTER :POINTER)
                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun NS::|setScriptingProperties:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScriptingProperties:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|scriptingValueForSpecifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scriptingValueForSpecifier:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|scriptingProperties| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scriptingProperties) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|coerceValueForScriptingProperties:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(coerceValueForScriptingProperties:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|valueAtIndex:inPropertyWithKey:| (thing _ in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(valueAtIndex:inPropertyWithKey:) ((:UNSIGNED-LONG-LONG
                                                                   :POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-property-with-key))))

(defun NS::|valueWithName:inPropertyWithKey:| (thing _ in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(valueWithName:inPropertyWithKey:) ((:POINTER
                                                                    :POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-property-with-key))))

(defun NS::|valueWithUniqueID:inPropertyWithKey:| (thing _ in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(valueWithUniqueID:inPropertyWithKey:) ((:POINTER
                                                                        :POINTER)
                                                                       :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-property-with-key))))

(defun NS::|insertValue:atIndex:inPropertyWithKey:| (thing _ at-index in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(insertValue:atIndex:inPropertyWithKey:) ((:POINTER
                                                                          :UNSIGNED-LONG-LONG
                                                                          :POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index (objc-object-id in-property-with-key))))

(defun NS::|replaceValueAtIndex:inPropertyWithKey:withValue:| (thing _ in-property-with-key with-value)
  (let ((message-lambda 
         (make-message-lambda @(replaceValueAtIndex:inPropertyWithKey:withValue:) ((:UNSIGNED-LONG-LONG
                                                                                    :POINTER
                                                                                    :POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-property-with-key) (objc-object-id with-value))))

(defun NS::|insertValue:inPropertyWithKey:| (thing _ in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(insertValue:inPropertyWithKey:) ((:POINTER
                                                                  :POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-property-with-key))))

(defun NS::|removeValueAtIndex:fromPropertyWithKey:| (thing _ from-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(removeValueAtIndex:fromPropertyWithKey:) ((:UNSIGNED-LONG-LONG
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-property-with-key))))

(defun NS::|classForPortCoder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classForPortCoder) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|performSelector:withObject:afterDelay:inModes:| (thing _ with-object after-delay in-modes)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:withObject:afterDelay:inModes:) ((:POINTER
                                                                                  :POINTER
                                                                                  :DOUBLE
                                                                                  :POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object) after-delay (objc-object-id in-modes))))

(defun NS::|performSelector:withObject:afterDelay:| (thing _ with-object after-delay)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:withObject:afterDelay:) ((:POINTER
                                                                          :POINTER
                                                                          :DOUBLE)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object) after-delay)))

(defun NS::|performSelector:object:afterDelay:| (thing _ object after-delay)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:object:afterDelay:) ((:POINTER
                                                                      :POINTER
                                                                      :DOUBLE)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id object) after-delay)))

(defun NS::|classCode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classCode) (NIL :UNSIGNED-INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqualTo:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|isLessThanOrEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLessThanOrEqualTo:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|isLessThan:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLessThan:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|isGreaterThanOrEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGreaterThanOrEqualTo:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|isGreaterThan:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGreaterThan:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|isNotEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNotEqualTo:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|doesContain:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(doesContain:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|isLike:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLike:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|isCaseInsensitiveLike:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isCaseInsensitiveLike:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|performSelector:onThread:withObject:waitUntilDone:modes:| (thing _ on-thread with-object wait-until-done modes)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:onThread:withObject:waitUntilDone:modes:) ((:POINTER
                                                                                            :POINTER
                                                                                            :POINTER
                                                                                            :CHAR
                                                                                            :POINTER)
                                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id on-thread) (objc-object-id with-object) (if wait-until-done 1 0) (objc-object-id modes))))

(defun NS::|performSelectorOnMainThread:withObject:waitUntilDone:modes:| (thing _ with-object wait-until-done modes)
  (let ((message-lambda 
         (make-message-lambda @(performSelectorOnMainThread:withObject:waitUntilDone:modes:) ((:POINTER
                                                                                               :POINTER
                                                                                               :CHAR
                                                                                               :POINTER)
                                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object) (if wait-until-done 1 0) (objc-object-id modes))))

(defun NS::|performSelectorOnMainThread:withObject:waitUntilDone:| (thing _ with-object wait-until-done)
  (let ((message-lambda 
         (make-message-lambda @(performSelectorOnMainThread:withObject:waitUntilDone:) ((:POINTER
                                                                                         :POINTER
                                                                                         :CHAR)
                                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object) (if wait-until-done 1 0))))

(defun NS::|performSelector:onThread:withObject:waitUntilDone:| (thing _ on-thread with-object wait-until-done)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:onThread:withObject:waitUntilDone:) ((:POINTER
                                                                                      :POINTER
                                                                                      :POINTER
                                                                                      :CHAR)
                                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id on-thread) (objc-object-id with-object) (if wait-until-done 1 0))))

(defun NS::|performSelectorInBackground:withObject:| (thing _ with-object)
  (let ((message-lambda 
         (make-message-lambda @(performSelectorInBackground:withObject:) ((:POINTER
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object))))

(defun NS::|classDescriptionForDestinationKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(classDescriptionForDestinationKey:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|entityName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(entityName) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|ownsDestinationObjectsForRelationshipKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ownsDestinationObjectsForRelationshipKey:) ((:POINTER)
                                                                            :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|validateValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(validateValue:forKey:) (((:POINTER :POINTER)
                                                         :POINTER)
                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun NS::|isToManyKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isToManyKey:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|removeObject:fromPropertyWithKey:| (thing _ from-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(removeObject:fromPropertyWithKey:) ((:POINTER
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id from-property-with-key))))

(defun NS::|addObject:toPropertyWithKey:| (thing _ to-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(addObject:toPropertyWithKey:) ((:POINTER
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-property-with-key))))

(defun NS::|validateTakeValue:forKeyPath:| (thing _ for-key-path)
  (let ((message-lambda 
         (make-message-lambda @(validateTakeValue:forKeyPath:) ((:POINTER
                                                                 :POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path))))

(defun NS::|addObject:toBothSidesOfRelationshipWithKey:| (thing _ to-both-sides-of-relationship-with-key)
  (let ((message-lambda 
         (make-message-lambda @(addObject:toBothSidesOfRelationshipWithKey:) ((:POINTER
                                                                               :POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-both-sides-of-relationship-with-key))))

(defun NS::|allPropertyKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allPropertyKeys) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|clearProperties| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clearProperties) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|flushKeyBindings| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flushKeyBindings) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|removeObject:fromBothSidesOfRelationshipWithKey:| (thing _ from-both-sides-of-relationship-with-key)
  (let ((message-lambda 
         (make-message-lambda @(removeObject:fromBothSidesOfRelationshipWithKey:) ((:POINTER
                                                                                    :POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id from-both-sides-of-relationship-with-key))))

(defun NS::|takeStoredValuesFromDictionary:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeStoredValuesFromDictionary:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isNSString__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSString__) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isNSCFConstantString__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSCFConstantString__) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isNSNumber__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSNumber__) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isNSDate__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSDate__) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isNSArray__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSArray__) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isNSDictionary__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSDictionary__) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isNSSet__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSSet__) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isNSData__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSData__) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isNSObject__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSObject__) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isNSOrderedSet__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSOrderedSet__) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isNSTimeZone__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSTimeZone__) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isNSValue__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSValue__) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|description| (thing)
  (let ((message-lambda 
         (make-message-lambda @(description) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|doesNotRecognizeSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(doesNotRecognizeSelector:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|methodSignatureForSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(methodSignatureForSelector:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|retain| (thing)
  (let ((message-lambda 
         (make-message-lambda @(retain) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|release| (thing)
  (let ((message-lambda 
         (make-message-lambda @(release) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|retainCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(retainCount) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|autorelease| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autorelease) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|copy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(copy) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|finalize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(finalize) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|dealloc| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dealloc) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isEqual:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqual:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|class| (thing)
  (let ((message-lambda 
         (make-message-lambda @(class) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|self| (thing)
  (let ((message-lambda 
         (make-message-lambda @(self) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|performSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|performSelector:withObject:| (thing _ with-object)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:withObject:) ((:POINTER
                                                               :POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object))))

(defun NS::|performSelector:withObject:withObject:| (thing _ with-object with-objectx)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:withObject:withObject:) ((:POINTER
                                                                          :POINTER
                                                                          :POINTER)
                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object) (objc-object-id with-objectx))))

(defun NS::|isProxy| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isProxy) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isKindOfClass:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isKindOfClass:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|isMemberOfClass:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMemberOfClass:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|conformsToProtocol:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(conformsToProtocol:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|respondsToSelector:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(respondsToSelector:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|zone| (thing)
  (let ((message-lambda 
         (make-message-lambda @(zone) (NIL (:POINTER (:STRUCT NS::|_NSZone|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|hash| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hash) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|superclass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(superclass) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|debugDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(debugDescription) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|init| (thing)
  (let ((message-lambda 
         (make-message-lambda @(init) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|retainWeakReference| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(retainWeakReference) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|allowsWeakReference| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsWeakReference) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|isFault| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFault) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|methodForSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(methodForSelector:) ((:POINTER)
                                                     (:POINTER :POINTER))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|forwardInvocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(forwardInvocation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|forwardingTargetForSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(forwardingTargetForSelector:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|mutableCopy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mutableCopy) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|loadNibNamed:owner:topLevelObjects:| (thing _ owner top-level-objects)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(loadNibNamed:owner:topLevelObjects:) ((:POINTER
                                                                       :POINTER
                                                                       (:POINTER
                                                                        :POINTER))
                                                                      :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id owner) (objc-object-id top-level-objects)))) nil t))

(defun NS::|imageForResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(imageForResource:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pathForSoundResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pathForSoundResource:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|contextHelpForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contextHelpForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|URLsForImageResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(URLsForImageResource:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|URLForImageResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(URLForImageResource:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pathForImageResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pathForImageResource:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|loadNibFile:externalNameTable:withZone:| (thing _ external-name-table with-zone)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(loadNibFile:externalNameTable:withZone:) ((:POINTER
                                                                           :POINTER
                                                                           (:POINTER
                                                                            (:STRUCT
                                                                             NS::|_NSZone|)))
                                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id external-name-table) (objc-object-id with-zone)))) nil t))

(defun NS::|loadNibFile:externalNameTable:options:withZone:| (thing _ external-name-table options with-zone)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(loadNibFile:externalNameTable:options:withZone:) ((:POINTER
                                                                                   :POINTER
                                                                                   :POINTER
                                                                                   (:POINTER
                                                                                    (:STRUCT
                                                                                     NS::|_NSZone|)))
                                                                                  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id external-name-table) (objc-object-id options) (objc-object-id with-zone)))) nil t))

(defun NS::|localizedStringInDeviceLanguageForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(localizedStringInDeviceLanguageForKey:) ((:POINTER)
                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|load| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(load) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|initWithURL:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithURL:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|preferredLocalizations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredLocalizations) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|infoDictionary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(infoDictionary) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|bundleIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bundleIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|bundleURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bundleURL) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|appStoreReceiptURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(appStoreReceiptURL) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|executableURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(executableURL) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|objectForInfoDictionaryKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(objectForInfoDictionaryKey:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|loadAndReturnError:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(loadAndReturnError:) (((:POINTER :POINTER))
                                                      :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|principalClass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(principalClass) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|bundlePath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bundlePath) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|resourceURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resourceURL) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|pathForResource:ofType:| (thing _ of-type)
  (let ((message-lambda 
         (make-message-lambda @(pathForResource:ofType:) ((:POINTER :POINTER)
                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id of-type))))

(defun NS::|URLForResource:withExtension:| (thing _ with-extension)
  (let ((message-lambda 
         (make-message-lambda @(URLForResource:withExtension:) ((:POINTER
                                                                 :POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-extension))))

(defun NS::|classNamed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(classNamed:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|URLForResource:withExtension:subdirectory:localization:| (thing _ with-extension subdirectory localization)
  (let ((message-lambda 
         (make-message-lambda @(URLForResource:withExtension:subdirectory:localization:) ((:POINTER
                                                                                           :POINTER
                                                                                           :POINTER
                                                                                           :POINTER)
                                                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-extension) (objc-object-id subdirectory) (objc-object-id localization))))

(defun NS::|URLForResource:withExtension:subdirectory:| (thing _ with-extension subdirectory)
  (let ((message-lambda 
         (make-message-lambda @(URLForResource:withExtension:subdirectory:) ((:POINTER
                                                                              :POINTER
                                                                              :POINTER)
                                                                             :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-extension) (objc-object-id subdirectory))))

(defun NS::|unload| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(unload) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|initWithPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithPath:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|localizations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizations) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|localizedInfoDictionary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedInfoDictionary) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isLoaded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLoaded) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|pathForResource:ofType:inDirectory:forLocalization:| (thing _ of-type in-directory for-localization)
  (let ((message-lambda 
         (make-message-lambda @(pathForResource:ofType:inDirectory:forLocalization:) ((:POINTER
                                                                                       :POINTER
                                                                                       :POINTER
                                                                                       :POINTER)
                                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id of-type) (objc-object-id in-directory) (objc-object-id for-localization))))

(defun NS::|pathsForResourcesOfType:inDirectory:forLocalization:| (thing _ in-directory for-localization)
  (let ((message-lambda 
         (make-message-lambda @(pathsForResourcesOfType:inDirectory:forLocalization:) ((:POINTER
                                                                                        :POINTER
                                                                                        :POINTER)
                                                                                       :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-directory) (objc-object-id for-localization))))

(defun NS::|localizedAttributedStringForKey:value:table:localization:| (thing _ value table localization)
  (let ((message-lambda 
         (make-message-lambda @(localizedAttributedStringForKey:value:table:localization:) ((:POINTER
                                                                                             :POINTER
                                                                                             :POINTER
                                                                                             :POINTER)
                                                                                            :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id value) (objc-object-id table) (objc-object-id localization))))

(defun NS::|pathForResource:ofType:inDirectory:| (thing _ of-type in-directory)
  (let ((message-lambda 
         (make-message-lambda @(pathForResource:ofType:inDirectory:) ((:POINTER
                                                                       :POINTER
                                                                       :POINTER)
                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id of-type) (objc-object-id in-directory))))

(defun NS::|pathsForResourcesOfType:inDirectory:| (thing _ in-directory)
  (let ((message-lambda 
         (make-message-lambda @(pathsForResourcesOfType:inDirectory:) ((:POINTER
                                                                        :POINTER)
                                                                       :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-directory))))

(defun NS::|findBundleResourceURLsCallingMethod:passingTest:| (thing _ passing-test)
  (let ((message-lambda 
         (make-message-lambda @(findBundleResourceURLsCallingMethod:passingTest:) ((:POINTER
                                                                                    :POINTER)
                                                                                   :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id passing-test))))

(defun NS::|URLsForResourcesWithExtension:subdirectory:localization:| (thing _ subdirectory localization)
  (let ((message-lambda 
         (make-message-lambda @(URLsForResourcesWithExtension:subdirectory:localization:) ((:POINTER
                                                                                            :POINTER
                                                                                            :POINTER)
                                                                                           :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id subdirectory) (objc-object-id localization))))

(defun NS::|URLsForResourcesWithExtension:subdirectory:| (thing _ subdirectory)
  (let ((message-lambda 
         (make-message-lambda @(URLsForResourcesWithExtension:subdirectory:) ((:POINTER
                                                                               :POINTER)
                                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id subdirectory))))

(defun NS::|localizedStringForKey:value:table:| (thing _ value table)
  (let ((message-lambda 
         (make-message-lambda @(localizedStringForKey:value:table:) ((:POINTER
                                                                      :POINTER
                                                                      :POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id value) (objc-object-id table))))

(defun NS::|localizedStringForKey:value:table:localization:| (thing _ value table localization)
  (let ((message-lambda 
         (make-message-lambda @(localizedStringForKey:value:table:localization:) ((:POINTER
                                                                                   :POINTER
                                                                                   :POINTER
                                                                                   :POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id value) (objc-object-id table) (objc-object-id localization))))

(defun NS::|resourcePath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resourcePath) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|executablePath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(executablePath) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|pathForAuxiliaryExecutable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pathForAuxiliaryExecutable:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|URLForAuxiliaryExecutable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(URLForAuxiliaryExecutable:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|privateFrameworksPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(privateFrameworksPath) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|privateFrameworksURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(privateFrameworksURL) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|sharedFrameworksPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedFrameworksPath) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|sharedFrameworksURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedFrameworksURL) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|sharedSupportPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedSupportPath) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|sharedSupportURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedSupportURL) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|builtInPlugInsPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(builtInPlugInsPath) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|builtInPlugInsURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(builtInPlugInsURL) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|versionNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(versionNumber) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|bundleLanguages| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bundleLanguages) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|invalidateResourceCache| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateResourceCache) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|pathForResource:ofType:inDirectory:forLanguage:| (thing _ of-type in-directory for-language)
  (let ((message-lambda 
         (make-message-lambda @(pathForResource:ofType:inDirectory:forLanguage:) ((:POINTER
                                                                                   :POINTER
                                                                                   :POINTER
                                                                                   :POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id of-type) (objc-object-id in-directory) (objc-object-id for-language))))

(defun NS::|pathsForResourcesOfType:inDirectory:forLanguage:| (thing _ in-directory for-language)
  (let ((message-lambda 
         (make-message-lambda @(pathsForResourcesOfType:inDirectory:forLanguage:) ((:POINTER
                                                                                    :POINTER
                                                                                    :POINTER)
                                                                                   :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-directory) (objc-object-id for-language))))

(defun NS::|developmentLocalization| (thing)
  (let ((message-lambda 
         (make-message-lambda @(developmentLocalization) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|preflightAndReturnError:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(preflightAndReturnError:) (((:POINTER
                                                             :POINTER))
                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|executableArchitectures| (thing)
  (let ((message-lambda 
         (make-message-lambda @(executableArchitectures) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|localizedAttributedStringForKey:value:table:| (thing _ value table)
  (let ((message-lambda 
         (make-message-lambda @(localizedAttributedStringForKey:value:table:) ((:POINTER
                                                                                :POINTER
                                                                                :POINTER)
                                                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id value) (objc-object-id table))))

(defun NS::|setPreservationPriority:forTags:| (thing _ for-tags)
  (let ((message-lambda 
         (make-message-lambda @(setPreservationPriority:forTags:) ((:DOUBLE
                                                                    :POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-tags))))

(defun NS::|setPreservationPriority:forTag:| (thing _ for-tag)
  (let ((message-lambda 
         (make-message-lambda @(setPreservationPriority:forTag:) ((:DOUBLE
                                                                   :POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-tag))))

(defun NS::|preservationPriorityForTag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(preservationPriorityForTag:) ((:POINTER)
                                                              :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))










(defun NS::|matchesProcess:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(matchesProcess:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|rbs_pid| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rbs_pid) (NIL :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|processPredicate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(processPredicate) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|copyWithZone:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copyWithZone:) (((:POINTER
                                                  (:STRUCT NS::|_NSZone|)))
                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun NS::|initWithChar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithChar:) ((:CHAR) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|initWithUnsignedChar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUnsignedChar:) ((:UNSIGNED-CHAR)
                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|initWithShort:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithShort:) ((:SHORT) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|initWithUnsignedShort:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUnsignedShort:) ((:UNSIGNED-SHORT)
                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|initWithInt:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithInt:) ((:INT) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|initWithUnsignedInt:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUnsignedInt:) ((:UNSIGNED-INT) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|initWithLong:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithLong:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|initWithLongLong:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithLongLong:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|initWithUnsignedLongLong:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUnsignedLongLong:) ((:UNSIGNED-LONG-LONG)
                                                            :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|initWithDouble:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithDouble:) ((:DOUBLE) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|charValue| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(charValue) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|unsignedCharValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsignedCharValue) (NIL :UNSIGNED-CHAR)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|shortValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shortValue) (NIL :SHORT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|unsignedShortValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsignedShortValue) (NIL :UNSIGNED-SHORT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|intValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(intValue) (NIL :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|unsignedIntValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsignedIntValue) (NIL :UNSIGNED-INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|longValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(longValue) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|unsignedLongValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsignedLongValue) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|floatValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(floatValue) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|doubleValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(doubleValue) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|longLongValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(longLongValue) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|unsignedLongLongValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsignedLongLongValue) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|redactedDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(redactedDescription) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|boolValue| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(boolValue) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|compare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(compare:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|encodeWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(encodeWithCoder:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|initWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithCoder:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isEqualToNumber:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqualToNumber:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|descriptionWithLocale:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(descriptionWithLocale:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|stringValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringValue) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|integerValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(integerValue) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|unsignedIntegerValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsignedIntegerValue) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|decimalValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(decimalValue) (NIL (:ARRAY :CHAR 22))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|initWithBool:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithBool:) ((:CHAR) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|initWithInteger:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithInteger:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|initWithUnsignedInteger:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUnsignedInteger:) ((:UNSIGNED-LONG-LONG)
                                                           :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|initWithUnsignedLong:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUnsignedLong:) ((:UNSIGNED-LONG-LONG)
                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|initWithFloat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithFloat:) ((:FLOAT) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|run| (thing)
  (let ((message-lambda 
         (make-message-lambda @(run) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))






(defun NS::|delegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(delegate) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setDelegate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDelegate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHidden) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|.cxx_destruct| (thing)
  (let ((message-lambda 
         (make-message-lambda @(.cxx_destruct) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun NS::|menu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(menu) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isActive) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))











(defun NS::|disableAutomaticTermination| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableAutomaticTermination) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|enableAutomaticTermination| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableAutomaticTermination) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isRunning| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRunning) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|context| (thing)
  (let ((message-lambda 
         (make-message-lambda @(context) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contextID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contextID) (NIL :UNSIGNED-INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|keyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyWindow) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|pushRegistrationDidRegisterWithDeviceToken:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pushRegistrationDidRegisterWithDeviceToken:) ((:POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pushRegistrationDidFailToRegister:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pushRegistrationDidFailToRegister:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pushRegistrationDidReceiveRemotePush:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pushRegistrationDidReceiveRemotePush:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setWindowsNeedUpdate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindowsNeedUpdate:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|nextEventMatchingMask:untilDate:inMode:dequeue:| (thing _ until-date in-mode dequeue)
  (let ((message-lambda 
         (make-message-lambda @(nextEventMatchingMask:untilDate:inMode:dequeue:) ((:UNSIGNED-LONG-LONG
                                                                                   :POINTER
                                                                                   :POINTER
                                                                                   :CHAR)
                                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id until-date) (objc-object-id in-mode) (if dequeue 1 0))))

(defun NS::|postEvent:atStart:| (thing _ at-start)
  (let ((message-lambda 
         (make-message-lambda @(postEvent:atStart:) ((:POINTER :CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if at-start 1 0))))

(defun NS::|effectiveAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(effectiveAppearance) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|appearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(appearance) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|activateIgnoringOtherApps:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(activateIgnoringOtherApps:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|windowWithWindowNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(windowWithWindowNumber:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|userInterfaceLayoutDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userInterfaceLayoutDirection) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityParent) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilitySetMayContainProtectedContent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetMayContainProtectedContent:) ((:CHAR)
                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityFocusedUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedUIElement) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityHitTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHitTest:) (((:STRUCT
                                                          NS::|CGPoint|))
                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsIgnored| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsIgnored) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|accessibilityAttributeNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributeNames) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityAttributeValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributeValue:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|mainMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mainMenu) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityMayContainProtectedContent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityMayContainProtectedContent) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|canEnterFullScreenMode| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canEnterFullScreenMode) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|targetForAction:to:from:| (thing _ to from)
  (let ((message-lambda 
         (make-message-lambda @(targetForAction:to:from:) ((:POINTER :POINTER
                                                            :POINTER)
                                                           :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to) (objc-object-id from))))

(defun NS::|mainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mainWindow) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|presentationOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(presentationOptions) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|windows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windows) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|enumerateWindowsWithOptions:usingBlock:| (thing _ using-block)
  (let ((message-lambda 
         (make-message-lambda @(enumerateWindowsWithOptions:usingBlock:) ((:LONG-LONG
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id using-block))))

(defun NS::|validateMenuItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateMenuItem:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|validateUserInterfaceItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateUserInterfaceItem:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|windowsMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowsMenu) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|closeAll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(closeAll:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|supplementalTargetForAction:sender:| (thing _ sender)
  (let ((message-lambda 
         (make-message-lambda @(supplementalTargetForAction:sender:) ((:POINTER
                                                                       :POINTER)
                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id sender))))


(defun NS::|accessibilityRoleAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRoleAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsRoleAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsRoleAttributeSettable) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityRoleDescriptionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRoleDescriptionAttribute) (NIL
                                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsRoleDescriptionAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsRoleDescriptionAttributeSettable) (NIL
                                                                                  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityIsAttributeSettable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsAttributeSettable:) ((:POINTER)
                                                                    :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|accessibilitySetValue:forAttribute:| (thing _ for-attribute)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetValue:forAttribute:) ((:POINTER
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-attribute))))

(defun NS::|accessibilityActionNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityActionNames) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityActionDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityActionDescription:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityPerformAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformAction:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAccessibilityMainThreadIdleNotificationEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMainThreadIdleNotificationEnabled:) ((:CHAR)
                                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setAccessibilityEventProcessedNotificationEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEventProcessedNotificationEnabled:) ((:CHAR)
                                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityChildrenAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChildrenAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|runModalForWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runModalForWindow:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|endSheet:returnCode:| (thing _ return-code)
  (let ((message-lambda 
         (make-message-lambda @(endSheet:returnCode:) ((:POINTER :LONG-LONG)
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) return-code)))

(defun NS::|stopModalWithCode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stopModalWithCode:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|speakString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(speakString:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|touchBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBar) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|terminate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(terminate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|hide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(hide:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setIsActive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsActive:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|orderFrontCharacterPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontCharacterPalette:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setApplicationIconImage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setApplicationIconImage:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|validRequestorForSendType:returnType:| (thing _ return-type)
  (let ((message-lambda 
         (make-message-lambda @(validRequestorForSendType:returnType:) ((:POINTER
                                                                         :POINTER)
                                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id return-type))))

(defun NS::|activationPolicy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(activationPolicy) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|unhideWithoutActivation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unhideWithoutActivation) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|currentSystemPresentationOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentSystemPresentationOptions) (NIL
                                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|updateWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateWindows) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|makeWindowsPerform:inOrder:| (thing _ in-order)
  (let ((message-lambda 
         (make-message-lambda @(makeWindowsPerform:inOrder:) ((:POINTER :CHAR)
                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if in-order 1 0))))

(defun NS::|modalWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(modalWindow) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|sendEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sendEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|finishLaunching| (thing)
  (let ((message-lambda 
         (make-message-lambda @(finishLaunching) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|beginModalSessionForWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(beginModalSessionForWindow:) ((:POINTER)
                                                              (:POINTER
                                                               (:STRUCT
                                                                NS::|_NSModalSession|)))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|endModalSession:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endModalSession:) (((:POINTER
                                                     (:STRUCT
                                                      NS::|_NSModalSession|)))
                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|beginModalSessionForWindow:relativeToWindow:| (thing _ relative-to-window)
  (let ((message-lambda 
         (make-message-lambda @(beginModalSessionForWindow:relativeToWindow:) ((:POINTER
                                                                                :POINTER)
                                                                               (:POINTER
                                                                                (:STRUCT
                                                                                 NS::|_NSModalSession|)))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id relative-to-window))))

(defun NS::|requestUserAttention:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(requestUserAttention:) ((:UNSIGNED-LONG-LONG)
                                                        :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|dockTile| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dockTile) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|cancelUserAttentionRequest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cancelUserAttentionRequest:) ((:LONG-LONG)
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|replyToApplicationShouldTerminate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replyToApplicationShouldTerminate:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|shouldRestoreStateOnNextLaunch| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRestoreStateOnNextLaunch) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|encodeRestorableStateWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(encodeRestorableStateWithCoder:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|restoreStateWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(restoreStateWithCoder:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|currentEvent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentEvent) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|activeSpaceChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(activeSpaceChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|quickLookPreviewItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(quickLookPreviewItems:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setMainMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMainMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|disableCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableCursorRects) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|enableCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableCursorRects) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|stopSpeaking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stopSpeaking:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isSpeaking| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSpeaking) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|runPageLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runPageLayout:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|startDictation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(startDictation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|stopDictation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stopDictation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|arrangeInFront:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(arrangeInFront:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|alternateArrangeInFront:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alternateArrangeInFront:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|miniaturizeAll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(miniaturizeAll:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|zoomAll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(zoomAll:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|unhideAllApplications:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unhideAllApplications:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|hideOtherApplications:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(hideOtherApplications:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleTouchBarCustomizationPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTouchBarCustomizationPalette:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleTouchBarControlStripCustomizationPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTouchBarControlStripCustomizationPalette:) ((:POINTER)
                                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|orderFrontColorPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontColorPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|showGuessPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showGuessPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|doCommandBySelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(doCommandBySelector:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|modeAndOptions:forPresentationOptions:usingForFullScreen:| (thing _ for-presentation-options using-for-full-screen)
  (let ((message-lambda 
         (make-message-lambda @(modeAndOptions:forPresentationOptions:usingForFullScreen:) (((:POINTER
                                                                                              :UNSIGNED-INT)
                                                                                             :UNSIGNED-LONG-LONG
                                                                                             :CHAR)
                                                                                            :UNSIGNED-INT)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) for-presentation-options (if using-for-full-screen 1 0))))

(defun NS::|enterFullScreenMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(enterFullScreenMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|markAppLaunchComplete| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markAppLaunchComplete) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|occlusionState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(occlusionState) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isProtectedDataAvailable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isProtectedDataAvailable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|unhide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unhide:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|openFile:ok:| (thing _ ok)
  (let ((message-lambda 
         (make-message-lambda @(openFile:ok:) ((:POINTER (:POINTER :LONG-LONG))
                                               :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id ok))))

(defun NS::|openTempFile:ok:| (thing _ ok)
  (let ((message-lambda 
         (make-message-lambda @(openTempFile:ok:) ((:POINTER
                                                    (:POINTER :LONG-LONG))
                                                   :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id ok))))

(defun NS::|replyToOpenOrPrint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replyToOpenOrPrint:) ((:UNSIGNED-LONG-LONG)
                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|deactivate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deactivate) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|runModalForWindow:relativeToWindow:| (thing _ relative-to-window)
  (let ((message-lambda 
         (make-message-lambda @(runModalForWindow:relativeToWindow:) ((:POINTER
                                                                       :POINTER)
                                                                      :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id relative-to-window))))

(defun NS::|beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:| (thing _ modal-for-window modal-delegate did-end-selector context-info)
  (let ((message-lambda 
         (make-message-lambda @(beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:) ((:POINTER
                                                                                                       :POINTER
                                                                                                       :POINTER
                                                                                                       :POINTER
                                                                                                       (:POINTER
                                                                                                        :VOID))
                                                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id modal-for-window) (objc-object-id modal-delegate) (objc-object-id did-end-selector) (objc-object-id context-info))))

(defun NS::|stop:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stop:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|stopModal| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stopModal) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|endSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endSheet:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|abortModal| (thing)
  (let ((message-lambda 
         (make-message-lambda @(abortModal) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|runModalSession:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runModalSession:) (((:POINTER
                                                     (:STRUCT
                                                      NS::|_NSModalSession|)))
                                                   :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|delayWindowOrdering| (thing)
  (let ((message-lambda 
         (make-message-lambda @(delayWindowOrdering) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|preventWindowOrdering| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preventWindowOrdering) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|onFirstEvent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(onFirstEvent) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|rightMouseDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rightMouseDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|event:wouldActivateWindow:| (thing _ would-activate-window)
  (let ((message-lambda 
         (make-message-lambda @(event:wouldActivateWindow:) ((:POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id would-activate-window))))

(defun NS::|quickLookPreviewItemsAtWindowLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(quickLookPreviewItemsAtWindowLocation:) (((:STRUCT
                                                                           NS::|CGPoint|))
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|frontWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frontWindow) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|applicationIconImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(applicationIconImage) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setActivationPolicy:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setActivationPolicy:) ((:LONG-LONG) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun NS::|setMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setHelpMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHelpMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|helpMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(helpMenu) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setDockMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDockMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|reportException:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(reportException:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|speechSynthesizer:didFinishSpeaking:| (thing _ did-finish-speaking)
  (let ((message-lambda 
         (make-message-lambda @(speechSynthesizer:didFinishSpeaking:) ((:POINTER
                                                                        :CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if did-finish-speaking 1 0))))

(defun NS::|isFullKeyboardAccessEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFullKeyboardAccessEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setPresentationOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPresentationOptions:) ((:UNSIGNED-LONG-LONG)
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|exitFullScreenMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(exitFullScreenMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setCanEnterFullScreenMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanEnterFullScreenMode:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|abortAllToolTips| (thing)
  (let ((message-lambda 
         (make-message-lambda @(abortAllToolTips) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|addMemoryPressureMonitorUsingHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addMemoryPressureMonitorUsingHandler:) ((:POINTER)
                                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|removeMemoryPressureMonitor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeMemoryPressureMonitor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|addIdleMonitorUsingHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addIdleMonitorUsingHandler:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|removeIdleMonitor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeIdleMonitor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|memoryStatus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(memoryStatus) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|presentError:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(presentError:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|willPresentError:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(willPresentError:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|presentError:modalForWindow:delegate:didPresentSelector:contextInfo:| (thing _ modal-for-window delegate did-present-selector context-info)
  (let ((message-lambda 
         (make-message-lambda @(presentError:modalForWindow:delegate:didPresentSelector:contextInfo:) ((:POINTER
                                                                                                        :POINTER
                                                                                                        :POINTER
                                                                                                        :POINTER
                                                                                                        (:POINTER
                                                                                                         :VOID))
                                                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id modal-for-window) (objc-object-id delegate) (objc-object-id did-present-selector) (objc-object-id context-info))))

(defun NS::|registerForRemoteNotificationTypes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerForRemoteNotificationTypes:) ((:UNSIGNED-LONG-LONG)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|registerForRemoteNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(registerForRemoteNotifications) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|unregisterForRemoteNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unregisterForRemoteNotifications) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isRegisteredForRemoteNotifications| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRegisteredForRemoteNotifications) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|enabledRemoteNotificationTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enabledRemoteNotificationTypes) (NIL
                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isRunningTest| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRunningTest) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isRunningTest:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRunningTest:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|isRunningQuitTest| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRunningQuitTest) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|runTest:options:| (thing _ options)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(runTest:options:) ((:POINTER :POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id options)))) nil t))

(defun NS::|startedTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(startedTest:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|finishedTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|finishedTest:extraResults:| (thing _ extra-results)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:extraResults:) ((:POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id extra-results))))

(defun NS::|finishedTest:extraResults:withTeardownBlock:| (thing _ extra-results with-teardown-block)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:extraResults:withTeardownBlock:) ((:POINTER
                                                                                :POINTER
                                                                                :POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id extra-results) (objc-object-id with-teardown-block))))

(defun NS::|finishedTest:extraResults:waitForNotification:| (thing _ extra-results wait-for-notification)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:extraResults:waitForNotification:) ((:POINTER
                                                                                  :POINTER
                                                                                  :POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id extra-results) (objc-object-id wait-for-notification))))

(defun NS::|finishedTest:extraResults:waitForNotification:withTeardownBlock:| (thing _ extra-results wait-for-notification with-teardown-block)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:extraResults:waitForNotification:withTeardownBlock:) ((:POINTER
                                                                                                    :POINTER
                                                                                                    :POINTER
                                                                                                    :POINTER)
                                                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id extra-results) (objc-object-id wait-for-notification) (objc-object-id with-teardown-block))))

(defun NS::|finishedTest:waitForCommit:extraResults:| (thing _ wait-for-commit extra-results)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:waitForCommit:extraResults:) ((:POINTER
                                                                            :CHAR
                                                                            :POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if wait-for-commit 1 0) (objc-object-id extra-results))))

(defun NS::|finishedTest:waitForCommit:extraResults:withTeardownBlock:| (thing _ wait-for-commit extra-results with-teardown-block)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:waitForCommit:extraResults:withTeardownBlock:) ((:POINTER
                                                                                              :CHAR
                                                                                              :POINTER
                                                                                              :POINTER)
                                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if wait-for-commit 1 0) (objc-object-id extra-results) (objc-object-id with-teardown-block))))

(defun NS::|failedTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(failedTest:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|failedTest:withFailure:| (thing _ with-failure)
  (let ((message-lambda 
         (make-message-lambda @(failedTest:withFailure:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-failure))))

(defun NS::|failedTest:withResults:| (thing _ with-results)
  (let ((message-lambda 
         (make-message-lambda @(failedTest:withResults:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-results))))

(defun NS::|failedTest:withFailure:withResults:| (thing _ with-failure with-results)
  (let ((message-lambda 
         (make-message-lambda @(failedTest:withFailure:withResults:) ((:POINTER
                                                                       :POINTER
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-failure) (objc-object-id with-results))))

(defun NS::|startedSubTest:forTest:| (thing _ for-test)
  (let ((message-lambda 
         (make-message-lambda @(startedSubTest:forTest:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-test))))

(defun NS::|startedSubTest:forTest:withMetrics:| (thing _ for-test with-metrics)
  (let ((message-lambda 
         (make-message-lambda @(startedSubTest:forTest:withMetrics:) ((:POINTER
                                                                       :POINTER
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-test) (objc-object-id with-metrics))))

(defun NS::|finishedSubTest:forTest:| (thing _ for-test)
  (let ((message-lambda 
         (make-message-lambda @(finishedSubTest:forTest:) ((:POINTER :POINTER)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-test))))

(defun NS::|finishedSubTest:forTest:waitForCommit:withCompletionHandler:| (thing _ for-test wait-for-commit with-completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(finishedSubTest:forTest:waitForCommit:withCompletionHandler:) ((:POINTER
                                                                                                :POINTER
                                                                                                :CHAR
                                                                                                :POINTER)
                                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-test) (if wait-for-commit 1 0) (objc-object-id with-completion-handler))))

(defun NS::|installCACommitCompletionBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(installCACommitCompletionBlock:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|performScrollTestOnScrollView:usingTestName:completionHandler:| (thing _ using-test-name completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(performScrollTestOnScrollView:usingTestName:completionHandler:) ((:POINTER
                                                                                                  :POINTER
                                                                                                  :POINTER)
                                                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id using-test-name) (objc-object-id completion-handler))))

(defun NS::|performResizeTestOnWindow:usingTestName:completionHandler:| (thing _ using-test-name completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(performResizeTestOnWindow:usingTestName:completionHandler:) ((:POINTER
                                                                                              :POINTER
                                                                                              :POINTER)
                                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id using-test-name) (objc-object-id completion-handler))))

(defun NS::|performResizeTestOnWindow:preTestHandler:postTestHandler:| (thing _ pre-test-handler post-test-handler)
  (let ((message-lambda 
         (make-message-lambda @(performResizeTestOnWindow:preTestHandler:postTestHandler:) ((:POINTER
                                                                                             :POINTER
                                                                                             :POINTER)
                                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id pre-test-handler) (objc-object-id post-test-handler))))

(defun NS::|performActivateDeactivateTestUsingTestName:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(performActivateDeactivateTestUsingTestName:completionHandler:) ((:POINTER
                                                                                                 :POINTER)
                                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id completion-handler))))

(defun NS::|isLaunchedForTesting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLaunchedForTesting) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|disableRelaunchOnLogin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableRelaunchOnLogin) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|enableRelaunchOnLogin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableRelaunchOnLogin) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|importFromDevice:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(importFromDevice:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityExtrasMenuBarAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityExtrasMenuBarAttribute) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityMenuBarAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMenuBarAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityWindowsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowsAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityFunctionRowTopLevelElementsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFunctionRowTopLevelElementsAttribute) (NIL
                                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityFocusedWindowAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedWindowAttribute) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|set_currentWordHighlightInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(set_currentWordHighlightInfo:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|set_currentSentenceHighlightInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(set_currentSentenceHighlightInfo:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityWorkaroundAddExtraWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWorkaroundAddExtraWindow:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityWorkaroundRemoveExtraWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWorkaroundRemoveExtraWindow:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityTitleAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTitleAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsTitleAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTitleAttributeSettable) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityIsMenuBarAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMenuBarAttributeSettable) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityIsWindowsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsWindowsAttributeSettable) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityChildrenInNavigationOrderAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChildrenInNavigationOrderAttribute) (NIL
                                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsChildrenAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsChildrenAttributeSettable) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityFrontmostAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFrontmostAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsFrontmostAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFrontmostAttributeSettable) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySetFrontmostAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetFrontmostAttribute:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityHiddenAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHiddenAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsHiddenAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsHiddenAttributeSettable) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySetHiddenAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetHiddenAttribute:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityMainWindowAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMainWindowAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsMainWindowAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMainWindowAttributeSettable) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityIsFocusedWindowAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFocusedWindowAttributeSettable) (NIL
                                                                                :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityFocusedUIElementAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedUIElementAttribute) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsFocusedUIElementAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFocusedUIElementAttributeSettable) (NIL
                                                                                   :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityEnhancedUserInterfaceAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityEnhancedUserInterfaceAttribute) (NIL
                                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsEnhancedUserInterfaceAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsEnhancedUserInterfaceAttributeSettable) (NIL
                                                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySetEnhancedUserInterfaceAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetEnhancedUserInterfaceAttribute:) ((:POINTER)
                                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityAuditIssuesAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditIssuesAttribute) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityHitTest| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHitTest) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityMovingFromTable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMovingFromTable:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityFocusChangedToElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusChangedToElement:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityMainThreadIdleNotificationSupported| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMainThreadIdleNotificationSupported) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isAccessibilityMainThreadIdleNotificationEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMainThreadIdleNotificationEnabled) (NIL
                                                                                   :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isAccessibilityEventProcessedNotificationSupported| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEventProcessedNotificationSupported) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isAccessibilityEventProcessedNotificationEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEventProcessedNotificationEnabled) (NIL
                                                                                   :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isAccessibilityMovingFromTable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMovingFromTable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|orderedDocuments| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orderedDocuments) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|orderedWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orderedWindows) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|valueInOrderedWindowsWithUniqueID:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueInOrderedWindowsWithUniqueID:) ((:LONG-LONG)
                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|handleOpenScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleOpenScriptCommand:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|handlePrintScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handlePrintScriptCommand:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|handleQuitScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleQuitScriptCommand:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|runModalForCarbonWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runModalForCarbonWindow:) ((:POINTER)
                                                           :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|sendAction:to:from:| (thing _ to from)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(sendAction:to:from:) ((:POINTER :POINTER
                                                       :POINTER)
                                                      :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to) (objc-object-id from)))) nil t))

(defun NS::|setAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAppearance:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|areCursorRectsEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(areCursorRectsEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|addWindowsItem:title:filename:| (thing _ title filename)
  (let ((message-lambda 
         (make-message-lambda @(addWindowsItem:title:filename:) ((:POINTER
                                                                  :POINTER
                                                                  :CHAR)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id title) (if filename 1 0))))

(defun NS::|restoreWindowWithIdentifier:state:completionHandler:| (thing _ state completion-handler)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(restoreWindowWithIdentifier:state:completionHandler:) ((:POINTER
                                                                                        :POINTER
                                                                                        :POINTER)
                                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id state) (objc-object-id completion-handler)))) nil t))

(defun NS::|NS_touchBarProviders| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_touchBarProviders) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|NS_touchBarProvidersKeyPaths| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_touchBarProvidersKeyPaths) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|orderFrontPreferencesPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontPreferencesPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|shouldBeTreatedAsInkEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldBeTreatedAsInkEvent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|discardEventsMatchingMask:beforeEvent:| (thing _ before-event)
  (let ((message-lambda 
         (make-message-lambda @(discardEventsMatchingMask:beforeEvent:) ((:UNSIGNED-LONG-LONG
                                                                          :POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id before-event))))

(defun NS::|tryToPerform:with:| (thing _ with)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(tryToPerform:with:) ((:POINTER :POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with)))) nil t))

(defun NS::|targetForAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(targetForAction:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|orderFrontFontPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontFontPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|activateContextHelpMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(activateContextHelpMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|showHelp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showHelp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setServicesMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setServicesMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setWindowsMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindowsMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAppleMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAppleMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|gestureEventMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gestureEventMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setGestureEventMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGestureEventMask:) ((:UNSIGNED-LONG-LONG)
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|servicesProvider| (thing)
  (let ((message-lambda 
         (make-message-lambda @(servicesProvider) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setServicesProvider:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setServicesProvider:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|registerServiceProvider:withName:| (thing _ with-name)
  (let ((message-lambda 
         (make-message-lambda @(registerServiceProvider:withName:) ((:POINTER
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-name))))

(defun NS::|unregisterServiceProviderNamed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unregisterServiceProviderNamed:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|orderFrontStandardAboutPanelWithOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontStandardAboutPanelWithOptions:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|orderFrontStandardAboutPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontStandardAboutPanel:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|registerServicesMenuSendTypes:returnTypes:| (thing _ return-types)
  (let ((message-lambda 
         (make-message-lambda @(registerServicesMenuSendTypes:returnTypes:) ((:POINTER
                                                                              :POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id return-types))))

(defun NS::|getValue:forSafeApertureCompatibilityURLResourceKey:| (thing _ for-safe-aperture-compatibility-u-r-l-resource-key)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getValue:forSafeApertureCompatibilityURLResourceKey:) (((:POINTER
                                                                                         :CHAR)
                                                                                        :POINTER)
                                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-safe-aperture-compatibility-u-r-l-resource-key)))) nil t))

(defun NS::|valueForSafeApertureCompatibilityEnvironmentVariable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueForSafeApertureCompatibilityEnvironmentVariable:) ((:POINTER)
                                                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|getValue:forSafeApertureCompatibilityDefaultsKey:| (thing _ for-safe-aperture-compatibility-defaults-key)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getValue:forSafeApertureCompatibilityDefaultsKey:) (((:POINTER
                                                                                      :CHAR)
                                                                                     :POINTER)
                                                                                    :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-safe-aperture-compatibility-defaults-key)))) nil t))

(defun NS::|setValue:forSafeApertureCompatibilityConnectionProperty:| (thing _ for-safe-aperture-compatibility-connection-property)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forSafeApertureCompatibilityConnectionProperty:) (((:POINTER
                                                                                             :VOID)
                                                                                            (:POINTER
                                                                                             (:STRUCT
                                                                                              NS::|__CFString|)))
                                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-safe-aperture-compatibility-connection-property))))

(defun NS::|setValue:forSafeApertureCompatibilityEnvironmentVariable:| (thing _ for-safe-aperture-compatibility-environment-variable)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forSafeApertureCompatibilityEnvironmentVariable:) ((:POINTER
                                                                                             :POINTER)
                                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-safe-aperture-compatibility-environment-variable))))

(defun NS::|updateWindowsItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateWindowsItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAutomaticCustomizeTouchBarMenuItemEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticCustomizeTouchBarMenuItemEnabled) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAutomaticCustomizeTouchBarMenuItemEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticCustomizeTouchBarMenuItemEnabled:) ((:CHAR)
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|resetAutomaticCustomizeTouchBarMenuItemEnabled| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resetAutomaticCustomizeTouchBarMenuItemEnabled) (NIL
                                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|removeWindowsItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeWindowsItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|changeWindowsItem:title:filename:| (thing _ title filename)
  (let ((message-lambda 
         (make-message-lambda @(changeWindowsItem:title:filename:) ((:POINTER
                                                                     :POINTER
                                                                     :CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id title) (if filename 1 0))))

(defun NS::|servicesMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(servicesMenu) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|registerUserInterfaceItemSearchHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerUserInterfaceItemSearchHandler:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|unregisterUserInterfaceItemSearchHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unregisterUserInterfaceItemSearchHandler:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|searchString:inUserInterfaceItemString:searchRange:foundRange:| (thing _ in-user-interface-item-string search-range found-range)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(searchString:inUserInterfaceItemString:searchRange:foundRange:) ((:POINTER
                                                                                                  :POINTER
                                                                                                  (:STRUCT
                                                                                                   NS::|_NSRange|)
                                                                                                  (:POINTER
                                                                                                   (:STRUCT
                                                                                                    NS::|_NSRange|)))
                                                                                                 :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-user-interface-item-string) search-range (objc-object-id found-range)))) nil t))

(defun NS::|isDefaultHelpBookSearchEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDefaultHelpBookSearchEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setDefaultHelpBookSearchEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDefaultHelpBookSearchEnabled:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|extendStateRestoration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(extendStateRestoration) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|completeStateRestoration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(completeStateRestoration) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))









(defun NS::|localizedName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedName) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|processIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(processIdentifier) (NIL :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))






(defun NS::|terminate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(terminate) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|icon| (thing)
  (let ((message-lambda 
         (make-message-lambda @(icon) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|unhide| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(unhide) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|activateWithOptions:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(activateWithOptions:) ((:UNSIGNED-LONG-LONG)
                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun NS::|hide| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hide) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|initWithApplicationSerialNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithApplicationSerialNumber:) (((:POINTER
                                                                     (:STRUCT
                                                                      NS::__LSASN)))
                                                                   :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|applicationSerialNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(applicationSerialNumber) (NIL
                                                          (:POINTER
                                                           (:STRUCT
                                                            NS::__LSASN)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|launchDate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(launchDate) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|forceTerminate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(forceTerminate) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|applyPendingPropertyChanges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(applyPendingPropertyChanges) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isTerminated| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isTerminated) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isFinishedLaunching| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFinishedLaunching) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|ownsMenuBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ownsMenuBar) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|executableArchitecture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(executableArchitecture) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun NS::|name| (thing)
  (let ((message-lambda 
         (make-message-lambda @(name) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setQualityOfService:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setQualityOfService:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setName:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|start| (thing)
  (let ((message-lambda 
         (make-message-lambda @(start) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isMainThread| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMainThread) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|cancel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cancel) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|threadDictionary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(threadDictionary) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|runLoop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(runLoop) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isCancelled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isCancelled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|main| (thing)
  (let ((message-lambda 
         (make-message-lambda @(main) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|initWithBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithBlock:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isFinished| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFinished) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isExecuting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isExecuting) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|threadPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(threadPriority) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setThreadPriority:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setThreadPriority:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|qualityOfService| (thing)
  (let ((message-lambda 
         (make-message-lambda @(qualityOfService) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|initWithTarget:selector:object:| (thing _ selector object)
  (let ((message-lambda 
         (make-message-lambda @(initWithTarget:selector:object:) ((:POINTER
                                                                   :POINTER
                                                                   :POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id selector) (objc-object-id object))))

(defun NS::|isDying| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDying) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setStackSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStackSize:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|stackSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stackSize) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))









(defun NS::|type| (thing)
  (let ((message-lambda 
         (make-message-lambda @(type) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|subtype| (thing)
  (let ((message-lambda 
         (make-message-lambda @(subtype) (NIL :SHORT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|window| (thing)
  (let ((message-lambda 
         (make-message-lambda @(window) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|userData| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userData) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|stage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stage) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|rotation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rotation) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|uniqueID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(uniqueID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|progress| (thing)
  (let ((message-lambda 
         (make-message-lambda @(progress) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|characters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(characters) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|timestamp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timestamp) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|charactersIgnoringModifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(charactersIgnoringModifiers) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|deviceID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|windowNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowNumber) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|deltaX| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deltaX) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|deltaY| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deltaY) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|pressure| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pressure) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|locationInWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(locationInWindow) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|phase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(phase) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|modifierFlags| (thing)
  (let ((message-lambda 
         (make-message-lambda @(modifierFlags) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|touchesMatchingPhase:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchesMatchingPhase:inView:) ((:UNSIGNED-LONG-LONG
                                                                :POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|allTouches| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allTouches) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|CGEvent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CGEvent) (NIL
                                          (:POINTER (:STRUCT NS::|__CGEvent|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|data1| (thing)
  (let ((message-lambda 
         (make-message-lambda @(data1) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|data2| (thing)
  (let ((message-lambda 
         (make-message-lambda @(data2) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|scrollingDeltaX| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollingDeltaX) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|clickCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clickCount) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|momentumPhase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(momentumPhase) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|scrollingDeltaY| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollingDeltaY) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|gestureAxis| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gestureAxis) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|associatedEventsMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(associatedEventsMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|keyCode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyCode) (NIL :UNSIGNED-SHORT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|eventNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(eventNumber) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|trackingArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trackingArea) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|magnification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(magnification) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|buttonMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(buttonMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|trackingNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trackingNumber) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|hasPreciseScrollingDeltas| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasPreciseScrollingDeltas) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|velocity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(velocity) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|pressureBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pressureBehavior) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|buttonNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(buttonNumber) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|vendorDefined| (thing)
  (let ((message-lambda 
         (make-message-lambda @(vendorDefined) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|absoluteX| (thing)
  (let ((message-lambda 
         (make-message-lambda @(absoluteX) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|absoluteY| (thing)
  (let ((message-lambda 
         (make-message-lambda @(absoluteY) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|absoluteZ| (thing)
  (let ((message-lambda 
         (make-message-lambda @(absoluteZ) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|tilt| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tilt) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|tangentialPressure| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tangentialPressure) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|vendorID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(vendorID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|tabletID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabletID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|pointingDeviceID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pointingDeviceID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|systemTabletID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(systemTabletID) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|vendorPointingDeviceType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(vendorPointingDeviceType) (NIL
                                                           :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|pointingDeviceSerialNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pointingDeviceSerialNumber) (NIL
                                                             :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|capabilityMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(capabilityMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|pointingDeviceType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pointingDeviceType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isEnteringProximity| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEnteringProximity) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|deltaZ| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deltaZ) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|gestureAmount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gestureAmount) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isARepeat| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isARepeat) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|eventRef| (thing)
  (let ((message-lambda 
         (make-message-lambda @(eventRef) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|charactersByApplyingModifiers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(charactersByApplyingModifiers:) ((:UNSIGNED-LONG-LONG)
                                                                 :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|isGesture| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGesture) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|deviceDeltaX| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceDeltaX) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|deviceDeltaY| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceDeltaY) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|deviceDeltaZ| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceDeltaZ) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isDirectionInvertedFromDevice| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDirectionInvertedFromDevice) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|stageTransition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stageTransition) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:| (thing _ dampen-amount-threshold-min max using-handler)
  (let ((message-lambda 
         (make-message-lambda @(trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:) ((:UNSIGNED-LONG-LONG
                                                                                                         :DOUBLE
                                                                                                         :DOUBLE
                                                                                                         :POINTER)
                                                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ dampen-amount-threshold-min max (objc-object-id using-handler))))

(defun NS::|touchesForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesForView:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|coalescedTouchesForTouch:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(coalescedTouchesForTouch:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|command| (thing)
  (let ((message-lambda 
         (make-message-lambda @(command) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|bs_setDomain:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_setDomain:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|bs_defaultExists:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(bs_defaultExists:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))




(defun NS::|objectForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(objectForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|removeObjectForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeObjectForKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setObject:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setObject:forKey:) ((:POINTER :POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))


(defun NS::|synchronize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(synchronize) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|volatileDomainNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(volatileDomainNames) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|boolForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(boolForKey:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|URLForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(URLForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|stringForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|arrayForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(arrayForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|dictionaryForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dictionaryForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|integerForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(integerForKey:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|dictionaryRepresentation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dictionaryRepresentation) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setObject:forKey:inDomain:| (thing _ for-key in-domain)
  (let ((message-lambda 
         (make-message-lambda @(setObject:forKey:inDomain:) ((:POINTER :POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key) (objc-object-id in-domain))))

(defun NS::|initWithSuiteName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithSuiteName:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|initWithUser:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUser:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setPersistentDomain:forName:| (thing _ for-name)
  (let ((message-lambda 
         (make-message-lambda @(setPersistentDomain:forName:) ((:POINTER
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-name))))

(defun NS::|objectForKey:inDomain:| (thing _ in-domain)
  (let ((message-lambda 
         (make-message-lambda @(objectForKey:inDomain:) ((:POINTER :POINTER)
                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-domain))))

(defun NS::|removeObjectForKey:inDomain:| (thing _ in-domain)
  (let ((message-lambda 
         (make-message-lambda @(removeObjectForKey:inDomain:) ((:POINTER
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-domain))))

(defun NS::|dataForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dataForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|stringArrayForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringArrayForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|longForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(longForKey:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|floatForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(floatForKey:) ((:POINTER) :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|doubleForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(doubleForKey:) ((:POINTER) :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setInteger:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setInteger:forKey:) ((:LONG-LONG :POINTER)
                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-key))))

(defun NS::|setLong:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setLong:forKey:) ((:LONG-LONG :POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-key))))

(defun NS::|setFloat:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setFloat:forKey:) ((:FLOAT :POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-key))))

(defun NS::|setDouble:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setDouble:forKey:) ((:DOUBLE :POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-key))))

(defun NS::|setBool:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setBool:forKey:) ((:CHAR :POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) (objc-object-id for-key))))

(defun NS::|setURL:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setURL:forKey:) ((:POINTER :POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun NS::|searchList| (thing)
  (let ((message-lambda 
         (make-message-lambda @(searchList) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setSearchList:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSearchList:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|addSuiteNamed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addSuiteNamed:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|removeSuiteNamed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeSuiteNamed:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|registerDefaults:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerDefaults:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|volatileDomainForName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(volatileDomainForName:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setVolatileDomain:forName:| (thing _ for-name)
  (let ((message-lambda 
         (make-message-lambda @(setVolatileDomain:forName:) ((:POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-name))))

(defun NS::|removeVolatileDomainForName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeVolatileDomainForName:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|persistentDomainNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(persistentDomainNames) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|persistentDomainForName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(persistentDomainForName:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|removePersistentDomainForName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removePersistentDomainForName:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|objectIsForcedForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(objectIsForcedForKey:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|objectIsForcedForKey:inDomain:| (thing _ in-domain)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(objectIsForcedForKey:inDomain:) ((:POINTER
                                                                  :POINTER)
                                                                 :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-domain)))) nil t))






(defun NS::|depth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(depth) (NIL :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|visibleFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(visibleFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|frame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|displayLinkWithTarget:selector:| (thing _ selector)
  (let ((message-lambda 
         (make-message-lambda @(displayLinkWithTarget:selector:) ((:POINTER
                                                                   :POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id selector))))

(defun NS::|colorSpace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorSpace) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|backingScaleFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backingScaleFactor) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|backingAlignedRect:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(backingAlignedRect:options:) (((:STRUCT
                                                                NS::|CGRect|)
                                                               :UNSIGNED-LONG-LONG)
                                                              (:STRUCT
                                                               NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ options)))

(defun NS::|convertRectToBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectToBacking:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|convertRectFromBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectFromBacking:) (((:STRUCT
                                                            NS::|CGRect|))
                                                          (:STRUCT
                                                           NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|deviceDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceDescription) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|canRepresentDisplayGamut:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canRepresentDisplayGamut:) ((:LONG-LONG) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun NS::|devicePixelCounts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(devicePixelCounts) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|maximumExtendedDynamicRangeColorComponentValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumExtendedDynamicRangeColorComponentValue) (NIL
                                                                                 :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|maximumPotentialExtendedDynamicRangeColorComponentValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumPotentialExtendedDynamicRangeColorComponentValue) (NIL
                                                                                          :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|maximumReferenceExtendedDynamicRangeColorComponentValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumReferenceExtendedDynamicRangeColorComponentValue) (NIL
                                                                                          :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|safeAreaInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(safeAreaInsets) (NIL
                                                 (:STRUCT NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|supportedWindowDepths| (thing)
  (let ((message-lambda 
         (make-message-lambda @(supportedWindowDepths) (NIL (:POINTER :INT))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|bezelPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bezelPath) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|imageInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(imageInRect:) (((:STRUCT NS::|CGRect|))
                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|imageInRect:underWindow:| (thing _ under-window)
  (let ((message-lambda 
         (make-message-lambda @(imageInRect:underWindow:) (((:STRUCT
                                                             NS::|CGRect|)
                                                            :POINTER)
                                                           :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id under-window))))

(defun NS::|maximumFramesPerSecond| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumFramesPerSecond) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|minimumRefreshInterval| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minimumRefreshInterval) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|maximumRefreshInterval| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumRefreshInterval) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|displayUpdateGranularity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayUpdateGranularity) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|lastDisplayUpdateTimestamp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lastDisplayUpdateTimestamp) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|auxiliaryTopLeftArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(auxiliaryTopLeftArea) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|auxiliaryTopRightArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(auxiliaryTopRightArea) (NIL
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|userSpaceScaleFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userSpaceScaleFactor) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|displayLinkWithHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayLinkWithHandler:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))





(defun NS::|isEmpty| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEmpty) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|addObserverForName:object:queue:usingBlock:| (thing _ object queue using-block)
  (let ((message-lambda 
         (make-message-lambda @(addObserverForName:object:queue:usingBlock:) ((:POINTER
                                                                               :POINTER
                                                                               :POINTER
                                                                               :POINTER)
                                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id object) (objc-object-id queue) (objc-object-id using-block))))

(defun NS::|removeObserver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|postNotificationName:object:| (thing _ object)
  (let ((message-lambda 
         (make-message-lambda @(postNotificationName:object:) ((:POINTER
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id object))))

(defun NS::|postNotification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(postNotification:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|addObserver:selector:name:object:| (thing _ selector name object)
  (let ((message-lambda 
         (make-message-lambda @(addObserver:selector:name:object:) ((:POINTER
                                                                     :POINTER
                                                                     :POINTER
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id selector) (objc-object-id name) (objc-object-id object))))

(defun NS::|postNotificationName:object:userInfo:| (thing _ object user-info)
  (let ((message-lambda 
         (make-message-lambda @(postNotificationName:object:userInfo:) ((:POINTER
                                                                         :POINTER
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id object) (objc-object-id user-info))))

(defun NS::|removeObserver:name:object:| (thing _ name object)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:name:object:) ((:POINTER
                                                               :POINTER
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id name) (objc-object-id object))))






(defun NS::|setHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHidden:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun NS::|identifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(identifier) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|prepareForReuse| (thing)
  (let ((message-lambda 
         (make-message-lambda @(prepareForReuse) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIdentifier:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|layout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layout) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun NS::|resetCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resetCursorRects) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setNeedsDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplay:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|invalidateIntrinsicContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateIntrinsicContentSize) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|layer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setBackgroundColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackgroundColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|setCompositingFilter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCompositingFilter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|bounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bounds) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrame:) (((:STRUCT NS::|CGRect|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|convertPoint:toView:| (thing _ to-view)
  (let ((message-lambda 
         (make-message-lambda @(convertPoint:toView:) (((:STRUCT NS::|CGPoint|)
                                                        :POINTER)
                                                       (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-view))))

(defun NS::|visibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(visibleRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFlipped) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|addCursorRect:cursor:| (thing _ cursor)
  (let ((message-lambda 
         (make-message-lambda @(addCursorRect:cursor:) (((:STRUCT NS::|CGRect|)
                                                         :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id cursor))))

(defun NS::|allowsVibrancy| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsVibrancy) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isOpaque| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isOpaque) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|wantsUpdateLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsUpdateLayer) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|updateLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateLayer) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|enableGeometryInWindowDidChangeNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableGeometryInWindowDidChangeNotification) (NIL
                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|disableGeometryInWindowDidChangeNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableGeometryInWindowDidChangeNotification) (NIL
                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setNeedsLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsLayout:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|superview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(superview) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|convertRect:toView:| (thing _ to-view)
  (let ((message-lambda 
         (make-message-lambda @(convertRect:toView:) (((:STRUCT NS::|CGRect|)
                                                       :POINTER)
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-view))))

(defun NS::|initWithFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithFrame:) (((:STRUCT NS::|CGRect|))
                                                 :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|widthAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(widthAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setTranslatesAutoresizingMaskIntoConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTranslatesAutoresizingMaskIntoConstraints:) ((:CHAR)
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|addGestureRecognizer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addGestureRecognizer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|fittingSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fittingSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|removeConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeConstraint:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setContentCompressionResistancePriority:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setContentCompressionResistancePriority:forOrientation:) ((:FLOAT
                                                                                           :LONG-LONG)
                                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-orientation)))

(defun NS::|setContentHuggingPriority:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setContentHuggingPriority:forOrientation:) ((:FLOAT
                                                                             :LONG-LONG)
                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-orientation)))

(defun NS::|intrinsicContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(intrinsicContentSize) (NIL
                                                       (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewDidChangeEffectiveAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidChangeEffectiveAppearance) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|setWantsLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsLayer:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setShouldBeArchived:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShouldBeArchived:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|addSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|addSubview:positioned:relativeTo:| (thing _ positioned relative-to)
  (let ((message-lambda 
         (make-message-lambda @(addSubview:positioned:relativeTo:) ((:POINTER
                                                                     :LONG-LONG
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) positioned (objc-object-id relative-to))))

(defun NS::|addConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addConstraint:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|centerXAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(centerXAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|heightAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(heightAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|bottomAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bottomAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|addConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addConstraints:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setIgnoreHitTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIgnoreHitTest:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|leadingAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(leadingAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAllowedTouchTypes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowedTouchTypes:) ((:UNSIGNED-LONG-LONG)
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|gestureRecognizers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gestureRecognizers) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewDidMoveToWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidMoveToWindow) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|removeFromSuperview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeFromSuperview) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|animator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animator) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|backgroundColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backgroundColor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setCornerRadius:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerRadius:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|alignmentRectInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alignmentRectInsets) (NIL
                                                      (:STRUCT
                                                       NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setUserInterfaceLayoutDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUserInterfaceLayoutDirection:) ((:LONG-LONG)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|hitTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(hitTest:) (((:STRUCT NS::|CGPoint|)) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|convertPoint:fromView:| (thing _ from-view)
  (let ((message-lambda 
         (make-message-lambda @(convertPoint:fromView:) (((:STRUCT
                                                           NS::|CGPoint|)
                                                          :POINTER)
                                                         (:STRUCT
                                                          NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-view))))

(defun NS::|nextEventMatchingMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nextEventMatchingMask:) ((:UNSIGNED-LONG-LONG)
                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setBoundsOrigin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBoundsOrigin:) (((:STRUCT NS::|CGPoint|))
                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAnimations:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAnimations:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|gestureRecognizerShouldBegin:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(gestureRecognizerShouldBegin:) ((:POINTER)
                                                                :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|tag| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tag) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|subviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(subviews) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isHiddenOrHasHiddenAncestor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHiddenOrHasHiddenAncestor) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))








(defun NS::|toolTip| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toolTip) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setToolTip:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setToolTip:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|performKeyEquivalent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(performKeyEquivalent:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|layoutSubtreeIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutSubtreeIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAlphaValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAlphaValue:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setOpaque:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOpaque:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|display| (thing)
  (let ((message-lambda 
         (make-message-lambda @(display) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))







(defun NS::|accessibilityHelpAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHelpAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsHelpAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsHelpAttributeSettable) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityFocusedAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsFocusedAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFocusedAttributeSettable) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySetFocusedAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetFocusedAttribute:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityParentAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityParentAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsParentAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsParentAttributeSettable) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityWindowAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsWindowAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsWindowAttributeSettable) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityTopLevelUIElementAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTopLevelUIElementAttribute) (NIL
                                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsTopLevelUIElementAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTopLevelUIElementAttributeSettable) (NIL
                                                                                    :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityPositionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPositionAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsPositionAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsPositionAttributeSettable) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySizeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySizeAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsSizeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSizeAttributeSettable) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))






(defun NS::|accessibilityHorizontalUnitDescriptionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalUnitDescriptionAttribute) (NIL
                                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityVerticalUnitDescriptionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalUnitDescriptionAttribute) (NIL
                                                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|convertRect:fromView:| (thing _ from-view)
  (let ((message-lambda 
         (make-message-lambda @(convertRect:fromView:) (((:STRUCT NS::|CGRect|)
                                                         :POINTER)
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-view))))


(defun NS::|removeTrackingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeTrackingArea:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|addTrackingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addTrackingArea:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|setBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBounds:) (((:STRUCT NS::|CGRect|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|makeBackingLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(makeBackingLayer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun NS::|setAutoresizingMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoresizingMask:) ((:UNSIGNED-LONG-LONG)
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setNextKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNextKeyView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setFrameOrigin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameOrigin:) (((:STRUCT NS::|CGPoint|))
                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|alignmentRectForFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignmentRectForFrame:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|removeConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeConstraints:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|autoresizingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autoresizingMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|drawRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawRect:) (((:STRUCT NS::|CGRect|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|mouseDownCanMoveWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouseDownCanMoveWindow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|convertSize:fromView:| (thing _ from-view)
  (let ((message-lambda 
         (make-message-lambda @(convertSize:fromView:) (((:STRUCT NS::|CGSize|)
                                                         :POINTER)
                                                        (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-view))))

(defun NS::|animations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animations) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|cornerRadius| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cornerRadius) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|lockFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lockFocus) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|unlockFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unlockFocus) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun NS::|designatedFocusRingView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(designatedFocusRingView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun NS::|convertRectToLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectToLayer:) (((:STRUCT NS::|CGRect|))
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|shouldDelayWindowOrderingForEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldDelayWindowOrderingForEvent:) ((:POINTER)
                                                                     :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|setFrameSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameSize:) (((:STRUCT NS::|CGSize|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|setSubviews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSubviews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|leftAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(leftAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|trailingAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trailingAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|centerYAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(centerYAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|declaredLayoutConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(declaredLayoutConstraints) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|wantsLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsLayer) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setLayerContentsRedrawPolicy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayerContentsRedrawPolicy:) ((:LONG-LONG)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|displayIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|preferredLayoutAttributesFittingAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(preferredLayoutAttributesFittingAttributes:) ((:POINTER)
                                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|replaceSubview:with:| (thing _ with)
  (let ((message-lambda 
         (make-message-lambda @(replaceSubview:with:) ((:POINTER :POINTER)
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with))))

(defun NS::|updateConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateConstraints) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_widthVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_widthVariable) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_heightVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_heightVariable) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewWillDraw| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewWillDraw) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|willRemoveSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(willRemoveSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|mouse:inRect:| (thing _ in-rect)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouse:inRect:) (((:STRUCT NS::|CGPoint|)
                                                 (:STRUCT NS::|CGRect|))
                                                :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ in-rect))) nil t))

(defun NS::|convertSize:toView:| (thing _ to-view)
  (let ((message-lambda 
         (make-message-lambda @(convertSize:toView:) (((:STRUCT NS::|CGSize|)
                                                       :POINTER)
                                                      (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-view))))

(defun NS::|scrollRectToVisible:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scrollRectToVisible:) (((:STRUCT NS::|CGRect|))
                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun NS::|setNeedsDisplayInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplayInRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setKeyboardFocusRingNeedsDisplayInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKeyboardFocusRingNeedsDisplayInRect:) (((:STRUCT
                                                                            NS::|CGRect|))
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|isDescendantOf:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDescendantOf:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|nextKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nextKeyView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|previousKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(previousKeyView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setPostsFrameChangedNotifications:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPostsFrameChangedNotifications:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setPostsBoundsChangedNotifications:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPostsBoundsChangedNotifications:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|scrollPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollPoint:) (((:STRUCT NS::|CGPoint|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|displayRectIgnoringOpacity:inContext:| (thing _ in-context)
  (let ((message-lambda 
         (make-message-lambda @(displayRectIgnoringOpacity:inContext:) (((:STRUCT
                                                                          NS::|CGRect|)
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-context))))

(defun NS::|getRectsBeingDrawn:count:| (thing _ count)
  (let ((message-lambda 
         (make-message-lambda @(getRectsBeingDrawn:count:) (((:POINTER
                                                              (:POINTER
                                                               (:STRUCT
                                                                NS::|CGRect|)))
                                                             (:POINTER
                                                              :LONG-LONG))
                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id count))))

(defun NS::|convertPointToBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointToBacking:) (((:STRUCT
                                                           NS::|CGPoint|))
                                                         (:STRUCT
                                                          NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|inLiveResize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(inLiveResize) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|preservesContentDuringLiveResize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(preservesContentDuringLiveResize) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|getRectsExposedDuringLiveResize:count:| (thing _ count)
  (let ((message-lambda 
         (make-message-lambda @(getRectsExposedDuringLiveResize:count:) (((:ARRAY
                                                                           (:STRUCT
                                                                            NS::|CGRect|)
                                                                           4)
                                                                          (:POINTER
                                                                           :LONG-LONG))
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id count))))

(defun NS::|canDraw| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canDraw) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|enclosingScrollView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enclosingScrollView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|dragImage:at:offset:event:pasteboard:source:slideBack:| (thing _ at offset event pasteboard source slide-back)
  (let ((message-lambda 
         (make-message-lambda @(dragImage:at:offset:event:pasteboard:source:slideBack:) ((:POINTER
                                                                                          (:STRUCT
                                                                                           NS::|CGPoint|)
                                                                                          (:STRUCT
                                                                                           NS::|CGSize|)
                                                                                          :POINTER
                                                                                          :POINTER
                                                                                          :POINTER
                                                                                          :CHAR)
                                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at offset (objc-object-id event) (objc-object-id pasteboard) (objc-object-id source) (if slide-back 1 0))))

(defun NS::|registerForDraggedTypes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerForDraggedTypes:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|unregisterDraggedTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unregisterDraggedTypes) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|acceptsFirstMouse:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsFirstMouse:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|needsPanelToBecomeKey| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsPanelToBecomeKey) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|draggingEntered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingEntered:) ((:POINTER)
                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|draggingUpdated:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingUpdated:) ((:POINTER)
                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|draggingExited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingExited:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|performDragOperation:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(performDragOperation:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|scrollWheel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollWheel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|scrollRect:by:| (thing _ by)
  (let ((message-lambda 
         (make-message-lambda @(scrollRect:by:) (((:STRUCT NS::|CGRect|)
                                                  (:STRUCT NS::|CGSize|))
                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ by)))

(defun NS::|menuForEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(menuForEvent:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|removeFromSuperviewWithoutNeedingDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeFromSuperviewWithoutNeedingDisplay) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|bitmapImageRepForCachingDisplayInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bitmapImageRepForCachingDisplayInRect:) (((:STRUCT
                                                                           NS::|CGRect|))
                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|cacheDisplayInRect:toBitmapImageRep:| (thing _ to-bitmap-image-rep)
  (let ((message-lambda 
         (make-message-lambda @(cacheDisplayInRect:toBitmapImageRep:) (((:STRUCT
                                                                         NS::|CGRect|)
                                                                        :POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-bitmap-image-rep))))

(defun NS::|postsFrameChangedNotifications| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(postsFrameChangedNotifications) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|viewDidMoveToSuperview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidMoveToSuperview) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFlipped:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFlipped:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|registeredDraggedTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(registeredDraggedTypes) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFocusRingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFocusRingType:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|headerView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(headerView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|translatesAutoresizingMaskIntoConstraints| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(translatesAutoresizingMaskIntoConstraints) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setNextResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNextResponder:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|animationForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(animationForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|centerScanRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(centerScanRect:) (((:STRUCT NS::|CGRect|))
                                                  (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|invalidateIntrinsicContentSizeForCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(invalidateIntrinsicContentSizeForCell:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|invalidateConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateConstraints) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|lockFocusIfCanDraw| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(lockFocusIfCanDraw) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setContentStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentStyle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|frameForAlignmentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(frameForAlignmentRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|sortSubviewsUsingBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sortSubviewsUsingBlock:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|firstBaselineOffsetFromTop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstBaselineOffsetFromTop) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|baselineOffsetFromBottom| (thing)
  (let ((message-lambda 
         (make-message-lambda @(baselineOffsetFromBottom) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|touchBarHitTestInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBarHitTestInsets) (NIL
                                                        (:STRUCT
                                                         NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|performMnemonic:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(performMnemonic:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|noteFocusRingMaskChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(noteFocusRingMaskChanged) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|convertPointFromBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointFromBacking:) (((:STRUCT
                                                             NS::|CGPoint|))
                                                           (:STRUCT
                                                            NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|lastBaselineOffsetFromBottom| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lastBaselineOffsetFromBottom) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|layerContentsRedrawPolicy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layerContentsRedrawPolicy) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|effectiveContentStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(effectiveContentStyle) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|constraintForIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constraintForIdentifier:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setCompositingOperation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCompositingOperation:) ((:UNSIGNED-LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|compositingOperation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(compositingOperation) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setClipsToBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setClipsToBounds:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|alphaValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alphaValue) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|willOpenMenu:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(willOpenMenu:withEvent:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-event))))

(defun NS::|didCloseMenu:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(didCloseMenu:withEvent:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-event))))

(defun NS::|prepareMenu:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(prepareMenu:withEvent:) ((:POINTER :POINTER)
                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-event))))

(defun NS::|prepareForMenu:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(prepareForMenu:withEvent:) ((:POINTER :POINTER)
                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-event))))

(defun NS::|accessibilityPopUpMenuCreated:forSubview:returningAccessibilityParent:| (thing _ for-subview returning-accessibility-parent)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPopUpMenuCreated:forSubview:returningAccessibilityParent:) ((:POINTER
                                                                                                          :POINTER
                                                                                                          (:POINTER
                                                                                                           :POINTER))
                                                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-subview) (objc-object-id returning-accessibility-parent))))

(defun NS::|accessibilityPopUpMenuClosed:accessibilityParent:| (thing _ accessibility-parent)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPopUpMenuClosed:accessibilityParent:) ((:POINTER
                                                                                     :POINTER)
                                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id accessibility-parent))))

(defun NS::|print:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(print:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|worksWhenModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(worksWhenModal) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|topAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|trackingAreas| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trackingAreas) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nextValidKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nextValidKeyView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|focusRingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(focusRingType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|convertSizeToBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeToBacking:) (((:STRUCT
                                                          NS::|CGSize|))
                                                        (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAllowsVibrancy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsVibrancy:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|canBecomeKeyView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBecomeKeyView) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|heartBeat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(heartBeat:) (((:POINTER (:ARRAY :CHAR 27)))
                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|opaqueAncestor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(opaqueAncestor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityWindowPointForShowMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowPointForShowMenu) (NIL
                                                                      (:STRUCT
                                                                       NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|drawFocusRingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawFocusRingMask) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityAuditParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditParent) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityDrawFocusRing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDrawFocusRing) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilitySectionsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySectionsAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityAuditHierarchy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditHierarchy) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityAuditLabel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditLabel) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityAuditContrast| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditContrast) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|deepestAccessibilityDescendants| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deepestAccessibilityDescendants) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setUpGState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setUpGState) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|rightAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rightAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|updateConstraintsForSubtreeIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateConstraintsForSubtreeIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|constraintsDidChangeInEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constraintsDidChangeInEngine:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|allocateGState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allocateGState) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewWillMoveToSuperview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewWillMoveToSuperview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setBoundsSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBoundsSize:) (((:STRUCT NS::|CGSize|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|translateOriginToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(translateOriginToPoint:) (((:STRUCT
                                                            NS::|CGPoint|))
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|scaleUnitSquareToSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scaleUnitSquareToSize:) (((:STRUCT
                                                           NS::|CGSize|))
                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|adjustScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(adjustScroll:) (((:STRUCT NS::|CGRect|))
                                                (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|previousValidKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(previousValidKeyView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFrameRotation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameRotation:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setBoundsRotation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBoundsRotation:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|rotateByAngle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rotateByAngle:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|autoscroll:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoscroll:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|enclosingMenuItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enclosingMenuItem) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewWithTag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewWithTag:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|beginDraggingSessionWithItems:event:source:| (thing _ event source)
  (let ((message-lambda 
         (make-message-lambda @(beginDraggingSessionWithItems:event:source:) ((:POINTER
                                                                               :POINTER
                                                                               :POINTER)
                                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id event) (objc-object-id source))))

(defun NS::|constraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(constraints) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewWillStartLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewWillStartLiveResize) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewDidEndLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidEndLiveResize) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|updateTrackingAreas| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateTrackingAreas) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|convertRectFromLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectFromLayer:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|interpretKeyEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(interpretKeyEvents:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|candidateListTouchBarItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(candidateListTouchBarItem) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|lastBaselineAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lastBaselineAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewDidChangeBackingProperties| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidChangeBackingProperties) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewWillMoveToWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewWillMoveToWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAutoresizesSubviews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoresizesSubviews:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|replaceSubview:with:options:completionHandler:| (thing _ with options completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(replaceSubview:with:options:completionHandler:) ((:POINTER
                                                                                  :POINTER
                                                                                  :UNSIGNED-LONG-LONG
                                                                                  :POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with) options (objc-object-id completion-handler))))

(defun NS::|setNeedsUpdateConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsUpdateConstraints:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|acceptsTouchEvents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsTouchEvents) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|ignoreHitTest| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ignoreHitTest) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|shouldBeArchived| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldBeArchived) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|displayRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayRect:) (((:STRUCT NS::|CGRect|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|focusRingMaskBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(focusRingMaskBounds) (NIL
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityPopUpMenuParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPopUpMenuParent:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|compositingFilter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(compositingFilter) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_ancestorSharedWithItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_ancestorSharedWithItem:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|shadow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadow) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|backgroundFilters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backgroundFilters) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setBackgroundFilters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackgroundFilters:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|contentFilters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentFilters) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setContentFilters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentFilters:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|clipsToBounds| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(clipsToBounds) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|contentHuggingPriorityForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentHuggingPriorityForOrientation:) ((:LONG-LONG)
                                                                        :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|contentCompressionResistancePriorityForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentCompressionResistancePriorityForOrientation:) ((:LONG-LONG)
                                                                                      :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|layoutRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutRect) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|firstBaselineAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstBaselineAnchor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|discardCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(discardCursorRects) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|cursorUpdate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cursorUpdate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|prepareForDragOperation:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(prepareForDragOperation:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|concludeDragOperation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(concludeDragOperation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|helpRequested:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(helpRequested:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|addTrackingRect:owner:userData:assumeInside:| (thing _ owner user-data assume-inside)
  (let ((message-lambda 
         (make-message-lambda @(addTrackingRect:owner:userData:assumeInside:) (((:STRUCT
                                                                                 NS::|CGRect|)
                                                                                :POINTER
                                                                                (:POINTER
                                                                                 :VOID)
                                                                                :CHAR)
                                                                               :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id owner) (objc-object-id user-data) (if assume-inside 1 0))))

(defun NS::|removeTrackingRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeTrackingRect:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|trackEventsMatchingMask:timeout:mode:handler:| (thing _ timeout mode handler)
  (let ((message-lambda 
         (make-message-lambda @(trackEventsMatchingMask:timeout:mode:handler:) ((:UNSIGNED-LONG-LONG
                                                                                 :DOUBLE
                                                                                 :POINTER
                                                                                 :POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ timeout (objc-object-id mode) (objc-object-id handler))))

(defun NS::|recursiveDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(recursiveDescription) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|wantsRestingTouches| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsRestingTouches) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|allowedTouchTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allowedTouchTypes) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isDrawingFindIndicator| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDrawingFindIndicator) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|removeAllToolTips| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeAllToolTips) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsis_frame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsis_frame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setLayerContentsPlacement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayerContentsPlacement:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|drawLayer:inContext:| (thing _ in-context)
  (let ((message-lambda 
         (make-message-lambda @(drawLayer:inContext:) ((:POINTER
                                                        (:POINTER
                                                         (:STRUCT
                                                          NS::|CGContext|)))
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-context))))

(defun NS::|actionForLayer:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(actionForLayer:forKey:) ((:POINTER :POINTER)
                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun NS::|functionRow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(functionRow) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|needsDisplay| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsDisplay) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|resizeWithOldSuperviewSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(resizeWithOldSuperviewSize:) (((:STRUCT
                                                                NS::|CGSize|))
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|hasAmbiguousLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasAmbiguousLayout) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setUpdateLayerHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUpdateLayerHandler:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|alignmentLayoutRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alignmentLayoutRect) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|ancestorSharedWithView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(ancestorSharedWithView:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|wantsBestResolutionOpenGLSurface| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsBestResolutionOpenGLSurface) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|renewGState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(renewGState) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setPressureConfiguration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPressureConfiguration:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pressureConfiguration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pressureConfiguration) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|canDrawConcurrently| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canDrawConcurrently) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|autoresizesSubviews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoresizesSubviews) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|needsLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsLayout) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|needsUpdateConstraints| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsUpdateConstraints) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|loggingDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(loggingDescription) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|didBecomeActiveFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(didBecomeActiveFirstResponder) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|didResignActiveFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(didResignActiveFirstResponder) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|addToolTipRect:owner:userData:| (thing _ owner user-data)
  (let ((message-lambda 
         (make-message-lambda @(addToolTipRect:owner:userData:) (((:STRUCT
                                                                   NS::|CGRect|)
                                                                  :POINTER
                                                                  (:POINTER
                                                                   :VOID))
                                                                 :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id owner) (objc-object-id user-data))))

(defun NS::|wantsExtendedDynamicRangeOpenGLSurface| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsExtendedDynamicRangeOpenGLSurface) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setWantsExtendedDynamicRangeOpenGLSurface:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsExtendedDynamicRangeOpenGLSurface:) ((:CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|convertPointFromBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointFromBase:) (((:STRUCT
                                                          NS::|CGPoint|))
                                                        (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|prepareContentInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(prepareContentInRect:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setHorizontalContentSizeConstraintActive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalContentSizeConstraintActive:) ((:CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setVerticalContentSizeConstraintActive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalContentSizeConstraintActive:) ((:CHAR)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|rectForPage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rectForPage:) ((:LONG-LONG)
                                               (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|printJobTitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(printJobTitle) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|geometryInWindowDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(geometryInWindowDidChange) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewDidHide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidHide) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewDidUnhide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidUnhide) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isRotatedOrScaledFromBase| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRotatedOrScaledFromBase) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|removeToolTip:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeToolTip:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|inputContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(inputContext) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityFocusRingMaskBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusRingMaskBounds) (NIL
                                                                   (:STRUCT
                                                                    NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|convertPointToLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointToLayer:) (((:STRUCT
                                                         NS::|CGPoint|))
                                                       (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|sortSubviewsUsingFunction:context:| (thing _ context)
  (let ((message-lambda 
         (make-message-lambda @(sortSubviewsUsingFunction:context:) (((:POINTER
                                                                       :POINTER)
                                                                      (:POINTER
                                                                       :VOID))
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id context))))

(defun NS::|resizeSubviewsWithOldSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(resizeSubviewsWithOldSize:) (((:STRUCT
                                                               NS::|CGSize|))
                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|canDrawSubviewsIntoLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canDrawSubviewsIntoLayer) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|nsis_valueOfVariable:didChangeInEngine:| (thing _ did-change-in-engine)
  (let ((message-lambda 
         (make-message-lambda @(nsis_valueOfVariable:didChangeInEngine:) ((:POINTER
                                                                           :POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id did-change-in-engine))))

(defun NS::|convertSizeFromBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeFromBacking:) (((:STRUCT
                                                            NS::|CGSize|))
                                                          (:STRUCT
                                                           NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|preparedContentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preparedContentRect) (NIL
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|overlayBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(overlayBounds) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|needsToDrawRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsToDrawRect:) (((:STRUCT NS::|CGRect|))
                                                   :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun NS::|showActiveFirstResponderIndication| (thing)
  (let ((message-lambda 
         (make-message-lambda @(showActiveFirstResponderIndication) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|drawOverlayRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawOverlayRect:) (((:STRUCT NS::|CGRect|))
                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|visibleAccessibleOrLeafSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(visibleAccessibleOrLeafSubviews) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityAuditPotentialChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditPotentialChildren) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|canSmoothFontsInLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canSmoothFontsInLayer) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|displayIgnoringOpacity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayIgnoringOpacity) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isInTouchBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInTouchBar) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|showDefinitionForAttributedString:range:options:baselineOriginProvider:| (thing _ range options baseline-origin-provider)
  (let ((message-lambda 
         (make-message-lambda @(showDefinitionForAttributedString:range:options:baselineOriginProvider:) ((:POINTER
                                                                                                           (:STRUCT
                                                                                                            NS::|_NSRange|)
                                                                                                           :POINTER
                                                                                                           :POINTER)
                                                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range (objc-object-id options) (objc-object-id baseline-origin-provider))))

(defun NS::|wantsDefaultClipping| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsDefaultClipping) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isInFullScreenMode| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInFullScreenMode) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|locationOfPrintRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(locationOfPrintRect:) (((:STRUCT NS::|CGRect|))
                                                       (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|rectForSmartMagnificationAtPoint:inRect:| (thing _ in-rect)
  (let ((message-lambda 
         (make-message-lambda @(rectForSmartMagnificationAtPoint:inRect:) (((:STRUCT
                                                                             NS::|CGPoint|)
                                                                            (:STRUCT
                                                                             NS::|CGRect|))
                                                                           (:STRUCT
                                                                            NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ in-rect)))

(defun NS::|isRotatedFromBase| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRotatedFromBase) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|didAddSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(didAddSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|adjustPageHeightNew:top:bottom:limit:| (thing _ top bottom limit)
  (let ((message-lambda 
         (make-message-lambda @(adjustPageHeightNew:top:bottom:limit:) (((:POINTER
                                                                          :DOUBLE)
                                                                         :DOUBLE
                                                                         :DOUBLE
                                                                         :DOUBLE)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) top bottom limit)))

(defun NS::|knowsPageRange:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(knowsPageRange:) (((:POINTER
                                                    (:STRUCT NS::|_NSRange|)))
                                                  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|knowsPagesFirst:last:| (thing _ last)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(knowsPagesFirst:last:) (((:POINTER :LONG-LONG)
                                                         (:POINTER :LONG-LONG))
                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id last)))) nil t))

(defun NS::|revealContext:rectsForItem:| (thing _ rects-for-item)
  (let ((message-lambda 
         (make-message-lambda @(revealContext:rectsForItem:) ((:POINTER
                                                               :POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id rects-for-item))))

(defun NS::|addLayoutGuide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addLayoutGuide:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|rectPreservedDuringLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rectPreservedDuringLiveResize) (NIL
                                                                (:STRUCT
                                                                 NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|view:customToolTip:drawInView:displayInfo:| (thing _ custom-tool-tip draw-in-view display-info)
  (let ((message-lambda 
         (make-message-lambda @(view:customToolTip:drawInView:displayInfo:) ((:POINTER
                                                                              :LONG-LONG
                                                                              :POINTER
                                                                              :POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) custom-tool-tip (objc-object-id draw-in-view) (objc-object-id display-info))))

(defun NS::|view:customToolTip:frameForToolTipWithDisplayInfo:| (thing _ custom-tool-tip frame-for-tool-tip-with-display-info)
  (let ((message-lambda 
         (make-message-lambda @(view:customToolTip:frameForToolTipWithDisplayInfo:) ((:POINTER
                                                                                      :LONG-LONG
                                                                                      :POINTER)
                                                                                     (:STRUCT
                                                                                      NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) custom-tool-tip (objc-object-id frame-for-tool-tip-with-display-info))))

(defun NS::|view:customToolTip:fadeOutAllowedForToolTipWithDisplayInfo:| (thing _ custom-tool-tip fade-out-allowed-for-tool-tip-with-display-info)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(view:customToolTip:fadeOutAllowedForToolTipWithDisplayInfo:) ((:POINTER
                                                                                               :LONG-LONG
                                                                                               :POINTER)
                                                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) custom-tool-tip (objc-object-id fade-out-allowed-for-tool-tip-with-display-info)))) nil t))

(defun NS::|nsis_frameInEngine:forLayoutGuide:withRounding:| (thing _ for-layout-guide with-rounding)
  (let ((message-lambda 
         (make-message-lambda @(nsis_frameInEngine:forLayoutGuide:withRounding:) ((:POINTER
                                                                                   :POINTER
                                                                                   :CHAR)
                                                                                  (:STRUCT
                                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-layout-guide) (if with-rounding 1 0))))

(defun NS::|accessibilityPopUpMenuCreated:returningAccessibilityParent:| (thing _ returning-accessibility-parent)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPopUpMenuCreated:returningAccessibilityParent:) ((:POINTER
                                                                                               (:POINTER
                                                                                                :POINTER))
                                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id returning-accessibility-parent))))

(defun NS::|setCanDrawSubviewsIntoLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanDrawSubviewsIntoLayer:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setCanDrawConcurrently:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanDrawConcurrently:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|removeAllGestureRecognizers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeAllGestureRecognizers) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|hideActiveFirstResponderIndication| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hideActiveFirstResponderIndication) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|layerContentsPlacement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layerContentsPlacement) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|compareGeometry:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(compareGeometry:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|nsli_engineToUserScalingCoefficientsInEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_engineToUserScalingCoefficientsInEngine:) ((:POINTER)
                                                                                (:STRUCT
                                                                                 NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setPreparedContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreparedContentRect:) (((:STRUCT
                                                            NS::|CGRect|))
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|boundsOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(boundsOrigin) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFrameTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameTransform:) (((:STRUCT
                                                       NS::|CGAffineTransform|))
                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|frameRotation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameRotation) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|convertPointFromLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointFromLayer:) (((:STRUCT
                                                           NS::|CGPoint|))
                                                         (:STRUCT
                                                          NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|convertSizeToLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeToLayer:) (((:STRUCT NS::|CGSize|))
                                                      (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|convertSizeFromLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeFromLayer:) (((:STRUCT
                                                          NS::|CGSize|))
                                                        (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|removeGestureRecognizer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeGestureRecognizer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|displayIfNeededInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayIfNeededInRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|displayIfNeededIgnoringOpacity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayIfNeededIgnoringOpacity) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|displayIfNeededInRectIgnoringOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayIfNeededInRectIgnoringOpacity:) (((:STRUCT
                                                                          NS::|CGRect|))
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|cacheDisplayInRect:toBitmapImageRep:includeSubviews:| (thing _ to-bitmap-image-rep include-subviews)
  (let ((message-lambda 
         (make-message-lambda @(cacheDisplayInRect:toBitmapImageRep:includeSubviews:) (((:STRUCT
                                                                                         NS::|CGRect|)
                                                                                        :POINTER
                                                                                        :CHAR)
                                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-bitmap-image-rep) (if include-subviews 1 0))))

(defun NS::|layoutGuides| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutGuides) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setWantsBestResolutionOpenGLSurface:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsBestResolutionOpenGLSurface:) ((:CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setGestureRecognizers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGestureRecognizers:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|effectiveAppearanceDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(effectiveAppearanceDidChange) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setMaskView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaskView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|maskView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maskView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|computed_effectiveSemanticContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computed_effectiveSemanticContext) (NIL
                                                                    :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsis_layoutRectFromHostingViewInEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsis_layoutRectFromHostingViewInEngine:) ((:POINTER)
                                                                          (:STRUCT
                                                                           NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|nsis_unroundedFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsis_unroundedFrame) (NIL
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsis_rawAlignmentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsis_rawAlignmentRect) (NIL
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|disableLayoutFlushing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableLayoutFlushing) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|enableLayoutFlushing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableLayoutFlushing) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|frameTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameTransform) (NIL
                                                 (:STRUCT
                                                  NS::|CGAffineTransform|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFrameCenterRotation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameCenterRotation:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|frameCenterRotation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameCenterRotation) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|frameOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameOrigin) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|frameSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|wantsExtendedDynamicRange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsExtendedDynamicRange) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setWantsExtendedDynamicRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsExtendedDynamicRange:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|boundsSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(boundsSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|boundsRotation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(boundsRotation) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setLayerUsesCoreImageFilters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayerUsesCoreImageFilters:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|layerUsesCoreImageFilters| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(layerUsesCoreImageFilters) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|convertPointToBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointToBase:) (((:STRUCT NS::|CGPoint|))
                                                      (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|convertSizeToBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeToBase:) (((:STRUCT NS::|CGSize|))
                                                     (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|convertSizeFromBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeFromBase:) (((:STRUCT NS::|CGSize|))
                                                       (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|convertRectToBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectToBase:) (((:STRUCT NS::|CGRect|))
                                                     (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|convertRectFromBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectFromBase:) (((:STRUCT NS::|CGRect|))
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|gState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gState) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|releaseGState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(releaseGState) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|lockFocusIfCanDrawInContext:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(lockFocusIfCanDrawInContext:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|setAcceptsTouchEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAcceptsTouchEvents:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setWantsRestingTouches:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsRestingTouches:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|gesturesEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(gesturesEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setGesturesEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGesturesEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|displayRectIgnoringOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayRectIgnoringOpacity:) (((:STRUCT
                                                                NS::|CGRect|))
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|usesConstraintsInsteadOfAutoresizing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesConstraintsInsteadOfAutoresizing) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setUsesConstraintsInsteadOfAutoresizing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesConstraintsInsteadOfAutoresizing:) ((:CHAR)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isHorizontalContentSizeConstraintActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHorizontalContentSizeConstraintActive) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isVerticalContentSizeConstraintActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isVerticalContentSizeConstraintActive) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|scrollPoint:fromView:| (thing _ from-view)
  (let ((message-lambda 
         (make-message-lambda @(scrollPoint:fromView:) (((:POINTER
                                                          (:STRUCT
                                                           NS::|CGPoint|))
                                                         :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id from-view))))

(defun NS::|translateRectsNeedingDisplayInRect:by:| (thing _ by)
  (let ((message-lambda 
         (make-message-lambda @(translateRectsNeedingDisplayInRect:by:) (((:STRUCT
                                                                           NS::|CGRect|)
                                                                          (:STRUCT
                                                                           NS::|CGSize|))
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ by)))

(defun NS::|removeCursorRect:cursor:| (thing _ cursor)
  (let ((message-lambda 
         (make-message-lambda @(removeCursorRect:cursor:) (((:STRUCT
                                                             NS::|CGRect|)
                                                            :POINTER)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id cursor))))

(defun NS::|shouldDrawColor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldDrawColor) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|postsBoundsChangedNotifications| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(postsBoundsChangedNotifications) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|willSendMenuNeedsUpdate:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(willSendMenuNeedsUpdate:withEvent:) ((:POINTER
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-event))))

(defun NS::|updateLayerHandler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateLayerHandler) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewDidChangeBackingProperties:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewDidChangeBackingProperties:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|activeDrawingRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(activeDrawingRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|showDefinitionForAttributedString:atPoint:| (thing _ at-point)
  (let ((message-lambda 
         (make-message-lambda @(showDefinitionForAttributedString:atPoint:) ((:POINTER
                                                                              (:STRUCT
                                                                               NS::|CGPoint|))
                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-point)))

(defun NS::|contentStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentStyle) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|computed_inSelectedTableRow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computed_inSelectedTableRow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|computed_titlebarIsForcingDisplayOfDividers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computed_titlebarIsForcingDisplayOfDividers) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|computed_allowRolloverInToolbarControls| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computed_allowRolloverInToolbarControls) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|fontSmoothingBackgroundColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fontSmoothingBackgroundColor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFontSmoothingBackgroundColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFontSmoothingBackgroundColor:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|shouldSetFontSmoothingBackgroundColor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldSetFontSmoothingBackgroundColor) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|nsli_minXVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_minXVariable) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_minYVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_minYVariable) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_superitem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_superitem) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|dataWithEPSInsideRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dataWithEPSInsideRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|dataWithPDFInsideRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dataWithPDFInsideRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|dragFile:fromRect:slideBack:event:| (thing _ from-rect slide-back event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(dragFile:fromRect:slideBack:event:) ((:POINTER
                                                                      (:STRUCT
                                                                       NS::|CGRect|)
                                                                      :CHAR
                                                                      :POINTER)
                                                                     :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) from-rect (if slide-back 1 0) (objc-object-id event)))) nil t))

(defun NS::|dragPromisedFilesOfTypes:fromRect:source:slideBack:event:| (thing _ from-rect source slide-back event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(dragPromisedFilesOfTypes:fromRect:source:slideBack:event:) ((:POINTER
                                                                                             (:STRUCT
                                                                                              NS::|CGRect|)
                                                                                             :POINTER
                                                                                             :CHAR
                                                                                             :POINTER)
                                                                                            :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) from-rect (objc-object-id source) (if slide-back 1 0) (objc-object-id event)))) nil t))

(defun NS::|removeLayoutGuide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeLayoutGuide:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:onBehalfOfLayoutGuide:| (thing _ into-expression with-coefficient for-constraint on-behalf-of-layout-guide)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:onBehalfOfLayoutGuide:) ((:INT
                                                                                                                           :POINTER
                                                                                                                           :DOUBLE
                                                                                                                           :POINTER
                                                                                                                           :POINTER)
                                                                                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id into-expression) with-coefficient (objc-object-id for-constraint) (objc-object-id on-behalf-of-layout-guide)))) nil t))

(defun NS::|nsli_lowersExpressionRelativeToConstraintContainer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_lowersExpressionRelativeToConstraintContainer) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|nsli_layoutEngine| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_layoutEngine) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_installedConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_installedConstraints) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_removeConstraint:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_removeConstraint:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|constraintsAffectingLayoutForOrientation:ofItem:| (thing _ of-item)
  (let ((message-lambda 
         (make-message-lambda @(constraintsAffectingLayoutForOrientation:ofItem:) ((:LONG-LONG
                                                                                    :POINTER)
                                                                                   :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id of-item))))

(defun NS::|nsli_convertSizeToEngineSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_convertSizeToEngineSpace:) (((:STRUCT
                                                                   NS::|CGSize|))
                                                                 (:STRUCT
                                                                  NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|nsli_convertSizeFromEngineSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_convertSizeFromEngineSpace:) (((:STRUCT
                                                                     NS::|CGSize|))
                                                                   (:STRUCT
                                                                    NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|nsli_defaultResolvedValue:forSymbolicConstant:inConstraint:error:| (thing _ for-symbolic-constant in-constraint error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_defaultResolvedValue:forSymbolicConstant:inConstraint:error:) (((:POINTER
                                                                                                      :DOUBLE)
                                                                                                     :POINTER
                                                                                                     :POINTER
                                                                                                     (:POINTER
                                                                                                      :POINTER))
                                                                                                    :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-symbolic-constant) (objc-object-id in-constraint) (objc-object-id error)))) nil t))

(defun NS::|nsli_constraintWithAnchor:relatedBy:toAnchor:withSystemSpacingMultipliedBy:| (thing _ related-by to-anchor with-system-spacing-multiplied-by)
  (let ((message-lambda 
         (make-message-lambda @(nsli_constraintWithAnchor:relatedBy:toAnchor:withSystemSpacingMultipliedBy:) ((:POINTER
                                                                                                               :LONG-LONG
                                                                                                               :POINTER
                                                                                                               :DOUBLE)
                                                                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) related-by (objc-object-id to-anchor) with-system-spacing-multiplied-by)))

(defun NS::|nsli_isRTL| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_isRTL) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|nsli_itemDescribingLayoutDirectionForConstraint:toItem:| (thing _ to-item)
  (let ((message-lambda 
         (make-message-lambda @(nsli_itemDescribingLayoutDirectionForConstraint:toItem:) ((:POINTER
                                                                                           :POINTER)
                                                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-item))))

(defun NS::|nsli_addConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_addConstraint:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|nsli_boundsWidthVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_boundsWidthVariable) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_boundsHeightVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_boundsHeightVariable) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_description| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_description) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:| (thing _ into-expression with-coefficient for-constraint)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:) ((:INT
                                                                                                     :POINTER
                                                                                                     :DOUBLE
                                                                                                     :POINTER)
                                                                                                    :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id into-expression) with-coefficient (objc-object-id for-constraint)))) nil t))

(defun NS::|nsli_lowerAttribute:intoExpression:withCoefficient:container:| (thing _ into-expression with-coefficient container)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_lowerAttribute:intoExpression:withCoefficient:container:) ((:INT
                                                                                                 :POINTER
                                                                                                 :DOUBLE
                                                                                                 :POINTER)
                                                                                                :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id into-expression) with-coefficient (objc-object-id container)))) nil t))

(defun NS::|constraintsAffectingLayoutForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constraintsAffectingLayoutForOrientation:) ((:LONG-LONG)
                                                                            :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|nsli_layoutRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_layoutRect) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_resolvedValue:forSymbolicConstant:inConstraint:error:| (thing _ for-symbolic-constant in-constraint error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_resolvedValue:forSymbolicConstant:inConstraint:error:) (((:POINTER
                                                                                               :DOUBLE)
                                                                                              :POINTER
                                                                                              :POINTER
                                                                                              (:POINTER
                                                                                               :POINTER))
                                                                                             :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-symbolic-constant) (objc-object-id in-constraint) (objc-object-id error)))) nil t))

(defun NS::|nsli_descriptionIncludesPointer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_descriptionIncludesPointer) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|nsli_autoresizingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_autoresizingMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_isFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_isFlipped) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|nsli_piercingToken| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_piercingToken) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_setPiercingToken:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_setPiercingToken:) ((:UNSIGNED-LONG-LONG)
                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:) ((:POINTER)
                                                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|nsis_shouldIntegralizeVariable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsis_shouldIntegralizeVariable:) ((:POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|nsis_valueOfVariableIsUserObservable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsis_valueOfVariableIsUserObservable:) ((:POINTER)
                                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|nsis_descriptionOfVariable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsis_descriptionOfVariable:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|nsis_orientationHintForVariable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsis_orientationHintForVariable:) ((:POINTER)
                                                                   :INT)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|widthAdjustLimit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(widthAdjustLimit) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|adjustPageWidthNew:left:right:limit:| (thing _ left right limit)
  (let ((message-lambda 
         (make-message-lambda @(adjustPageWidthNew:left:right:limit:) (((:POINTER
                                                                         :DOUBLE)
                                                                        :DOUBLE
                                                                        :DOUBLE
                                                                        :DOUBLE)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) left right limit)))

(defun NS::|heightAdjustLimit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(heightAdjustLimit) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|pageFooter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pageFooter) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|pageHeader| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pageHeader) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|drawSheetBorderWithSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawSheetBorderWithSize:) (((:STRUCT
                                                             NS::|CGSize|))
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|drawPageBorderWithSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawPageBorderWithSize:) (((:STRUCT
                                                            NS::|CGSize|))
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|beginDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginDocument) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|endDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endDocument) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|endPage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endPage) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|writePDFInsideRect:toPasteboard:| (thing _ to-pasteboard)
  (let ((message-lambda 
         (make-message-lambda @(writePDFInsideRect:toPasteboard:) (((:STRUCT
                                                                     NS::|CGRect|)
                                                                    :POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-pasteboard))))

(defun NS::|writeEPSInsideRect:toPasteboard:| (thing _ to-pasteboard)
  (let ((message-lambda 
         (make-message-lambda @(writeEPSInsideRect:toPasteboard:) (((:STRUCT
                                                                     NS::|CGRect|)
                                                                    :POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-pasteboard))))

(defun NS::|beginPageInRect:atPlacement:| (thing _ at-placement)
  (let ((message-lambda 
         (make-message-lambda @(beginPageInRect:atPlacement:) (((:STRUCT
                                                                 NS::|CGRect|)
                                                                (:STRUCT
                                                                 NS::|CGPoint|))
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ at-placement)))

(defun NS::|beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:| (thing _ creation-date created-by fonts for-whom pages title)
  (let ((message-lambda 
         (make-message-lambda @(beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:) (((:STRUCT
                                                                                                        NS::|CGRect|)
                                                                                                       :POINTER
                                                                                                       :POINTER
                                                                                                       :POINTER
                                                                                                       :POINTER
                                                                                                       :LONG-LONG
                                                                                                       :POINTER)
                                                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id creation-date) (objc-object-id created-by) (objc-object-id fonts) (objc-object-id for-whom) pages (objc-object-id title))))

(defun NS::|endHeaderComments| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endHeaderComments) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|endPrologue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endPrologue) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|beginSetup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginSetup) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|endSetup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endSetup) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|beginPage:label:bBox:fonts:| (thing _ label b-box fonts)
  (let ((message-lambda 
         (make-message-lambda @(beginPage:label:bBox:fonts:) ((:LONG-LONG
                                                               :POINTER
                                                               (:STRUCT
                                                                NS::|CGRect|)
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id label) b-box (objc-object-id fonts))))

(defun NS::|beginPageSetupRect:placement:| (thing _ placement)
  (let ((message-lambda 
         (make-message-lambda @(beginPageSetupRect:placement:) (((:STRUCT
                                                                  NS::|CGRect|)
                                                                 (:STRUCT
                                                                  NS::|CGPoint|))
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ placement)))

(defun NS::|addToPageSetup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(addToPageSetup) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|endPageSetup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endPageSetup) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|beginTrailer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginTrailer) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|endTrailer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endTrailer) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|enterFullScreenMode:withOptions:| (thing _ with-options)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(enterFullScreenMode:withOptions:) ((:POINTER
                                                                    :POINTER)
                                                                   :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-options)))) nil t))

(defun NS::|exitFullScreenModeWithOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(exitFullScreenModeWithOptions:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|reuseIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(reuseIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|ns_widgetType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ns_widgetType) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|ns_containerWidgetType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ns_containerWidgetType) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|exerciseAmbiguityInLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(exerciseAmbiguityInLayout) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_addConstraint:mutuallyExclusiveConstraints:| (thing _ mutually-exclusive-constraints)
  (let ((message-lambda 
         (make-message-lambda @(nsli_addConstraint:mutuallyExclusiveConstraints:) ((:POINTER
                                                                                    (:POINTER
                                                                                     :POINTER))
                                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id mutually-exclusive-constraints))))

(defun NS::|nsli_engineToUserScalingCoefficients| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_engineToUserScalingCoefficients) (NIL
                                                                       (:STRUCT
                                                                        NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nsli_layoutAnchorForAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_layoutAnchorForAttribute:) ((:LONG-LONG)
                                                                 :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|nsli_canHostIndependentVariableAnchor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_canHostIndependentVariableAnchor) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|nsli_swapContainerForOutgoingConstraint:toIncomingConstraint:| (thing _ to-incoming-constraint)
  (let ((message-lambda 
         (make-message-lambda @(nsli_swapContainerForOutgoingConstraint:toIncomingConstraint:) ((:POINTER
                                                                                                 :POINTER)
                                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-incoming-constraint))))

(defun NS::|engine:markerForConstraintToBreakAmongConstraints:| (thing _ marker-for-constraint-to-break-among-constraints)
  (let ((message-lambda 
         (make-message-lambda @(engine:markerForConstraintToBreakAmongConstraints:) ((:POINTER
                                                                                      :POINTER)
                                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id marker-for-constraint-to-break-among-constraints))))

(defun NS::|engine:willBreakConstraint:dueToMutuallyExclusiveConstraints:| (thing _ will-break-constraint due-to-mutually-exclusive-constraints)
  (let ((message-lambda 
         (make-message-lambda @(engine:willBreakConstraint:dueToMutuallyExclusiveConstraints:) ((:POINTER
                                                                                                 :POINTER
                                                                                                 :POINTER)
                                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id will-break-constraint) (objc-object-id due-to-mutually-exclusive-constraints))))

(defun NS::|solutionDidChangeInEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(solutionDidChangeInEngine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|measureMin:max:ideal:| (thing _ max ideal)
  (let ((message-lambda 
         (make-message-lambda @(measureMin:max:ideal:) (((:POINTER
                                                          (:STRUCT
                                                           NS::|CGSize|))
                                                         (:POINTER
                                                          (:STRUCT
                                                           NS::|CGSize|))
                                                         (:POINTER
                                                          (:STRUCT
                                                           NS::|CGSize|)))
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id max) (objc-object-id ideal))))

(defun NS::|layoutMarginsGuide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutMarginsGuide) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|safeAreaLayoutGuide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(safeAreaLayoutGuide) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|computedSafeAreaInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computedSafeAreaInsets) (NIL
                                                         (:STRUCT
                                                          NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|computedSafeAreaRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computedSafeAreaRect) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|recursiveConstraintDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(recursiveConstraintDescription) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|recursiveConstraintIdentifierDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(recursiveConstraintIdentifierDescription) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|declaredLayoutRules| (thing)
  (let ((message-lambda 
         (make-message-lambda @(declaredLayoutRules) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|textLayerShouldEnableFontSmoothing:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(textLayerShouldEnableFontSmoothing:) ((:POINTER)
                                                                      :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|removeConstraintWithIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeConstraintWithIdentifier:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))









(defun NS::|setEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setTarget:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTarget:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|target| (thing)
  (let ((message-lambda 
         (make-message-lambda @(target) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|isEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|action| (thing)
  (let ((message-lambda 
         (make-message-lambda @(action) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setTag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTag:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setRepresentedObject:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepresentedObject:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setBaseWritingDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBaseWritingDirection:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAction:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAlignment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAlignment:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|alignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alignment) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|formatter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(formatter) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFormatter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFormatter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|objectValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(objectValue) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setObjectValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setObjectValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setStringValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStringValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|lineBreakMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineBreakMode) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|baseWritingDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(baseWritingDirection) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setLineBreakMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineBreakMode:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|controlSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(controlSize) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setControlSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setControlSize:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))








(defun NS::|setContinuous:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContinuous:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))



(defun NS::|setHighlighted:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHighlighted:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isContinuous| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isContinuous) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|mouseDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|acceptsFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsFirstResponder) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isHighlighted| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHighlighted) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))





(defun NS::|accessibilityHelpStringForChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHelpStringForChild:) ((:POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityIsChildFocusable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsChildFocusable:) ((:POINTER)
                                                                 :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|accessibilitySetFocus:forChild:| (thing _ for-child)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetFocus:forChild:) ((:POINTER
                                                                   :POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-child))))

(defun NS::|accessibilityPositionOfChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPositionOfChild:) ((:POINTER)
                                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySizeOfChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySizeOfChild:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|accessibilityEnabledAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityEnabledAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsEnabledAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsEnabledAttributeSettable) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|cell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cell) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|setDoubleValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDoubleValue:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setTouchBarInsetMitigation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTouchBarInsetMitigation:) ((:LONG-LONG)
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setTouchBarRestingMitigation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTouchBarRestingMitigation:) ((:LONG-LONG)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|touchBarInsetMitigation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBarInsetMitigation) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|touchBarRestingMitigation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBarRestingMitigation) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|font| (thing)
  (let ((message-lambda 
         (make-message-lambda @(font) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFont:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFont:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|performClick:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performClick:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|attributedStringValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributedStringValue) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun NS::|sizeToFit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sizeToFit) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAttributedStringValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAttributedStringValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|becomeKeyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(becomeKeyWindow) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|representedObject| (thing)
  (let ((message-lambda 
         (make-message-lambda @(representedObject) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setIntValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIntValue:) ((:INT) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setIntegerValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIntegerValue:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setFloatValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFloatValue:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|sendAction:to:| (thing _ to)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(sendAction:to:) ((:POINTER :POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to)))) nil t))

(defun NS::|setCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|abortEditing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(abortEditing) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|updateCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectedCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedCell) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|keyDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(keyDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|resignFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(resignFirstResponder) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setRefusesFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRefusesFirstResponder:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|selectCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|resignKeyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignKeyWindow) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|updateCellInside:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateCellInside:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|becomeFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(becomeFirstResponder) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|refusesFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(refusesFirstResponder) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun NS::|backgroundStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backgroundStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|drawWithExpansionFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(drawWithExpansionFrame:inView:) (((:STRUCT
                                                                   NS::|CGRect|)
                                                                  :POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|getPeriodicDelay:interval:| (thing _ interval)
  (let ((message-lambda 
         (make-message-lambda @(getPeriodicDelay:interval:) (((:POINTER :FLOAT)
                                                              (:POINTER
                                                               :FLOAT))
                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id interval))))

(defun NS::|setNextState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setNextState) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|sendActionOnMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sendActionOnMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|drawCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|currentEditor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentEditor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|validateEditing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(validateEditing) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|usesSingleLineMode| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesSingleLineMode) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|endEditing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endEditing:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|sendActionOn:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sendActionOn:) ((:UNSIGNED-LONG-LONG)
                                                :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|takeIntValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeIntValueFrom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|takeIntegerValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeIntegerValueFrom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|takeFloatValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeFloatValueFrom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|takeDoubleValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeDoubleValueFrom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|takeStringValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeStringValueFrom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|takeObjectValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeObjectValueFrom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setUsesSingleLineMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesSingleLineMode:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|mouseDownFlags| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mouseDownFlags) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun NS::|setNeedsDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplay) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun NS::|touchesBeganWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesBeganWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|touchesMovedWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesMovedWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|touchesEndedWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesEndedWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|touchesCancelledWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesCancelledWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAllowsExpansionToolTips:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsExpansionToolTips:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|allowsLogicalLayoutDirection| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsLogicalLayoutDirection) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|allowsExpansionToolTips| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsExpansionToolTips) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|keyUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(keyUp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityPostNotification:context:| (thing _ context)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPostNotification:context:) ((:POINTER
                                                                          :POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id context))))

(defun NS::|textView:willChangeSelectionFromCharacterRange:toCharacterRange:| (thing _ will-change-selection-from-character-range to-character-range)
  (let ((message-lambda 
         (make-message-lambda @(textView:willChangeSelectionFromCharacterRange:toCharacterRange:) ((:POINTER
                                                                                                    (:STRUCT
                                                                                                     NS::|_NSRange|)
                                                                                                    (:STRUCT
                                                                                                     NS::|_NSRange|))
                                                                                                   (:STRUCT
                                                                                                    NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) will-change-selection-from-character-range to-character-range)))

(defun NS::|setFloatingPointFormat:left:right:| (thing _ left right)
  (let ((message-lambda 
         (make-message-lambda @(setFloatingPointFormat:left:right:) ((:CHAR
                                                                      :UNSIGNED-LONG-LONG
                                                                      :UNSIGNED-LONG-LONG)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) left right)))

(defun NS::|setAllowsLogicalLayoutDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsLogicalLayoutDirection:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|cellIfExists| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cellIfExists) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|selectedTag| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedTag) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|sizeThatFits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sizeThatFits:) (((:STRUCT NS::|CGSize|))
                                                (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|ignoresMultiClick| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ignoresMultiClick) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setIgnoresMultiClick:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIgnoresMultiClick:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))



(defun NS::|skipEditValidation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(skipEditValidation) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setSkipEditValidation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSkipEditValidation:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|editWithFrame:editor:delegate:event:| (thing _ editor delegate event)
  (let ((message-lambda 
         (make-message-lambda @(editWithFrame:editor:delegate:event:) (((:STRUCT
                                                                         NS::|CGRect|)
                                                                        :POINTER
                                                                        :POINTER
                                                                        :POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id editor) (objc-object-id delegate) (objc-object-id event))))

(defun NS::|selectWithFrame:editor:delegate:start:length:| (thing _ editor delegate start length)
  (let ((message-lambda 
         (make-message-lambda @(selectWithFrame:editor:delegate:start:length:) (((:STRUCT
                                                                                  NS::|CGRect|)
                                                                                 :POINTER
                                                                                 :POINTER
                                                                                 :LONG-LONG
                                                                                 :LONG-LONG)
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id editor) (objc-object-id delegate) start length)))

(defun NS::|textViewDidChangeSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(textViewDidChangeSelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|calcSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(calcSize) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|drawCellInside:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawCellInside:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|expansionFrameWithFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(expansionFrameWithFrame:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           (:STRUCT
                                                            NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|addTarget:action:forControlEvents:| (thing _ action for-control-events)
  (let ((message-lambda 
         (make-message-lambda @(addTarget:action:forControlEvents:) ((:POINTER
                                                                      :POINTER
                                                                      :UNSIGNED-LONG-LONG)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id action) for-control-events)))

(defun NS::|removeTarget:action:forControlEvents:| (thing _ action for-control-events)
  (let ((message-lambda 
         (make-message-lambda @(removeTarget:action:forControlEvents:) ((:POINTER
                                                                         :POINTER
                                                                         :UNSIGNED-LONG-LONG)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id action) for-control-events)))














(defun NS::|state| (thing)
  (let ((message-lambda 
         (make-message-lambda @(state) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|setType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setType:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))






(defun NS::|setState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setState:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))



(defun NS::|setImage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setImage:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))





(defun NS::|setTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|keyEquivalent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyEquivalent) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|image| (thing)
  (let ((message-lambda 
         (make-message-lambda @(image) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))







(defun NS::|title| (thing)
  (let ((message-lambda 
         (make-message-lambda @(title) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))









(defun NS::|setAccessibilitySubrole:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySubrole:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setDrawsBackground:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawsBackground:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))




(defun NS::|accessibilitySubrole| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySubrole) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityDecrementButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDecrementButton) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIncrementButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIncrementButton) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun NS::|accessibilityChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChildren) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|accessibilityRole| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRole) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityLabel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLabel) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIndex| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIndex) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|accessibilityCustomActions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCustomActions) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun NS::|accessibilityChildrenInNavigationOrder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChildrenInNavigationOrder) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|controlView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(controlView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isAccessibilityElement| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityElement) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun NS::|accessibilityRowCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRowCount) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityVisibleChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleChildren) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityRoleDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRoleDescription) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityColumnCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumnCount) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilitySelectedChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedChildren) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySelectedChildren:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedChildren:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySelectedCells| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedCells) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))
































(defun NS::|mouseEntered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseEntered:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|mouseExited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseExited:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityTitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTitle) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityElementWithParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityElementWithParent:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|setControlView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setControlView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|interiorBackgroundStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(interiorBackgroundStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|textAlignmentPolicy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textAlignmentPolicy) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|titleRectForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(titleRectForBounds:) (((:STRUCT NS::|CGRect|))
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAccessibilityLabel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityLabel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|isBordered| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isBordered) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setBordered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBordered:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun NS::|cellSizeForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cellSizeForBounds:) (((:STRUCT NS::|CGRect|))
                                                     (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setControlTint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setControlTint:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|setAllowsEditingTextAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsEditingTextAttributes:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun NS::|accessibilityPostNotification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPostNotification:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|isAccessibilityFocused| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityFocused) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityLayoutPointForScreenPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLayoutPointForScreenPoint:) (((:STRUCT
                                                                            NS::|CGPoint|))
                                                                          (:STRUCT
                                                                           NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityLayoutSizeForScreenSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLayoutSizeForScreenSize:) (((:STRUCT
                                                                          NS::|CGSize|))
                                                                        (:STRUCT
                                                                         NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityScreenPointForLayoutPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityScreenPointForLayoutPoint:) (((:STRUCT
                                                                            NS::|CGPoint|))
                                                                          (:STRUCT
                                                                           NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityScreenSizeForLayoutSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityScreenSizeForLayoutSize:) (((:STRUCT
                                                                          NS::|CGSize|))
                                                                        (:STRUCT
                                                                         NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityCellForColumn:row:| (thing _ row)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCellForColumn:row:) ((:LONG-LONG
                                                                   :LONG-LONG)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ row)))

(defun NS::|accessibilityAttributedStringForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributedStringForRange:) (((:STRUCT
                                                                           NS::|_NSRange|))
                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityRangeForLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForLine:) ((:LONG-LONG)
                                                             (:STRUCT
                                                              NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityStringForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityStringForRange:) (((:STRUCT
                                                                 NS::|_NSRange|))
                                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityRangeForPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForPosition:) (((:STRUCT
                                                                   NS::|CGPoint|))
                                                                 (:STRUCT
                                                                  NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityRangeForIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForIndex:) ((:LONG-LONG)
                                                              (:STRUCT
                                                               NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityFrameForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFrameForRange:) (((:STRUCT
                                                                NS::|_NSRange|))
                                                              (:STRUCT
                                                               NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityRTFForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRTFForRange:) (((:STRUCT
                                                              NS::|_NSRange|))
                                                            :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityStyleRangeForIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityStyleRangeForIndex:) ((:LONG-LONG)
                                                                   (:STRUCT
                                                                    NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityLineForIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLineForIndex:) ((:LONG-LONG)
                                                             :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityPerformCancel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformCancel) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityPerformConfirm| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformConfirm) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityPerformDecrement| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformDecrement) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityPerformDelete| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformDelete) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityPerformIncrement| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformIncrement) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityPerformPick| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformPick) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityPerformPress| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformPress) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityPerformRaise| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformRaise) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityPerformShowAlternateUI| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformShowAlternateUI) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityPerformShowDefaultUI| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformShowDefaultUI) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityPerformShowMenu| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformShowMenu) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isAccessibilitySelectorAllowed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilitySelectorAllowed:) ((:POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|setAccessibilityElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityElement:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setAccessibilityFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFrame:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAccessibilityFocused:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFocused:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityActivationPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityActivationPoint) (NIL
                                                               (:STRUCT
                                                                NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityActivationPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityActivationPoint:) (((:STRUCT
                                                                     NS::|CGPoint|))
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityTopLevelUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTopLevelUIElement) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityTopLevelUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityTopLevelUIElement:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityURL) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityURL:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityURL:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityValue) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityValueDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityValueDescription) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityValueDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityValueDescription:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAccessibilityVisibleChildren:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleChildren:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAccessibilityTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityTitle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityTitleUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTitleUIElement) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityTitleUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityTitleUIElement:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityNextContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityNextContents) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityNextContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityNextContents:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityOrientation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityOrientation) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityOrientation:) ((:LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityOverflowButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityOverflowButton) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityOverflowButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityOverflowButton:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAccessibilityParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityParent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityPlaceholderValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPlaceholderValue) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityPlaceholderValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityPlaceholderValue:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityPreviousContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPreviousContents) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityPreviousContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityPreviousContents:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAccessibilityRole:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRole:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAccessibilityRoleDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRoleDescription:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySearchButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySearchButton) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySearchButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySearchButton:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySearchMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySearchMenu) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySearchMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySearchMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilitySelected| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilitySelected) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilitySelected:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelected:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityServesAsTitleForUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityServesAsTitleForUIElements) (NIL
                                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityServesAsTitleForUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityServesAsTitleForUIElements:) ((:POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityShownMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityShownMenu) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityShownMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityShownMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityMinValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinValue) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityMinValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMinValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityMaxValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMaxValue) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityMaxValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMaxValue:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityLinkedUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLinkedUIElements) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityLinkedUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityLinkedUIElements:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindow) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAccessibilityIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityIdentifier:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityHelp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHelp) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityHelp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHelp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityFilename| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFilename) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityFilename:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFilename:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityExpanded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityExpanded) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityExpanded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityExpanded:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isAccessibilityEdited| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEdited) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityEdited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEdited:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isAccessibilityEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setAccessibilityChildren:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityChildren:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAccessibilityChildrenInNavigationOrder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityChildrenInNavigationOrder:) ((:POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityClearButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityClearButton) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityClearButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityClearButton:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityCancelButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCancelButton) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityCancelButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCancelButton:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityProtectedContent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityProtectedContent) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityProtectedContent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityProtectedContent:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContents) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityContents:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityAlternateUIVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityAlternateUIVisible) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityAlternateUIVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAlternateUIVisible:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilitySharedFocusElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedFocusElements) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySharedFocusElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySharedFocusElements:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityRequired| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityRequired) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityRequired:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRequired:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityCustomRotors| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCustomRotors) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityCustomRotors:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCustomRotors:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityApplicationFocusedUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityApplicationFocusedUIElement) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityApplicationFocusedUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityApplicationFocusedUIElement:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityMainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMainWindow) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityMainWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMainWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityHidden) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHidden:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isAccessibilityFrontmost| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityFrontmost) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityFrontmost:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFrontmost:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityFocusedWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedWindow) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityFocusedWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFocusedWindow:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindows) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityWindows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityWindows:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityExtrasMenuBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityExtrasMenuBar) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityExtrasMenuBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityExtrasMenuBar:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityMenuBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMenuBar) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityMenuBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMenuBar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityColumnTitles| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumnTitles) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityColumnTitles:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumnTitles:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityOrderedByRow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityOrderedByRow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityOrderedByRow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityOrderedByRow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityHorizontalUnits| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalUnits) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityHorizontalUnits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHorizontalUnits:) ((:LONG-LONG)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityVerticalUnits| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalUnits) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityVerticalUnits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVerticalUnits:) ((:LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityHorizontalUnitDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalUnitDescription) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityHorizontalUnitDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHorizontalUnitDescription:) ((:POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityVerticalUnitDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalUnitDescription) (NIL
                                                                       :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityVerticalUnitDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVerticalUnitDescription:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityHandles| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHandles) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityHandles:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHandles:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityWarningValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWarningValue) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityWarningValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityWarningValue:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityCriticalValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCriticalValue) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityCriticalValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCriticalValue:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityDisclosed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityDisclosed) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityDisclosed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDisclosed:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityDisclosedByRow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDisclosedByRow) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityDisclosedByRow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDisclosedByRow:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityDisclosedRows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDisclosedRows) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityDisclosedRows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDisclosedRows:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityDisclosureLevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDisclosureLevel) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityDisclosureLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDisclosureLevel:) ((:LONG-LONG)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityMarkerUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerUIElements) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityMarkerUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMarkerUIElements:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityMarkerValues| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerValues) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityMarkerValues:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMarkerValues:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityMarkerGroupUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerGroupUIElement) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityMarkerGroupUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMarkerGroupUIElement:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityUnits| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUnits) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityUnits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityUnits:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityUnitDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUnitDescription) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityUnitDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityUnitDescription:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityRulerMarkerType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRulerMarkerType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityRulerMarkerType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRulerMarkerType:) ((:LONG-LONG)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityMarkerTypeDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerTypeDescription) (NIL
                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityMarkerTypeDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMarkerTypeDescription:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityHorizontalScrollBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalScrollBar) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityHorizontalScrollBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHorizontalScrollBar:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityVerticalScrollBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalScrollBar) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityVerticalScrollBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVerticalScrollBar:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityAllowedValues| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAllowedValues) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityAllowedValues:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAllowedValues:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityLabelUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLabelUIElements) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityLabelUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityLabelUIElements:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityLabelValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLabelValue) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityLabelValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityLabelValue:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilitySplitters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySplitters) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySplitters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySplitters:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAccessibilityDecrementButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDecrementButton:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAccessibilityIncrementButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityIncrementButton:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityTabs| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTabs) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityTabs:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityTabs:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityHeader| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHeader) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityHeader:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHeader:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAccessibilityColumnCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumnCount:) ((:LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAccessibilityRowCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRowCount:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAccessibilityIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityIndex:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityColumns| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumns) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityColumns:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumns:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityRows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRows) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityRows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRows:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityVisibleRows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleRows) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityVisibleRows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleRows:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySelectedRows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedRows) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySelectedRows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedRows:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityVisibleColumns| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleColumns) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityVisibleColumns:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleColumns:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySelectedColumns| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedColumns) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySelectedColumns:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedColumns:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySortDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySortDirection) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySortDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySortDirection:) ((:LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityRowHeaderUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRowHeaderUIElements) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityRowHeaderUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRowHeaderUIElements:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAccessibilitySelectedCells:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedCells:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityVisibleCells| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleCells) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityVisibleCells:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleCells:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityColumnHeaderUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumnHeaderUIElements) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityColumnHeaderUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumnHeaderUIElements:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityRowIndexRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRowIndexRange) (NIL
                                                             (:STRUCT
                                                              NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityRowIndexRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRowIndexRange:) (((:STRUCT
                                                                   NS::|_NSRange|))
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityColumnIndexRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumnIndexRange) (NIL
                                                                (:STRUCT
                                                                 NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityColumnIndexRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumnIndexRange:) (((:STRUCT
                                                                      NS::|_NSRange|))
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityInsertionPointLineNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityInsertionPointLineNumber) (NIL
                                                                        :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityInsertionPointLineNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityInsertionPointLineNumber:) ((:LONG-LONG)
                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilitySharedCharacterRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedCharacterRange) (NIL
                                                                    (:STRUCT
                                                                     NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySharedCharacterRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySharedCharacterRange:) (((:STRUCT
                                                                          NS::|_NSRange|))
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilitySharedTextUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedTextUIElements) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySharedTextUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySharedTextUIElements:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityVisibleCharacterRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleCharacterRange) (NIL
                                                                     (:STRUCT
                                                                      NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityVisibleCharacterRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleCharacterRange:) (((:STRUCT
                                                                           NS::|_NSRange|))
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityNumberOfCharacters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityNumberOfCharacters) (NIL
                                                                  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityNumberOfCharacters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityNumberOfCharacters:) ((:LONG-LONG)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilitySelectedText| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedText) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySelectedText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedText:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySelectedTextRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextRange) (NIL
                                                                 (:STRUCT
                                                                  NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySelectedTextRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedTextRange:) (((:STRUCT
                                                                       NS::|_NSRange|))
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilitySelectedTextRanges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextRanges) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySelectedTextRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedTextRanges:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityToolbarButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityToolbarButton) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityToolbarButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityToolbarButton:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityModal) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityModal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityModal:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityProxy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityProxy) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityProxy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityProxy:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityMain| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMain) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityMain:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMain:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityFullScreenButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFullScreenButton) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityFullScreenButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFullScreenButton:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityGrowArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityGrowArea) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityGrowArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityGrowArea:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDocument) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDocument:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityDefaultButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDefaultButton) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityDefaultButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDefaultButton:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityCloseButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCloseButton) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityCloseButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCloseButton:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityZoomButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityZoomButton) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityZoomButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityZoomButton:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityMinimizeButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinimizeButton) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityMinimizeButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMinimizeButton:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityMinimized| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMinimized) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityMinimized:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMinimized:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setAccessibilityCustomActions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCustomActions:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun NS::|isEditable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEditable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))





(defun NS::|accessibilityValueAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityValueAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsValueAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsValueAttributeSettable) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySetValueAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetValueAttribute:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|initTextCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initTextCell:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|cellSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cellSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|drawWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(drawWithFrame:inView:) (((:STRUCT NS::|CGRect|)
                                                         :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|setEditable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEditable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setSelectable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setTitleWithMnemonic:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleWithMnemonic:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|hitTestForEvent:inRect:ofView:| (thing _ in-rect of-view)
  (let ((message-lambda 
         (make-message-lambda @(hitTestForEvent:inRect:ofView:) ((:POINTER
                                                                  (:STRUCT
                                                                   NS::|CGRect|)
                                                                  :POINTER)
                                                                 :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-rect (objc-object-id of-view))))


(defun NS::|highlight:withFrame:inView:| (thing _ with-frame in-view)
  (let ((message-lambda 
         (make-message-lambda @(highlight:withFrame:inView:) ((:CHAR
                                                               (:STRUCT
                                                                NS::|CGRect|)
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) with-frame (objc-object-id in-view))))


(defun NS::|drawsBackground| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsBackground) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|setBezeled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBezeled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setWraps:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWraps:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun NS::|initImageCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initImageCell:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|drawInteriorWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(drawInteriorWithFrame:inView:) (((:STRUCT
                                                                  NS::|CGRect|)
                                                                 :POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|setBackgroundStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackgroundStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|imageRectForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(imageRectForBounds:) (((:STRUCT NS::|CGRect|))
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|highlightColorWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(highlightColorWithFrame:inView:) (((:STRUCT
                                                                    NS::|CGRect|)
                                                                   :POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|expansionFrameWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(expansionFrameWithFrame:inView:) (((:STRUCT
                                                                    NS::|CGRect|)
                                                                   :POINTER)
                                                                  (:STRUCT
                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))



(defun NS::|allowsMixedState| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsMixedState) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAllowsMixedState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsMixedState:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun NS::|setShowsFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsFirstResponder:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|drawFocusRingMaskWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(drawFocusRingMaskWithFrame:inView:) (((:STRUCT
                                                                       NS::|CGRect|)
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|updateTrackingAreaWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(updateTrackingAreaWithFrame:inView:) (((:STRUCT
                                                                        NS::|CGRect|)
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|mnemonic| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mnemonic) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|drawingRectForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawingRectForBounds:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|nextState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nextState) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setScrollable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isBezeled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isBezeled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|trackMouse:inRect:ofView:untilMouseUp:| (thing _ in-rect of-view until-mouse-up)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(trackMouse:inRect:ofView:untilMouseUp:) ((:POINTER
                                                                          (:STRUCT
                                                                           NS::|CGRect|)
                                                                          :POINTER
                                                                          :CHAR)
                                                                         :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-rect (objc-object-id of-view) (if until-mouse-up 1 0)))) nil t))

(defun NS::|startTrackingAt:inView:| (thing _ in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(startTrackingAt:inView:) (((:STRUCT
                                                            NS::|CGPoint|)
                                                           :POINTER)
                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view)))) nil t))

(defun NS::|continueTracking:at:inView:| (thing _ at in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(continueTracking:at:inView:) (((:STRUCT
                                                                NS::|CGPoint|)
                                                               (:STRUCT
                                                                NS::|CGPoint|)
                                                               :POINTER)
                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ at (objc-object-id in-view)))) nil t))

(defun NS::|touchEndedAt:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchEndedAt:inView:) (((:STRUCT NS::|CGPoint|)
                                                        :POINTER)
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))


(defun NS::|wantsUpdateLayerInView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsUpdateLayerInView:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|updateLayerWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(updateLayerWithFrame:inView:) (((:STRUCT
                                                                 NS::|CGRect|)
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|layoutLayerWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(layoutLayerWithFrame:inView:) (((:STRUCT
                                                                 NS::|CGRect|)
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|focusRingMaskBoundsForFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(focusRingMaskBoundsForFrame:inView:) (((:STRUCT
                                                                        NS::|CGRect|)
                                                                       :POINTER)
                                                                      (:STRUCT
                                                                       NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|continueTrackingGesture:inView:| (thing _ in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(continueTrackingGesture:inView:) ((:POINTER
                                                                   :POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-view)))) nil t))

(defun NS::|stopTracking:at:inView:mouseIsUp:| (thing _ at in-view mouse-is-up)
  (let ((message-lambda 
         (make-message-lambda @(stopTracking:at:inView:mouseIsUp:) (((:STRUCT
                                                                      NS::|CGPoint|)
                                                                     (:STRUCT
                                                                      NS::|CGPoint|)
                                                                     :POINTER
                                                                     :CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ at (objc-object-id in-view) (if mouse-is-up 1 0))))

(defun NS::|cellAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cellAttribute:) ((:UNSIGNED-LONG-LONG)
                                                 :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setCellAttribute:to:| (thing _ to)
  (let ((message-lambda 
         (make-message-lambda @(setCellAttribute:to:) ((:UNSIGNED-LONG-LONG
                                                        :LONG-LONG)
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ to)))

(defun NS::|setImageInterpolation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setImageInterpolation:) ((:UNSIGNED-LONG-LONG)
                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|imageInterpolation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(imageInterpolation) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|wraps| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wraps) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|allowsEditingTextAttributes| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsEditingTextAttributes) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|allowsEditingTokens| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsEditingTokens) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|allowsUndo| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsUndo) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|truncatesLastVisibleLine| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(truncatesLastVisibleLine) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isScrollable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isScrollable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|titleTextContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titleTextContainer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|cachesLineRef| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(cachesLineRef) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|continueTrackingPeriodicEvent:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(continueTrackingPeriodicEvent:inView:) ((:POINTER
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-view))))

(defun NS::|cancelTrackingAt:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(cancelTrackingAt:inView:) (((:STRUCT
                                                             NS::|CGPoint|)
                                                            :POINTER)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))


(defun NS::|fieldEditorTextContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fieldEditorTextContainer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isSelectable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSelectable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|styleEffectConfiguration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(styleEffectConfiguration) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|hasValidObjectValue| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasValidObjectValue) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAllowsUndo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsUndo:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|showsFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsFirstResponder) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|importsGraphics| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(importsGraphics) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setImportsGraphics:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setImportsGraphics:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|allowsDefaultTighteningForTruncation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsDefaultTighteningForTruncation) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAllowsDefaultTighteningForTruncation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsDefaultTighteningForTruncation:) ((:CHAR)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))







(defun NS::|setTruncatesLastVisibleLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTruncatesLastVisibleLine:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun NS::|textView:shouldChangeTextInRange:replacementString:| (thing _ should-change-text-in-range replacement-string)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(textView:shouldChangeTextInRange:replacementString:) ((:POINTER
                                                                                       (:STRUCT
                                                                                        NS::|_NSRange|)
                                                                                       :POINTER)
                                                                                      :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) should-change-text-in-range (objc-object-id replacement-string)))) nil t))

(defun NS::|textDidChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(textDidChange:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|calcDrawInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(calcDrawInfo:) (((:STRUCT NS::|CGRect|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setUpFieldEditorAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUpFieldEditorAttributes:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|fontDilationStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fontDilationStyle) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|touchBeganAt:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchBeganAt:inView:) (((:STRUCT NS::|CGPoint|)
                                                        :POINTER)
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|touchMovedFrom:to:inView:| (thing _ to in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchMovedFrom:to:inView:) (((:STRUCT
                                                              NS::|CGPoint|)
                                                             (:STRUCT
                                                              NS::|CGPoint|)
                                                             :POINTER)
                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ to (objc-object-id in-view))))

(defun NS::|touchCancelledAt:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchCancelledAt:inView:) (((:STRUCT
                                                             NS::|CGPoint|)
                                                            :POINTER)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|keyDown:inRect:ofView:| (thing _ in-rect of-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(keyDown:inRect:ofView:) ((:POINTER
                                                          (:STRUCT
                                                           NS::|CGRect|)
                                                          :POINTER)
                                                         :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-rect (objc-object-id of-view)))) nil t))

(defun NS::|keyUp:inRect:ofView:| (thing _ in-rect of-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(keyUp:inRect:ofView:) ((:POINTER
                                                        (:STRUCT NS::|CGRect|)
                                                        :POINTER)
                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-rect (objc-object-id of-view)))) nil t))

(defun NS::|editWithFrame:inView:editor:delegate:event:| (thing _ in-view editor delegate event)
  (let ((message-lambda 
         (make-message-lambda @(editWithFrame:inView:editor:delegate:event:) (((:STRUCT
                                                                                NS::|CGRect|)
                                                                               :POINTER
                                                                               :POINTER
                                                                               :POINTER
                                                                               :POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view) (objc-object-id editor) (objc-object-id delegate) (objc-object-id event))))

(defun NS::|selectWithFrame:inView:editor:delegate:start:length:| (thing _ in-view editor delegate start length)
  (let ((message-lambda 
         (make-message-lambda @(selectWithFrame:inView:editor:delegate:start:length:) (((:STRUCT
                                                                                         NS::|CGRect|)
                                                                                        :POINTER
                                                                                        :POINTER
                                                                                        :POINTER
                                                                                        :LONG-LONG
                                                                                        :LONG-LONG)
                                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view) (objc-object-id editor) (objc-object-id delegate) start length)))

(defun NS::|fieldEditorForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(fieldEditorForView:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|resetCursorRect:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(resetCursorRect:inView:) (((:STRUCT
                                                            NS::|CGRect|)
                                                           :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|menuForEvent:inRect:ofView:| (thing _ in-rect of-view)
  (let ((message-lambda 
         (make-message-lambda @(menuForEvent:inRect:ofView:) ((:POINTER
                                                               (:STRUCT
                                                                NS::|CGRect|)
                                                               :POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-rect (objc-object-id of-view))))

(defun NS::|setSendsActionOnEndEditing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSendsActionOnEndEditing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|sendsActionOnEndEditing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(sendsActionOnEndEditing) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|wantsNotificationForMarkedText| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsNotificationForMarkedText) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|opaqueRectForTitleBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(opaqueRectForTitleBounds:) (((:STRUCT
                                                              NS::|CGRect|))
                                                            (:STRUCT
                                                             NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|draggingImageComponentsWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(draggingImageComponentsWithFrame:inView:) (((:STRUCT
                                                                             NS::|CGRect|)
                                                                            :POINTER)
                                                                           :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun NS::|canSmoothFontsInFrame:forLayerBackedView:| (thing _ for-layer-backed-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canSmoothFontsInFrame:forLayerBackedView:) (((:STRUCT
                                                                              NS::|CGRect|)
                                                                             :POINTER)
                                                                            :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-layer-backed-view)))) nil t))

(defun NS::|allowsAppearanceTextEffects| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsAppearanceTextEffects) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAllowsAppearanceTextEffects:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsAppearanceTextEffects:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setStyleEffectConfiguration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStyleEffectConfiguration:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setTitleTextContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleTextContainer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setFieldEditorTextContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFieldEditorTextContainer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityResultsForSearchPredicate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityResultsForSearchPredicate:) ((:POINTER)
                                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityHeaderForColumnIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHeaderForColumnIndex:) ((:LONG-LONG)
                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityHeaderForRowIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHeaderForRowIndex:) ((:LONG-LONG)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityAuditIssues| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditIssues) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityAuditIssues:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAuditIssues:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityAutoInteractable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityAutoInteractable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityAutoInteractable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAutoInteractable:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityContainerType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContainerType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityContainerType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityContainerType:) ((:LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityUserInputLabels| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUserInputLabels) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityUserInputLabels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityUserInputLabels:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityCustomContent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCustomContent) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityCustomContent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCustomContent:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityAttributedUserInputLabels| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributedUserInputLabels) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityAttributedUserInputLabels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAttributedUserInputLabels:) ((:POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPath) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityPath:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityCustomChoosers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCustomChoosers) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityCustomChoosers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCustomChoosers:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityEmbeddedImageDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityEmbeddedImageDescription) (NIL
                                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityEmbeddedImageDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEmbeddedImageDescription:) ((:POINTER)
                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityEnhancedUserInterface| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEnhancedUserInterface) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityEnhancedUserInterface:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEnhancedUserInterface:) ((:CHAR)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilityFunctionRowTopLevelElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFunctionRowTopLevelElements) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityFunctionRowTopLevelElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFunctionRowTopLevelElements:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isAccessibilityMimicNativeView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMimicNativeView) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityMimicNativeView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMimicNativeView:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilitySections| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySections) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilitySections:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySections:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityHeaderGroup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHeaderGroup) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityHeaderGroup:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHeaderGroup:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityFrameInParentSpace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFrameInParentSpace) (NIL
                                                                  (:STRUCT
                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityFrameInParentSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFrameInParentSpace:) (((:STRUCT
                                                                        NS::|CGRect|))
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityPreviousContentSibling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPreviousContentSibling) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setPreviousContentSibling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreviousContentSibling:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityNextContentSibling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityNextContentSibling) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setNextContentSibling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNextContentSibling:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityContentSiblingAbove| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContentSiblingAbove) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityContentSiblingAbove:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityContentSiblingAbove:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityContentSiblingBelow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContentSiblingBelow) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityContentSiblingBelow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityContentSiblingBelow:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityChartDescriptor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChartDescriptor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAccessibilityChartDescriptor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityChartDescriptor:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityOverridesAlwaysTakePrecedence| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityOverridesAlwaysTakePrecedence) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAccessibilityOverridesAlwaysTakePrecedence:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityOverridesAlwaysTakePrecedence:) ((:CHAR)
                                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun NS::|accessibilityCurrentEditor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCurrentEditor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))









(defun NS::|accessibilitySelectedTextAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextAttribute) (NIL
                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsSelectedTextAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSelectedTextAttributeSettable) (NIL
                                                                               :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySetSelectedTextAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetSelectedTextAttribute:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySelectedTextRangeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextRangeAttribute) (NIL
                                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsSelectedTextRangeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSelectedTextRangeAttributeSettable) (NIL
                                                                                    :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySetSelectedTextRangeAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetSelectedTextRangeAttribute:) ((:POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityNumberOfCharactersAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityNumberOfCharactersAttribute) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsNumberOfCharactersAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsNumberOfCharactersAttributeSettable) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityVisibleCharacterRangeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleCharacterRangeAttribute) (NIL
                                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsVisibleCharacterRangeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsVisibleCharacterRangeAttributeSettable) (NIL
                                                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySetVisibleCharacterRangeAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetVisibleCharacterRangeAttribute:) ((:POINTER)
                                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityInsertionPointLineNumberAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityInsertionPointLineNumberAttribute) (NIL
                                                                                 :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsInsertionPointLineNumberAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsInsertionPointLineNumberAttributeSettable) (NIL
                                                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityLineForIndexAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLineForIndexAttributeForParameter:) ((:POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityRangeForLineAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForLineAttributeForParameter:) ((:POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityStringForRangeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityStringForRangeAttributeForParameter:) ((:POINTER)
                                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityRangeForPositionAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForPositionAttributeForParameter:) ((:POINTER)
                                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityRangeForIndexAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForIndexAttributeForParameter:) ((:POINTER)
                                                                                   :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityBoundsForRangeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityBoundsForRangeAttributeForParameter:) ((:POINTER)
                                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityRTFForRangeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRTFForRangeAttributeForParameter:) ((:POINTER)
                                                                                 :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityAttributedStringForRangeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributedStringForRangeAttributeForParameter:) ((:POINTER)
                                                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityStyleRangeForIndexAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityStyleRangeForIndexAttributeForParameter:) ((:POINTER)
                                                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|isEntryAcceptable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEntryAcceptable:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|setMnemonicLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMnemonicLocation:) ((:UNSIGNED-LONG-LONG)
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|mnemonicLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mnemonicLocation) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|controlTint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(controlTint) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|entryType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(entryType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setEntryType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEntryType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


























(defun NS::|arrangedSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(arrangedSubviews) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


















(defun NS::|orientation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orientation) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun NS::|isVertical| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isVertical) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))










(defun NS::|isSpringLoaded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSpringLoaded) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setSpringLoaded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSpringLoaded:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))



(defun NS::|addArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addArrangedSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|toggleSidebar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleSidebar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun NS::|setAutosaveName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutosaveName:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|autosaveName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autosaveName) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setVertical:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVertical:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setPosition:ofDividerAtIndex:| (thing _ of-divider-at-index)
  (let ((message-lambda 
         (make-message-lambda @(setPosition:ofDividerAtIndex:) ((:DOUBLE
                                                                 :LONG-LONG)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ of-divider-at-index)))

(defun NS::|setArrangesAllSubviews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setArrangesAllSubviews:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setDividerStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDividerStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|removeArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeArrangedSubview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertArrangedSubview:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertArrangedSubview:atIndex:) ((:POINTER
                                                                  :LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun NS::|dividerThickness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dividerThickness) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|validateToolbarItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateToolbarItem:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|instantiateWithObjectInstantiator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(instantiateWithObjectInstantiator:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|dividerStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dividerStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isPaneSplitter| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isPaneSplitter) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|dividerColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dividerColor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isArrangedViewCollapsed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isArrangedViewCollapsed:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|minPossiblePositionOfDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(minPossiblePositionOfDividerAtIndex:) ((:LONG-LONG)
                                                                       :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|maxPossiblePositionOfDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(maxPossiblePositionOfDividerAtIndex:) ((:LONG-LONG)
                                                                       :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|arrangesAllSubviews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(arrangesAllSubviews) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|drawDividerInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawDividerInRect:) (((:STRUCT NS::|CGRect|))
                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|holdingPriorityForSubviewAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(holdingPriorityForSubviewAtIndex:) ((:LONG-LONG)
                                                                    :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|adjustSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(adjustSubviews) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setHoldingPriority:forSubviewAtIndex:| (thing _ for-subview-at-index)
  (let ((message-lambda 
         (make-message-lambda @(setHoldingPriority:forSubviewAtIndex:) ((:FLOAT
                                                                         :LONG-LONG)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-subview-at-index)))


(defun NS::|setIsPaneSplitter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsPaneSplitter:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setDividerColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDividerColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isSubviewCollapsed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSubviewCollapsed:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|positionOfDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(positionOfDividerAtIndex:) ((:LONG-LONG)
                                                            :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|cursorRectForDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cursorRectForDividerAtIndex:) ((:LONG-LONG)
                                                               (:STRUCT
                                                                NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|stayPutPriorityForSubviewAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stayPutPriorityForSubviewAtIndex:) ((:LONG-LONG)
                                                                    :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setStayPutPriority:forSubviewAtIndex:| (thing _ for-subview-at-index)
  (let ((message-lambda 
         (make-message-lambda @(setStayPutPriority:forSubviewAtIndex:) ((:FLOAT
                                                                         :LONG-LONG)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-subview-at-index)))

(defun NS::|accessibilityResetChildrenAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityResetChildrenAttribute) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|debugReasonForLayoutMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(debugReasonForLayoutMode) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilitySplittersAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySplittersAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsSplittersAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSplittersAttributeSettable) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))






(defun NS::|setEdgeInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEdgeInsets:) (((:STRUCT NS::|NSEdgeInsets|))
                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOrientation:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setDetachesHiddenViews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDetachesHiddenViews:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))





(defun NS::|spacing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(spacing) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setSpacing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSpacing:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|removeView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|setDistribution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDistribution:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|insertView:atIndex:inGravity:| (thing _ at-index in-gravity)
  (let ((message-lambda 
         (make-message-lambda @(insertView:atIndex:inGravity:) ((:POINTER
                                                                 :UNSIGNED-LONG-LONG
                                                                 :LONG-LONG)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index in-gravity)))

(defun NS::|edgeInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(edgeInsets) (NIL (:STRUCT NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|views| (thing)
  (let ((message-lambda 
         (make-message-lambda @(views) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setCustomSpacing:afterView:| (thing _ after-view)
  (let ((message-lambda 
         (make-message-lambda @(setCustomSpacing:afterView:) ((:DOUBLE
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id after-view))))









(defun NS::|setHuggingPriority:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setHuggingPriority:forOrientation:) ((:FLOAT
                                                                      :LONG-LONG)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-orientation)))



(defun NS::|addView:inGravity:| (thing _ in-gravity)
  (let ((message-lambda 
         (make-message-lambda @(addView:inGravity:) ((:POINTER :LONG-LONG)
                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-gravity)))

(defun NS::|setViews:inGravity:| (thing _ in-gravity)
  (let ((message-lambda 
         (make-message-lambda @(setViews:inGravity:) ((:POINTER :LONG-LONG)
                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-gravity)))


(defun NS::|setVisibilityPriority:forView:| (thing _ for-view)
  (let ((message-lambda 
         (make-message-lambda @(setVisibilityPriority:forView:) ((:FLOAT
                                                                  :POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-view))))

(defun NS::|setClippingResistancePriority:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setClippingResistancePriority:forOrientation:) ((:FLOAT
                                                                                 :LONG-LONG)
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-orientation)))

(defun NS::|viewsInGravity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewsInGravity:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|detachesHiddenViews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(detachesHiddenViews) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|enumerateViewsIncludingDetached:usingBlock:| (thing _ using-block)
  (let ((message-lambda 
         (make-message-lambda @(enumerateViewsIncludingDetached:usingBlock:) ((:CHAR
                                                                               :POINTER)
                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) (objc-object-id using-block))))

(defun NS::|secondaryAlignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(secondaryAlignment) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setSecondaryAlignment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSecondaryAlignment:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setSecondaryAlignmentPriority:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSecondaryAlignmentPriority:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|alignmentPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alignmentPriority) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAlignmentPriority:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAlignmentPriority:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|distribution| (thing)
  (let ((message-lambda 
         (make-message-lambda @(distribution) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|customSpacingAfterView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(customSpacingAfterView:) ((:POINTER) :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|detachedViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(detachedViews) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|leadingOrTopViewsManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(leadingOrTopViewsManager) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|centerViewsManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(centerViewsManager) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|trailingOrBottomViewsManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trailingOrBottomViewsManager) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isViewDetached:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isViewDetached:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|attachedViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attachedViews) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|huggingPriorityForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(huggingPriorityForOrientation:) ((:LONG-LONG)
                                                                 :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|secondaryAlignmentPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(secondaryAlignmentPriority) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isBaselineRelativeArrangement| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isBaselineRelativeArrangement) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|clippingResistancePriorityForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(clippingResistancePriorityForOrientation:) ((:LONG-LONG)
                                                                            :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|visibilityPriorityForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(visibilityPriorityForView:) ((:POINTER) :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|perpendicularAlignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(perpendicularAlignment) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setPerpendicularAlignment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPerpendicularAlignment:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|transverseAlignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(transverseAlignment) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setTransverseAlignment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTransverseAlignment:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|transverseAlignmentPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(transverseAlignmentPriority) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setTransverseAlignmentPriority:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTransverseAlignmentPriority:) ((:FLOAT)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|hasEqualSpacing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasEqualSpacing) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setHasEqualSpacing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasEqualSpacing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|effectiveSpacingAfterView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(effectiveSpacingAfterView:) ((:POINTER) :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|beginningViewsContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginningViewsContainer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|middleViewsContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(middleViewsContainer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|endViewsContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endViewsContainer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|currentContainers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentContainers) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|currentSpacers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentSpacers) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|topSpacer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topSpacer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|bottomSpacer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bottomSpacer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|leftSpacer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(leftSpacer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|rightSpacer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rightSpacer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setArrangedSubviews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setArrangedSubviews:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setBaselineRelativeArrangement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBaselineRelativeArrangement:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))








(defun NS::|minimumSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minimumSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))




































(defun NS::|accessibilityContentsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContentsAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsContentsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsContentsAttributeSettable) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|moveRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveRight:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveLeft:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))








(defun NS::|springLoadingEntered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingEntered:) ((:POINTER)
                                                        :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|springLoadingHighlightChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingHighlightChanged:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|springLoadingActivated:draggingInfo:| (thing _ dragging-info)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingActivated:draggingInfo:) ((:CHAR
                                                                        :POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) (objc-object-id dragging-info))))





(defun NS::|moveDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveUp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun NS::|springLoadingUpdated:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingUpdated:) ((:POINTER)
                                                        :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|springLoadingExited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingExited:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|contentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|mouseTracker:shouldStartTrackingWithEvent:| (thing _ should-start-tracking-with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouseTracker:shouldStartTrackingWithEvent:) ((:POINTER
                                                                              :POINTER)
                                                                             :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-start-tracking-with-event)))) nil t))

(defun NS::|mouseTracker:shouldContinueTrackingWithEvent:| (thing _ should-continue-tracking-with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouseTracker:shouldContinueTrackingWithEvent:) ((:POINTER
                                                                                 :POINTER)
                                                                                :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-continue-tracking-with-event)))) nil t))

(defun NS::|mouseTracker:didStopTrackingWithEvent:| (thing _ did-stop-tracking-with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouseTracker:didStopTrackingWithEvent:) ((:POINTER
                                                                          :POINTER)
                                                                         :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id did-stop-tracking-with-event)))) nil t))

(defun NS::|removeTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|tabViewItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabViewItems) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setTabViewMinimumSizeConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabViewMinimumSizeConstraint:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectedTabViewItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedTabViewItem) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|addTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|tabViewType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabViewType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|selectTabViewItemAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectTabViewItemAtIndex:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|indexOfTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfTabViewItem:) ((:POINTER) :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|numberOfTabViewItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(numberOfTabViewItems) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|tabViewItemAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(tabViewItemAtIndex:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|indexOfTabViewItemWithIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfTabViewItemWithIdentifier:) ((:POINTER)
                                                                    :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|tabViewMinimumSizeConstraint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabViewMinimumSizeConstraint) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|tabViewItemAtPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(tabViewItemAtPoint:) (((:STRUCT NS::|CGPoint|))
                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|allowsTruncatedLabels| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsTruncatedLabels) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setTabViewItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabViewItems:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|tabPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabPosition) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|tabViewBorderType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabViewBorderType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAllowsTruncatedLabels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsTruncatedLabels:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setTabViewType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabViewType:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setTabPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabPosition:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setTabViewBorderType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabViewBorderType:) ((:UNSIGNED-LONG-LONG)
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|insertTabViewItem:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertTabViewItem:atIndex:) ((:POINTER
                                                              :LONG-LONG)
                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun NS::|takeSelectedTabViewItemFromSender:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeSelectedTabViewItemFromSender:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectTabViewItemWithIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectTabViewItemWithIdentifier:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectFirstTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectFirstTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectLastTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectLastTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectNextTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectNextTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectPreviousTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectPreviousTabViewItem:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityTabsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTabsAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsTabsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTabsAttributeSettable) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

















(defun NS::|setBorderType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBorderType:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setHasVerticalScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasVerticalScroller:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setVerticalScrollElasticity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalScrollElasticity:) ((:LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setHasHorizontalScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasHorizontalScroller:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|horizontalScroller| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalScroller) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setHorizontalScrollElasticity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalScrollElasticity:) ((:LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAutomaticallyAdjustsContentInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticallyAdjustsContentInsets:) ((:CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setContentInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentInsets:) (((:STRUCT
                                                      NS::|NSEdgeInsets|))
                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setHasHorizontalMoreContentIndicators:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasHorizontalMoreContentIndicators:) ((:CHAR)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setDocumentView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDocumentView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun NS::|hasHorizontalMoreContentIndicators| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasHorizontalMoreContentIndicators) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun NS::|contentView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|documentView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(documentView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|gestureRecognizer:shouldReceiveTouch:| (thing _ should-receive-touch)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(gestureRecognizer:shouldReceiveTouch:) ((:POINTER
                                                                         :POINTER)
                                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-receive-touch)))) nil t))





(defun NS::|setContentView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))













(defun NS::|setHasTopShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasTopShadow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setHasBottomShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasBottomShadow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun NS::|reflectScrolledClipView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(reflectScrolledClipView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|verticalScroller| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalScroller) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun NS::|borderType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(borderType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun NS::|hasHorizontalScroller| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasHorizontalScroller) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|tile| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tile) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAutohidesScrollers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutohidesScrollers:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|autohidesScrollers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autohidesScrollers) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|documentVisibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(documentVisibleRect) (NIL
                                                      (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAutoforwardsScrollWheelEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoforwardsScrollWheelEvents:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|contentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setHorizontalLineScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalLineScroll:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setScrollerInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollerInsets:) (((:STRUCT
                                                       NS::|NSEdgeInsets|))
                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|scrollerStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentInsets) (NIL
                                                (:STRUCT NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|horizontalLineScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalLineScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|automaticallyAdjustsContentInsets| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(automaticallyAdjustsContentInsets) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))




(defun NS::|setScrollerStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollerStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|scrollerImpPair| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImpPair) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setLineScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineScroll:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|hasVerticalScroller| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasVerticalScroller) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityHorizontalScrollBarAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalScrollBarAttribute) (NIL
                                                                            :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsHorizontalScrollBarAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsHorizontalScrollBarAttributeSettable) (NIL
                                                                                      :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|scrollClipView:toPoint:| (thing _ to-point)
  (let ((message-lambda 
         (make-message-lambda @(scrollClipView:toPoint:) ((:POINTER
                                                           (:STRUCT
                                                            NS::|CGPoint|))
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) to-point)))


(defun NS::|verticalLineScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalLineScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|flashScrollers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flashScrollers) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setDocumentCursor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDocumentCursor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|drawsContentShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsContentShadow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setDrawsContentShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawsContentShadow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|contentInset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentInset) (NIL (:STRUCT NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setContentInset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentInset:) (((:STRUCT
                                                     NS::|NSEdgeInsets|))
                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|documentCursor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(documentCursor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun NS::|setVerticalScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalScroller:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pageDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pageDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pageUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pageUp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|magnifyWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(magnifyWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setMagnification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMagnification:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|decelerationRate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(decelerationRate) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|findBarView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(findBarView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setHorizontalScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalScroller:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityScrollToShowDescendantAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityScrollToShowDescendantAttributeForParameter:) ((:POINTER)
                                                                                            :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun NS::|smartMagnifyWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(smartMagnifyWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|beginGestureWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(beginGestureWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|endGestureWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endGestureWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|rulersVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulersVisible) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setRulersVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRulersVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|horizontalRulerView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalRulerView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|verticalRulerView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalRulerView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityVerticalScrollBarAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalScrollBarAttribute) (NIL
                                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|hasHorizontalRuler| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasHorizontalRuler) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|hasVerticalRuler| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasVerticalRuler) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|horizontalPageScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalPageScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|verticalPageScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalPageScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsVerticalScrollBarAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsVerticalScrollBarAttributeSettable) (NIL
                                                                                    :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|usesPredominantAxisScrolling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesPredominantAxisScrolling) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|addFloatingSubview:forAxis:| (thing _ for-axis)
  (let ((message-lambda 
         (make-message-lambda @(addFloatingSubview:forAxis:) ((:POINTER
                                                               :LONG-LONG)
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) for-axis)))

(defun NS::|setHasHorizontalRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasHorizontalRuler:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setHasVerticalRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasVerticalRuler:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setDecelerationRate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDecelerationRate:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|horizontalScrollDecelerationFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalScrollDecelerationFactor) (NIL
                                                                     :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setHorizontalScrollDecelerationFactor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalScrollDecelerationFactor:) ((:DOUBLE)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|verticalScrollDecelerationFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalScrollDecelerationFactor) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setVerticalScrollDecelerationFactor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalScrollDecelerationFactor:) ((:DOUBLE)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|findBarPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(findBarPosition) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isFindBarVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFindBarVisible) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|scrollerInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerInsets) (NIL
                                                 (:STRUCT NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|scrollerKnobStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerKnobStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setScrollerKnobStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollerKnobStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setVerticalLineScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalLineScroll:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setHorizontalPageScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalPageScroll:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setVerticalPageScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalPageScroll:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|verticalScrollElasticity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalScrollElasticity) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|horizontalScrollElasticity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalScrollElasticity) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|allowsMagnification| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsMagnification) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|maxMagnification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maxMagnification) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|minMagnification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minMagnification) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|separatorOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(separatorOffset) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentAreaRectForScrollerImpPair:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentAreaRectForScrollerImpPair:) ((:POINTER)
                                                                     (:STRUCT
                                                                      NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|inLiveResizeForScrollerImpPair:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(inLiveResizeForScrollerImpPair:) ((:POINTER)
                                                                  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|mouseLocationInContentAreaForScrollerImpPair:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseLocationInContentAreaForScrollerImpPair:) ((:POINTER)
                                                                                (:STRUCT
                                                                                 NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|scrollerImpPair:convertContentPoint:toScrollerImp:| (thing _ convert-content-point to-scroller-imp)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImpPair:convertContentPoint:toScrollerImp:) ((:POINTER
                                                                                      (:STRUCT
                                                                                       NS::|CGPoint|)
                                                                                      :POINTER)
                                                                                     (:STRUCT
                                                                                      NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) convert-content-point (objc-object-id to-scroller-imp))))

(defun NS::|scrollerImpPair:updateScrollerStyleForNewRecommendedScrollerStyle:| (thing _ update-scroller-style-for-new-recommended-scroller-style)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImpPair:updateScrollerStyleForNewRecommendedScrollerStyle:) ((:POINTER
                                                                                                      :LONG-LONG)
                                                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) update-scroller-style-for-new-recommended-scroller-style)))

(defun NS::|scrollerImpPair:isContentPointVisible:| (thing _ is-content-point-visible)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scrollerImpPair:isContentPointVisible:) ((:POINTER
                                                                          (:STRUCT
                                                                           NS::|CGPoint|))
                                                                         :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) is-content-point-visible))) nil t))

(defun NS::|findBarViewDidChangeHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(findBarViewDidChangeHeight) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFindBarView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFindBarView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setFindBarVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFindBarVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|computedScrollViewFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computedScrollViewFrame) (NIL
                                                          (:STRUCT
                                                           NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|computedHasScrolledContentsUnderTitlebar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computedHasScrolledContentsUnderTitlebar) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|computed_distancesScrolledFromDocumentEdges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computed_distancesScrolledFromDocumentEdges) (NIL
                                                                              (:STRUCT
                                                                               NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setScrollsDynamically:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollsDynamically:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|scrollsDynamically| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scrollsDynamically) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|hasTopShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasTopShadow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setTopShadowTopInset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTopShadowTopInset:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|topShadowTopInset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topShadowTopInset) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setTopShadowMinimumRequiredContentYOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTopShadowMinimumRequiredContentYOffset:) ((:DOUBLE)
                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|topShadowMinimumRequiredContentYOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topShadowMinimumRequiredContentYOffset) (NIL
                                                                         :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|hasBottomShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasBottomShadow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|lineScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setPageScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPageScroll:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|pageScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pageScroll) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setUsesPredominantAxisScrolling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesPredominantAxisScrolling:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setFindBarPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFindBarPosition:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAllowsMagnification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsMagnification:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setMaxMagnification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaxMagnification:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setMinMagnification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinMagnification:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|magnifyToFitRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(magnifyToFitRect:) (((:STRUCT NS::|CGRect|))
                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setMagnification:centeredAtPoint:| (thing _ centered-at-point)
  (let ((message-lambda 
         (make-message-lambda @(setMagnification:centeredAtPoint:) ((:DOUBLE
                                                                     (:STRUCT
                                                                      NS::|CGPoint|))
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ centered-at-point)))

(defun NS::|addFloatingHeaderView:forAxis:| (thing _ for-axis)
  (let ((message-lambda 
         (make-message-lambda @(addFloatingHeaderView:forAxis:) ((:POINTER
                                                                  :LONG-LONG)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) for-axis)))

(defun NS::|removeFloatingHeaderView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeFloatingHeaderView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|autoforwardsScrollWheelEvents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoforwardsScrollWheelEvents) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|automaticallyAdjustsContentViewInsets| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(automaticallyAdjustsContentViewInsets) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAutomaticallyAdjustsContentViewInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticallyAdjustsContentViewInsets:) ((:CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|computed_contentExtendsPastContentInsets| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computed_contentExtendsPastContentInsets) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setHorizontalRulerView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalRulerView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setVerticalRulerView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalRulerView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|rulerStateDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rulerStateDescription) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))











































(defun NS::|accessibilityOrientationAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityOrientationAttribute) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsOrientationAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsOrientationAttributeSettable) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|setArrowsPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setArrowsPosition:) ((:UNSIGNED-LONG-LONG)
                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|checkSpaceForParts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(checkSpaceForParts) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun NS::|overlayScrollerKnobAlpha| (thing)
  (let ((message-lambda 
         (make-message-lambda @(overlayScrollerKnobAlpha) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|rectForPart:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rectForPart:) ((:UNSIGNED-LONG-LONG)
                                               (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|highlight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(highlight:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))



(defun NS::|testPart:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(testPart:) (((:STRUCT NS::|CGPoint|))
                                            :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setFloatValue:knobProportion:| (thing _ knob-proportion)
  (let ((message-lambda 
         (make-message-lambda @(setFloatValue:knobProportion:) ((:FLOAT
                                                                 :DOUBLE)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ knob-proportion)))

(defun NS::|setKnobStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKnobStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|usableParts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(usableParts) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|drawArrow:highlight:| (thing _ highlight)
  (let ((message-lambda 
         (make-message-lambda @(drawArrow:highlight:) ((:UNSIGNED-LONG-LONG
                                                        :CHAR)
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if highlight 1 0))))

(defun NS::|drawKnobSlotInRect:highlight:| (thing _ highlight)
  (let ((message-lambda 
         (make-message-lambda @(drawKnobSlotInRect:highlight:) (((:STRUCT
                                                                  NS::|CGRect|)
                                                                 :CHAR)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if highlight 1 0))))

(defun NS::|drawArrow:highlightPart:| (thing _ highlight-part)
  (let ((message-lambda 
         (make-message-lambda @(drawArrow:highlightPart:) ((:UNSIGNED-LONG-LONG
                                                            :UNSIGNED-LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ highlight-part)))

(defun NS::|drawKnob| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawKnob) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|overlayScrollerTrackAlpha| (thing)
  (let ((message-lambda 
         (make-message-lambda @(overlayScrollerTrackAlpha) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|trackKnob:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(trackKnob:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|trackPagingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(trackPagingArea:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|trackScrollButtons:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(trackScrollButtons:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setKnobProportion:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKnobProportion:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|knobProportion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(knobProportion) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setUiStateTransitionProgress:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUiStateTransitionProgress:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setExpansionTransitionProgress:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setExpansionTransitionProgress:) ((:DOUBLE)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setOverlayScrollerKnobAlpha:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOverlayScrollerKnobAlpha:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setOverlayScrollerTrackAlpha:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOverlayScrollerTrackAlpha:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setPresentationValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPresentationValue:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setUsePresentationValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsePresentationValue:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|scrollerImp:animateKnobAlphaTo:duration:| (thing _ animate-knob-alpha-to duration)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:animateKnobAlphaTo:duration:) ((:POINTER
                                                                            :DOUBLE
                                                                            :DOUBLE)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) animate-knob-alpha-to duration)))

(defun NS::|scrollerImp:animateTrackAlphaTo:duration:| (thing _ animate-track-alpha-to duration)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:animateTrackAlphaTo:duration:) ((:POINTER
                                                                             :DOUBLE
                                                                             :DOUBLE)
                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) animate-track-alpha-to duration)))

(defun NS::|scrollerImp:overlayScrollerStateChangedTo:| (thing _ overlay-scroller-state-changed-to)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:overlayScrollerStateChangedTo:) ((:POINTER
                                                                              :UNSIGNED-LONG-LONG)
                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) overlay-scroller-state-changed-to)))

(defun NS::|scrollerImp:animateUIStateTransitionWithDuration:| (thing _ animate-u-i-state-transition-with-duration)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:animateUIStateTransitionWithDuration:) ((:POINTER
                                                                                     :DOUBLE)
                                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) animate-u-i-state-transition-with-duration)))

(defun NS::|scrollerImp:animateExpansionTransitionWithDuration:| (thing _ animate-expansion-transition-with-duration)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:animateExpansionTransitionWithDuration:) ((:POINTER
                                                                                       :DOUBLE)
                                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) animate-expansion-transition-with-duration)))

(defun NS::|mouseLocationInScrollerForScrollerImp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseLocationInScrollerForScrollerImp:) ((:POINTER)
                                                                         (:STRUCT
                                                                          NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|shouldUseLayerPerPartForScrollerImp:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldUseLayerPerPartForScrollerImp:) ((:POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|knobStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(knobStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|drawParts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawParts) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|arrowsPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(arrowsPosition) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|hitPart| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hitPart) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|layer:shouldInheritContentsScale:fromWindow:| (thing _ should-inherit-contents-scale from-window)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(layer:shouldInheritContentsScale:fromWindow:) ((:POINTER
                                                                                :DOUBLE
                                                                                :POINTER)
                                                                               :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) should-inherit-contents-scale (objc-object-id from-window)))) nil t))

(defun NS::|scrollerImp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))






(defun NS::|screen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(screen) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))




















(defun NS::|setContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentSize:) (((:STRUCT NS::|CGSize|))
                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|scrollToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollToPoint:) (((:STRUCT NS::|CGPoint|))
                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))




(defun NS::|setCopiesOnScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCopiesOnScroll:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))




(defun NS::|documentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(documentRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))







(defun NS::|viewFrameChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewFrameChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|viewBoundsChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewBoundsChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|automaticallyCalculatesContentSize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(automaticallyCalculatesContentSize) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|constrainBoundsRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constrainBoundsRect:) (((:STRUCT NS::|CGRect|))
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|constrainScrollPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constrainScrollPoint:) (((:STRUCT
                                                          NS::|CGPoint|))
                                                        (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))







(defun NS::|scrollVelocity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollVelocity) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setScrollVelocity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollVelocity:) (((:STRUCT NS::|CGPoint|))
                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))



(defun NS::|setAutomaticallyCalculatesContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticallyCalculatesContentSize:) ((:CHAR)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))





(defun NS::|copiesOnScroll| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(copiesOnScroll) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))








(defun NS::|setAccessoryView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessoryView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))







(defun NS::|scrollView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))













(defun NS::|accessoryView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessoryView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))







(defun NS::|accessibilityMinValueAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinValueAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityMaxValueAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMaxValueAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun NS::|clientView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clientView) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|baselineLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(baselineLocation) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|measurementUnits| (thing)
  (let ((message-lambda 
         (make-message-lambda @(measurementUnits) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|displaysTooltips| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(displaysTooltips) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|addMarker:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addMarker:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|removeMarker:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeMarker:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|initWithScrollView:orientation:| (thing _ orientation)
  (let ((message-lambda 
         (make-message-lambda @(initWithScrollView:orientation:) ((:POINTER
                                                                   :UNSIGNED-LONG-LONG)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) orientation)))

(defun NS::|invalidateHashMarks| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateHashMarks) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setMarkers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMarkers:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setReservedThicknessForMarkers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setReservedThicknessForMarkers:) ((:DOUBLE)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setReservedThicknessForAccessoryView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setReservedThicknessForAccessoryView:) ((:DOUBLE)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|labelStringForValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(labelStringForValue:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setLabelString:forValue:| (thing _ for-value)
  (let ((message-lambda 
         (make-message-lambda @(setLabelString:forValue:) ((:POINTER :POINTER)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-value))))

(defun NS::|drawSeparatorInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawSeparatorInRect:) (((:STRUCT NS::|CGRect|))
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|drawHashMarksAndLabelsInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawHashMarksAndLabelsInRect:) (((:STRUCT
                                                                  NS::|CGRect|))
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|drawRulerLines| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawRulerLines) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|drawMarkersInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawMarkersInRect:) (((:STRUCT NS::|CGRect|))
                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setScrollView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|requiredThickness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(requiredThickness) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setRuleThickness:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRuleThickness:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|ruleThickness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ruleThickness) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|reservedThicknessForMarkers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(reservedThicknessForMarkers) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|reservedThicknessForAccessoryView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(reservedThicknessForAccessoryView) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setMeasurementUnits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMeasurementUnits:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setOriginOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOriginOffset:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|originOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(originOffset) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setClientView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setClientView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|markers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markers) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|trackMarker:withMouseEvent:| (thing _ with-mouse-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(trackMarker:withMouseEvent:) ((:POINTER
                                                               :POINTER)
                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-mouse-event)))) nil t))

(defun NS::|moveRulerlineFromLocation:toLocation:| (thing _ to-location)
  (let ((message-lambda 
         (make-message-lambda @(moveRulerlineFromLocation:toLocation:) ((:DOUBLE
                                                                         :DOUBLE)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ to-location)))

(defun NS::|setDisplaysTooltips:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDisplaysTooltips:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun NS::|accessibilityUnitsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUnitsAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsUnitsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsUnitsAttributeSettable) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityUnitDescriptionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUnitDescriptionAttribute) (NIL
                                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsUnitDescriptionAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsUnitDescriptionAttributeSettable) (NIL
                                                                                  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityMarkerUIElementsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerUIElementsAttribute) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsMarkerUIElementsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMarkerUIElementsAttributeSettable) (NIL
                                                                                   :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))









(defun NS::|isRemovable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRemovable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setMovable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMovable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isMovable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMovable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun NS::|initWithRulerView:markerLocation:image:imageOrigin:| (thing _ marker-location image image-origin)
  (let ((message-lambda 
         (make-message-lambda @(initWithRulerView:markerLocation:image:imageOrigin:) ((:POINTER
                                                                                       :DOUBLE
                                                                                       :POINTER
                                                                                       (:STRUCT
                                                                                        NS::|CGPoint|))
                                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) marker-location (objc-object-id image) image-origin)))

(defun NS::|isDragging| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDragging) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|imageRectInRuler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(imageRectInRuler) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|ruler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ruler) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setMarkerLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMarkerLocation:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|markerLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markerLocation) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setImageOrigin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setImageOrigin:) (((:STRUCT NS::|CGPoint|))
                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|imageOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(imageOrigin) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setRemovable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRemovable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|thicknessRequiredInRuler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(thicknessRequiredInRuler) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|trackMouse:adding:| (thing _ adding)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(trackMouse:adding:) ((:POINTER :CHAR) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if adding 1 0)))) nil t))




(defun NS::|string| (thing)
  (let ((message-lambda 
         (make-message-lambda @(string) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|replaceCharactersInRange:withString:| (thing _ with-string)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withString:) (((:STRUCT
                                                                         NS::|_NSRange|)
                                                                        :POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-string))))




(defun NS::|setString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setString:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|attributedSubstringFromRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(attributedSubstringFromRange:) (((:STRUCT
                                                                  NS::|_NSRange|))
                                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))



(defun NS::|defaultParagraphStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(defaultParagraphStyle) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))







(defun NS::|contentType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentType) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setContentType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentType:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))






(defun NS::|minSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|maxSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maxSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))










(defun NS::|accessibilityFocusRingBoundsForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusRingBoundsForBounds:) (((:STRUCT
                                                                           NS::|CGRect|))
                                                                         (:STRUCT
                                                                          NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))





(defun NS::|insertText:replacementRange:| (thing _ replacement-range)
  (let ((message-lambda 
         (make-message-lambda @(insertText:replacementRange:) ((:POINTER
                                                                (:STRUCT
                                                                 NS::|_NSRange|))
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) replacement-range)))

















(defun NS::|mouseMoved:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseMoved:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|setTouchBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTouchBar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|startSpeaking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(startSpeaking:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun NS::|textColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textColor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))















(defun NS::|copy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copy:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|layoutManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutManager) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))








(defun NS::|setTextColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))









(defun NS::|selectAll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectAll:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|allowsMultipleSelection| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsMultipleSelection) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun NS::|draggingSourceOperationMaskForLocal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingSourceOperationMaskForLocal:) ((:CHAR)
                                                                       :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|draggedImage:endedAt:operation:| (thing _ ended-at operation)
  (let ((message-lambda 
         (make-message-lambda @(draggedImage:endedAt:operation:) ((:POINTER
                                                                   (:STRUCT
                                                                    NS::|CGPoint|)
                                                                   :UNSIGNED-LONG-LONG)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) ended-at operation)))










(defun NS::|becomeMainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(becomeMainWindow) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|cut:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cut:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|paste:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(paste:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|undoManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(undoManager) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|hasMarkedText| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasMarkedText) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|textStorage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textStorage) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|shouldChangeTextInRange:replacementString:| (thing _ replacement-string)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldChangeTextInRange:replacementString:) (((:STRUCT
                                                                               NS::|_NSRange|)
                                                                              :POINTER)
                                                                             :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id replacement-string)))) nil t))

(defun NS::|typingAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(typingAttributes) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|didChangeText| (thing)
  (let ((message-lambda 
         (make-message-lambda @(didChangeText) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setSelectedRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedRange:) (((:STRUCT NS::|_NSRange|))
                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|textLayoutManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textLayoutManager) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isFieldEditor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFieldEditor) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAllowsCharacterPickerTouchBarItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsCharacterPickerTouchBarItem:) ((:CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setAutomaticTextCompletionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticTextCompletionEnabled:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setTextContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextContainer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|textContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContainer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|selectedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedRange) (NIL (:STRUCT NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))






(defun NS::|setSelectedTextAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedTextAttributes:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setUsesFontPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesFontPanel:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setWantsNotificationForMarkedText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsNotificationForMarkedText:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setUsesRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesRuler:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setMinSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinSize:) (((:STRUCT NS::|CGSize|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setMaxSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaxSize:) (((:STRUCT NS::|CGSize|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setHorizontallyResizable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontallyResizable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setVerticallyResizable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticallyResizable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setRichText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRichText:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setTypingAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTypingAttributes:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))
























(defun NS::|drawBackgroundOverhangInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawBackgroundOverhangInRect:) (((:STRUCT
                                                                  NS::|CGRect|))
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))




(defun NS::|isCompatibleWithResponsiveScrolling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isCompatibleWithResponsiveScrolling) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|changeColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertNewline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertNewline:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|complete:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(complete:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|makeTouchBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(makeTouchBar) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun NS::|insertTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertTab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertBacktab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertBacktab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|setPlaceholderString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPlaceholderString:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|textCheckingController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textCheckingController) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|spellCheckerDocumentTag| (thing)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDocumentTag) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|textCheckingControllerUsesStringAnnotations| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(textCheckingControllerUsesStringAnnotations) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isAutomaticSpellingCorrectionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticSpellingCorrectionEnabled) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAutomaticSpellingCorrectionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticSpellingCorrectionEnabled:) ((:CHAR)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isContinuousSpellCheckingEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isContinuousSpellCheckingEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setContinuousSpellCheckingEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContinuousSpellCheckingEnabled:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isGrammarCheckingEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGrammarCheckingEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setGrammarCheckingEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGrammarCheckingEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isAutomaticQuoteSubstitutionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticQuoteSubstitutionEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAutomaticQuoteSubstitutionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticQuoteSubstitutionEnabled:) ((:CHAR)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isAutomaticDashSubstitutionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticDashSubstitutionEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAutomaticDashSubstitutionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticDashSubstitutionEnabled:) ((:CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|smartInsertDeleteEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(smartInsertDeleteEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setSmartInsertDeleteEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSmartInsertDeleteEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isAutomaticTextReplacementEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticTextReplacementEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAutomaticTextReplacementEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticTextReplacementEnabled:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isAutomaticDataDetectionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticDataDetectionEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAutomaticDataDetectionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticDataDetectionEnabled:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isAutomaticLinkDetectionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticLinkDetectionEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAutomaticLinkDetectionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticLinkDetectionEnabled:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isAutomaticTextCompletionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticTextCompletionEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setSpellingState:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setSpellingState:range:) ((:LONG-LONG
                                                           (:STRUCT
                                                            NS::|_NSRange|))
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ range)))

(defun NS::|selectedRanges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedRanges) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setSelectedRange:affinity:stillSelecting:| (thing _ affinity still-selecting)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedRange:affinity:stillSelecting:) (((:STRUCT
                                                                              NS::|_NSRange|)
                                                                             :UNSIGNED-LONG-LONG
                                                                             :CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ affinity (if still-selecting 1 0))))

(defun NS::|scrollRangeToVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollRangeToVisible:) (((:STRUCT
                                                          NS::|_NSRange|))
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|textContainerOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContainerOrigin) (NIL
                                                      (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|autocorrectionType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autocorrectionType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAutocorrectionType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutocorrectionType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|spellCheckingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckingType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setSpellCheckingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSpellCheckingType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|grammarCheckingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(grammarCheckingType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setGrammarCheckingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGrammarCheckingType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|smartQuotesType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(smartQuotesType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setSmartQuotesType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSmartQuotesType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|smartDashesType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(smartDashesType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setSmartDashesType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSmartDashesType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|smartInsertDeleteType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(smartInsertDeleteType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setSmartInsertDeleteType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSmartInsertDeleteType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|textReplacementType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textReplacementType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setTextReplacementType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextReplacementType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|dataDetectionType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dataDetectionType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setDataDetectionType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDataDetectionType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|linkDetectionType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(linkDetectionType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setLinkDetectionType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLinkDetectionType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|textCompletionType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textCompletionType) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setTextCompletionType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextCompletionType:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|annotatedSubstringForProposedRange:actualRange:| (thing _ actual-range)
  (let ((message-lambda 
         (make-message-lambda @(annotatedSubstringForProposedRange:actualRange:) (((:STRUCT
                                                                                    NS::|_NSRange|)
                                                                                   (:POINTER
                                                                                    (:STRUCT
                                                                                     NS::|_NSRange|)))
                                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id actual-range))))

(defun NS::|setAnnotations:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setAnnotations:range:) ((:POINTER
                                                         (:STRUCT
                                                          NS::|_NSRange|))
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun NS::|addAnnotations:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(addAnnotations:range:) ((:POINTER
                                                         (:STRUCT
                                                          NS::|_NSRange|))
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun NS::|removeAnnotation:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(removeAnnotation:range:) ((:POINTER
                                                           (:STRUCT
                                                            NS::|_NSRange|))
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun NS::|replaceCharactersInRange:withAnnotatedString:| (thing _ with-annotated-string)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withAnnotatedString:) (((:STRUCT
                                                                                  NS::|_NSRange|)
                                                                                 :POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-annotated-string))))

(defun NS::|selectAndShowRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectAndShowRange:) (((:STRUCT
                                                        NS::|_NSRange|))
                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|viewForRange:firstRect:actualRange:| (thing _ first-rect actual-range)
  (let ((message-lambda 
         (make-message-lambda @(viewForRange:firstRect:actualRange:) (((:STRUCT
                                                                        NS::|_NSRange|)
                                                                       (:POINTER
                                                                        (:STRUCT
                                                                         NS::|CGRect|))
                                                                       (:POINTER
                                                                        (:STRUCT
                                                                         NS::|_NSRange|)))
                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id first-rect) (objc-object-id actual-range))))

(defun NS::|setMarkedText:selectedRange:replacementRange:| (thing _ selected-range replacement-range)
  (let ((message-lambda 
         (make-message-lambda @(setMarkedText:selectedRange:replacementRange:) ((:POINTER
                                                                                 (:STRUCT
                                                                                  NS::|_NSRange|)
                                                                                 (:STRUCT
                                                                                  NS::|_NSRange|))
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) selected-range replacement-range)))

(defun NS::|unmarkText| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unmarkText) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|markedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markedRange) (NIL (:STRUCT NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|attributedSubstringForProposedRange:actualRange:| (thing _ actual-range)
  (let ((message-lambda 
         (make-message-lambda @(attributedSubstringForProposedRange:actualRange:) (((:STRUCT
                                                                                     NS::|_NSRange|)
                                                                                    (:POINTER
                                                                                     (:STRUCT
                                                                                      NS::|_NSRange|)))
                                                                                   :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id actual-range))))

(defun NS::|validAttributesForMarkedText| (thing)
  (let ((message-lambda 
         (make-message-lambda @(validAttributesForMarkedText) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|firstRectForCharacterRange:actualRange:| (thing _ actual-range)
  (let ((message-lambda 
         (make-message-lambda @(firstRectForCharacterRange:actualRange:) (((:STRUCT
                                                                            NS::|_NSRange|)
                                                                           (:POINTER
                                                                            (:STRUCT
                                                                             NS::|_NSRange|)))
                                                                          (:STRUCT
                                                                           NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id actual-range))))

(defun NS::|characterIndexForPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(characterIndexForPoint:) (((:STRUCT
                                                            NS::|CGPoint|))
                                                          :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|attributedString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributedString) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|fractionOfDistanceThroughGlyphForPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(fractionOfDistanceThroughGlyphForPoint:) (((:STRUCT
                                                                            NS::|CGPoint|))
                                                                          :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|baselineDeltaForCharacterAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(baselineDeltaForCharacterAtIndex:) ((:UNSIGNED-LONG-LONG)
                                                                    :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|windowLevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowLevel) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|drawsVerticallyForCharacterAtIndex:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsVerticallyForCharacterAtIndex:) ((:UNSIGNED-LONG-LONG)
                                                                      :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))



(defun NS::|rightMouseUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rightMouseUp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|sharingServicePicker:delegateForSharingService:| (thing _ delegate-for-sharing-service)
  (let ((message-lambda 
         (make-message-lambda @(sharingServicePicker:delegateForSharingService:) ((:POINTER
                                                                                   :POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id delegate-for-sharing-service))))

(defun NS::|flagsChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(flagsChanged:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|sharingService:sourceWindowForShareItems:sharingContentScope:| (thing _ source-window-for-share-items sharing-content-scope)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:sourceWindowForShareItems:sharingContentScope:) ((:POINTER
                                                                                                 :POINTER
                                                                                                 (:POINTER
                                                                                                  :LONG-LONG))
                                                                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id source-window-for-share-items) (objc-object-id sharing-content-scope))))

(defun NS::|sharingService:sourceFrameOnScreenForShareItem:| (thing _ source-frame-on-screen-for-share-item)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:sourceFrameOnScreenForShareItem:) ((:POINTER
                                                                                   :POINTER)
                                                                                  (:STRUCT
                                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id source-frame-on-screen-for-share-item))))

(defun NS::|sharingService:transitionImageForShareItem:contentRect:| (thing _ transition-image-for-share-item content-rect)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:transitionImageForShareItem:contentRect:) ((:POINTER
                                                                                           :POINTER
                                                                                           (:POINTER
                                                                                            (:STRUCT
                                                                                             NS::|CGRect|)))
                                                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id transition-image-for-share-item) (objc-object-id content-rect))))

(defun NS::|sharingService:didShareItems:| (thing _ did-share-items)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:didShareItems:) ((:POINTER
                                                                 :POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id did-share-items))))


(defun NS::|updateDraggingItemsForDrag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateDraggingItemsForDrag:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|draggingSession:sourceOperationMaskForDraggingContext:| (thing _ source-operation-mask-for-dragging-context)
  (let ((message-lambda 
         (make-message-lambda @(draggingSession:sourceOperationMaskForDraggingContext:) ((:POINTER
                                                                                          :LONG-LONG)
                                                                                         :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) source-operation-mask-for-dragging-context)))

(defun NS::|draggingSession:endedAtPoint:operation:| (thing _ ended-at-point operation)
  (let ((message-lambda 
         (make-message-lambda @(draggingSession:endedAtPoint:operation:) ((:POINTER
                                                                           (:STRUCT
                                                                            NS::|CGPoint|)
                                                                           :UNSIGNED-LONG-LONG)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) ended-at-point operation)))

(defun NS::|insertText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertText:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|readSelectionFromItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(readSelectionFromItems:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectionItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectionItems) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|canReadSelectionFromItems| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canReadSelectionFromItems) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|preferredTextFinderStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredTextFinderStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|performTextFinderAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performTextFinderAction:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|performFindPanelAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performFindPanelAction:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setPreferredTextFinderStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreferredTextFinderStyle:) ((:LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|isIncrementalSearchingEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isIncrementalSearchingEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setIncrementalSearchingEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIncrementalSearchingEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|firstSelectedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstSelectedRange) (NIL
                                                     (:STRUCT NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentViewAtIndex:effectiveCharacterRange:| (thing _ effective-character-range)
  (let ((message-lambda 
         (make-message-lambda @(contentViewAtIndex:effectiveCharacterRange:) ((:UNSIGNED-LONG-LONG
                                                                               (:POINTER
                                                                                (:STRUCT
                                                                                 NS::|_NSRange|)))
                                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id effective-character-range))))

(defun NS::|setSelectedRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedRanges:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|shouldReplaceCharactersInRanges:withStrings:| (thing _ with-strings)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldReplaceCharactersInRanges:withStrings:) ((:POINTER
                                                                                :POINTER)
                                                                               :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-strings)))) nil t))

(defun NS::|didReplaceCharacters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(didReplaceCharacters) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|visibleCharacterRanges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(visibleCharacterRanges) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|changeDocumentBackgroundColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeDocumentBackgroundColor:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|changeAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeAttributes:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|changeFont:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeFont:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|underline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(underline:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|outline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(outline:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|useStandardKerning:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(useStandardKerning:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|turnOffKerning:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(turnOffKerning:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|tightenKerning:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(tightenKerning:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|loosenKerning:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(loosenKerning:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|useStandardLigatures:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(useStandardLigatures:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|turnOffLigatures:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(turnOffLigatures:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|useAllLigatures:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(useAllLigatures:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|unscript:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unscript:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|superscript:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(superscript:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|subscript:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(subscript:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|raiseBaseline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(raiseBaseline:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|lowerBaseline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lowerBaseline:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|copyFont:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copyFont:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pasteFont:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteFont:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|rangeForUserCharacterAttributeChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangeForUserCharacterAttributeChange) (NIL
                                                                       (:STRUCT
                                                                        NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setUndoActionName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUndoActionName:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isRichText| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRichText) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|rangeForUserParagraphAttributeChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangeForUserParagraphAttributeChange) (NIL
                                                                       (:STRUCT
                                                                        NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|placeholderString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(placeholderString) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setPlaceholderAttributedString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPlaceholderAttributedString:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|placeholderAttributedString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(placeholderAttributedString) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|delete:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(delete:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|getMarkedText:selectedRange:| (thing _ selected-range)
  (let ((message-lambda 
         (make-message-lambda @(getMarkedText:selectedRange:) (((:POINTER
                                                                 :POINTER)
                                                                (:POINTER
                                                                 (:STRUCT
                                                                  NS::|_NSRange|)))
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id selected-range))))

(defun NS::|firstRectForCharacterRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(firstRectForCharacterRange:) (((:STRUCT
                                                                NS::|_NSRange|))
                                                              (:STRUCT
                                                               NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|conversationIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(conversationIdentifier) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setMarkedText:selectedRange:| (thing _ selected-range)
  (let ((message-lambda 
         (make-message-lambda @(setMarkedText:selectedRange:) ((:POINTER
                                                                (:STRUCT
                                                                 NS::|_NSRange|))
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) selected-range)))

(defun NS::|spellCheckerDidLearnWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidLearnWord:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|spellCheckerDidUnlearnWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidUnlearnWord:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|spellCheckerDidChangeLanguage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeLanguage:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|spellCheckerDidChangeCorrection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeCorrection:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|spellCheckerDidChangeReplacement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeReplacement:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|spellCheckerDidChangeQuoteSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeQuoteSubstitution:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|spellCheckerDidChangeDashSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeDashSubstitution:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|layoutSublayersOfLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(layoutSublayersOfLayer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|invokeExtensionService:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(invokeExtensionService:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|touchBar:makeItemForIdentifier:| (thing _ make-item-for-identifier)
  (let ((message-lambda 
         (make-message-lambda @(touchBar:makeItemForIdentifier:) ((:POINTER
                                                                   :POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id make-item-for-identifier))))


(defun NS::|candidateListTouchBarItem:endSelectingCandidateAtIndex:| (thing _ end-selecting-candidate-at-index)
  (let ((message-lambda 
         (make-message-lambda @(candidateListTouchBarItem:endSelectingCandidateAtIndex:) ((:POINTER
                                                                                           :UNSIGNED-LONG-LONG)
                                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) end-selecting-candidate-at-index)))


(defun NS::|checkSpelling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(checkSpelling:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleContinuousSpellChecking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleContinuousSpellChecking:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleGrammarChecking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleGrammarChecking:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleAutomaticSpellingCorrection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticSpellingCorrection:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|changeSpelling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeSpelling:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|ignoreSpelling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(ignoreSpelling:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleAutomaticQuoteSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticQuoteSubstitution:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleAutomaticDashSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticDashSubstitution:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleAutomaticLinkDetection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticLinkDetection:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleAutomaticTextReplacement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticTextReplacement:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToLeftEndOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToLeftEndOfLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToRightEndOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToRightEndOfLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToLeftEndOfLineAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToLeftEndOfLineAndModifySelection:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToRightEndOfLineAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToRightEndOfLineAndModifySelection:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToBeginningOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToEndOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToBeginningOfLineAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfLineAndModifySelection:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToEndOfLineAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfLineAndModifySelection:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|quickLookWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(quickLookWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|rulerView:pointForLocation:| (thing _ point-for-location)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:pointForLocation:) ((:POINTER
                                                               :DOUBLE)
                                                              (:STRUCT
                                                               NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) point-for-location)))

(defun NS::|rulerView:shouldAddMarker:| (thing _ should-add-marker)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulerView:shouldAddMarker:) ((:POINTER
                                                              :POINTER)
                                                             :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-add-marker)))) nil t))

(defun NS::|rulerView:shouldMoveMarker:| (thing _ should-move-marker)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulerView:shouldMoveMarker:) ((:POINTER
                                                               :POINTER)
                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-move-marker)))) nil t))

(defun NS::|rulerView:willAddMarker:atLocation:| (thing _ will-add-marker at-location)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:willAddMarker:atLocation:) ((:POINTER
                                                                       :POINTER
                                                                       :DOUBLE)
                                                                      :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id will-add-marker) at-location)))

(defun NS::|rulerView:willMoveMarker:toLocation:| (thing _ will-move-marker to-location)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:willMoveMarker:toLocation:) ((:POINTER
                                                                        :POINTER
                                                                        :DOUBLE)
                                                                       :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id will-move-marker) to-location)))

(defun NS::|rulerView:shouldRemoveMarker:| (thing _ should-remove-marker)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulerView:shouldRemoveMarker:) ((:POINTER
                                                                 :POINTER)
                                                                :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-remove-marker)))) nil t))

(defun NS::|rulerView:locationForPoint:| (thing _ location-for-point)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:locationForPoint:) ((:POINTER
                                                               (:STRUCT
                                                                NS::|CGPoint|))
                                                              :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) location-for-point)))

(defun NS::|rulerView:didAddMarker:| (thing _ did-add-marker)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:didAddMarker:) ((:POINTER :POINTER)
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id did-add-marker))))

(defun NS::|rulerView:didMoveMarker:| (thing _ did-move-marker)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:didMoveMarker:) ((:POINTER :POINTER)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id did-move-marker))))

(defun NS::|rulerView:didRemoveMarker:| (thing _ did-remove-marker)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:didRemoveMarker:) ((:POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id did-remove-marker))))

(defun NS::|rulerView:willSetClientView:| (thing _ will-set-client-view)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:willSetClientView:) ((:POINTER
                                                                :POINTER)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id will-set-client-view))))

(defun NS::|rulerView:handleMouseDown:forMarker:| (thing _ handle-mouse-down for-marker)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulerView:handleMouseDown:forMarker:) ((:POINTER
                                                                        :POINTER
                                                                        :POINTER)
                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id handle-mouse-down) (objc-object-id for-marker)))) nil t))

(defun NS::|rulerView:handleMouseDown:| (thing _ handle-mouse-down)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:handleMouseDown:) ((:POINTER
                                                              :POINTER)
                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id handle-mouse-down))))

(defun NS::|setFieldEditor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFieldEditor:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|shouldChangeTextInRanges:replacementStrings:| (thing _ replacement-strings)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldChangeTextInRanges:replacementStrings:) ((:POINTER
                                                                                :POINTER)
                                                                               :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id replacement-strings)))) nil t))

(defun NS::|readSelectionFromPasteboard:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(readSelectionFromPasteboard:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|moveToEndOfDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfDocument:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|orderFrontSubstitutionsPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontSubstitutionsPanel:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|checkTextInDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(checkTextInDocument:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleAutomaticDataDetection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticDataDetection:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|writablePasteboardTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(writablePasteboardTypes) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|writeSelectionToPasteboard:type:| (thing _ type)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeSelectionToPasteboard:type:) ((:POINTER
                                                                    :POINTER)
                                                                   :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id type)))) nil t))

(defun NS::|itemsForSharingServiceInRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(itemsForSharingServiceInRanges:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|enabledTextCheckingTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enabledTextCheckingTypes) (NIL
                                                           :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|updateCandidates| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateCandidates) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAllowedInputSourceLocales:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowedInputSourceLocales:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleSmartInsertDelete:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleSmartInsertDelete:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|checkTextInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(checkTextInSelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setUsesAdaptiveColorMappingForDarkAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesAdaptiveColorMappingForDarkAppearance:) ((:CHAR)
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|scrollToBeginningOfDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollToBeginningOfDocument:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|scrollToEndOfDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollToEndOfDocument:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|RTFFromRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(RTFFromRange:) (((:STRUCT NS::|_NSRange|))
                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|RTFDFromRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(RTFDFromRange:) (((:STRUCT NS::|_NSRange|))
                                                 :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|replaceCharactersInRange:withRTF:| (thing _ with-r-t-f)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withRTF:) (((:STRUCT
                                                                      NS::|_NSRange|)
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-r-t-f))))

(defun NS::|replaceCharactersInRange:withRTFD:| (thing _ with-r-t-f-d)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withRTFD:) (((:STRUCT
                                                                       NS::|_NSRange|)
                                                                      :POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-r-t-f-d))))

(defun NS::|writeRTFDToFile:atomically:| (thing _ atomically)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeRTFDToFile:atomically:) ((:POINTER :CHAR)
                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if atomically 1 0)))) nil t))

(defun NS::|readRTFDFromFile:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(readRTFDFromFile:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|setTextColor:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setTextColor:range:) ((:POINTER
                                                       (:STRUCT
                                                        NS::|_NSRange|))
                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun NS::|setFont:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setFont:range:) ((:POINTER
                                                  (:STRUCT NS::|_NSRange|))
                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun NS::|usesFontPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesFontPanel) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isHorizontallyResizable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHorizontallyResizable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isVerticallyResizable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isVerticallyResizable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|copyRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copyRuler:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pasteRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteRuler:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|alignLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignLeft:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|alignRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignRight:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|alignCenter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignCenter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleRuler:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isRulerVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRulerVisible) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityElementForAttachment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityElementForAttachment:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|clickedOnLink:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(clickedOnLink:atIndex:) ((:POINTER
                                                          :UNSIGNED-LONG-LONG)
                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun NS::|selectionAffinity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectionAffinity) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|layoutOrientation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutOrientation) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|dragSelectionWithEvent:offset:slideBack:| (thing _ offset slide-back)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(dragSelectionWithEvent:offset:slideBack:) ((:POINTER
                                                                            (:STRUCT
                                                                             NS::|CGSize|)
                                                                            :CHAR)
                                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) offset (if slide-back 1 0)))) nil t))

(defun NS::|sharingServicePicker:sharingServicesForItems:mask:proposedSharingServices:| (thing _ sharing-services-for-items mask proposed-sharing-services)
  (let ((message-lambda 
         (make-message-lambda @(sharingServicePicker:sharingServicesForItems:mask:proposedSharingServices:) ((:POINTER
                                                                                                              :POINTER
                                                                                                              :UNSIGNED-LONG-LONG
                                                                                                              :POINTER)
                                                                                                             :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id sharing-services-for-items) mask (objc-object-id proposed-sharing-services))))

(defun NS::|sharingService:containerFrameOnScreenForShareItem:| (thing _ container-frame-on-screen-for-share-item)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:containerFrameOnScreenForShareItem:) ((:POINTER
                                                                                      :POINTER)
                                                                                     (:STRUCT
                                                                                      NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id container-frame-on-screen-for-share-item))))

(defun NS::|allowsCharacterPickerTouchBarItem| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsCharacterPickerTouchBarItem) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|allowedInputSourceLocales| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allowedInputSourceLocales) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|selectedTextAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedTextAttributes) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setUsesRolloverButtonForSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesRolloverButtonForSelection:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|initWithFrame:textContainer:| (thing _ text-container)
  (let ((message-lambda 
         (make-message-lambda @(initWithFrame:textContainer:) (((:STRUCT
                                                                 NS::|CGRect|)
                                                                :POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id text-container))))

(defun NS::|inputContextAllowingInitialization:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(inputContextAllowingInitialization:) ((:CHAR)
                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|drawInsertionPointInRect:color:turnedOn:| (thing _ color turned-on)
  (let ((message-lambda 
         (make-message-lambda @(drawInsertionPointInRect:color:turnedOn:) (((:STRUCT
                                                                             NS::|CGRect|)
                                                                            :POINTER
                                                                            :CHAR)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id color) (if turned-on 1 0))))

(defun NS::|insertionPointColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(insertionPointColor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setInsertionPointColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInsertionPointColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|invalidateTextContainerOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateTextContainerOrigin) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|updateInsertionPointStateAndRestartTimer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateInsertionPointStateAndRestartTimer:) ((:CHAR)
                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setNeedsDisplayInRect:avoidAdditionalLayout:| (thing _ avoid-additional-layout)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplayInRect:avoidAdditionalLayout:) (((:STRUCT
                                                                                 NS::|CGRect|)
                                                                                :CHAR)
                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if avoid-additional-layout 1 0))))

(defun NS::|textContainerInset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContainerInset) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|checkTextInRange:types:options:| (thing _ types options)
  (let ((message-lambda 
         (make-message-lambda @(checkTextInRange:types:options:) (((:STRUCT
                                                                    NS::|_NSRange|)
                                                                   :UNSIGNED-LONG-LONG
                                                                   :POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ types (objc-object-id options))))

(defun NS::|checkTextInDocumentUsingTypes:options:restrictToSelection:| (thing _ options restrict-to-selection)
  (let ((message-lambda 
         (make-message-lambda @(checkTextInDocumentUsingTypes:options:restrictToSelection:) ((:UNSIGNED-LONG-LONG
                                                                                              :POINTER
                                                                                              :CHAR)
                                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id options) (if restrict-to-selection 1 0))))

(defun NS::|handleTextCheckingResults:forRange:types:options:orthography:wordCount:| (thing _ for-range types options orthography word-count)
  (let ((message-lambda 
         (make-message-lambda @(handleTextCheckingResults:forRange:types:options:orthography:wordCount:) ((:POINTER
                                                                                                           (:STRUCT
                                                                                                            NS::|_NSRange|)
                                                                                                           :UNSIGNED-LONG-LONG
                                                                                                           :POINTER
                                                                                                           :POINTER
                                                                                                           :LONG-LONG)
                                                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) for-range types (objc-object-id options) (objc-object-id orthography) word-count)))

(defun NS::|rangeForUserTextChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangeForUserTextChange) (NIL
                                                         (:STRUCT
                                                          NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|acceptsGlyphInfo| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsGlyphInfo) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|updateRuler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateRuler) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|breakUndoCoalescing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(breakUndoCoalescing) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAlignment:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setAlignment:range:) ((:LONG-LONG
                                                       (:STRUCT
                                                        NS::|_NSRange|))
                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ range)))

(defun NS::|setBaseWritingDirection:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setBaseWritingDirection:range:) ((:LONG-LONG
                                                                  (:STRUCT
                                                                   NS::|_NSRange|))
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ range)))

(defun NS::|rangesForUserCharacterAttributeChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangesForUserCharacterAttributeChange) (NIL
                                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|usesInspectorBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesInspectorBar) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|usesRuler| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesRuler) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|updateInspectorBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateInspectorBar) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|updateTextTouchBarItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateTextTouchBarItems) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|renderingColorForDocumentColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(renderingColorForDocumentColor:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|allowsDocumentBackgroundColorChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsDocumentBackgroundColorChange) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|acceptableDragTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(acceptableDragTypes) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|updateDragTypeRegistration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateDragTypeRegistration) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|updateFontPanel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateFontPanel) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setDefaultParagraphStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDefaultParagraphStyle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setConstrainedFrameSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setConstrainedFrameSize:) (((:STRUCT
                                                             NS::|CGSize|))
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|rangesForUserTextChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangesForUserTextChange) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|documentColorForRenderingColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(documentColorForRenderingColor:) ((:POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|writeSelectionToPasteboard:types:| (thing _ types)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeSelectionToPasteboard:types:) ((:POINTER
                                                                     :POINTER)
                                                                    :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id types)))) nil t))


(defun NS::|setRulerVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRulerVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|usesAdaptiveColorMappingForDarkAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesAdaptiveColorMappingForDarkAppearance) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|drawViewBackgroundInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawViewBackgroundInRect:) (((:STRUCT
                                                              NS::|CGRect|))
                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|drawPlaceholderInRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawPlaceholderInRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun NS::|shouldRenderPlaceholder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRenderPlaceholder) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|toggleBaseWritingDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleBaseWritingDirection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertNewlineIgnoringFieldEditor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertNewlineIgnoringFieldEditor:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertParagraphSeparator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertParagraphSeparator:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertLineBreak:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertLineBreak:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertLineSeparator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertLineSeparator:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|uppercaseWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(uppercaseWord:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|lowercaseWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lowercaseWord:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|capitalizeWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(capitalizeWord:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|makeBaseWritingDirectionNatural:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeBaseWritingDirectionNatural:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|makeBaseWritingDirectionLeftToRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeBaseWritingDirectionLeftToRight:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|makeBaseWritingDirectionRightToLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeBaseWritingDirectionRightToLeft:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|makeTextWritingDirectionNatural:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeTextWritingDirectionNatural:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|makeTextWritingDirectionLeftToRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeTextWritingDirectionLeftToRight:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|makeTextWritingDirectionRightToLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeTextWritingDirectionRightToLeft:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertPageBreak:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertPageBreak:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertContainerBreak:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertContainerBreak:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|replaceQuotesInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replaceQuotesInSelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|replaceDashesInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replaceDashesInSelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|replaceTextInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replaceTextInSelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|transliterateToLatin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(transliterateToLatin:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|removeAccents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeAccents:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|centerSelectionInVisibleArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(centerSelectionInVisibleArea:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pasteAsPlainText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteAsPlainText:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pasteAsRichText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteAsRichText:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|preferredPasteboardTypeFromArray:restrictedToTypesFromArray:| (thing _ restricted-to-types-from-array)
  (let ((message-lambda 
         (make-message-lambda @(preferredPasteboardTypeFromArray:restrictedToTypesFromArray:) ((:POINTER
                                                                                                :POINTER)
                                                                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id restricted-to-types-from-array))))

(defun NS::|spotlight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spotlight:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleTraditionalCharacterShape:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTraditionalCharacterShape:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|copyLink:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copyLink:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|alignJustified:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignJustified:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|orderFrontSpacingPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontSpacingPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertTable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertTable:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|orderFrontLinkPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontLinkPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|orderFrontListPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontListPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|orderFrontTablePanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontTablePanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|addLinksInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addLinksInSelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|changeBaseWritingDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeBaseWritingDirection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|changeLayoutOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeLayoutOrientation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleQuickLookPreviewPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleQuickLookPreviewPanel:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|characterRangeForRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(characterRangeForRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         (:STRUCT
                                                          NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|displaysLinkToolTips| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(displaysLinkToolTips) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|linkTextAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(linkTextAttributes) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|usesRolloverButtonForSelection| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesRolloverButtonForSelection) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|selectionRangeForProposedRange:granularity:| (thing _ granularity)
  (let ((message-lambda 
         (make-message-lambda @(selectionRangeForProposedRange:granularity:) (((:STRUCT
                                                                                NS::|_NSRange|)
                                                                               :UNSIGNED-LONG-LONG)
                                                                              (:STRUCT
                                                                               NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _ granularity)))

(defun NS::|selectionGranularity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectionGranularity) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setSelectedRanges:affinity:stillSelecting:| (thing _ affinity still-selecting)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedRanges:affinity:stillSelecting:) ((:POINTER
                                                                              :UNSIGNED-LONG-LONG
                                                                              :CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) affinity (if still-selecting 1 0))))

(defun NS::|setSelectionGranularity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectionGranularity:) ((:UNSIGNED-LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|shouldRemoveCaseTransformations| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRemoveCaseTransformations) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|convertToSimplifiedChinese:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertToSimplifiedChinese:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|convertToTraditionalChinese:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertToTraditionalChinese:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|convertToFullWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertToFullWidth:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|convertToHalfWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertToHalfWidth:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|shouldRemoveTransformationAction:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRemoveTransformationAction:) ((:POINTER)
                                                                    :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|usesFindBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesFindBar) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|usesFindPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesFindPanel) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|drawCharactersInTextRange:atPoint:| (thing _ at-point)
  (let ((message-lambda 
         (make-message-lambda @(drawCharactersInTextRange:atPoint:) ((:POINTER
                                                                      (:STRUCT
                                                                       NS::|CGPoint|))
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-point)))

(defun NS::|setLayoutOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayoutOrientation:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|viewportBoundsForTextViewportLayoutController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewportBoundsForTextViewportLayoutController:) ((:POINTER)
                                                                                 (:STRUCT
                                                                                  NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|textViewportLayoutController:configureRenderingSurfaceForTextLayoutFragment:| (thing _ configure-rendering-surface-for-text-layout-fragment)
  (let ((message-lambda 
         (make-message-lambda @(textViewportLayoutController:configureRenderingSurfaceForTextLayoutFragment:) ((:POINTER
                                                                                                                :POINTER)
                                                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id configure-rendering-surface-for-text-layout-fragment))))

(defun NS::|textViewportLayoutControllerWillLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(textViewportLayoutControllerWillLayout:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|textViewportLayoutControllerDidLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(textViewportLayoutControllerDidLayout:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveForward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveForward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveBackward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveBackward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveWordForward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordForward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveWordBackward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordBackward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToBeginningOfParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfParagraph:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToEndOfParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfParagraph:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToBeginningOfDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfDocument:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveBackwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveBackwardAndModifySelection:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveForwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveForwardAndModifySelection:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveWordForwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordForwardAndModifySelection:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveWordBackwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordBackwardAndModifySelection:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveUpAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveUpAndModifySelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveDownAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveDownAndModifySelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToBeginningOfParagraphAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfParagraphAndModifySelection:) ((:POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToEndOfParagraphAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfParagraphAndModifySelection:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToEndOfDocumentAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfDocumentAndModifySelection:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveToBeginningOfDocumentAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfDocumentAndModifySelection:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pageDownAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pageDownAndModifySelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pageUpAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pageUpAndModifySelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveParagraphForwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveParagraphForwardAndModifySelection:) ((:POINTER)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveParagraphBackwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveParagraphBackwardAndModifySelection:) ((:POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveWordRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordRight:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveWordLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordLeft:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveRightAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveRightAndModifySelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveLeftAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveLeftAndModifySelection:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveWordRightAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordRightAndModifySelection:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveWordLeftAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordLeftAndModifySelection:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|scrollPageUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollPageUp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|scrollPageDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollPageDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|scrollLineUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollLineUp:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|scrollLineDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollLineDown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|transpose:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(transpose:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectParagraph:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectWord:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertTabIgnoringFieldEditor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertTabIgnoringFieldEditor:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertSingleQuoteIgnoringSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertSingleQuoteIgnoringSubstitution:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertDoubleQuoteIgnoringSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertDoubleQuoteIgnoringSubstitution:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|deleteForward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteForward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|deleteBackward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteBackward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|deleteBackwardByDecomposingPreviousCharacter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteBackwardByDecomposingPreviousCharacter:) ((:POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|deleteWordForward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteWordForward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|deleteWordBackward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteWordBackward:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|deleteToBeginningOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToBeginningOfLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|deleteToEndOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToEndOfLine:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|deleteToBeginningOfParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToBeginningOfParagraph:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|deleteToEndOfParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToEndOfParagraph:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|yank:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(yank:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setMark:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMark:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|deleteToMark:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToMark:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectToMark:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectToMark:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|swapWithMark:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swapWithMark:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|replaceTextContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replaceTextContainer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setTextContainerInset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextContainerInset:) (((:STRUCT
                                                           NS::|CGSize|))
                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|textContainerInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContainerInsets) (NIL
                                                      (:STRUCT
                                                       NS::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|textContentStorage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContentStorage) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|inspectorBarItemIdentifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(inspectorBarItemIdentifiers) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|shouldDrawInsertionPoint| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldDrawInsertionPoint) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|updateSpellingPanel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateSpellingPanel) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|performValidatedReplacementInRange:withAttributedString:| (thing _ with-attributed-string)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(performValidatedReplacementInRange:withAttributedString:) (((:STRUCT
                                                                                             NS::|_NSRange|)
                                                                                            :POINTER)
                                                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-attributed-string)))) nil t))

(defun NS::|viewportBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewportBounds) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewportAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewportAnchor) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|locationForPositionInViewport:offset:| (thing _ offset)
  (let ((message-lambda 
         (make-message-lambda @(locationForPositionInViewport:offset:) (((:STRUCT
                                                                          NS::|CGPoint|)
                                                                         (:POINTER
                                                                          (:STRUCT
                                                                           NS::|CGSize|)))
                                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id offset))))

(defun NS::|mouseCancelled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseCancelled:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|lockDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lockDocument) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|unlockDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unlockDocument) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|characterIndexForInsertionAtPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(characterIndexForInsertionAtPoint:) (((:STRUCT
                                                                       NS::|CGPoint|))
                                                                     :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|rectsForCharacterRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rectsForCharacterRange:) (((:STRUCT
                                                            NS::|_NSRange|))
                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|drawCharactersInRange:forContentView:| (thing _ for-content-view)
  (let ((message-lambda 
         (make-message-lambda @(drawCharactersInRange:forContentView:) (((:STRUCT
                                                                          NS::|_NSRange|)
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-content-view))))



(defun NS::|set_inLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(set_inLayout:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setUsesInspectorBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesInspectorBar:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setAllowsDocumentBackgroundColorChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsDocumentBackgroundColorChange:) ((:CHAR)
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setUsesFindBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesFindBar:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilitySelectedTextRangesAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextRangesAttribute) (NIL
                                                                           :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsSelectedTextRangesAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSelectedTextRangesAttributeSettable) (NIL
                                                                                     :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySetSelectedTextRangesAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetSelectedTextRangesAttribute:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySharedTextUIElementsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedTextUIElementsAttribute) (NIL
                                                                             :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsSharedTextUIElementsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSharedTextUIElementsAttributeSettable) (NIL
                                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySharedCharacterRangeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedCharacterRangeAttribute) (NIL
                                                                             :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsSharedCharacterRangeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSharedCharacterRangeAttributeSettable) (NIL
                                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySharedTextElementForIndexAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedTextElementForIndexAttributeForParameter:) ((:POINTER)
                                                                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityTextInputMarkedRangeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTextInputMarkedRangeAttribute) (NIL
                                                                             :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsTextInputMarkedRangeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTextInputMarkedRangeAttributeSettable) (NIL
                                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setLinkTextAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLinkTextAttributes:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setMarkedTextAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMarkedTextAttributes:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAcceptsGlyphInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAcceptsGlyphInfo:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|dragOperationForDraggingInfo:type:| (thing _ type)
  (let ((message-lambda 
         (make-message-lambda @(dragOperationForDraggingInfo:type:) ((:POINTER
                                                                      :POINTER)
                                                                     :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id type))))

(defun NS::|cleanUpAfterDragOperation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cleanUpAfterDragOperation) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|smartDeleteRangeForProposedRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(smartDeleteRangeForProposedRange:) (((:STRUCT
                                                                      NS::|_NSRange|))
                                                                    (:STRUCT
                                                                     NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|dragImageForSelectionWithEvent:origin:| (thing _ origin)
  (let ((message-lambda 
         (make-message-lambda @(dragImageForSelectionWithEvent:origin:) ((:POINTER
                                                                          (:POINTER
                                                                           (:STRUCT
                                                                            NS::|CGPoint|)))
                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id origin))))

(defun NS::|drawDragInsertionIndicatorWithRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawDragInsertionIndicatorWithRect:) (((:STRUCT
                                                                        NS::|CGRect|))
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|showFindIndicatorForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showFindIndicatorForRange:) (((:STRUCT
                                                               NS::|_NSRange|))
                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|rangeForUserCompletion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangeForUserCompletion) (NIL
                                                         (:STRUCT
                                                          NS::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|completionsForPartialWordRange:indexOfSelectedItem:| (thing _ index-of-selected-item)
  (let ((message-lambda 
         (make-message-lambda @(completionsForPartialWordRange:indexOfSelectedItem:) (((:STRUCT
                                                                                        NS::|_NSRange|)
                                                                                       (:POINTER
                                                                                        :LONG-LONG))
                                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id index-of-selected-item))))

(defun NS::|insertRightToLeftSlash:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertRightToLeftSlash:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertCompletion:forPartialWordRange:movement:isFinal:| (thing _ for-partial-word-range movement is-final)
  (let ((message-lambda 
         (make-message-lambda @(insertCompletion:forPartialWordRange:movement:isFinal:) ((:POINTER
                                                                                          (:STRUCT
                                                                                           NS::|_NSRange|)
                                                                                          :LONG-LONG
                                                                                          :CHAR)
                                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) for-partial-word-range movement (if is-final 1 0))))

(defun NS::|yankAndSelect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(yankAndSelect:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|tokenizingCharacterSet| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tokenizingCharacterSet) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|readablePasteboardTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(readablePasteboardTypes) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|smartInsertForString:replacingRange:beforeString:afterString:| (thing _ replacing-range before-string after-string)
  (let ((message-lambda 
         (make-message-lambda @(smartInsertForString:replacingRange:beforeString:afterString:) ((:POINTER
                                                                                                 (:STRUCT
                                                                                                  NS::|_NSRange|)
                                                                                                 (:POINTER
                                                                                                  :POINTER)
                                                                                                 (:POINTER
                                                                                                  :POINTER))
                                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) replacing-range (objc-object-id before-string) (objc-object-id after-string))))

(defun NS::|rangesForUserParagraphAttributeChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangesForUserParagraphAttributeChange) (NIL
                                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|readSelectionFromPasteboard:type:| (thing _ type)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(readSelectionFromPasteboard:type:) ((:POINTER
                                                                     :POINTER)
                                                                    :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id type)))) nil t))

(defun NS::|switchBlinkTimersIfNecessaryWithSharedData:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(switchBlinkTimersIfNecessaryWithSharedData:) ((:POINTER)
                                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))




(defun NS::|showHighlightWithCharacterRange:highlightStyle:| (thing _ highlight-style)
  (let ((message-lambda 
         (make-message-lambda @(showHighlightWithCharacterRange:highlightStyle:) (((:STRUCT
                                                                                    NS::|_NSRange|)
                                                                                   :UNSIGNED-LONG-LONG)
                                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ highlight-style)))

(defun NS::|highlightRectsForCharacterRange:highlightStyle:| (thing _ highlight-style)
  (let ((message-lambda 
         (make-message-lambda @(highlightRectsForCharacterRange:highlightStyle:) (((:STRUCT
                                                                                    NS::|_NSRange|)
                                                                                   :UNSIGNED-LONG-LONG)
                                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ highlight-style)))

(defun NS::|hideHighlight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hideHighlight) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|attributedSubstringForMarkedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributedSubstringForMarkedRange) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|highlightBoundingRectForCharacterRange:highlightStyle:| (thing _ highlight-style)
  (let ((message-lambda 
         (make-message-lambda @(highlightBoundingRectForCharacterRange:highlightStyle:) (((:STRUCT
                                                                                           NS::|_NSRange|)
                                                                                          :UNSIGNED-LONG-LONG)
                                                                                         (:STRUCT
                                                                                          NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ highlight-style)))

(defun NS::|menuItemsForTextCheckingResult:range:contextual:event:| (thing _ range contextual event)
  (let ((message-lambda 
         (make-message-lambda @(menuItemsForTextCheckingResult:range:contextual:event:) ((:POINTER
                                                                                          (:STRUCT
                                                                                           NS::|_NSRange|)
                                                                                          :CHAR
                                                                                          :POINTER)
                                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range (if contextual 1 0) (objc-object-id event))))


(defun NS::|revealContext:shouldUseDefaultHighlightForItem:| (thing _ should-use-default-highlight-for-item)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(revealContext:shouldUseDefaultHighlightForItem:) ((:POINTER
                                                                                   :POINTER)
                                                                                  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-use-default-highlight-for-item)))) nil t))

(defun NS::|revealContext:drawRectsForItem:| (thing _ draw-rects-for-item)
  (let ((message-lambda 
         (make-message-lambda @(revealContext:drawRectsForItem:) ((:POINTER
                                                                   :POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id draw-rects-for-item))))

(defun NS::|revealContext:startHighlightingItem:| (thing _ start-highlighting-item)
  (let ((message-lambda 
         (make-message-lambda @(revealContext:startHighlightingItem:) ((:POINTER
                                                                        :POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id start-highlighting-item))))

(defun NS::|revealContext:stopHighlightingItem:| (thing _ stop-highlighting-item)
  (let ((message-lambda 
         (make-message-lambda @(revealContext:stopHighlightingItem:) ((:POINTER
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id stop-highlighting-item))))

(defun NS::|layoutManager:effectiveCUICatalogForTextEffect:| (thing _ effective-c-u-i-catalog-for-text-effect)
  (let ((message-lambda 
         (make-message-lambda @(layoutManager:effectiveCUICatalogForTextEffect:) ((:POINTER
                                                                                   :POINTER)
                                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id effective-c-u-i-catalog-for-text-effect))))

(defun NS::|updateQuickLookPreviewPanel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateQuickLookPreviewPanel) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|updateTouchBarItemIdentifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateTouchBarItemIdentifiers) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|showFindIndicatorForRange:fade:| (thing _ fade)
  (let ((message-lambda 
         (make-message-lambda @(showFindIndicatorForRange:fade:) (((:STRUCT
                                                                    NS::|_NSRange|)
                                                                   :CHAR)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if fade 1 0))))

(defun NS::|performPendingTextChecking| (thing)
  (let ((message-lambda 
         (make-message-lambda @(performPendingTextChecking) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|pendingCandidateUpdate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(pendingCandidateUpdate) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|acquireKeyFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(acquireKeyFocus) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|resignKeyFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignKeyFocus) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|smartInsertBeforeStringForString:replacingRange:| (thing _ replacing-range)
  (let ((message-lambda 
         (make-message-lambda @(smartInsertBeforeStringForString:replacingRange:) ((:POINTER
                                                                                    (:STRUCT
                                                                                     NS::|_NSRange|))
                                                                                   :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) replacing-range)))

(defun NS::|smartInsertAfterStringForString:replacingRange:| (thing _ replacing-range)
  (let ((message-lambda 
         (make-message-lambda @(smartInsertAfterStringForString:replacingRange:) ((:POINTER
                                                                                   (:STRUCT
                                                                                    NS::|_NSRange|))
                                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) replacing-range)))

(defun NS::|isAutomaticLanguageIdentificationEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticLanguageIdentificationEnabled) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAutomaticLanguageIdentificationEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticLanguageIdentificationEnabled:) ((:CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setDisplaysLinkToolTips:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDisplaysLinkToolTips:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setCentersOnScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCentersOnScroll:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|centersOnScroll| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(centersOnScroll) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|markedTextAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markedTextAttributes) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isCoalescingUndo| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isCoalescingUndo) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|allowsImageEditing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsImageEditing) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAllowsImageEditing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsImageEditing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setUsesFindPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesFindPanel:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setUsesColorsWithInvertedLightness:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesColorsWithInvertedLightness:) ((:CHAR)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|usesColorsWithInvertedLightness| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesColorsWithInvertedLightness) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|toggleUsesAdaptiveColorMappingForDarkAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleUsesAdaptiveColorMappingForDarkAppearance:) ((:POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleAutomaticLanguageIdentification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticLanguageIdentification:) ((:POINTER)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleAutomaticTextCompletion:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticTextCompletion:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setEnabledTextCheckingTypes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEnabledTextCheckingTypes:) ((:UNSIGNED-LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|insertCandidateString:replacementRange:fromTextCheckingResult:| (thing _ replacement-range from-text-checking-result)
  (let ((message-lambda 
         (make-message-lambda @(insertCandidateString:replacementRange:fromTextCheckingResult:) ((:POINTER
                                                                                                  (:STRUCT
                                                                                                   NS::|_NSRange|)
                                                                                                  :CHAR)
                                                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) replacement-range (if from-text-checking-result 1 0))))

(defun NS::|insertCandidateTextCheckingResult:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertCandidateTextCheckingResult:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|candidateListTouchBarItem:changedCandidateListVisibility:| (thing _ changed-candidate-list-visibility)
  (let ((message-lambda 
         (make-message-lambda @(candidateListTouchBarItem:changedCandidateListVisibility:) ((:POINTER
                                                                                             :CHAR)
                                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if changed-candidate-list-visibility 1 0))))

(defun NS::|invokeImmediateActionMenuItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(invokeImmediateActionMenuItem:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|applyActionForRanges:block:| (thing _ block)
  (let ((message-lambda 
         (make-message-lambda @(applyActionForRanges:block:) ((:POINTER
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id block))))

(defun NS::|showDefinitionFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showDefinitionFromMenu:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|immediateActionRecognizerWillPrepare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerWillPrepare:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|immediateActionRecognizerWillBeginAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerWillBeginAnimation:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|immediateActionRecognizerDidUpdateAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerDidUpdateAnimation:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|immediateActionRecognizerDidCancelAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerDidCancelAnimation:) ((:POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|immediateActionRecognizerDidCompleteAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerDidCompleteAnimation:) ((:POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|touchBarItemController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBarItemController) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|changeAttributesWithModifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeAttributesWithModifier:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|functionBar:makeItemForIdentifier:| (thing _ make-item-for-identifier)
  (let ((message-lambda 
         (make-message-lambda @(functionBar:makeItemForIdentifier:) ((:POINTER
                                                                      :POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id make-item-for-identifier))))

(defun NS::|quickLookPreviewableItemsInRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(quickLookPreviewableItemsInRanges:) ((:POINTER)
                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|acceptsPreviewPanelControl:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsPreviewPanelControl:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|beginPreviewPanelControl:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(beginPreviewPanelControl:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|endPreviewPanelControl:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endPreviewPanelControl:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|numberOfPreviewItemsInPreviewPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(numberOfPreviewItemsInPreviewPanel:) ((:POINTER)
                                                                      :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|previewPanel:previewItemAtIndex:| (thing _ preview-item-at-index)
  (let ((message-lambda 
         (make-message-lambda @(previewPanel:previewItemAtIndex:) ((:POINTER
                                                                    :UNSIGNED-LONG-LONG)
                                                                   :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) preview-item-at-index)))

(defun NS::|previewPanel:sourceFrameOnScreenForPreviewItem:| (thing _ source-frame-on-screen-for-preview-item)
  (let ((message-lambda 
         (make-message-lambda @(previewPanel:sourceFrameOnScreenForPreviewItem:) ((:POINTER
                                                                                   :POINTER)
                                                                                  (:STRUCT
                                                                                   NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id source-frame-on-screen-for-preview-item))))

(defun NS::|previewPanel:transitionImageForPreviewItem:contentRect:| (thing _ transition-image-for-preview-item content-rect)
  (let ((message-lambda 
         (make-message-lambda @(previewPanel:transitionImageForPreviewItem:contentRect:) ((:POINTER
                                                                                           :POINTER
                                                                                           (:POINTER
                                                                                            (:STRUCT
                                                                                             NS::|CGRect|)))
                                                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id transition-image-for-preview-item) (objc-object-id content-rect))))

(defun NS::|orderFrontSharingServicePicker:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontSharingServicePicker:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))







(defun NS::|close| (thing)
  (let ((message-lambda 
         (make-message-lambda @(close) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun NS::|update| (thing)
  (let ((message-lambda 
         (make-message-lambda @(update) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun NS::|parentWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(parentWindow) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|hasTitleBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasTitleBar) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|level| (thing)
  (let ((message-lambda 
         (make-message-lambda @(level) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun NS::|document| (thing)
  (let ((message-lambda 
         (make-message-lambda @(document) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|subtitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(subtitle) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setSubtitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSubtitle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|setFrame:display:| (thing _ display)
  (let ((message-lambda 
         (make-message-lambda @(setFrame:display:) (((:STRUCT NS::|CGRect|)
                                                     :CHAR)
                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if display 1 0))))

(defun NS::|minFullScreenContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minFullScreenContentSize) (NIL
                                                           (:STRUCT
                                                            NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun NS::|convertScreenToBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertScreenToBase:) (((:STRUCT
                                                         NS::|CGPoint|))
                                                       (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))






(defun NS::|gestureRecognizer:shouldAttemptToRecognizeWithEvent:| (thing _ should-attempt-to-recognize-with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(gestureRecognizer:shouldAttemptToRecognizeWithEvent:) ((:POINTER
                                                                                        :POINTER)
                                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-attempt-to-recognize-with-event)))) nil t))



(defun NS::|isVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isVisible) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setColorSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setColorSpace:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|isOnActiveSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isOnActiveSpace) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))










(defun NS::|accessibilityFocusRingBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusRingBounds) (NIL
                                                               (:STRUCT
                                                                NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|accessibilityWindowAttributeValueHelper| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowAttributeValueHelper) (NIL
                                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityTopLevelUIElementAttributeValueHelper| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTopLevelUIElementAttributeValueHelper) (NIL
                                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|convertRectToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectToScreen:) (((:STRUCT NS::|CGRect|))
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))





(defun NS::|remoteUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(remoteUIElement) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|windowRef| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowRef) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun NS::|accessibilityWindowNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowNumber) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isTabOverviewVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isTabOverviewVisible) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|titleVisibility| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titleVisibility) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|tabbingIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabbingIdentifier) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|windowController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowController) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|setTabbingIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabbingIdentifier:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|tabbingMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabbingMode) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setTabbingMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabbingMode:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|tab| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tab) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|styleMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(styleMask) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|sheetParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sheetParent) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|titlebarAppearsTransparent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarAppearsTransparent) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isResizable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isResizable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isKeyWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isKeyWindow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|makeKeyAndOrderFront:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeKeyAndOrderFront:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isMiniaturized| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMiniaturized) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun NS::|selectNextTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectNextTab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectPreviousTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectPreviousTab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|moveTabToNewWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveTabToNewWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|mergeAllWindows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mergeAllWindows:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleTabBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTabBar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleTabOverview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTabOverview:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|performCloseOtherTabs:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performCloseOtherTabs:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|performClose:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performClose:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isTabbed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isTabbed) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|performCloseTabbedWindowGroup:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performCloseTabbedWindowGroup:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|pinTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pinTab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|unpinTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unpinTab:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|tabGroup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabGroup) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setTabOverviewVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabOverviewVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|orderOutTabbedWindowGroup:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderOutTabbedWindowGroup:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|windowDidBecomeTabbed| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowDidBecomeTabbed) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|set_beforeTabPickerResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(set_beforeTabPickerResponder:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|setReleasedWhenClosed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setReleasedWhenClosed:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|orderWindow:relativeTo:| (thing _ relative-to)
  (let ((message-lambda 
         (make-message-lambda @(orderWindow:relativeTo:) ((:LONG-LONG
                                                           :LONG-LONG)
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ relative-to)))

(defun NS::|orderOut:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderOut:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|initWithContentRect:styleMask:backing:defer:| (thing _ style-mask backing defer)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentRect:styleMask:backing:defer:) (((:STRUCT
                                                                                 NS::|CGRect|)
                                                                                :UNSIGNED-LONG-LONG
                                                                                :UNSIGNED-LONG-LONG
                                                                                :CHAR)
                                                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ style-mask backing (if defer 1 0))))



(defun NS::|orderFront:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFront:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|flushWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flushWindow) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))











(defun NS::|accessibilitySubroleAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySubroleAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsSubroleAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSubroleAttributeSettable) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))
















(defun NS::|convertRectFromScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectFromScreen:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|convertPointFromScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointFromScreen:) (((:STRUCT
                                                            NS::|CGPoint|))
                                                          (:STRUCT
                                                           NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))




(defun NS::|setCollectionBehavior:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCollectionBehavior:) ((:UNSIGNED-LONG-LONG)
                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLevel:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setHidesOnDeactivate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHidesOnDeactivate:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setIgnoresMouseEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIgnoresMouseEvents:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))



(defun NS::|canBecomeKeyWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBecomeKeyWindow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|canBecomeMainWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBecomeMainWindow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|graphicsPort| (thing)
  (let ((message-lambda 
         (make-message-lambda @(graphicsPort) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|mouseLocationOutsideOfEventStream| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mouseLocationOutsideOfEventStream) (NIL
                                                                    (:STRUCT
                                                                     NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setRestorable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRestorable:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setMovableByWindowBackground:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMovableByWindowBackground:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setDefaultButtonCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDefaultButtonCell:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|animationBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animationBehavior) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAnimationBehavior:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAnimationBehavior:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|beginCriticalSheet:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(beginCriticalSheet:completionHandler:) ((:POINTER
                                                                         :POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id completion-handler))))

(defun NS::|beginSheet:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(beginSheet:completionHandler:) ((:POINTER
                                                                 :POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id completion-handler))))


(defun NS::|isSheet| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSheet) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setInitialFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInitialFirstResponder:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|initialFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(initialFirstResponder) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|layoutIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAnchorAttribute:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setAnchorAttribute:forOrientation:) ((:LONG-LONG
                                                                      :LONG-LONG)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-orientation)))




(defun NS::|canHide| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canHide) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|makeKeyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(makeKeyWindow) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|center| (thing)
  (let ((message-lambda 
         (make-message-lambda @(center) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFrameTopLeftPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameTopLeftPoint:) (((:STRUCT
                                                          NS::|CGPoint|))
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|deminiaturize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deminiaturize:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|hidesOnDeactivate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hidesOnDeactivate) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|attachedSheet| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attachedSheet) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|sheets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sheets) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun NS::|makeMainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(makeMainWindow) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))
















(defun NS::|toggleFullScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleFullScreen:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setWindowController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindowController:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityIsChildOfApp| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsChildOfApp) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))






(defun NS::|firstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstResponder) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|constrainFrameRect:toScreen:| (thing _ to-screen)
  (let ((message-lambda 
         (make-message-lambda @(constrainFrameRect:toScreen:) (((:STRUCT
                                                                 NS::|CGRect|)
                                                                :POINTER)
                                                               (:STRUCT
                                                                NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-screen))))


(defun NS::|representedURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(representedURL) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|toolbar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toolbar) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|collectionBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(collectionBehavior) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setTitlebarAppearsTransparent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarAppearsTransparent:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setContentViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentViewController:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|maxFullScreenContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maxFullScreenContentSize) (NIL
                                                           (:STRUCT
                                                            NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setHasShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasShadow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setStyleMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStyleMask:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|accessibilityActivationPointAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityActivationPointAttribute) (NIL
                                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFrameFromString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameFromString:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|stringWithSavedFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringWithSavedFrame) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|titlePosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlePosition) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|setTitlePosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlePosition:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))



(defun NS::|accessibilityTitleUIElementAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTitleUIElementAttribute) (NIL
                                                                       :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|convertBaseToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertBaseToScreen:) (((:STRUCT
                                                         NS::|CGPoint|))
                                                       (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityIsTitleUIElementAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTitleUIElementAttributeSettable) (NIL
                                                                                 :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|hasKeyAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasKeyAppearance) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|makeFirstResponder:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(makeFirstResponder:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|disableFlushWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableFlushWindow) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|enableFlushWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableFlushWindow) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))












(defun NS::|draggingEnded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingEnded:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun NS::|setViewsNeedDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setViewsNeedDisplay:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|disableKeyEquivalentForDefaultButtonCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableKeyEquivalentForDefaultButtonCell) (NIL
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|enableKeyEquivalentForDefaultButtonCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableKeyEquivalentForDefaultButtonCell) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun NS::|cancelOperation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cancelOperation:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setDepthLimit:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDepthLimit:) ((:INT) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|depthLimit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(depthLimit) (NIL :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|appearanceParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(appearanceParent) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAppearanceParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAppearanceParent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|setResizeIncrements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setResizeIncrements:) (((:STRUCT NS::|CGSize|))
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|isExcludedFromWindowsMenu| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isExcludedFromWindowsMenu) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isMainWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMainWindow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|ignoresMouseEvents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ignoresMouseEvents) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|resignMainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignMainWindow) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isAutodisplay| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutodisplay) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAutodisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutodisplay:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|startRectForSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(startRectForSheet:) ((:POINTER)
                                                     (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|redo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(redo:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|undo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(undo:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|contentViewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentViewController) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|frameRectForContentRect:styleMask:| (thing _ style-mask)
  (let ((message-lambda 
         (make-message-lambda @(frameRectForContentRect:styleMask:) (((:STRUCT
                                                                       NS::|CGRect|)
                                                                      :UNSIGNED-LONG-LONG)
                                                                     (:STRUCT
                                                                      NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ style-mask)))

(defun NS::|contentRectForFrameRect:styleMask:| (thing _ style-mask)
  (let ((message-lambda 
         (make-message-lambda @(contentRectForFrameRect:styleMask:) (((:STRUCT
                                                                       NS::|CGRect|)
                                                                      :UNSIGNED-LONG-LONG)
                                                                     (:STRUCT
                                                                      NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ style-mask)))

(defun NS::|minFrameSizeForMinContentSize:styleMask:| (thing _ style-mask)
  (let ((message-lambda 
         (make-message-lambda @(minFrameSizeForMinContentSize:styleMask:) (((:STRUCT
                                                                             NS::|CGSize|)
                                                                            :UNSIGNED-LONG-LONG)
                                                                           (:STRUCT
                                                                            NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _ style-mask)))

(defun NS::|windowTitleController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowTitleController) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|dragRectForFrameRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dragRectForFrameRect:) (((:STRUCT
                                                          NS::|CGRect|))
                                                        (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|resizeIncrements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resizeIncrements) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAspectRatio:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAspectRatio:) (((:STRUCT NS::|CGSize|))
                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|aspectRatio| (thing)
  (let ((message-lambda 
         (make-message-lambda @(aspectRatio) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|invalidateCursorRectsForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(invalidateCursorRectsForView:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))







(defun NS::|isMovableByWindowBackground| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMovableByWindowBackground) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|keyViewSelectionDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyViewSelectionDirection) (NIL
                                                            :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentRectForFrameRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentRectForFrameRect:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           (:STRUCT
                                                            NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|contentBorderThicknessForEdge:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentBorderThicknessForEdge:) ((:UNSIGNED-LONG-LONG)
                                                                 :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|setToolbar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setToolbar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setRestorationClass:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRestorationClass:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setFrame:display:animate:| (thing _ display animate)
  (let ((message-lambda 
         (make-message-lambda @(setFrame:display:animate:) (((:STRUCT
                                                              NS::|CGRect|)
                                                             :CHAR :CHAR)
                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if display 1 0) (if animate 1 0))))

(defun NS::|recalculateKeyViewLoop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(recalculateKeyViewLoop) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|frameAutosaveName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameAutosaveName) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|saveFrameUsingName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(saveFrameUsingName:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setFrameUsingName:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setFrameUsingName:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|setFrameAutosaveName:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setFrameAutosaveName:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|standardWindowButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(standardWindowButton:) ((:UNSIGNED-LONG-LONG)
                                                        :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|selectNextKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectNextKeyView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectPreviousKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectPreviousKeyView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|convertPointToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointToScreen:) (((:STRUCT
                                                          NS::|CGPoint|))
                                                        (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|endEditingFor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endEditingFor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|fieldEditor:forObject:| (thing _ for-object)
  (let ((message-lambda 
         (make-message-lambda @(fieldEditor:forObject:) ((:CHAR :POINTER)
                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) (objc-object-id for-object))))


(defun NS::|setTitleVisibility:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleVisibility:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|canBecomeVisibleWithoutLogin| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBecomeVisibleWithoutLogin) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|shadowOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowOptions) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|hasShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasShadow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|addChildWindow:ordered:| (thing _ ordered)
  (let ((message-lambda 
         (make-message-lambda @(addChildWindow:ordered:) ((:POINTER :LONG-LONG)
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) ordered)))

(defun NS::|removeChildWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeChildWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|sharingIndicator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharingIndicator) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|selectKeyViewPrecedingView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectKeyViewPrecedingView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|selectKeyViewFollowingView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectKeyViewFollowingView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setRepresentedFilename:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepresentedFilename:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|isDocumentEdited| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDocumentEdited) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|editTitleWithCompletionHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(editTitleWithCompletionHandler:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setDocumentEdited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDocumentEdited:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isFloatingPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFloatingPanel) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|allowsCursorRectsWhenInactive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsCursorRectsWhenInactive) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|GDBDumpCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(GDBDumpCursorRects) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|setAllowsCursorRectsWhenInactive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsCursorRectsWhenInactive:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|contentLayoutRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentLayoutRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|handleSaveScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleSaveScriptCommand:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|handleCloseScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleCloseScriptCommand:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun NS::|wantsPeriodicDraggingUpdates| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsPeriodicDraggingUpdates) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|drawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawers) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|openDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(openDrawers) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setParentWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setParentWindow:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setOneShot:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOneShot:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setCanHide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanHide:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setCanBecomeVisibleWithoutLogin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanBecomeVisibleWithoutLogin:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))



(defun NS::|showToolbar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showToolbar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|hideToolbar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(hideToolbar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|toggleToolbarShown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleToolbarShown:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|runToolbarCustomizationPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runToolbarCustomizationPalette:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|performZoom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performZoom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|performMiniaturize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performMiniaturize:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|titlebarAccessoryViewControllers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarAccessoryViewControllers) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|performWindowDragWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performWindowDragWithEvent:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySetSizeAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetSizeAttribute:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|acquireKeyAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(acquireKeyAppearance) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|resignKeyAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignKeyAppearance) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|isInKeyWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInKeyWindow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|childWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(childWindows) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|restorationClass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restorationClass) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|inspectorBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(inspectorBar) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAppearanceSource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAppearanceSource:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|frameRectForContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(frameRectForContentRect:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           (:STRUCT
                                                            NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setRepresentedURL:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepresentedURL:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|representedFilename| (thing)
  (let ((message-lambda 
         (make-message-lambda @(representedFilename) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|graphicsContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(graphicsContext) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|anchorAttributeForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(anchorAttributeForOrientation:) ((:LONG-LONG)
                                                                 :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|updateConstraintsIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateConstraintsIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun NS::|becomesKeyOnlyIfNeeded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(becomesKeyOnlyIfNeeded) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|zoom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(zoom:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|tabbedWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabbedWindows) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|addTitlebarAccessoryViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addTitlebarAccessoryViewController:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setBackingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackingType:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|miniaturize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(miniaturize:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|contentLayoutGuide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentLayoutGuide) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setPreservesContentDuringLiveResize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreservesContentDuringLiveResize:) ((:CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|animationResizeTime:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(animationResizeTime:) (((:STRUCT NS::|CGRect|))
                                                       :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|preventsApplicationTerminationWhenModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(preventsApplicationTerminationWhenModal) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setPreventsApplicationTerminationWhenModal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreventsApplicationTerminationWhenModal:) ((:CHAR)
                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|allowsToolTipsWhenApplicationIsInactive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsToolTipsWhenApplicationIsInactive) (NIL
                                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|initWithContentRect:styleMask:backing:defer:screen:| (thing _ style-mask backing defer screen)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentRect:styleMask:backing:defer:screen:) (((:STRUCT
                                                                                        NS::|CGRect|)
                                                                                       :UNSIGNED-LONG-LONG
                                                                                       :UNSIGNED-LONG-LONG
                                                                                       :CHAR
                                                                                       :POINTER)
                                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ style-mask backing (if defer 1 0) (objc-object-id screen))))

(defun NS::|flushWindowIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flushWindowIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setShowsToolbarButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsToolbarButton:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setContentMinSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentMinSize:) (((:STRUCT NS::|CGSize|))
                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setContentMaxSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentMaxSize:) (((:STRUCT NS::|CGSize|))
                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))




(defun NS::|setAutorecalculatesKeyViewLoop:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutorecalculatesKeyViewLoop:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setTitlebarAlphaValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarAlphaValue:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|titlebarViewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarViewController) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|deepestScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deepestScreen) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|sheetBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sheetBehavior) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|showsAutosaveButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsAutosaveButton) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setShowsAutosaveButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsAutosaveButton:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|unregisterSplitViewItemSeparatorTrackingAdapter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unregisterSplitViewItemSeparatorTrackingAdapter:) ((:POINTER)
                                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|registerSplitViewItemSeparatorTrackingAdapter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerSplitViewItemSeparatorTrackingAdapter:) ((:POINTER)
                                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|statusItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(statusItem) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAllowsToolTipsWhenApplicationIsInactive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsToolTipsWhenApplicationIsInactive:) ((:CHAR)
                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|acceptsMouseMovedEvents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsMouseMovedEvents) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|bottomCornerRounded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(bottomCornerRounded) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAcceptsMouseMovedEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAcceptsMouseMovedEvents:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|autorecalculatesContentBorderThicknessForEdge:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autorecalculatesContentBorderThicknessForEdge:) ((:UNSIGNED-LONG-LONG)
                                                                                 :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun NS::|disableScreenUpdatesUntilFlush| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableScreenUpdatesUntilFlush) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setInspectorBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInspectorBar:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|showsContentSeparatorForEdge:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsContentSeparatorForEdge:) ((:UNSIGNED-LONG-LONG)
                                                                :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun NS::|removeUnderTitlebarView:withAssociatedWithView:| (thing _ with-associated-with-view)
  (let ((message-lambda 
         (make-message-lambda @(removeUnderTitlebarView:withAssociatedWithView:) ((:POINTER
                                                                                   :POINTER)
                                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-associated-with-view))))

(defun NS::|showsToolbarButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsToolbarButton) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|showsLockButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsLockButton) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|showsFullScreenButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsFullScreenButton) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|singleWindowSharingActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(singleWindowSharingActive) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|prefersFullWidthTitlebarWhenAccessoriesVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(prefersFullWidthTitlebarWhenAccessoriesVisible) (NIL
                                                                                 :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|contentMinSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentMinSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentMaxSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentMaxSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setContentBorderThickness:forEdge:| (thing _ for-edge)
  (let ((message-lambda 
         (make-message-lambda @(setContentBorderThickness:forEdge:) ((:DOUBLE
                                                                      :UNSIGNED-LONG-LONG)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-edge)))

(defun NS::|windowTitlebarLayoutDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowTitlebarLayoutDirection) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|toolbarStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toolbarStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setBottomCornerRounded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBottomCornerRounded:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|addUnderTitlebarView:withAssociatedWithView:| (thing _ with-associated-with-view)
  (let ((message-lambda 
         (make-message-lambda @(addUnderTitlebarView:withAssociatedWithView:) ((:POINTER
                                                                                :POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-associated-with-view))))

(defun NS::|setPrefersFullWidthTitlebarWhenAccessoriesVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPrefersFullWidthTitlebarWhenAccessoriesVisible:) ((:CHAR)
                                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|titlebarBlendingMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarBlendingMode) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|titlebarAlphaValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarAlphaValue) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|removeTitlebarAccessoryViewControllerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeTitlebarAccessoryViewControllerAtIndex:) ((:LONG-LONG)
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|disableSnapshotRestoration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableSnapshotRestoration) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|enableSnapshotRestoration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableSnapshotRestoration) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|snapshotFromRect:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(snapshotFromRect:options:) (((:STRUCT
                                                              NS::|CGRect|)
                                                             :UNSIGNED-LONG-LONG)
                                                            :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ options)))

(defun NS::|topLeftPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topLeftPoint) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|cascadeTopLeftFromPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cascadeTopLeftFromPoint:) (((:STRUCT
                                                             NS::|CGPoint|))
                                                           (:STRUCT
                                                            NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setExcludedFromWindowsMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setExcludedFromWindowsMenu:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setToolbarStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setToolbarStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|resizeFlags| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resizeFlags) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|windowSectionController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowSectionController) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|toggleUsingSmallToolbarIcons:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleUsingSmallToolbarIcons:) ((:POINTER)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setTitlebarSeparatorStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarSeparatorStyle:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|changeToolbarDisplayModeToNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeToolbarDisplayModeToNumber:) ((:POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|changeToolbarDisplayMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeToolbarDisplayMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|backingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backingType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|canStoreColor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canStoreColor) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|allowsConcurrentViewDrawing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsConcurrentViewDrawing) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun NS::|hasKeyAppearanceIncludingSheets:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasKeyAppearanceIncludingSheets:) ((:CHAR)
                                                                   :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0)))) nil t))

(defun NS::|setDisplaysWhenScreenProfileChanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDisplaysWhenScreenProfileChanges:) ((:CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setAutorecalculatesContentBorderThickness:forEdge:| (thing _ for-edge)
  (let ((message-lambda 
         (make-message-lambda @(setAutorecalculatesContentBorderThickness:forEdge:) ((:CHAR
                                                                                      :UNSIGNED-LONG-LONG)
                                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) for-edge)))

(defun NS::|hasDynamicDepthLimit| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasDynamicDepthLimit) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|guessDockTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(guessDockTitle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|lockButtonClicked:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lockButtonClicked:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|allowsInteriorShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsInteriorShadow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isFlushWindowDisabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFlushWindowDisabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|shadowStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowStyle) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|shadowParameters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowParameters) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|viewsNeedDisplay| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(viewsNeedDisplay) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|changeToolBarDisplayModeToDisplayMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeToolBarDisplayModeToDisplayMode:) ((:UNSIGNED-LONG-LONG)
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|mouseConfinementRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mouseConfinementRect) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|displaysWhenScreenProfileChanges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(displaysWhenScreenProfileChanges) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setUnsnappedFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUnsnappedFrame:) (((:STRUCT NS::|CGRect|))
                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|unsnappedFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsnappedFrame) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|defaultButtonCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(defaultButtonCell) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|resignMainAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignMainAppearance) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|acquireMainAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(acquireMainAppearance) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isRestorable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRestorable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|cacheMiniwindowTitle:guess:| (thing _ guess)
  (let ((message-lambda 
         (make-message-lambda @(cacheMiniwindowTitle:guess:) ((:POINTER :CHAR)
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if guess 1 0))))

(defun NS::|timeMachineDelegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeMachineDelegate) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|miniwindowTitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(miniwindowTitle) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|hasMainAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasMainAppearance) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun NS::|registerScrollViewSeparatorTrackingAdapter:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(registerScrollViewSeparatorTrackingAdapter:) ((:POINTER)
                                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|unregisterScrollViewSeparatorTrackingAdapter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unregisterScrollViewSeparatorTrackingAdapter:) ((:POINTER)
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|editTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(editTitle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|animationForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(animationForKeyPath:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|adjustLayoutForResolutionChangeToRetina:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(adjustLayoutForResolutionChangeToRetina:) ((:CHAR)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|rebuildLayoutFromScratch| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rebuildLayoutFromScratch) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isPreferenceToolbarWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isPreferenceToolbarWindow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|titlebarSeparatorStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarSeparatorStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentTitlebarSeparatorStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentTitlebarSeparatorStyle) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setContentTitlebarSeparatorStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentTitlebarSeparatorStyle:) ((:LONG-LONG)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setTitleWithRepresentedFilename:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleWithRepresentedFilename:) ((:POINTER)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|addDocumentIconButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(addDocumentIconButton) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|insertTitlebarAccessoryViewController:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertTitlebarAccessoryViewController:atIndex:) ((:POINTER
                                                                                  :LONG-LONG)
                                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun NS::|titlebarBlurFiltersDisabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarBlurFiltersDisabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setTitlebarBlurFiltersDisabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarBlurFiltersDisabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|frameTopLeftPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameTopLeftPoint) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setContentResizeIncrements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentResizeIncrements:) (((:STRUCT
                                                                NS::|CGSize|))
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|contentResizeIncrements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentResizeIncrements) (NIL
                                                          (:STRUCT
                                                           NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setContentAspectRatio:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentAspectRatio:) (((:STRUCT
                                                           NS::|CGSize|))
                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|contentAspectRatio| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentAspectRatio) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|shadowOptionsForActiveAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(shadowOptionsForActiveAppearance:) ((:CHAR)
                                                                    :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|useOptimizedDrawing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(useOptimizedDrawing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKeyView:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|autorecalculatesKeyViewLoop| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autorecalculatesKeyViewLoop) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|runToolbarConfigurationPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runToolbarConfigurationPalette:) ((:POINTER)
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setShowsLockButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsLockButton:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setMouseConfinementRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMouseConfinementRect:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|isReleasedWhenClosed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isReleasedWhenClosed) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isZoomed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isZoomed) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|contentSeparatorColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentSeparatorColor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentInsetColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentInsetColor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setShowsContentSeparator:forEdge:| (thing _ for-edge)
  (let ((message-lambda 
         (make-message-lambda @(setShowsContentSeparator:forEdge:) ((:CHAR
                                                                     :UNSIGNED-LONG-LONG)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) for-edge)))

(defun NS::|setDynamicDepthLimit:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDynamicDepthLimit:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|orderBack:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderBack:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|orderFrontRegardless| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontRegardless) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setMiniwindowImage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMiniwindowImage:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setMiniwindowTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMiniwindowTitle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|miniwindowImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(miniwindowImage) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isOneShot| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isOneShot) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|cacheImageInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cacheImageInRect:) (((:STRUCT NS::|CGRect|))
                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|restoreCachedImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restoreCachedImage) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|discardCachedImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(discardCachedImage) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFrameUsingName:force:| (thing _ force)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setFrameUsingName:force:) ((:POINTER :CHAR)
                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if force 1 0)))) nil t))

(defun NS::|invalidateShadow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateShadow) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|canMoveToCurrentSpaceOnScreen:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canMoveToCurrentSpaceOnScreen:) ((:POINTER)
                                                                 :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|setMinFullScreenContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinFullScreenContentSize:) (((:STRUCT
                                                                 NS::|CGSize|))
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setMaxFullScreenContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaxFullScreenContentSize:) (((:STRUCT
                                                                 NS::|CGSize|))
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAutofill:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutofill:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|autofill| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autofill) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAutofillColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutofillColor:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|autofillColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autofillColor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setShowsResizeIndicator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsResizeIndicator:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|showsResizeIndicator| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsResizeIndicator) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|addChildWindow:ordered:shareKey:| (thing _ ordered share-key)
  (let ((message-lambda 
         (make-message-lambda @(addChildWindow:ordered:shareKey:) ((:POINTER
                                                                    :LONG-LONG
                                                                    :CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) ordered (if share-key 1 0))))

(defun NS::|setSharingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSharingType:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|sharingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharingType) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setPreferredBackingLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreferredBackingLocation:) ((:UNSIGNED-LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|preferredBackingLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredBackingLocation) (NIL
                                                           :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|backingLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backingLocation) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setAllowsConcurrentViewDrawing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsConcurrentViewDrawing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|maxTitlebarTitleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maxTitlebarTitleRect) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|titlebarTitleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarTitleRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|titlebarTitleFont| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarTitleFont) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|appearanceSource| (thing)
  (let ((message-lambda 
         (make-message-lambda @(appearanceSource) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|titleHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titleHidden) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setTitleHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleHidden:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setTitleMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleMode:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|titleMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titleMode) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|titlebarAppearsTransparentWhenFullscreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarAppearsTransparentWhenFullscreen) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setTitlebarAppearsTransparentWhenFullscreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarAppearsTransparentWhenFullscreen:) ((:CHAR)
                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|titlebarDrawsBottomDividerWhenTransparent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarDrawsBottomDividerWhenTransparent) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setTitlebarDrawsBottomDividerWhenTransparent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarDrawsBottomDividerWhenTransparent:) ((:CHAR)
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|titlebarHandlesDoubleClickWhenTransparent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarHandlesDoubleClickWhenTransparent) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setTitlebarHandlesDoubleClickWhenTransparent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarHandlesDoubleClickWhenTransparent:) ((:CHAR)
                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|addTabbedWindow:ordered:| (thing _ ordered)
  (let ((message-lambda 
         (make-message-lambda @(addTabbedWindow:ordered:) ((:POINTER
                                                            :LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) ordered)))

(defun NS::|canBeVisibleOnAllSpaces| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBeVisibleOnAllSpaces) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setCanBeVisibleOnAllSpaces:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanBeVisibleOnAllSpaces:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|standardWindowTitleButtonsAlphaValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(standardWindowTitleButtonsAlphaValue) (NIL
                                                                       :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setStandardWindowTitleButtonsAlphaValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStandardWindowTitleButtonsAlphaValue:) ((:DOUBLE)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|titlebarHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarHeight) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setTitlebarHeight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarHeight:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|standardWindowButtonGroupOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(standardWindowButtonGroupOffset) (NIL
                                                                  (:STRUCT
                                                                   NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setStandardWindowButtonGroupOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStandardWindowButtonGroupOffset:) (((:STRUCT
                                                                        NS::|CGSize|))
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|hasColorSensitiveUI| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasColorSensitiveUI) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setHasColorSensitiveUI:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasColorSensitiveUI:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|windowRefWithCompositedAttribute:andFrameworkScaledAttribute:| (thing _ and-framework-scaled-attribute)
  (let ((message-lambda 
         (make-message-lambda @(windowRefWithCompositedAttribute:andFrameworkScaledAttribute:) ((:CHAR
                                                                                                 :CHAR)
                                                                                                (:POINTER
                                                                                                 :VOID))))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) (if and-framework-scaled-attribute 1 0))))

(defun NS::|initWithWindowRef:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithWindowRef:) (((:POINTER :VOID))
                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|dockTitleIsGuess| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(dockTitleIsGuess) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|showDeminiaturizedWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(showDeminiaturizedWindow) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setShadowStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowStyle:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|restoreWindowOnDockDeath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restoreWindowOnDockDeath) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|restoreWindowOnDockReincarnation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restoreWindowOnDockReincarnation) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|updateInDock| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateInDock) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setTimeMachineDelegate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTimeMachineDelegate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|hostsLayersInWindowServer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hostsLayersInWindowServer) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|canHostLayersInWindowServer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canHostLayersInWindowServer) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setCanHostLayersInWindowServer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanHostLayersInWindowServer:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|accessibilitySubtitleUIElementAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySubtitleUIElementAttribute) (NIL
                                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityAddDeferredNotification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAddDeferredNotification:) ((:POINTER)
                                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySetPositionAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetPositionAttribute:) ((:POINTER)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityMainAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMainAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsMainAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMainAttributeSettable) (NIL
                                                                       :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySetMainAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetMainAttribute:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityMinimizedAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinimizedAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsMinimizedAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMinimizedAttributeSettable) (NIL
                                                                            :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySetMinimizedAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetMinimizedAttribute:) ((:POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityCloseButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCloseButtonAttribute) (NIL
                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsCloseButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsCloseButtonAttributeSettable) (NIL
                                                                              :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityZoomButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityZoomButtonAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsZoomButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsZoomButtonAttributeSettable) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityMinimizeButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinimizeButtonAttribute) (NIL
                                                                       :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsMinimizeButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMinimizeButtonAttributeSettable) (NIL
                                                                                 :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityToolbarButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityToolbarButtonAttribute) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsToolbarButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsToolbarButtonAttributeSettable) (NIL
                                                                                :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityFullScreenButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFullScreenButtonAttribute) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsFullScreenButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFullScreenButtonAttributeSettable) (NIL
                                                                                   :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityFullScreenAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFullScreenAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsFullScreenAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFullScreenAttributeSettable) (NIL
                                                                             :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilitySetFullScreenAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetFullScreenAttribute:) ((:POINTER)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilityProxyAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityProxyAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsProxyAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsProxyAttributeSettable) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityIsGrowAreaAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsGrowAreaAttributeSettable) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityDefaultButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDefaultButtonAttribute) (NIL
                                                                      :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsDefaultButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsDefaultButtonAttributeSettable) (NIL
                                                                                :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityCancelButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCancelButtonAttribute) (NIL
                                                                     :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsCancelButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsCancelButtonAttributeSettable) (NIL
                                                                               :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityDocumentAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDocumentAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsDocumentAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsDocumentAttributeSettable) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityModalAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityModalAttribute) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|accessibilityIsModalAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsModalAttributeSettable) (NIL
                                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|accessibilityIsSectionsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSectionsAttributeSettable) (NIL
                                                                           :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|hasCloseBox| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasCloseBox) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isMiniaturizable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMiniaturizable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isModalPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isModalPanel) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isZoomable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isZoomable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|orderedIndex| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orderedIndex) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setIsMiniaturized:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsMiniaturized:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setIsVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setIsZoomed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsZoomed:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setOrderedIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOrderedIndex:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|boundsAsQDRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(boundsAsQDRect) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setBoundsAsQDRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBoundsAsQDRect:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|view:acceptsFirstMouseEvent:initialKeyWindow:| (thing _ accepts-first-mouse-event initial-key-window)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(view:acceptsFirstMouseEvent:initialKeyWindow:) ((:POINTER
                                                                                 :POINTER
                                                                                 :POINTER)
                                                                                :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id accepts-first-mouse-event) (objc-object-id initial-key-window)))) nil t))


(defun NS::|visualizeConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(visualizeConstraints:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|accessibilitySendDeferredNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySendDeferredNotifications) (NIL
                                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setRemoteUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRemoteUIElement:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|liveResizeEdges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(liveResizeEdges) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|anchorItemForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(anchorItemForOrientation:) ((:LONG-LONG)
                                                            :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAnchorItem:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setAnchorItem:forOrientation:) ((:POINTER
                                                                 :LONG-LONG)
                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) for-orientation)))





(defun NS::|set| (thing)
  (let ((message-lambda 
         (make-message-lambda @(set) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun NS::|CGColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CGColor) (NIL
                                          (:POINTER (:STRUCT NS::|CGColor|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setStroke| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setStroke) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|cyanComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cyanComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|magentaComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(magentaComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|yellowComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(yellowComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|blackComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(blackComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|alphaComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alphaComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|colorWithAlphaComponent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorWithAlphaComponent:) ((:DOUBLE) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|colorUsingColorSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorUsingColorSpace:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|redComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(redComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|greenComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(greenComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|blueComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(blueComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|colorUsingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorUsingType:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|numberOfComponents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(numberOfComponents) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|getComponents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(getComponents:) (((:POINTER :DOUBLE)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))





(defun NS::|colorUsingColorSpaceName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorUsingColorSpaceName:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|initWithPasteboardPropertyList:ofType:| (thing _ of-type)
  (let ((message-lambda 
         (make-message-lambda @(initWithPasteboardPropertyList:ofType:) ((:POINTER
                                                                          :POINTER)
                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id of-type))))

(defun NS::|getRed:green:blue:alpha:| (thing _ green blue alpha)
  (let ((message-lambda 
         (make-message-lambda @(getRed:green:blue:alpha:) (((:POINTER :DOUBLE)
                                                            (:POINTER :DOUBLE)
                                                            (:POINTER :DOUBLE)
                                                            (:POINTER :DOUBLE))
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id green) (objc-object-id blue) (objc-object-id alpha))))

(defun NS::|colorSpaceName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorSpaceName) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|blendedColorWithFraction:ofColor:| (thing _ of-color)
  (let ((message-lambda 
         (make-message-lambda @(blendedColorWithFraction:ofColor:) ((:DOUBLE
                                                                     :POINTER)
                                                                    :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id of-color))))

(defun NS::|getWhite:alpha:| (thing _ alpha)
  (let ((message-lambda 
         (make-message-lambda @(getWhite:alpha:) (((:POINTER :DOUBLE)
                                                   (:POINTER :DOUBLE))
                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id alpha))))

(defun NS::|getCyan:magenta:yellow:black:alpha:| (thing _ magenta yellow black alpha)
  (let ((message-lambda 
         (make-message-lambda @(getCyan:magenta:yellow:black:alpha:) (((:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE))
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id magenta) (objc-object-id yellow) (objc-object-id black) (objc-object-id alpha))))

(defun NS::|setFill| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setFill) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|getHue:saturation:brightness:alpha:| (thing _ saturation brightness alpha)
  (let ((message-lambda 
         (make-message-lambda @(getHue:saturation:brightness:alpha:) (((:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE)
                                                                       (:POINTER
                                                                        :DOUBLE))
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id saturation) (objc-object-id brightness) (objc-object-id alpha))))

(defun NS::|patternImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(patternImage) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|whiteComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(whiteComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|colorUsingColorSpaceName:device:| (thing _ device)
  (let ((message-lambda 
         (make-message-lambda @(colorUsingColorSpaceName:device:) ((:POINTER
                                                                    :POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id device))))

(defun NS::|writableTypesForPasteboard:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(writableTypesForPasteboard:) ((:POINTER)
                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|pasteboardPropertyListForType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteboardPropertyListForType:) ((:POINTER)
                                                                 :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isUniform| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isUniform) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|writeToPasteboard:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(writeToPasteboard:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|drawSwatchInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawSwatchInRect:) (((:STRUCT NS::|CGRect|))
                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|catalogNameComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(catalogNameComponent) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|colorNameComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorNameComponent) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|localizedCatalogNameComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedCatalogNameComponent) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|localizedColorNameComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedColorNameComponent) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|hueComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hueComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|saturationComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(saturationComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|brightnessComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(brightnessComponent) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|highlightWithLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(highlightWithLevel:) ((:DOUBLE) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|shadowWithLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(shadowWithLevel:) ((:DOUBLE) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|colorWithSystemEffect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorWithSystemEffect:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|accessibilityName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityName) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|scriptingColorDescriptor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scriptingColorDescriptor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))







(defun NS::|allKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allKeys) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|initWithName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithName:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|writeToURL:error:| (thing _ error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeToURL:error:) ((:POINTER
                                                     (:POINTER :POINTER))
                                                    :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id error)))) nil t))


(defun NS::|colorWithKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorWithKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|initWithName:fromFile:| (thing _ from-file)
  (let ((message-lambda 
         (make-message-lambda @(initWithName:fromFile:) ((:POINTER :POINTER)
                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id from-file))))

(defun NS::|insertColor:key:atIndex:| (thing _ key at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertColor:key:atIndex:) ((:POINTER :POINTER
                                                            :UNSIGNED-LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id key) at-index)))

(defun NS::|removeFile| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeFile) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setColor:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setColor:forKey:) ((:POINTER :POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun NS::|removeColorWithKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeColorWithKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|writeToFile:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeToFile:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))


































(defun NS::|attributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributes) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|CGContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CGContext) (NIL
                                            (:POINTER
                                             (:STRUCT NS::|CGContext|)))))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun NS::|saveGraphicsState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(saveGraphicsState) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|restoreGraphicsState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restoreGraphicsState) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|patternPhase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(patternPhase) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setPatternPhase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPatternPhase:) (((:STRUCT NS::|CGPoint|))
                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|flushGraphics| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flushGraphics) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setShouldAntialias:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShouldAntialias:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|shouldAntialias| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldAntialias) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))





(defun NS::|colorRenderingIntent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorRenderingIntent) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setColorRenderingIntent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setColorRenderingIntent:) ((:LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|CIContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CIContext) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isDrawingToScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDrawingToScreen) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|CALayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CALayer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|focusStack| (thing)
  (let ((message-lambda 
         (make-message-lambda @(focusStack) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFocusStack:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFocusStack:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|colorFactory| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorFactory) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))








(defun NS::|setLineWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineWidth:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|lineWidth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineWidth) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|elementCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(elementCount) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|elementAtIndex:associatedPoints:| (thing _ associated-points)
  (let ((message-lambda 
         (make-message-lambda @(elementAtIndex:associatedPoints:) ((:LONG-LONG
                                                                    (:POINTER
                                                                     (:STRUCT
                                                                      NS::|CGPoint|)))
                                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id associated-points))))

(defun NS::|transformUsingAffineTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(transformUsingAffineTransform:) ((:POINTER)
                                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|appendBezierPathWithRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithRect:) (((:STRUCT
                                                              NS::|CGRect|))
                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|appendBezierPathWithOvalInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithOvalInRect:) (((:STRUCT
                                                                    NS::|CGRect|))
                                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|appendBezierPathWithRoundedRect:xRadius:yRadius:| (thing _ x-radius y-radius)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithRoundedRect:xRadius:yRadius:) (((:STRUCT
                                                                                     NS::|CGRect|)
                                                                                    :DOUBLE
                                                                                    :DOUBLE)
                                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ x-radius y-radius)))

(defun NS::|appendBezierPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPath:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|windingRule| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windingRule) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setWindingRule:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindingRule:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|lineCapStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineCapStyle) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setLineCapStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineCapStyle:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|lineJoinStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineJoinStyle) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setLineJoinStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineJoinStyle:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|miterLimit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(miterLimit) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setMiterLimit:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMiterLimit:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|flatness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flatness) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFlatness:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFlatness:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setLineDash:count:phase:| (thing _ count phase)
  (let ((message-lambda 
         (make-message-lambda @(setLineDash:count:phase:) (((:POINTER :DOUBLE)
                                                            :LONG-LONG :DOUBLE)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) count phase)))

(defun NS::|currentPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentPoint) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|addClip| (thing)
  (let ((message-lambda 
         (make-message-lambda @(addClip) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|lineToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lineToPoint:) (((:STRUCT NS::|CGPoint|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|moveToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToPoint:) (((:STRUCT NS::|CGPoint|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|closePath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(closePath) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|subdivideBezierWithFlatness:startPoint:controlPoint1:controlPoint2:endPoint:| (thing _ start-point control-point1 control-point2 end-point)
  (let ((message-lambda 
         (make-message-lambda @(subdivideBezierWithFlatness:startPoint:controlPoint1:controlPoint2:endPoint:) ((:DOUBLE
                                                                                                                (:STRUCT
                                                                                                                 NS::|CGPoint|)
                                                                                                                (:STRUCT
                                                                                                                 NS::|CGPoint|)
                                                                                                                (:STRUCT
                                                                                                                 NS::|CGPoint|)
                                                                                                                (:STRUCT
                                                                                                                 NS::|CGPoint|))
                                                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ start-point control-point1 control-point2 end-point)))

(defun NS::|flattenIntoPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(flattenIntoPath:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|curveToPoint:controlPoint1:controlPoint2:| (thing _ control-point1 control-point2)
  (let ((message-lambda 
         (make-message-lambda @(curveToPoint:controlPoint1:controlPoint2:) (((:STRUCT
                                                                              NS::|CGPoint|)
                                                                             (:STRUCT
                                                                              NS::|CGPoint|)
                                                                             (:STRUCT
                                                                              NS::|CGPoint|))
                                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ control-point1 control-point2)))

(defun NS::|controlPointBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(controlPointBounds) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:| (thing _ radius start-angle end-angle)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:) (((:STRUCT
                                                                                                  NS::|CGPoint|)
                                                                                                 :DOUBLE
                                                                                                 :DOUBLE
                                                                                                 :DOUBLE)
                                                                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ radius start-angle end-angle)))

(defun NS::|appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:| (thing _ radius start-angle end-angle clockwise)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:) (((:STRUCT
                                                                                                            NS::|CGPoint|)
                                                                                                           :DOUBLE
                                                                                                           :DOUBLE
                                                                                                           :DOUBLE
                                                                                                           :CHAR)
                                                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ radius start-angle end-angle (if clockwise 1 0))))

(defun NS::|appendBezierPathWithNativeGlyphs:advances:count:inFont:| (thing _ advances count in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithNativeGlyphs:advances:count:inFont:) (((:POINTER
                                                                                            :UNSIGNED-SHORT)
                                                                                           (:POINTER
                                                                                            (:STRUCT
                                                                                             NS::|CGSize|))
                                                                                           :UNSIGNED-LONG-LONG
                                                                                           :POINTER)
                                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id advances) count (objc-object-id in-font))))

(defun NS::|removeAllPoints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeAllPoints) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|relativeMoveToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(relativeMoveToPoint:) (((:STRUCT
                                                         NS::|CGPoint|))
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|relativeLineToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(relativeLineToPoint:) (((:STRUCT
                                                         NS::|CGPoint|))
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|relativeCurveToPoint:controlPoint1:controlPoint2:| (thing _ control-point1 control-point2)
  (let ((message-lambda 
         (make-message-lambda @(relativeCurveToPoint:controlPoint1:controlPoint2:) (((:STRUCT
                                                                                      NS::|CGPoint|)
                                                                                     (:STRUCT
                                                                                      NS::|CGPoint|)
                                                                                     (:STRUCT
                                                                                      NS::|CGPoint|))
                                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ control-point1 control-point2)))

(defun NS::|getLineDash:count:phase:| (thing _ count phase)
  (let ((message-lambda 
         (make-message-lambda @(getLineDash:count:phase:) (((:POINTER :DOUBLE)
                                                            (:POINTER
                                                             :LONG-LONG)
                                                            (:POINTER :DOUBLE))
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id count) (objc-object-id phase))))

(defun NS::|CGPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CGPath) (NIL (:POINTER (:STRUCT NS::|CGPath|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|stroke| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stroke) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|fill| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fill) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setClip| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setClip) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|bezierPathByFlatteningPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bezierPathByFlatteningPath) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|bezierPathByReversingPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bezierPathByReversingPath) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|elementAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(elementAtIndex:) ((:LONG-LONG)
                                                  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAssociatedPoints:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(setAssociatedPoints:atIndex:) (((:POINTER
                                                                 (:STRUCT
                                                                  NS::|CGPoint|))
                                                                :LONG-LONG)
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun NS::|appendBezierPathWithPoints:count:| (thing _ count)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithPoints:count:) (((:POINTER
                                                                      (:STRUCT
                                                                       NS::|CGPoint|))
                                                                     :LONG-LONG)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) count)))

(defun NS::|appendBezierPathWithArcFromPoint:toPoint:radius:| (thing _ to-point radius)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithArcFromPoint:toPoint:radius:) (((:STRUCT
                                                                                     NS::|CGPoint|)
                                                                                    (:STRUCT
                                                                                     NS::|CGPoint|)
                                                                                    :DOUBLE)
                                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ to-point radius)))

(defun NS::|appendBezierPathWithCGGlyph:inFont:| (thing _ in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithCGGlyph:inFont:) ((:UNSIGNED-SHORT
                                                                       :POINTER)
                                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-font))))

(defun NS::|appendBezierPathWithCGGlyphs:count:inFont:| (thing _ count in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithCGGlyphs:count:inFont:) (((:POINTER
                                                                               :UNSIGNED-SHORT)
                                                                              :LONG-LONG
                                                                              :POINTER)
                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) count (objc-object-id in-font))))

(defun NS::|containsPoint:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(containsPoint:) (((:STRUCT NS::|CGPoint|))
                                                 :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun NS::|cachesBezierPath| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(cachesBezierPath) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setCachesBezierPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCachesBezierPath:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|appendBezierPathWithGlyph:inFont:| (thing _ in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithGlyph:inFont:) ((:UNSIGNED-INT
                                                                     :POINTER)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-font))))

(defun NS::|appendBezierPathWithGlyphs:count:inFont:| (thing _ count in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithGlyphs:count:inFont:) (((:POINTER
                                                                             :UNSIGNED-INT)
                                                                            :LONG-LONG
                                                                            :POINTER)
                                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) count (objc-object-id in-font))))

(defun NS::|appendBezierPathWithPackedGlyphs:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithPackedGlyphs:) ((:STRING)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|isAfterDate:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAfterDate:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|isBeforeDate:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isBeforeDate:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|bs_dateByAddingDays:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_dateByAddingDays:) ((:LONG-LONG) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|daysSince1970| (thing)
  (let ((message-lambda 
         (make-message-lambda @(daysSince1970) (NIL :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun NS::|dateWithCalendarFormat:timeZone:| (thing _ time-zone)
  (let ((message-lambda 
         (make-message-lambda @(dateWithCalendarFormat:timeZone:) ((:POINTER
                                                                    :POINTER)
                                                                   :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id time-zone))))

(defun NS::|descriptionWithCalendarFormat:timeZone:locale:| (thing _ time-zone locale)
  (let ((message-lambda 
         (make-message-lambda @(descriptionWithCalendarFormat:timeZone:locale:) ((:POINTER
                                                                                  :POINTER
                                                                                  :POINTER)
                                                                                 :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id time-zone) (objc-object-id locale))))

(defun NS::|timeIntervalSince1970WithBucket:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSince1970WithBucket:) ((:UNSIGNED-INT)
                                                                   :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|bucketToRoundingFactor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bucketToRoundingFactor:) ((:UNSIGNED-INT)
                                                          :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))






(defun NS::|timeIntervalSince1970| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSince1970) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun NS::|timeIntervalSinceReferenceDate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSinceReferenceDate) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|initWithTimeIntervalSinceReferenceDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithTimeIntervalSinceReferenceDate:) ((:DOUBLE)
                                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|isEqualToDate:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqualToDate:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|initWithString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithString:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|dateByAddingTimeInterval:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dateByAddingTimeInterval:) ((:DOUBLE) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|earlierDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(earlierDate:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|laterDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(laterDate:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|timeIntervalSinceDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSinceDate:) ((:POINTER) :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|timeIntervalSinceNow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSinceNow) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|initWithTimeIntervalSinceNow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithTimeIntervalSinceNow:) ((:DOUBLE)
                                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|initWithTimeIntervalSince1970:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithTimeIntervalSince1970:) ((:DOUBLE)
                                                                 :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|initWithTimeInterval:sinceDate:| (thing _ since-date)
  (let ((message-lambda 
         (make-message-lambda @(initWithTimeInterval:sinceDate:) ((:DOUBLE
                                                                   :POINTER)
                                                                  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id since-date))))

(defun NS::|initWithDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithDate:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|addTimeInterval:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addTimeInterval:) ((:DOUBLE) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|isInToday| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInToday) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isInTomorrow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInTomorrow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isInYesterday| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInYesterday) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isInSameDayAsDate:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInSameDayAsDate:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|isEqual:toUnitGranularity:| (thing _ to-unit-granularity)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqual:toUnitGranularity:) ((:POINTER
                                                              :UNSIGNED-LONG-LONG)
                                                             :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) to-unit-granularity))) nil t))

(defun NS::|compare:toUnitGranularity:| (thing _ to-unit-granularity)
  (let ((message-lambda 
         (make-message-lambda @(compare:toUnitGranularity:) ((:POINTER
                                                              :UNSIGNED-LONG-LONG)
                                                             :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) to-unit-granularity)))

(defun NS::|NS_managesOpenGLDrawable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_managesOpenGLDrawable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|NS_wantsToPrefetchTiles| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_wantsToPrefetchTiles) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|NS_showPrefetchedContentsIfNecessaryInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_showPrefetchedContentsIfNecessaryInRect:) (((:STRUCT
                                                                                NS::|CGRect|))
                                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|NS_setPresentationRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_setPresentationRect:) (((:STRUCT
                                                            NS::|CGRect|))
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|NS_suggestedContentsScale| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_suggestedContentsScale) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|NS_suggestedContentsScaleDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_suggestedContentsScaleDidChange) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|NS_invalidatePreparedContentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_invalidatePreparedContentRect) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|NS_prepareContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_prepareContentRect:) (((:STRUCT
                                                           NS::|CGRect|))
                                                         :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|NS_convertTriangle:toLayer:| (thing _ to-layer)
  (let ((message-lambda 
         (make-message-lambda @(NS_convertTriangle:toLayer:) (((:ARRAY :CHAR
                                                                48)
                                                               :POINTER)
                                                              (:ARRAY :CHAR 48))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-layer))))

(defun NS::|NS_defersTransformInvalidation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_defersTransformInvalidation) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|NS_setDefersTransformInvalidation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_setDefersTransformInvalidation:) ((:CHAR)
                                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|NS_contextDefaultContentsScaleDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_contextDefaultContentsScaleDidChange) (NIL
                                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|visualTabPicker_hitTestIgnoringTransformLayers:inRootLayer:| (thing _ in-root-layer)
  (let ((message-lambda 
         (make-message-lambda @(visualTabPicker_hitTestIgnoringTransformLayers:inRootLayer:) (((:STRUCT
                                                                                                NS::|CGPoint|)
                                                                                               :POINTER)
                                                                                              :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-root-layer))))

(defun NS::|nearestAncestorIgnoringTransformLayers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nearestAncestorIgnoringTransformLayers) (NIL
                                                                         :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|NS_prefetchContentsInRect:scrollVelocity:| (thing _ scroll-velocity)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_prefetchContentsInRect:scrollVelocity:) (((:STRUCT
                                                                              NS::|CGRect|)
                                                                             (:STRUCT
                                                                              NS::|CGPoint|))
                                                                            :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ scroll-velocity))) nil t))

(defun NS::|NS_isDebugOverlay| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_isDebugOverlay) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|NS_setIsScrolling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_setIsScrolling:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|NS_setPreparedContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_setPreparedContentRect:) (((:STRUCT
                                                               NS::|CGRect|))
                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|NS_renderedRectInRect:scrollVelocity:| (thing _ scroll-velocity)
  (let ((message-lambda 
         (make-message-lambda @(NS_renderedRectInRect:scrollVelocity:) (((:STRUCT
                                                                          NS::|CGRect|)
                                                                         (:STRUCT
                                                                          NS::|CGPoint|))
                                                                        (:STRUCT
                                                                         NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ scroll-velocity)))

(defun NS::|NS_activeVisibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_activeVisibleRect) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|NS_visibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_visibleRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|NS_makeContentsLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_makeContentsLayer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|NS_hasPrefetchedContentsForRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_hasPrefetchedContentsForRect:) (((:STRUCT
                                                                     NS::|CGRect|))
                                                                   :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun NS::|NS_hasPrefetchedContents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_hasPrefetchedContents) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|NS_hasPartialPrefetchedContentsForRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_hasPartialPrefetchedContentsForRect:) (((:STRUCT
                                                                            NS::|CGRect|))
                                                                          :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun NS::|NS_backingLayerContentsClass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_backingLayerContentsClass) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|NS_dropPrefetchedContentsIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_dropPrefetchedContentsIfNecessary) (NIL
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|PKG_updateLayerKey| (thing)
  (let ((message-lambda 
         (make-message-lambda @(PKG_updateLayerKey) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|PKG_materialLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(PKG_materialLayer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|PKG_setUpdateLayerKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(PKG_setUpdateLayerKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|PKG_setMaterialLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(PKG_setMaterialLayer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun NS::|size| (thing)
  (let ((message-lambda 
         (make-message-lambda @(size) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))














(defun NS::|hidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hidden) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))





(defun NS::|style| (thing)
  (let ((message-lambda 
         (make-message-lambda @(style) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|contents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contents) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|borderColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(borderColor) (NIL
                                              (:POINTER
                                               (:STRUCT NS::|CGColor|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|transform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(transform) (NIL (:STRUCT NS::|CATransform3D|))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|position| (thing)
  (let ((message-lambda 
         (make-message-lambda @(position) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun NS::|duration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(duration) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPosition:) (((:STRUCT NS::|CGPoint|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStyle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setDuration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDuration:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|shadowOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowOffset) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|shadowColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowColor) (NIL
                                              (:POINTER
                                               (:STRUCT NS::|CGColor|)))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|addSublayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addSublayer:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun NS::|removeFromSuperlayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeFromSuperlayer) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))












(defun NS::|modelLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(modelLayer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|insertSublayer:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertSublayer:atIndex:) ((:POINTER
                                                           :UNSIGNED-INT)
                                                          :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun NS::|setFilters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFilters:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setContentsGravity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsGravity:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContents:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|insertSublayer:below:| (thing _ below)
  (let ((message-lambda 
         (make-message-lambda @(insertSublayer:below:) ((:POINTER :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id below))))

(defun NS::|setSpeed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSpeed:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAutoreverses:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoreverses:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setRepeatCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepeatCount:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|addAnimation:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(addAnimation:forKey:) ((:POINTER :POINTER)
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun NS::|setBorderColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBorderColor:) (((:POINTER
                                                    (:STRUCT NS::|CGColor|)))
                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setContentsScale:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsScale:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|setOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOpacity:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAnchorPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAnchorPoint:) (((:STRUCT NS::|CGPoint|))
                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))



(defun NS::|repeatDuration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(repeatDuration) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|repeatCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(repeatCount) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|beginTime| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginTime) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|speed| (thing)
  (let ((message-lambda 
         (make-message-lambda @(speed) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|autoreverses| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoreverses) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun NS::|superlayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(superlayer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setMasksToBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMasksToBounds:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun NS::|anchorPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(anchorPoint) (NIL (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setBorderWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBorderWidth:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|mask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mask) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMask:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|sublayers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sublayers) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|opaque| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(opaque) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun NS::|borderWidth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(borderWidth) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))






(defun NS::|setFillMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFillMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|contentsCenter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsCenter) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentsScale| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsScale) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|sublayerTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sublayerTransform) (NIL
                                                    (:STRUCT
                                                     NS::|CATransform3D|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setSublayerTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSublayerTransform:) (((:STRUCT
                                                          NS::|CATransform3D|))
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setBeginTime:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBeginTime:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|insertSublayer:above:| (thing _ above)
  (let ((message-lambda 
         (make-message-lambda @(insertSublayer:above:) ((:POINTER :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id above))))

(defun NS::|convertRect:toLayer:| (thing _ to-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertRect:toLayer:) (((:STRUCT NS::|CGRect|)
                                                        :POINTER)
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-layer))))

(defun NS::|setShadowOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowOpacity:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setShadowRadius:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowRadius:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setShadowColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowColor:) (((:POINTER
                                                    (:STRUCT NS::|CGColor|)))
                                                  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|setMinificationFilter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinificationFilter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setMinificationFilterBias:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinificationFilterBias:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|presentationLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(presentationLayer) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setShadowOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowOffset:) (((:STRUCT NS::|CGSize|))
                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|shadowOpacity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowOpacity) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|shadowRadius| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowRadius) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|removeAnimationForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeAnimationForKey:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setTimeOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTimeOffset:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setSublayers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSublayers:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun NS::|setCornerCurve:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerCurve:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setMaskedCorners:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaskedCorners:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setZPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setZPosition:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|setContentsCenter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsCenter:) (((:STRUCT NS::|CGRect|))
                                                     :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setGeometryFlipped:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGeometryFlipped:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setHitTestsAsOpaque:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHitTestsAsOpaque:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|contentsAreFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsAreFlipped) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|actionForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(actionForKey:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTransform:) (((:STRUCT NS::|CATransform3D|))
                                                :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setContentsTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsTransform:) (((:STRUCT
                                                          NS::|CGAffineTransform|))
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setContentsScaling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsScaling:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setContentsMultiplyColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsMultiplyColor:) (((:POINTER
                                                              (:STRUCT
                                                               NS::|CGColor|)))
                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setContentsSwizzle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsSwizzle:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|layoutSublayers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutSublayers) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setLayoutManager:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayoutManager:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setNeedsLayoutOnGeometryChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsLayoutOnGeometryChange:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setNeedsLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsLayout) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|layerDidBecomeVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(layerDidBecomeVisible:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|initWithLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithLayer:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|drawInContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawInContext:) (((:POINTER
                                                   (:STRUCT NS::|CGContext|)))
                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|setContentsRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsRect:) (((:STRUCT NS::|CGRect|))
                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAffineTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAffineTransform:) (((:STRUCT
                                                        NS::|CGAffineTransform|))
                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|zPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(zPosition) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun NS::|reloadValueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(reloadValueForKeyPath:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setWantsExtendedDynamicRangeContent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsExtendedDynamicRangeContent:) ((:CHAR)
                                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|convertPoint:fromLayer:| (thing _ from-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertPoint:fromLayer:) (((:STRUCT
                                                            NS::|CGPoint|)
                                                           :POINTER)
                                                          (:STRUCT
                                                           NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-layer))))

(defun NS::|filters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(filters) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|opacity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(opacity) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|replaceSublayer:with:| (thing _ with)
  (let ((message-lambda 
         (make-message-lambda @(replaceSublayer:with:) ((:POINTER :POINTER)
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with))))

(defun NS::|setEdgeAntialiasingMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEdgeAntialiasingMask:) ((:UNSIGNED-INT)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAllowsGroupBlending:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsGroupBlending:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setShouldRasterize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShouldRasterize:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setRasterizationScale:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRasterizationScale:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setMagnificationFilter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMagnificationFilter:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setActions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setActions:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setAllowsGroupOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsGroupOpacity:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|animationKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animationKeys) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|hasBeenCommitted| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasBeenCommitted) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|wantsExtendedDynamicRangeContent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsExtendedDynamicRangeContent) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setContentsFormat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsFormat:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|layoutBelowIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutBelowIfNeeded) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setDrawsAsynchronously:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawsAsynchronously:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|clearHasBeenCommitted| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clearHasBeenCommitted) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|renderInContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(renderInContext:) (((:POINTER
                                                     (:STRUCT
                                                      NS::|CGContext|)))
                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setShadowPathIsBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowPathIsBounds:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|removeAllAnimations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeAllAnimations) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|convertRect:fromLayer:| (thing _ from-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertRect:fromLayer:) (((:STRUCT
                                                           NS::|CGRect|)
                                                          :POINTER)
                                                         (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-layer))))

(defun NS::|masksToBounds| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(masksToBounds) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|invalidateContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateContents) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setLiteralContentsCenter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLiteralContentsCenter:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setFloating:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFloating:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|isFloating| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFloating) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setAllowsHitTesting:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsHitTesting:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|floating| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(floating) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setHitTestsContentsAlphaChannel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHitTestsContentsAlphaChannel:) ((:CHAR)
                                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setAllowsEdgeAntialiasing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsEdgeAntialiasing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|fillMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fillMode) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setCornerContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerContents:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setCornerContentsCenter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerContentsCenter:) (((:STRUCT
                                                             NS::|CGRect|))
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setContentsOpaque:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsOpaque:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setNeedsDisplayOnBoundsChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplayOnBoundsChange:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|convertPoint:toLayer:| (thing _ to-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertPoint:toLayer:) (((:STRUCT
                                                          NS::|CGPoint|)
                                                         :POINTER)
                                                        (:STRUCT NS::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-layer))))

(defun NS::|clearsContext| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(clearsContext) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setClearsContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setClearsContext:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|drawsAsynchronously| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsAsynchronously) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|minificationFilter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minificationFilter) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|magnificationFilter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(magnificationFilter) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|layerBeingDrawn| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layerBeingDrawn) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setContentsChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setContentsChanged) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|meshTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(meshTransform) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|affineTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(affineTransform) (NIL
                                                  (:STRUCT
                                                   NS::|CGAffineTransform|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setMeshTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMeshTransform:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|isFrozen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFrozen) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|CAMLParser:setValue:forKey:| (thing _ set-value for-key)
  (let ((message-lambda 
         (make-message-lambda @(CAMLParser:setValue:forKey:) ((:POINTER
                                                               :POINTER
                                                               :POINTER)
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id set-value) (objc-object-id for-key))))



(defun NS::|implicitAnimationForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(implicitAnimationForKeyPath:) ((:POINTER)
                                                               :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|attributesForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(attributesForKeyPath:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun NS::|preferredFrameSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredFrameSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|sublayerEnumerator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sublayerEnumerator) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|layoutIsActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(layoutIsActive) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|shouldArchiveValueForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldArchiveValueForKey:) ((:POINTER) :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun NS::|setUnsafeUnretainedDelegate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUnsafeUnretainedDelegate:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|acceleratesDrawing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceleratesDrawing) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setSizeRequisition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSizeRequisition:) (((:STRUCT NS::|CGSize|))
                                                      :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|insertState:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertState:atIndex:) ((:POINTER :UNSIGNED-INT)
                                                       :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun NS::|addState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addState:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|removeState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeState:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|stateWithName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stateWithName:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|dependentStatesOfState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dependentStatesOfState:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|stateTransitionFrom:to:| (thing _ to)
  (let ((message-lambda 
         (make-message-lambda @(stateTransitionFrom:to:) ((:POINTER :POINTER)
                                                          :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to))))

(defun NS::|timeOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeOffset) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|minificationFilterBias| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minificationFilterBias) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentsRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsRect) (NIL (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setRepeatDuration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepeatDuration:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|anchorPointZ| (thing)
  (let ((message-lambda 
         (make-message-lambda @(anchorPointZ) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|needsLayoutOnGeometryChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsLayoutOnGeometryChange) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|layerDidChangeDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(layerDidChangeDisplay:) ((:UNSIGNED-INT) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|contentsScaling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsScaling) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|needsDisplayOnBoundsChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsDisplayOnBoundsChange) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|separatedOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(separatedOptions) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|resizeSublayersWithOldSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(resizeSublayersWithOldSize:) (((:STRUCT
                                                                NS::|CGSize|))
                                                              :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|ancestorSharedWithLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(ancestorSharedWithLayer:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|ignoresHitTesting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ignoresHitTesting) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|allowsHitTesting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsHitTesting) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|isDoubleSided| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDoubleSided) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|sortsSublayers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(sortsSublayers) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|edgeAntialiasingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(edgeAntialiasingMask) (NIL :UNSIGNED-INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentsTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsTransform) (NIL
                                                    (:STRUCT
                                                     NS::|CGAffineTransform|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentsMultiplyColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsMultiplyColor) (NIL
                                                        (:POINTER
                                                         (:STRUCT
                                                          NS::|CGColor|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentsSwizzle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsSwizzle) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|isSeparated| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSeparated) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|drawsMipmapLevels| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsMipmapLevels) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|sizeRequisition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sizeRequisition) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|resizeWithOldSuperlayerSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(resizeWithOldSuperlayerSize:) (((:STRUCT
                                                                 NS::|CGSize|))
                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|isGeometryFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGeometryFlipped) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|convertTime:fromLayer:| (thing _ from-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertTime:fromLayer:) ((:DOUBLE :POINTER)
                                                         :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-layer))))

(defun NS::|convertTime:toLayer:| (thing _ to-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertTime:toLayer:) ((:DOUBLE :POINTER)
                                                       :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-layer))))

(defun NS::|rasterizationScale| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rasterizationScale) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|securityMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(securityMode) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setSecurityMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSecurityMode:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|contentsFormat| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsFormat) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentsGravity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsGravity) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|contentsGravityEnum| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsGravityEnum) (NIL :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|unsafeUnretainedDelegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsafeUnretainedDelegate) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|maskedCorners| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maskedCorners) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|cornerCurve| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cornerCurve) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|continuousCorners| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(continuousCorners) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setContinuousCorners:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContinuousCorners:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setAnchorPointZ:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAnchorPointZ:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|cornerContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cornerContents) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setDoubleSided:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDoubleSided:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|cornerContentsCenter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cornerContentsCenter) (NIL
                                                       (:STRUCT NS::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|cornerContentsMasksEdges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(cornerContentsMasksEdges) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setCornerContentsMasksEdges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerContentsMasksEdges:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|contentsContainsSubtitles| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsContainsSubtitles) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setContentsContainsSubtitles:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsContainsSubtitles:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|gain| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gain) (NIL :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setGain:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGain:) ((:FLOAT) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|actions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(actions) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setShadowPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowPath:) (((:POINTER
                                                   (:STRUCT NS::|CGPath|)))
                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|shadowPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowPath) (NIL
                                             (:POINTER (:STRUCT NS::|CGPath|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|shouldRasterize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRasterize) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|rasterizationPrefersDisplayCompositing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rasterizationPrefersDisplayCompositing) (NIL
                                                                         :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setRasterizationPrefersDisplayCompositing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRasterizationPrefersDisplayCompositing:) ((:CHAR)
                                                                             :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|allowsEdgeAntialiasing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsEdgeAntialiasing) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|allowsGroupOpacity| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsGroupOpacity) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|invertsContentsAreFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(invertsContentsAreFlipped) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setInvertsContentsAreFlipped:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInvertsContentsAreFlipped:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|doubleSided| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(doubleSided) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|backgroundColorPhase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backgroundColorPhase) (NIL
                                                       (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|separatedState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(separatedState) (NIL :UNSIGNED-CHAR)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|preloadsCache| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(preloadsCache) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|createsCompositingGroup| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(createsCompositingGroup) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|allowsDisplayCompositing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsDisplayCompositing) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|toneMapToStandardDynamicRange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(toneMapToStandardDynamicRange) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|allowsGroupBlending| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsGroupBlending) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|hitTestsContentsAlphaChannel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hitTestsContentsAlphaChannel) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|hitTestsAsOpaque| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hitTestsAsOpaque) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|literalContentsCenter| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(literalContentsCenter) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|inheritsTiming| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(inheritsTiming) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|treatRec709AsSRGB| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(treatRec709AsSRGB) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|invertsShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(invertsShadow) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|shadowPathIsBounds| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shadowPathIsBounds) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setSeparatedState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSeparatedState:) ((:UNSIGNED-CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|regionBeingDrawn| (thing)
  (let ((message-lambda 
         (make-message-lambda @(regionBeingDrawn) (NIL (:POINTER :VOID))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|layerAtTime:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(layerAtTime:) ((:DOUBLE) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|addPresentationModifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addPresentationModifier:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|removePresentationModifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removePresentationModifier:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|presentationModifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(presentationModifiers) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setPresentationModifiers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPresentationModifiers:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setSeparated:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSeparated:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setFrozen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrozen:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setSortsSublayers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSortsSublayers:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|flipsHorizontalAxis| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(flipsHorizontalAxis) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setFlipsHorizontalAxis:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFlipsHorizontalAxis:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setInvertsShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInvertsShadow:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|contentsAlignsToPixels| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsAlignsToPixels) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setContentsAlignsToPixels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsAlignsToPixels:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|contentsDither| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsDither) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setContentsDither:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsDither:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|contentsOpaque| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsOpaque) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setInheritsTiming:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInheritsTiming:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setPreloadsCache:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreloadsCache:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setCreatesCompositingGroup:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCreatesCompositingGroup:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setAllowsDisplayCompositing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsDisplayCompositing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setToneMapToStandardDynamicRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setToneMapToStandardDynamicRange:) ((:CHAR)
                                                                    :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setBackgroundColorPhase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackgroundColorPhase:) (((:STRUCT
                                                             NS::|CGSize|))
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|setAcceleratesDrawing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAcceleratesDrawing:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setSeparatedOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSeparatedOptions:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|setTreatRec709AsSRGB:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTreatRec709AsSRGB:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|motionBlurAmount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(motionBlurAmount) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setMotionBlurAmount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMotionBlurAmount:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|getRendererInfo:size:| (thing _ size)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getRendererInfo:size:) (((:POINTER
                                                          (:STRUCT
                                                           NS::|_CARenderRendererInfo|))
                                                         :UNSIGNED-LONG-LONG)
                                                        :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) size))) nil t))

(defun NS::|optimizationOpportunities:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(optimizationOpportunities:) ((:CHAR) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))




(defun NS::|device| (thing)
  (let ((message-lambda 
         (make-message-lambda @(device) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setProtectionOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setProtectionOptions:) ((:UNSIGNED-LONG-LONG)
                                                        :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|protectionOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(protectionOptions) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setPixelFormat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPixelFormat:) ((:UNSIGNED-LONG-LONG) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|pixelFormat| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pixelFormat) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|framebufferOnly| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(framebufferOnly) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun NS::|drawableSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawableSize) (NIL (:STRUCT NS::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setDrawableSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawableSize:) (((:STRUCT NS::|CGSize|))
                                                   :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|isDrawableAvailable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDrawableAvailable) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|nextDrawable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nextDrawable) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun NS::|presentsWithTransaction| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(presentsWithTransaction) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|maximumDrawableCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumDrawableCount) (NIL :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setPresentsWithTransaction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPresentsWithTransaction:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|discardContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(discardContents) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setMaximumDrawableCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaximumDrawableCount:) ((:UNSIGNED-LONG-LONG)
                                                           :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|lowLatency| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(lowLatency) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setLowLatency:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLowLatency:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setDrawableTimeoutSeconds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawableTimeoutSeconds:) ((:DOUBLE) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun NS::|drawableTimeoutSeconds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawableTimeoutSeconds) (NIL :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFramebufferOnly:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFramebufferOnly:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|allowsNextDrawableTimeout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsNextDrawableTimeout) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|fenceEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(fenceEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|serverSyncEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(serverSyncEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|displaySyncEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(displaySyncEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|colorspace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorspace) (NIL
                                             (:POINTER
                                              (:STRUCT NS::|CGColorSpace|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|nonDefaultColorspace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nonDefaultColorspace) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|setColorspace:nonDefault:| (thing _ non-default)
  (let ((message-lambda 
         (make-message-lambda @(setColorspace:nonDefault:) (((:POINTER
                                                              (:STRUCT
                                                               NS::|CGColorSpace|))
                                                             :CHAR)
                                                            :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if non-default 1 0))))

(defun NS::|setNonDefaultColorspace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNonDefaultColorspace:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setDevice:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDevice:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|preferredDevice| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredDevice) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setColorspace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setColorspace:) (((:POINTER
                                                   (:STRUCT
                                                    NS::|CGColorSpace|)))
                                                 :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|EDRMetadata| (thing)
  (let ((message-lambda 
         (make-message-lambda @(EDRMetadata) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setEDRMetadata:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEDRMetadata:) ((:POINTER) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|newDrawable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(newDrawable) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setDisplaySyncEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDisplaySyncEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setAllowsNextDrawableTimeout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsNextDrawableTimeout:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|displayCompositingInternalStatus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayCompositingInternalStatus) (NIL
                                                                   :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|removeBackBuffers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeBackBuffers) (NIL :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|setFenceEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFenceEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setServerSyncEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setServerSyncEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|setMuxLockEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMuxLockEnabled:) ((:CHAR) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun NS::|muxLockEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(muxLockEnabled) (NIL :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun NS::|detachNewThreadSelector:toTarget:withObject:| (thing _ to-target with-object)
  (let ((message-lambda 
         (make-message-lambda @(detachNewThreadSelector:toTarget:withObject:) ((:POINTER
                                                                                :POINTER
                                                                                :POINTER)
                                                                               :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-target) (objc-object-id with-object))))

(defun NS::|sharedApplication| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedApplication) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|standardUserDefaults| (thing)
  (let ((message-lambda 
         (make-message-lambda @(standardUserDefaults) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|defaultCenter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(defaultCenter) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|currentApplication| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentApplication) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|strokeRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(strokeRect:) (((:STRUCT NS::|CGRect|)) :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun NS::|graphicsContextWithWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(graphicsContextWithWindow:) ((:POINTER)
                                                             :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|whiteColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(whiteColor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|clearColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clearColor) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|distantPast| (thing)
  (let ((message-lambda 
         (make-message-lambda @(distantPast) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|distantFuture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(distantFuture) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun NS::|otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:| (thing _ location modifier-flags timestamp window-number context subtype data1 data2)
  (let ((message-lambda 
         (make-message-lambda @(otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:) ((:UNSIGNED-LONG-LONG
                                                                                                                                 (:STRUCT
                                                                                                                                  NS::|CGPoint|)
                                                                                                                                 :UNSIGNED-LONG-LONG
                                                                                                                                 :DOUBLE
                                                                                                                                 :LONG-LONG
                                                                                                                                 :POINTER
                                                                                                                                 :SHORT
                                                                                                                                 :LONG-LONG
                                                                                                                                 :LONG-LONG)
                                                                                                                                :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ location modifier-flags timestamp window-number (objc-object-id context) subtype data1 data2)))

(defun NS::|new| (thing)
  (let ((message-lambda 
         (make-message-lambda @(new) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun NS::|bundleWithPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bundleWithPath:) ((:POINTER) :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun NS::|screens| (thing)
  (let ((message-lambda 
         (make-message-lambda @(screens) (NIL :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))
(export (list 
          'ns::|screens|
          'ns::|bundleWithPath:|
          'ns::|new|
          'ns::|otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:|
          'ns::|distantFuture|
          'ns::|distantPast|
          'ns::|clearColor|
          'ns::|whiteColor|
          'ns::|graphicsContextWithWindow:|
          'ns::|strokeRect:|
          'ns::|currentApplication|
          'ns::|defaultCenter|
          'ns::|standardUserDefaults|
          'ns::|sharedApplication|
          'ns::|detachNewThreadSelector:toTarget:withObject:|
          'ns::|muxLockEnabled|
          'ns::|setMuxLockEnabled:|
          'ns::|setServerSyncEnabled:|
          'ns::|setFenceEnabled:|
          'ns::|removeBackBuffers|
          'ns::|displayCompositingInternalStatus|
          'ns::|setAllowsNextDrawableTimeout:|
          'ns::|setDisplaySyncEnabled:|
          'ns::|newDrawable|
          'ns::|setEDRMetadata:|
          'ns::|EDRMetadata|
          'ns::|setColorspace:|
          'ns::|preferredDevice|
          'ns::|setDevice:|
          'ns::|setNonDefaultColorspace:|
          'ns::|setColorspace:nonDefault:|
          'ns::|nonDefaultColorspace|
          'ns::|colorspace|
          'ns::|displaySyncEnabled|
          'ns::|serverSyncEnabled|
          'ns::|fenceEnabled|
          'ns::|allowsNextDrawableTimeout|
          'ns::|setFramebufferOnly:|
          'ns::|drawableTimeoutSeconds|
          'ns::|setDrawableTimeoutSeconds:|
          'ns::|setLowLatency:|
          'ns::|lowLatency|
          'ns::|setMaximumDrawableCount:|
          'ns::|discardContents|
          'ns::|setPresentsWithTransaction:|
          'ns::|maximumDrawableCount|
          'ns::|presentsWithTransaction|
          'ns::|nextDrawable|
          'ns::|isDrawableAvailable|
          'ns::|setDrawableSize:|
          'ns::|drawableSize|
          'ns::|framebufferOnly|
          'ns::|pixelFormat|
          'ns::|setPixelFormat:|
          'ns::|protectionOptions|
          'ns::|setProtectionOptions:|
          'ns::|device|
          'ns::|optimizationOpportunities:|
          'ns::|getRendererInfo:size:|
          'ns::|setMotionBlurAmount:|
          'ns::|motionBlurAmount|
          'ns::|setTreatRec709AsSRGB:|
          'ns::|setSeparatedOptions:|
          'ns::|setAcceleratesDrawing:|
          'ns::|setBackgroundColorPhase:|
          'ns::|setToneMapToStandardDynamicRange:|
          'ns::|setAllowsDisplayCompositing:|
          'ns::|setCreatesCompositingGroup:|
          'ns::|setPreloadsCache:|
          'ns::|setInheritsTiming:|
          'ns::|contentsOpaque|
          'ns::|setContentsDither:|
          'ns::|contentsDither|
          'ns::|setContentsAlignsToPixels:|
          'ns::|contentsAlignsToPixels|
          'ns::|setInvertsShadow:|
          'ns::|setFlipsHorizontalAxis:|
          'ns::|flipsHorizontalAxis|
          'ns::|setSortsSublayers:|
          'ns::|setFrozen:|
          'ns::|setSeparated:|
          'ns::|setPresentationModifiers:|
          'ns::|presentationModifiers|
          'ns::|removePresentationModifier:|
          'ns::|addPresentationModifier:|
          'ns::|layerAtTime:|
          'ns::|regionBeingDrawn|
          'ns::|setSeparatedState:|
          'ns::|shadowPathIsBounds|
          'ns::|invertsShadow|
          'ns::|treatRec709AsSRGB|
          'ns::|inheritsTiming|
          'ns::|literalContentsCenter|
          'ns::|hitTestsAsOpaque|
          'ns::|hitTestsContentsAlphaChannel|
          'ns::|allowsGroupBlending|
          'ns::|toneMapToStandardDynamicRange|
          'ns::|allowsDisplayCompositing|
          'ns::|createsCompositingGroup|
          'ns::|preloadsCache|
          'ns::|separatedState|
          'ns::|backgroundColorPhase|
          'ns::|doubleSided|
          'ns::|setInvertsContentsAreFlipped:|
          'ns::|invertsContentsAreFlipped|
          'ns::|allowsGroupOpacity|
          'ns::|allowsEdgeAntialiasing|
          'ns::|setRasterizationPrefersDisplayCompositing:|
          'ns::|rasterizationPrefersDisplayCompositing|
          'ns::|shouldRasterize|
          'ns::|shadowPath|
          'ns::|setShadowPath:|
          'ns::|actions|
          'ns::|setGain:|
          'ns::|gain|
          'ns::|setContentsContainsSubtitles:|
          'ns::|contentsContainsSubtitles|
          'ns::|setCornerContentsMasksEdges:|
          'ns::|cornerContentsMasksEdges|
          'ns::|cornerContentsCenter|
          'ns::|setDoubleSided:|
          'ns::|cornerContents|
          'ns::|setAnchorPointZ:|
          'ns::|setContinuousCorners:|
          'ns::|continuousCorners|
          'ns::|cornerCurve|
          'ns::|maskedCorners|
          'ns::|unsafeUnretainedDelegate|
          'ns::|contentsGravityEnum|
          'ns::|contentsGravity|
          'ns::|contentsFormat|
          'ns::|setSecurityMode:|
          'ns::|securityMode|
          'ns::|rasterizationScale|
          'ns::|convertTime:toLayer:|
          'ns::|convertTime:fromLayer:|
          'ns::|isGeometryFlipped|
          'ns::|resizeWithOldSuperlayerSize:|
          'ns::|sizeRequisition|
          'ns::|drawsMipmapLevels|
          'ns::|isSeparated|
          'ns::|contentsSwizzle|
          'ns::|contentsMultiplyColor|
          'ns::|contentsTransform|
          'ns::|edgeAntialiasingMask|
          'ns::|sortsSublayers|
          'ns::|isDoubleSided|
          'ns::|allowsHitTesting|
          'ns::|ignoresHitTesting|
          'ns::|ancestorSharedWithLayer:|
          'ns::|resizeSublayersWithOldSize:|
          'ns::|separatedOptions|
          'ns::|needsDisplayOnBoundsChange|
          'ns::|contentsScaling|
          'ns::|layerDidChangeDisplay:|
          'ns::|needsLayoutOnGeometryChange|
          'ns::|anchorPointZ|
          'ns::|setRepeatDuration:|
          'ns::|contentsRect|
          'ns::|minificationFilterBias|
          'ns::|timeOffset|
          'ns::|stateTransitionFrom:to:|
          'ns::|dependentStatesOfState:|
          'ns::|stateWithName:|
          'ns::|removeState:|
          'ns::|addState:|
          'ns::|insertState:atIndex:|
          'ns::|setSizeRequisition:|
          'ns::|acceleratesDrawing|
          'ns::|setUnsafeUnretainedDelegate:|
          'ns::|shouldArchiveValueForKey:|
          'ns::|layoutIsActive|
          'ns::|sublayerEnumerator|
          'ns::|preferredFrameSize|
          'ns::|attributesForKeyPath:|
          'ns::|implicitAnimationForKeyPath:|
          'ns::|CAMLParser:setValue:forKey:|
          'ns::|isFrozen|
          'ns::|setMeshTransform:|
          'ns::|affineTransform|
          'ns::|meshTransform|
          'ns::|setContentsChanged|
          'ns::|layerBeingDrawn|
          'ns::|magnificationFilter|
          'ns::|minificationFilter|
          'ns::|drawsAsynchronously|
          'ns::|setClearsContext:|
          'ns::|clearsContext|
          'ns::|convertPoint:toLayer:|
          'ns::|setNeedsDisplayOnBoundsChange:|
          'ns::|setContentsOpaque:|
          'ns::|setCornerContentsCenter:|
          'ns::|setCornerContents:|
          'ns::|fillMode|
          'ns::|setAllowsEdgeAntialiasing:|
          'ns::|setHitTestsContentsAlphaChannel:|
          'ns::|floating|
          'ns::|setAllowsHitTesting:|
          'ns::|isFloating|
          'ns::|setFloating:|
          'ns::|setLiteralContentsCenter:|
          'ns::|invalidateContents|
          'ns::|masksToBounds|
          'ns::|convertRect:fromLayer:|
          'ns::|removeAllAnimations|
          'ns::|setShadowPathIsBounds:|
          'ns::|renderInContext:|
          'ns::|clearHasBeenCommitted|
          'ns::|setDrawsAsynchronously:|
          'ns::|layoutBelowIfNeeded|
          'ns::|setContentsFormat:|
          'ns::|wantsExtendedDynamicRangeContent|
          'ns::|hasBeenCommitted|
          'ns::|animationKeys|
          'ns::|setAllowsGroupOpacity:|
          'ns::|setActions:|
          'ns::|setMagnificationFilter:|
          'ns::|setRasterizationScale:|
          'ns::|setShouldRasterize:|
          'ns::|setAllowsGroupBlending:|
          'ns::|setEdgeAntialiasingMask:|
          'ns::|replaceSublayer:with:|
          'ns::|opacity|
          'ns::|filters|
          'ns::|convertPoint:fromLayer:|
          'ns::|setWantsExtendedDynamicRangeContent:|
          'ns::|reloadValueForKeyPath:|
          'ns::|zPosition|
          'ns::|setAffineTransform:|
          'ns::|setContentsRect:|
          'ns::|drawInContext:|
          'ns::|initWithLayer:|
          'ns::|layerDidBecomeVisible:|
          'ns::|setNeedsLayout|
          'ns::|setNeedsLayoutOnGeometryChange:|
          'ns::|setLayoutManager:|
          'ns::|layoutSublayers|
          'ns::|setContentsSwizzle:|
          'ns::|setContentsMultiplyColor:|
          'ns::|setContentsScaling:|
          'ns::|setContentsTransform:|
          'ns::|setTransform:|
          'ns::|actionForKey:|
          'ns::|contentsAreFlipped|
          'ns::|setHitTestsAsOpaque:|
          'ns::|setGeometryFlipped:|
          'ns::|setContentsCenter:|
          'ns::|setZPosition:|
          'ns::|setMaskedCorners:|
          'ns::|setCornerCurve:|
          'ns::|setSublayers:|
          'ns::|setTimeOffset:|
          'ns::|removeAnimationForKey:|
          'ns::|shadowRadius|
          'ns::|shadowOpacity|
          'ns::|setShadowOffset:|
          'ns::|presentationLayer|
          'ns::|setMinificationFilterBias:|
          'ns::|setMinificationFilter:|
          'ns::|setShadowColor:|
          'ns::|setShadowRadius:|
          'ns::|setShadowOpacity:|
          'ns::|convertRect:toLayer:|
          'ns::|insertSublayer:above:|
          'ns::|setBeginTime:|
          'ns::|setSublayerTransform:|
          'ns::|sublayerTransform|
          'ns::|contentsScale|
          'ns::|contentsCenter|
          'ns::|setFillMode:|
          'ns::|borderWidth|
          'ns::|opaque|
          'ns::|sublayers|
          'ns::|setMask:|
          'ns::|mask|
          'ns::|setBorderWidth:|
          'ns::|anchorPoint|
          'ns::|setMasksToBounds:|
          'ns::|superlayer|
          'ns::|autoreverses|
          'ns::|speed|
          'ns::|beginTime|
          'ns::|repeatCount|
          'ns::|repeatDuration|
          'ns::|setAnchorPoint:|
          'ns::|setOpacity:|
          'ns::|setContentsScale:|
          'ns::|setBorderColor:|
          'ns::|addAnimation:forKey:|
          'ns::|setRepeatCount:|
          'ns::|setAutoreverses:|
          'ns::|setSpeed:|
          'ns::|insertSublayer:below:|
          'ns::|setContents:|
          'ns::|setContentsGravity:|
          'ns::|setFilters:|
          'ns::|insertSublayer:atIndex:|
          'ns::|modelLayer|
          'ns::|removeFromSuperlayer|
          'ns::|addSublayer:|
          'ns::|shadowColor|
          'ns::|shadowOffset|
          'ns::|setDuration:|
          'ns::|setStyle:|
          'ns::|setPosition:|
          'ns::|duration|
          'ns::|position|
          'ns::|transform|
          'ns::|borderColor|
          'ns::|contents|
          'ns::|style|
          'ns::|hidden|
          'ns::|size|
          'ns::|PKG_setMaterialLayer:|
          'ns::|PKG_setUpdateLayerKey:|
          'ns::|PKG_materialLayer|
          'ns::|PKG_updateLayerKey|
          'ns::|NS_dropPrefetchedContentsIfNecessary|
          'ns::|NS_backingLayerContentsClass|
          'ns::|NS_hasPartialPrefetchedContentsForRect:|
          'ns::|NS_hasPrefetchedContents|
          'ns::|NS_hasPrefetchedContentsForRect:|
          'ns::|NS_makeContentsLayer|
          'ns::|NS_visibleRect|
          'ns::|NS_activeVisibleRect|
          'ns::|NS_renderedRectInRect:scrollVelocity:|
          'ns::|NS_setPreparedContentRect:|
          'ns::|NS_setIsScrolling:|
          'ns::|NS_isDebugOverlay|
          'ns::|NS_prefetchContentsInRect:scrollVelocity:|
          'ns::|nearestAncestorIgnoringTransformLayers|
          'ns::|visualTabPicker_hitTestIgnoringTransformLayers:inRootLayer:|
          'ns::|NS_contextDefaultContentsScaleDidChange|
          'ns::|NS_setDefersTransformInvalidation:|
          'ns::|NS_defersTransformInvalidation|
          'ns::|NS_convertTriangle:toLayer:|
          'ns::|NS_prepareContentRect:|
          'ns::|NS_invalidatePreparedContentRect|
          'ns::|NS_suggestedContentsScaleDidChange|
          'ns::|NS_suggestedContentsScale|
          'ns::|NS_setPresentationRect:|
          'ns::|NS_showPrefetchedContentsIfNecessaryInRect:|
          'ns::|NS_wantsToPrefetchTiles|
          'ns::|NS_managesOpenGLDrawable|
          'ns::|compare:toUnitGranularity:|
          'ns::|isEqual:toUnitGranularity:|
          'ns::|isInSameDayAsDate:|
          'ns::|isInYesterday|
          'ns::|isInTomorrow|
          'ns::|isInToday|
          'ns::|addTimeInterval:|
          'ns::|initWithDate:|
          'ns::|initWithTimeInterval:sinceDate:|
          'ns::|initWithTimeIntervalSince1970:|
          'ns::|initWithTimeIntervalSinceNow:|
          'ns::|timeIntervalSinceNow|
          'ns::|timeIntervalSinceDate:|
          'ns::|laterDate:|
          'ns::|earlierDate:|
          'ns::|dateByAddingTimeInterval:|
          'ns::|initWithString:|
          'ns::|isEqualToDate:|
          'ns::|initWithTimeIntervalSinceReferenceDate:|
          'ns::|timeIntervalSinceReferenceDate|
          'ns::|timeIntervalSince1970|
          'ns::|bucketToRoundingFactor:|
          'ns::|timeIntervalSince1970WithBucket:|
          'ns::|descriptionWithCalendarFormat:timeZone:locale:|
          'ns::|dateWithCalendarFormat:timeZone:|
          'ns::|daysSince1970|
          'ns::|bs_dateByAddingDays:|
          'ns::|isBeforeDate:|
          'ns::|isAfterDate:|
          'ns::|appendBezierPathWithPackedGlyphs:|
          'ns::|appendBezierPathWithGlyphs:count:inFont:|
          'ns::|appendBezierPathWithGlyph:inFont:|
          'ns::|setCachesBezierPath:|
          'ns::|cachesBezierPath|
          'ns::|containsPoint:|
          'ns::|appendBezierPathWithCGGlyphs:count:inFont:|
          'ns::|appendBezierPathWithCGGlyph:inFont:|
          'ns::|appendBezierPathWithArcFromPoint:toPoint:radius:|
          'ns::|appendBezierPathWithPoints:count:|
          'ns::|setAssociatedPoints:atIndex:|
          'ns::|elementAtIndex:|
          'ns::|bezierPathByReversingPath|
          'ns::|bezierPathByFlatteningPath|
          'ns::|setClip|
          'ns::|fill|
          'ns::|stroke|
          'ns::|CGPath|
          'ns::|getLineDash:count:phase:|
          'ns::|relativeCurveToPoint:controlPoint1:controlPoint2:|
          'ns::|relativeLineToPoint:|
          'ns::|relativeMoveToPoint:|
          'ns::|removeAllPoints|
          'ns::|appendBezierPathWithNativeGlyphs:advances:count:inFont:|
          'ns::|appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:|
          'ns::|appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:|
          'ns::|controlPointBounds|
          'ns::|curveToPoint:controlPoint1:controlPoint2:|
          'ns::|flattenIntoPath:|
          'ns::|subdivideBezierWithFlatness:startPoint:controlPoint1:controlPoint2:endPoint:|
          'ns::|closePath|
          'ns::|moveToPoint:|
          'ns::|lineToPoint:|
          'ns::|addClip|
          'ns::|currentPoint|
          'ns::|setLineDash:count:phase:|
          'ns::|setFlatness:|
          'ns::|flatness|
          'ns::|setMiterLimit:|
          'ns::|miterLimit|
          'ns::|setLineJoinStyle:|
          'ns::|lineJoinStyle|
          'ns::|setLineCapStyle:|
          'ns::|lineCapStyle|
          'ns::|setWindingRule:|
          'ns::|windingRule|
          'ns::|appendBezierPath:|
          'ns::|appendBezierPathWithRoundedRect:xRadius:yRadius:|
          'ns::|appendBezierPathWithOvalInRect:|
          'ns::|appendBezierPathWithRect:|
          'ns::|transformUsingAffineTransform:|
          'ns::|elementAtIndex:associatedPoints:|
          'ns::|elementCount|
          'ns::|lineWidth|
          'ns::|setLineWidth:|
          'ns::|colorFactory|
          'ns::|setFocusStack:|
          'ns::|focusStack|
          'ns::|CALayer|
          'ns::|isDrawingToScreen|
          'ns::|CIContext|
          'ns::|setColorRenderingIntent:|
          'ns::|colorRenderingIntent|
          'ns::|shouldAntialias|
          'ns::|setShouldAntialias:|
          'ns::|flushGraphics|
          'ns::|setPatternPhase:|
          'ns::|patternPhase|
          'ns::|restoreGraphicsState|
          'ns::|saveGraphicsState|
          'ns::|CGContext|
          'ns::|attributes|
          'ns::|writeToFile:|
          'ns::|removeColorWithKey:|
          'ns::|setColor:forKey:|
          'ns::|removeFile|
          'ns::|insertColor:key:atIndex:|
          'ns::|initWithName:fromFile:|
          'ns::|colorWithKey:|
          'ns::|writeToURL:error:|
          'ns::|initWithName:|
          'ns::|allKeys|
          'ns::|scriptingColorDescriptor|
          'ns::|accessibilityName|
          'ns::|colorWithSystemEffect:|
          'ns::|shadowWithLevel:|
          'ns::|highlightWithLevel:|
          'ns::|brightnessComponent|
          'ns::|saturationComponent|
          'ns::|hueComponent|
          'ns::|localizedColorNameComponent|
          'ns::|localizedCatalogNameComponent|
          'ns::|colorNameComponent|
          'ns::|catalogNameComponent|
          'ns::|drawSwatchInRect:|
          'ns::|writeToPasteboard:|
          'ns::|isUniform|
          'ns::|pasteboardPropertyListForType:|
          'ns::|writableTypesForPasteboard:|
          'ns::|colorUsingColorSpaceName:device:|
          'ns::|whiteComponent|
          'ns::|patternImage|
          'ns::|getHue:saturation:brightness:alpha:|
          'ns::|setFill|
          'ns::|getCyan:magenta:yellow:black:alpha:|
          'ns::|getWhite:alpha:|
          'ns::|blendedColorWithFraction:ofColor:|
          'ns::|colorSpaceName|
          'ns::|getRed:green:blue:alpha:|
          'ns::|initWithPasteboardPropertyList:ofType:|
          'ns::|colorUsingColorSpaceName:|
          'ns::|getComponents:|
          'ns::|numberOfComponents|
          'ns::|colorUsingType:|
          'ns::|blueComponent|
          'ns::|greenComponent|
          'ns::|redComponent|
          'ns::|colorUsingColorSpace:|
          'ns::|colorWithAlphaComponent:|
          'ns::|alphaComponent|
          'ns::|blackComponent|
          'ns::|yellowComponent|
          'ns::|magentaComponent|
          'ns::|cyanComponent|
          'ns::|setStroke|
          'ns::|CGColor|
          'ns::|set|
          'ns::|setAnchorItem:forOrientation:|
          'ns::|anchorItemForOrientation:|
          'ns::|liveResizeEdges|
          'ns::|setRemoteUIElement:|
          'ns::|accessibilitySendDeferredNotifications|
          'ns::|visualizeConstraints:|
          'ns::|view:acceptsFirstMouseEvent:initialKeyWindow:|
          'ns::|setBoundsAsQDRect:|
          'ns::|boundsAsQDRect|
          'ns::|setOrderedIndex:|
          'ns::|setIsZoomed:|
          'ns::|setIsVisible:|
          'ns::|setIsMiniaturized:|
          'ns::|orderedIndex|
          'ns::|isZoomable|
          'ns::|isModalPanel|
          'ns::|isMiniaturizable|
          'ns::|hasCloseBox|
          'ns::|accessibilityIsSectionsAttributeSettable|
          'ns::|accessibilityIsModalAttributeSettable|
          'ns::|accessibilityModalAttribute|
          'ns::|accessibilityIsDocumentAttributeSettable|
          'ns::|accessibilityDocumentAttribute|
          'ns::|accessibilityIsCancelButtonAttributeSettable|
          'ns::|accessibilityCancelButtonAttribute|
          'ns::|accessibilityIsDefaultButtonAttributeSettable|
          'ns::|accessibilityDefaultButtonAttribute|
          'ns::|accessibilityIsGrowAreaAttributeSettable|
          'ns::|accessibilityIsProxyAttributeSettable|
          'ns::|accessibilityProxyAttribute|
          'ns::|accessibilitySetFullScreenAttribute:|
          'ns::|accessibilityIsFullScreenAttributeSettable|
          'ns::|accessibilityFullScreenAttribute|
          'ns::|accessibilityIsFullScreenButtonAttributeSettable|
          'ns::|accessibilityFullScreenButtonAttribute|
          'ns::|accessibilityIsToolbarButtonAttributeSettable|
          'ns::|accessibilityToolbarButtonAttribute|
          'ns::|accessibilityIsMinimizeButtonAttributeSettable|
          'ns::|accessibilityMinimizeButtonAttribute|
          'ns::|accessibilityIsZoomButtonAttributeSettable|
          'ns::|accessibilityZoomButtonAttribute|
          'ns::|accessibilityIsCloseButtonAttributeSettable|
          'ns::|accessibilityCloseButtonAttribute|
          'ns::|accessibilitySetMinimizedAttribute:|
          'ns::|accessibilityIsMinimizedAttributeSettable|
          'ns::|accessibilityMinimizedAttribute|
          'ns::|accessibilitySetMainAttribute:|
          'ns::|accessibilityIsMainAttributeSettable|
          'ns::|accessibilityMainAttribute|
          'ns::|accessibilitySetPositionAttribute:|
          'ns::|accessibilityAddDeferredNotification:|
          'ns::|accessibilitySubtitleUIElementAttribute|
          'ns::|setCanHostLayersInWindowServer:|
          'ns::|canHostLayersInWindowServer|
          'ns::|hostsLayersInWindowServer|
          'ns::|setTimeMachineDelegate:|
          'ns::|updateInDock|
          'ns::|restoreWindowOnDockReincarnation|
          'ns::|restoreWindowOnDockDeath|
          'ns::|setShadowStyle:|
          'ns::|showDeminiaturizedWindow|
          'ns::|dockTitleIsGuess|
          'ns::|initWithWindowRef:|
          'ns::|windowRefWithCompositedAttribute:andFrameworkScaledAttribute:|
          'ns::|setHasColorSensitiveUI:|
          'ns::|hasColorSensitiveUI|
          'ns::|setStandardWindowButtonGroupOffset:|
          'ns::|standardWindowButtonGroupOffset|
          'ns::|setTitlebarHeight:|
          'ns::|titlebarHeight|
          'ns::|setStandardWindowTitleButtonsAlphaValue:|
          'ns::|standardWindowTitleButtonsAlphaValue|
          'ns::|setCanBeVisibleOnAllSpaces:|
          'ns::|canBeVisibleOnAllSpaces|
          'ns::|addTabbedWindow:ordered:|
          'ns::|setTitlebarHandlesDoubleClickWhenTransparent:|
          'ns::|titlebarHandlesDoubleClickWhenTransparent|
          'ns::|setTitlebarDrawsBottomDividerWhenTransparent:|
          'ns::|titlebarDrawsBottomDividerWhenTransparent|
          'ns::|setTitlebarAppearsTransparentWhenFullscreen:|
          'ns::|titlebarAppearsTransparentWhenFullscreen|
          'ns::|titleMode|
          'ns::|setTitleMode:|
          'ns::|setTitleHidden:|
          'ns::|titleHidden|
          'ns::|appearanceSource|
          'ns::|titlebarTitleFont|
          'ns::|titlebarTitleRect|
          'ns::|maxTitlebarTitleRect|
          'ns::|setAllowsConcurrentViewDrawing:|
          'ns::|backingLocation|
          'ns::|preferredBackingLocation|
          'ns::|setPreferredBackingLocation:|
          'ns::|sharingType|
          'ns::|setSharingType:|
          'ns::|addChildWindow:ordered:shareKey:|
          'ns::|showsResizeIndicator|
          'ns::|setShowsResizeIndicator:|
          'ns::|autofillColor|
          'ns::|setAutofillColor:|
          'ns::|autofill|
          'ns::|setAutofill:|
          'ns::|setMaxFullScreenContentSize:|
          'ns::|setMinFullScreenContentSize:|
          'ns::|canMoveToCurrentSpaceOnScreen:|
          'ns::|invalidateShadow|
          'ns::|setFrameUsingName:force:|
          'ns::|discardCachedImage|
          'ns::|restoreCachedImage|
          'ns::|cacheImageInRect:|
          'ns::|isOneShot|
          'ns::|miniwindowImage|
          'ns::|setMiniwindowTitle:|
          'ns::|setMiniwindowImage:|
          'ns::|orderFrontRegardless|
          'ns::|orderBack:|
          'ns::|setDynamicDepthLimit:|
          'ns::|setShowsContentSeparator:forEdge:|
          'ns::|contentInsetColor|
          'ns::|contentSeparatorColor|
          'ns::|isZoomed|
          'ns::|isReleasedWhenClosed|
          'ns::|setMouseConfinementRect:|
          'ns::|setShowsLockButton:|
          'ns::|runToolbarConfigurationPalette:|
          'ns::|autorecalculatesKeyViewLoop|
          'ns::|setKeyView:|
          'ns::|useOptimizedDrawing:|
          'ns::|shadowOptionsForActiveAppearance:|
          'ns::|contentAspectRatio|
          'ns::|setContentAspectRatio:|
          'ns::|contentResizeIncrements|
          'ns::|setContentResizeIncrements:|
          'ns::|frameTopLeftPoint|
          'ns::|setTitlebarBlurFiltersDisabled:|
          'ns::|titlebarBlurFiltersDisabled|
          'ns::|insertTitlebarAccessoryViewController:atIndex:|
          'ns::|addDocumentIconButton|
          'ns::|setTitleWithRepresentedFilename:|
          'ns::|setContentTitlebarSeparatorStyle:|
          'ns::|contentTitlebarSeparatorStyle|
          'ns::|titlebarSeparatorStyle|
          'ns::|isPreferenceToolbarWindow|
          'ns::|rebuildLayoutFromScratch|
          'ns::|adjustLayoutForResolutionChangeToRetina:|
          'ns::|animationForKeyPath:|
          'ns::|editTitle:|
          'ns::|unregisterScrollViewSeparatorTrackingAdapter:|
          'ns::|registerScrollViewSeparatorTrackingAdapter:|
          'ns::|hasMainAppearance|
          'ns::|miniwindowTitle|
          'ns::|timeMachineDelegate|
          'ns::|cacheMiniwindowTitle:guess:|
          'ns::|isRestorable|
          'ns::|acquireMainAppearance|
          'ns::|resignMainAppearance|
          'ns::|defaultButtonCell|
          'ns::|unsnappedFrame|
          'ns::|setUnsnappedFrame:|
          'ns::|displaysWhenScreenProfileChanges|
          'ns::|mouseConfinementRect|
          'ns::|changeToolBarDisplayModeToDisplayMode:|
          'ns::|viewsNeedDisplay|
          'ns::|shadowParameters|
          'ns::|shadowStyle|
          'ns::|isFlushWindowDisabled|
          'ns::|allowsInteriorShadow|
          'ns::|lockButtonClicked:|
          'ns::|guessDockTitle:|
          'ns::|hasDynamicDepthLimit|
          'ns::|setAutorecalculatesContentBorderThickness:forEdge:|
          'ns::|setDisplaysWhenScreenProfileChanges:|
          'ns::|hasKeyAppearanceIncludingSheets:|
          'ns::|allowsConcurrentViewDrawing|
          'ns::|canStoreColor|
          'ns::|backingType|
          'ns::|changeToolbarDisplayMode:|
          'ns::|changeToolbarDisplayModeToNumber:|
          'ns::|setTitlebarSeparatorStyle:|
          'ns::|toggleUsingSmallToolbarIcons:|
          'ns::|windowSectionController|
          'ns::|resizeFlags|
          'ns::|setToolbarStyle:|
          'ns::|setExcludedFromWindowsMenu:|
          'ns::|cascadeTopLeftFromPoint:|
          'ns::|topLeftPoint|
          'ns::|snapshotFromRect:options:|
          'ns::|enableSnapshotRestoration|
          'ns::|disableSnapshotRestoration|
          'ns::|removeTitlebarAccessoryViewControllerAtIndex:|
          'ns::|titlebarAlphaValue|
          'ns::|titlebarBlendingMode|
          'ns::|setPrefersFullWidthTitlebarWhenAccessoriesVisible:|
          'ns::|addUnderTitlebarView:withAssociatedWithView:|
          'ns::|setBottomCornerRounded:|
          'ns::|toolbarStyle|
          'ns::|windowTitlebarLayoutDirection|
          'ns::|setContentBorderThickness:forEdge:|
          'ns::|contentMaxSize|
          'ns::|contentMinSize|
          'ns::|prefersFullWidthTitlebarWhenAccessoriesVisible|
          'ns::|singleWindowSharingActive|
          'ns::|showsFullScreenButton|
          'ns::|showsLockButton|
          'ns::|showsToolbarButton|
          'ns::|removeUnderTitlebarView:withAssociatedWithView:|
          'ns::|showsContentSeparatorForEdge:|
          'ns::|setInspectorBar:|
          'ns::|disableScreenUpdatesUntilFlush|
          'ns::|autorecalculatesContentBorderThicknessForEdge:|
          'ns::|setAcceptsMouseMovedEvents:|
          'ns::|bottomCornerRounded|
          'ns::|acceptsMouseMovedEvents|
          'ns::|setAllowsToolTipsWhenApplicationIsInactive:|
          'ns::|statusItem|
          'ns::|registerSplitViewItemSeparatorTrackingAdapter:|
          'ns::|unregisterSplitViewItemSeparatorTrackingAdapter:|
          'ns::|setShowsAutosaveButton:|
          'ns::|showsAutosaveButton|
          'ns::|sheetBehavior|
          'ns::|deepestScreen|
          'ns::|titlebarViewController|
          'ns::|setTitlebarAlphaValue:|
          'ns::|setAutorecalculatesKeyViewLoop:|
          'ns::|setContentMaxSize:|
          'ns::|setContentMinSize:|
          'ns::|setShowsToolbarButton:|
          'ns::|flushWindowIfNeeded|
          'ns::|initWithContentRect:styleMask:backing:defer:screen:|
          'ns::|allowsToolTipsWhenApplicationIsInactive|
          'ns::|setPreventsApplicationTerminationWhenModal:|
          'ns::|preventsApplicationTerminationWhenModal|
          'ns::|animationResizeTime:|
          'ns::|setPreservesContentDuringLiveResize:|
          'ns::|contentLayoutGuide|
          'ns::|miniaturize:|
          'ns::|setBackingType:|
          'ns::|addTitlebarAccessoryViewController:|
          'ns::|tabbedWindows|
          'ns::|zoom:|
          'ns::|becomesKeyOnlyIfNeeded|
          'ns::|updateConstraintsIfNeeded|
          'ns::|anchorAttributeForOrientation:|
          'ns::|graphicsContext|
          'ns::|representedFilename|
          'ns::|setRepresentedURL:|
          'ns::|frameRectForContentRect:|
          'ns::|setAppearanceSource:|
          'ns::|inspectorBar|
          'ns::|restorationClass|
          'ns::|childWindows|
          'ns::|isInKeyWindow|
          'ns::|resignKeyAppearance|
          'ns::|acquireKeyAppearance|
          'ns::|accessibilitySetSizeAttribute:|
          'ns::|performWindowDragWithEvent:|
          'ns::|titlebarAccessoryViewControllers|
          'ns::|performMiniaturize:|
          'ns::|performZoom:|
          'ns::|runToolbarCustomizationPalette:|
          'ns::|toggleToolbarShown:|
          'ns::|hideToolbar:|
          'ns::|showToolbar:|
          'ns::|setCanBecomeVisibleWithoutLogin:|
          'ns::|setCanHide:|
          'ns::|setOneShot:|
          'ns::|setParentWindow:|
          'ns::|openDrawers|
          'ns::|drawers|
          'ns::|wantsPeriodicDraggingUpdates|
          'ns::|handleCloseScriptCommand:|
          'ns::|handleSaveScriptCommand:|
          'ns::|contentLayoutRect|
          'ns::|setAllowsCursorRectsWhenInactive:|
          'ns::|GDBDumpCursorRects|
          'ns::|allowsCursorRectsWhenInactive|
          'ns::|isFloatingPanel|
          'ns::|setDocumentEdited:|
          'ns::|editTitleWithCompletionHandler:|
          'ns::|isDocumentEdited|
          'ns::|setRepresentedFilename:|
          'ns::|selectKeyViewFollowingView:|
          'ns::|selectKeyViewPrecedingView:|
          'ns::|sharingIndicator|
          'ns::|removeChildWindow:|
          'ns::|addChildWindow:ordered:|
          'ns::|hasShadow|
          'ns::|shadowOptions|
          'ns::|canBecomeVisibleWithoutLogin|
          'ns::|setTitleVisibility:|
          'ns::|fieldEditor:forObject:|
          'ns::|endEditingFor:|
          'ns::|convertPointToScreen:|
          'ns::|selectPreviousKeyView:|
          'ns::|selectNextKeyView:|
          'ns::|standardWindowButton:|
          'ns::|setFrameAutosaveName:|
          'ns::|setFrameUsingName:|
          'ns::|saveFrameUsingName:|
          'ns::|frameAutosaveName|
          'ns::|recalculateKeyViewLoop|
          'ns::|setFrame:display:animate:|
          'ns::|setRestorationClass:|
          'ns::|setToolbar:|
          'ns::|contentBorderThicknessForEdge:|
          'ns::|contentRectForFrameRect:|
          'ns::|keyViewSelectionDirection|
          'ns::|isMovableByWindowBackground|
          'ns::|invalidateCursorRectsForView:|
          'ns::|aspectRatio|
          'ns::|setAspectRatio:|
          'ns::|resizeIncrements|
          'ns::|dragRectForFrameRect:|
          'ns::|windowTitleController|
          'ns::|minFrameSizeForMinContentSize:styleMask:|
          'ns::|contentRectForFrameRect:styleMask:|
          'ns::|frameRectForContentRect:styleMask:|
          'ns::|contentViewController|
          'ns::|undo:|
          'ns::|redo:|
          'ns::|startRectForSheet:|
          'ns::|setAutodisplay:|
          'ns::|isAutodisplay|
          'ns::|resignMainWindow|
          'ns::|ignoresMouseEvents|
          'ns::|isMainWindow|
          'ns::|isExcludedFromWindowsMenu|
          'ns::|setResizeIncrements:|
          'ns::|setAppearanceParent:|
          'ns::|appearanceParent|
          'ns::|depthLimit|
          'ns::|setDepthLimit:|
          'ns::|cancelOperation:|
          'ns::|enableKeyEquivalentForDefaultButtonCell|
          'ns::|disableKeyEquivalentForDefaultButtonCell|
          'ns::|setViewsNeedDisplay:|
          'ns::|draggingEnded:|
          'ns::|enableFlushWindow|
          'ns::|disableFlushWindow|
          'ns::|makeFirstResponder:|
          'ns::|hasKeyAppearance|
          'ns::|accessibilityIsTitleUIElementAttributeSettable|
          'ns::|convertBaseToScreen:|
          'ns::|accessibilityTitleUIElementAttribute|
          'ns::|setTitlePosition:|
          'ns::|titlePosition|
          'ns::|stringWithSavedFrame|
          'ns::|setFrameFromString:|
          'ns::|accessibilityActivationPointAttribute|
          'ns::|setStyleMask:|
          'ns::|setHasShadow:|
          'ns::|maxFullScreenContentSize|
          'ns::|setContentViewController:|
          'ns::|setTitlebarAppearsTransparent:|
          'ns::|collectionBehavior|
          'ns::|toolbar|
          'ns::|representedURL|
          'ns::|constrainFrameRect:toScreen:|
          'ns::|firstResponder|
          'ns::|accessibilityIsChildOfApp|
          'ns::|setWindowController:|
          'ns::|toggleFullScreen:|
          'ns::|makeMainWindow|
          'ns::|sheets|
          'ns::|attachedSheet|
          'ns::|hidesOnDeactivate|
          'ns::|deminiaturize:|
          'ns::|setFrameTopLeftPoint:|
          'ns::|center|
          'ns::|makeKeyWindow|
          'ns::|canHide|
          'ns::|setAnchorAttribute:forOrientation:|
          'ns::|layoutIfNeeded|
          'ns::|initialFirstResponder|
          'ns::|setInitialFirstResponder:|
          'ns::|isSheet|
          'ns::|beginSheet:completionHandler:|
          'ns::|beginCriticalSheet:completionHandler:|
          'ns::|setAnimationBehavior:|
          'ns::|animationBehavior|
          'ns::|setDefaultButtonCell:|
          'ns::|setMovableByWindowBackground:|
          'ns::|setRestorable:|
          'ns::|mouseLocationOutsideOfEventStream|
          'ns::|graphicsPort|
          'ns::|canBecomeMainWindow|
          'ns::|canBecomeKeyWindow|
          'ns::|setIgnoresMouseEvents:|
          'ns::|setHidesOnDeactivate:|
          'ns::|setLevel:|
          'ns::|setCollectionBehavior:|
          'ns::|convertPointFromScreen:|
          'ns::|convertRectFromScreen:|
          'ns::|accessibilityIsSubroleAttributeSettable|
          'ns::|accessibilitySubroleAttribute|
          'ns::|flushWindow|
          'ns::|orderFront:|
          'ns::|initWithContentRect:styleMask:backing:defer:|
          'ns::|orderOut:|
          'ns::|orderWindow:relativeTo:|
          'ns::|setReleasedWhenClosed:|
          'ns::|set_beforeTabPickerResponder:|
          'ns::|windowDidBecomeTabbed|
          'ns::|orderOutTabbedWindowGroup:|
          'ns::|setTabOverviewVisible:|
          'ns::|tabGroup|
          'ns::|unpinTab:|
          'ns::|pinTab:|
          'ns::|performCloseTabbedWindowGroup:|
          'ns::|isTabbed|
          'ns::|performClose:|
          'ns::|performCloseOtherTabs:|
          'ns::|toggleTabOverview:|
          'ns::|toggleTabBar:|
          'ns::|mergeAllWindows:|
          'ns::|moveTabToNewWindow:|
          'ns::|selectPreviousTab:|
          'ns::|selectNextTab:|
          'ns::|isMiniaturized|
          'ns::|makeKeyAndOrderFront:|
          'ns::|isKeyWindow|
          'ns::|isResizable|
          'ns::|titlebarAppearsTransparent|
          'ns::|sheetParent|
          'ns::|styleMask|
          'ns::|tab|
          'ns::|setTabbingMode:|
          'ns::|tabbingMode|
          'ns::|setTabbingIdentifier:|
          'ns::|windowController|
          'ns::|tabbingIdentifier|
          'ns::|titleVisibility|
          'ns::|isTabOverviewVisible|
          'ns::|accessibilityWindowNumber|
          'ns::|windowRef|
          'ns::|remoteUIElement|
          'ns::|convertRectToScreen:|
          'ns::|accessibilityTopLevelUIElementAttributeValueHelper|
          'ns::|accessibilityWindowAttributeValueHelper|
          'ns::|accessibilityFocusRingBounds|
          'ns::|isOnActiveSpace|
          'ns::|setColorSpace:|
          'ns::|isVisible|
          'ns::|gestureRecognizer:shouldAttemptToRecognizeWithEvent:|
          'ns::|convertScreenToBase:|
          'ns::|minFullScreenContentSize|
          'ns::|setFrame:display:|
          'ns::|setSubtitle:|
          'ns::|subtitle|
          'ns::|document|
          'ns::|level|
          'ns::|hasTitleBar|
          'ns::|parentWindow|
          'ns::|update|
          'ns::|close|
          'ns::|orderFrontSharingServicePicker:|
          'ns::|previewPanel:transitionImageForPreviewItem:contentRect:|
          'ns::|previewPanel:sourceFrameOnScreenForPreviewItem:|
          'ns::|previewPanel:previewItemAtIndex:|
          'ns::|numberOfPreviewItemsInPreviewPanel:|
          'ns::|endPreviewPanelControl:|
          'ns::|beginPreviewPanelControl:|
          'ns::|acceptsPreviewPanelControl:|
          'ns::|quickLookPreviewableItemsInRanges:|
          'ns::|functionBar:makeItemForIdentifier:|
          'ns::|changeAttributesWithModifier:|
          'ns::|touchBarItemController|
          'ns::|immediateActionRecognizerDidCompleteAnimation:|
          'ns::|immediateActionRecognizerDidCancelAnimation:|
          'ns::|immediateActionRecognizerDidUpdateAnimation:|
          'ns::|immediateActionRecognizerWillBeginAnimation:|
          'ns::|immediateActionRecognizerWillPrepare:|
          'ns::|showDefinitionFromMenu:|
          'ns::|applyActionForRanges:block:|
          'ns::|invokeImmediateActionMenuItem:|
          'ns::|candidateListTouchBarItem:changedCandidateListVisibility:|
          'ns::|insertCandidateTextCheckingResult:|
          'ns::|insertCandidateString:replacementRange:fromTextCheckingResult:|
          'ns::|setEnabledTextCheckingTypes:|
          'ns::|toggleAutomaticTextCompletion:|
          'ns::|toggleAutomaticLanguageIdentification:|
          'ns::|toggleUsesAdaptiveColorMappingForDarkAppearance:|
          'ns::|usesColorsWithInvertedLightness|
          'ns::|setUsesColorsWithInvertedLightness:|
          'ns::|setUsesFindPanel:|
          'ns::|setAllowsImageEditing:|
          'ns::|allowsImageEditing|
          'ns::|isCoalescingUndo|
          'ns::|markedTextAttributes|
          'ns::|centersOnScroll|
          'ns::|setCentersOnScroll:|
          'ns::|setDisplaysLinkToolTips:|
          'ns::|setAutomaticLanguageIdentificationEnabled:|
          'ns::|isAutomaticLanguageIdentificationEnabled|
          'ns::|smartInsertAfterStringForString:replacingRange:|
          'ns::|smartInsertBeforeStringForString:replacingRange:|
          'ns::|resignKeyFocus|
          'ns::|acquireKeyFocus|
          'ns::|pendingCandidateUpdate|
          'ns::|performPendingTextChecking|
          'ns::|showFindIndicatorForRange:fade:|
          'ns::|updateTouchBarItemIdentifiers|
          'ns::|updateQuickLookPreviewPanel|
          'ns::|layoutManager:effectiveCUICatalogForTextEffect:|
          'ns::|revealContext:stopHighlightingItem:|
          'ns::|revealContext:startHighlightingItem:|
          'ns::|revealContext:drawRectsForItem:|
          'ns::|revealContext:shouldUseDefaultHighlightForItem:|
          'ns::|menuItemsForTextCheckingResult:range:contextual:event:|
          'ns::|highlightBoundingRectForCharacterRange:highlightStyle:|
          'ns::|attributedSubstringForMarkedRange|
          'ns::|hideHighlight|
          'ns::|highlightRectsForCharacterRange:highlightStyle:|
          'ns::|showHighlightWithCharacterRange:highlightStyle:|
          'ns::|switchBlinkTimersIfNecessaryWithSharedData:|
          'ns::|readSelectionFromPasteboard:type:|
          'ns::|rangesForUserParagraphAttributeChange|
          'ns::|smartInsertForString:replacingRange:beforeString:afterString:|
          'ns::|readablePasteboardTypes|
          'ns::|tokenizingCharacterSet|
          'ns::|yankAndSelect:|
          'ns::|insertCompletion:forPartialWordRange:movement:isFinal:|
          'ns::|insertRightToLeftSlash:|
          'ns::|completionsForPartialWordRange:indexOfSelectedItem:|
          'ns::|rangeForUserCompletion|
          'ns::|showFindIndicatorForRange:|
          'ns::|drawDragInsertionIndicatorWithRect:|
          'ns::|dragImageForSelectionWithEvent:origin:|
          'ns::|smartDeleteRangeForProposedRange:|
          'ns::|cleanUpAfterDragOperation|
          'ns::|dragOperationForDraggingInfo:type:|
          'ns::|setAcceptsGlyphInfo:|
          'ns::|setMarkedTextAttributes:|
          'ns::|setLinkTextAttributes:|
          'ns::|accessibilityIsTextInputMarkedRangeAttributeSettable|
          'ns::|accessibilityTextInputMarkedRangeAttribute|
          'ns::|accessibilitySharedTextElementForIndexAttributeForParameter:|
          'ns::|accessibilityIsSharedCharacterRangeAttributeSettable|
          'ns::|accessibilitySharedCharacterRangeAttribute|
          'ns::|accessibilityIsSharedTextUIElementsAttributeSettable|
          'ns::|accessibilitySharedTextUIElementsAttribute|
          'ns::|accessibilitySetSelectedTextRangesAttribute:|
          'ns::|accessibilityIsSelectedTextRangesAttributeSettable|
          'ns::|accessibilitySelectedTextRangesAttribute|
          'ns::|setUsesFindBar:|
          'ns::|setAllowsDocumentBackgroundColorChange:|
          'ns::|setUsesInspectorBar:|
          'ns::|set_inLayout:|
          'ns::|drawCharactersInRange:forContentView:|
          'ns::|rectsForCharacterRange:|
          'ns::|characterIndexForInsertionAtPoint:|
          'ns::|unlockDocument|
          'ns::|lockDocument|
          'ns::|mouseCancelled:|
          'ns::|locationForPositionInViewport:offset:|
          'ns::|viewportAnchor|
          'ns::|viewportBounds|
          'ns::|performValidatedReplacementInRange:withAttributedString:|
          'ns::|updateSpellingPanel|
          'ns::|shouldDrawInsertionPoint|
          'ns::|inspectorBarItemIdentifiers|
          'ns::|textContentStorage|
          'ns::|textContainerInsets|
          'ns::|setTextContainerInset:|
          'ns::|replaceTextContainer:|
          'ns::|swapWithMark:|
          'ns::|selectToMark:|
          'ns::|deleteToMark:|
          'ns::|setMark:|
          'ns::|yank:|
          'ns::|deleteToEndOfParagraph:|
          'ns::|deleteToBeginningOfParagraph:|
          'ns::|deleteToEndOfLine:|
          'ns::|deleteToBeginningOfLine:|
          'ns::|deleteWordBackward:|
          'ns::|deleteWordForward:|
          'ns::|deleteBackwardByDecomposingPreviousCharacter:|
          'ns::|deleteBackward:|
          'ns::|deleteForward:|
          'ns::|insertDoubleQuoteIgnoringSubstitution:|
          'ns::|insertSingleQuoteIgnoringSubstitution:|
          'ns::|insertTabIgnoringFieldEditor:|
          'ns::|selectWord:|
          'ns::|selectLine:|
          'ns::|selectParagraph:|
          'ns::|transpose:|
          'ns::|scrollLineDown:|
          'ns::|scrollLineUp:|
          'ns::|scrollPageDown:|
          'ns::|scrollPageUp:|
          'ns::|moveWordLeftAndModifySelection:|
          'ns::|moveWordRightAndModifySelection:|
          'ns::|moveLeftAndModifySelection:|
          'ns::|moveRightAndModifySelection:|
          'ns::|moveWordLeft:|
          'ns::|moveWordRight:|
          'ns::|moveParagraphBackwardAndModifySelection:|
          'ns::|moveParagraphForwardAndModifySelection:|
          'ns::|pageUpAndModifySelection:|
          'ns::|pageDownAndModifySelection:|
          'ns::|moveToBeginningOfDocumentAndModifySelection:|
          'ns::|moveToEndOfDocumentAndModifySelection:|
          'ns::|moveToEndOfParagraphAndModifySelection:|
          'ns::|moveToBeginningOfParagraphAndModifySelection:|
          'ns::|moveDownAndModifySelection:|
          'ns::|moveUpAndModifySelection:|
          'ns::|moveWordBackwardAndModifySelection:|
          'ns::|moveWordForwardAndModifySelection:|
          'ns::|moveForwardAndModifySelection:|
          'ns::|moveBackwardAndModifySelection:|
          'ns::|moveToBeginningOfDocument:|
          'ns::|moveToEndOfParagraph:|
          'ns::|moveToBeginningOfParagraph:|
          'ns::|moveWordBackward:|
          'ns::|moveWordForward:|
          'ns::|moveBackward:|
          'ns::|moveForward:|
          'ns::|textViewportLayoutControllerDidLayout:|
          'ns::|textViewportLayoutControllerWillLayout:|
          'ns::|textViewportLayoutController:configureRenderingSurfaceForTextLayoutFragment:|
          'ns::|viewportBoundsForTextViewportLayoutController:|
          'ns::|setLayoutOrientation:|
          'ns::|drawCharactersInTextRange:atPoint:|
          'ns::|usesFindPanel|
          'ns::|usesFindBar|
          'ns::|shouldRemoveTransformationAction:|
          'ns::|convertToHalfWidth:|
          'ns::|convertToFullWidth:|
          'ns::|convertToTraditionalChinese:|
          'ns::|convertToSimplifiedChinese:|
          'ns::|shouldRemoveCaseTransformations|
          'ns::|setSelectionGranularity:|
          'ns::|setSelectedRanges:affinity:stillSelecting:|
          'ns::|selectionGranularity|
          'ns::|selectionRangeForProposedRange:granularity:|
          'ns::|usesRolloverButtonForSelection|
          'ns::|linkTextAttributes|
          'ns::|displaysLinkToolTips|
          'ns::|characterRangeForRect:|
          'ns::|toggleQuickLookPreviewPanel:|
          'ns::|changeLayoutOrientation:|
          'ns::|changeBaseWritingDirection:|
          'ns::|addLinksInSelection:|
          'ns::|orderFrontTablePanel:|
          'ns::|orderFrontListPanel:|
          'ns::|orderFrontLinkPanel:|
          'ns::|insertTable:|
          'ns::|orderFrontSpacingPanel:|
          'ns::|alignJustified:|
          'ns::|copyLink:|
          'ns::|toggleTraditionalCharacterShape:|
          'ns::|spotlight:|
          'ns::|preferredPasteboardTypeFromArray:restrictedToTypesFromArray:|
          'ns::|pasteAsRichText:|
          'ns::|pasteAsPlainText:|
          'ns::|centerSelectionInVisibleArea:|
          'ns::|removeAccents:|
          'ns::|transliterateToLatin:|
          'ns::|replaceTextInSelection:|
          'ns::|replaceDashesInSelection:|
          'ns::|replaceQuotesInSelection:|
          'ns::|insertContainerBreak:|
          'ns::|insertPageBreak:|
          'ns::|makeTextWritingDirectionRightToLeft:|
          'ns::|makeTextWritingDirectionLeftToRight:|
          'ns::|makeTextWritingDirectionNatural:|
          'ns::|makeBaseWritingDirectionRightToLeft:|
          'ns::|makeBaseWritingDirectionLeftToRight:|
          'ns::|makeBaseWritingDirectionNatural:|
          'ns::|capitalizeWord:|
          'ns::|lowercaseWord:|
          'ns::|uppercaseWord:|
          'ns::|insertLineSeparator:|
          'ns::|insertLineBreak:|
          'ns::|insertParagraphSeparator:|
          'ns::|insertNewlineIgnoringFieldEditor:|
          'ns::|toggleBaseWritingDirection:|
          'ns::|shouldRenderPlaceholder|
          'ns::|drawPlaceholderInRect:|
          'ns::|drawViewBackgroundInRect:|
          'ns::|usesAdaptiveColorMappingForDarkAppearance|
          'ns::|setRulerVisible:|
          'ns::|writeSelectionToPasteboard:types:|
          'ns::|documentColorForRenderingColor:|
          'ns::|rangesForUserTextChange|
          'ns::|setConstrainedFrameSize:|
          'ns::|setDefaultParagraphStyle:|
          'ns::|updateFontPanel|
          'ns::|updateDragTypeRegistration|
          'ns::|acceptableDragTypes|
          'ns::|allowsDocumentBackgroundColorChange|
          'ns::|renderingColorForDocumentColor:|
          'ns::|updateTextTouchBarItems|
          'ns::|updateInspectorBar|
          'ns::|usesRuler|
          'ns::|usesInspectorBar|
          'ns::|rangesForUserCharacterAttributeChange|
          'ns::|setBaseWritingDirection:range:|
          'ns::|setAlignment:range:|
          'ns::|breakUndoCoalescing|
          'ns::|updateRuler|
          'ns::|acceptsGlyphInfo|
          'ns::|rangeForUserTextChange|
          'ns::|handleTextCheckingResults:forRange:types:options:orthography:wordCount:|
          'ns::|checkTextInDocumentUsingTypes:options:restrictToSelection:|
          'ns::|checkTextInRange:types:options:|
          'ns::|textContainerInset|
          'ns::|setNeedsDisplayInRect:avoidAdditionalLayout:|
          'ns::|updateInsertionPointStateAndRestartTimer:|
          'ns::|invalidateTextContainerOrigin|
          'ns::|setInsertionPointColor:|
          'ns::|insertionPointColor|
          'ns::|drawInsertionPointInRect:color:turnedOn:|
          'ns::|inputContextAllowingInitialization:|
          'ns::|initWithFrame:textContainer:|
          'ns::|setUsesRolloverButtonForSelection:|
          'ns::|selectedTextAttributes|
          'ns::|allowedInputSourceLocales|
          'ns::|allowsCharacterPickerTouchBarItem|
          'ns::|sharingService:containerFrameOnScreenForShareItem:|
          'ns::|sharingServicePicker:sharingServicesForItems:mask:proposedSharingServices:|
          'ns::|dragSelectionWithEvent:offset:slideBack:|
          'ns::|layoutOrientation|
          'ns::|selectionAffinity|
          'ns::|clickedOnLink:atIndex:|
          'ns::|accessibilityElementForAttachment:|
          'ns::|isRulerVisible|
          'ns::|toggleRuler:|
          'ns::|alignCenter:|
          'ns::|alignRight:|
          'ns::|alignLeft:|
          'ns::|pasteRuler:|
          'ns::|copyRuler:|
          'ns::|isVerticallyResizable|
          'ns::|isHorizontallyResizable|
          'ns::|usesFontPanel|
          'ns::|setFont:range:|
          'ns::|setTextColor:range:|
          'ns::|readRTFDFromFile:|
          'ns::|writeRTFDToFile:atomically:|
          'ns::|replaceCharactersInRange:withRTFD:|
          'ns::|replaceCharactersInRange:withRTF:|
          'ns::|RTFDFromRange:|
          'ns::|RTFFromRange:|
          'ns::|scrollToEndOfDocument:|
          'ns::|scrollToBeginningOfDocument:|
          'ns::|setUsesAdaptiveColorMappingForDarkAppearance:|
          'ns::|checkTextInSelection:|
          'ns::|toggleSmartInsertDelete:|
          'ns::|setAllowedInputSourceLocales:|
          'ns::|updateCandidates|
          'ns::|enabledTextCheckingTypes|
          'ns::|itemsForSharingServiceInRanges:|
          'ns::|writeSelectionToPasteboard:type:|
          'ns::|writablePasteboardTypes|
          'ns::|toggleAutomaticDataDetection:|
          'ns::|checkTextInDocument:|
          'ns::|orderFrontSubstitutionsPanel:|
          'ns::|moveToEndOfDocument:|
          'ns::|readSelectionFromPasteboard:|
          'ns::|shouldChangeTextInRanges:replacementStrings:|
          'ns::|setFieldEditor:|
          'ns::|rulerView:handleMouseDown:|
          'ns::|rulerView:handleMouseDown:forMarker:|
          'ns::|rulerView:willSetClientView:|
          'ns::|rulerView:didRemoveMarker:|
          'ns::|rulerView:didMoveMarker:|
          'ns::|rulerView:didAddMarker:|
          'ns::|rulerView:locationForPoint:|
          'ns::|rulerView:shouldRemoveMarker:|
          'ns::|rulerView:willMoveMarker:toLocation:|
          'ns::|rulerView:willAddMarker:atLocation:|
          'ns::|rulerView:shouldMoveMarker:|
          'ns::|rulerView:shouldAddMarker:|
          'ns::|rulerView:pointForLocation:|
          'ns::|quickLookWithEvent:|
          'ns::|moveToEndOfLineAndModifySelection:|
          'ns::|moveToBeginningOfLineAndModifySelection:|
          'ns::|moveToEndOfLine:|
          'ns::|moveToBeginningOfLine:|
          'ns::|moveToRightEndOfLineAndModifySelection:|
          'ns::|moveToLeftEndOfLineAndModifySelection:|
          'ns::|moveToRightEndOfLine:|
          'ns::|moveToLeftEndOfLine:|
          'ns::|toggleAutomaticTextReplacement:|
          'ns::|toggleAutomaticLinkDetection:|
          'ns::|toggleAutomaticDashSubstitution:|
          'ns::|toggleAutomaticQuoteSubstitution:|
          'ns::|ignoreSpelling:|
          'ns::|changeSpelling:|
          'ns::|toggleAutomaticSpellingCorrection:|
          'ns::|toggleGrammarChecking:|
          'ns::|toggleContinuousSpellChecking:|
          'ns::|checkSpelling:|
          'ns::|candidateListTouchBarItem:endSelectingCandidateAtIndex:|
          'ns::|touchBar:makeItemForIdentifier:|
          'ns::|invokeExtensionService:|
          'ns::|layoutSublayersOfLayer:|
          'ns::|spellCheckerDidChangeDashSubstitution:|
          'ns::|spellCheckerDidChangeQuoteSubstitution:|
          'ns::|spellCheckerDidChangeReplacement:|
          'ns::|spellCheckerDidChangeCorrection:|
          'ns::|spellCheckerDidChangeLanguage:|
          'ns::|spellCheckerDidUnlearnWord:|
          'ns::|spellCheckerDidLearnWord:|
          'ns::|setMarkedText:selectedRange:|
          'ns::|conversationIdentifier|
          'ns::|firstRectForCharacterRange:|
          'ns::|getMarkedText:selectedRange:|
          'ns::|delete:|
          'ns::|placeholderAttributedString|
          'ns::|setPlaceholderAttributedString:|
          'ns::|placeholderString|
          'ns::|rangeForUserParagraphAttributeChange|
          'ns::|isRichText|
          'ns::|setUndoActionName:|
          'ns::|rangeForUserCharacterAttributeChange|
          'ns::|pasteFont:|
          'ns::|copyFont:|
          'ns::|lowerBaseline:|
          'ns::|raiseBaseline:|
          'ns::|subscript:|
          'ns::|superscript:|
          'ns::|unscript:|
          'ns::|useAllLigatures:|
          'ns::|turnOffLigatures:|
          'ns::|useStandardLigatures:|
          'ns::|loosenKerning:|
          'ns::|tightenKerning:|
          'ns::|turnOffKerning:|
          'ns::|useStandardKerning:|
          'ns::|outline:|
          'ns::|underline:|
          'ns::|changeFont:|
          'ns::|changeAttributes:|
          'ns::|changeDocumentBackgroundColor:|
          'ns::|visibleCharacterRanges|
          'ns::|didReplaceCharacters|
          'ns::|shouldReplaceCharactersInRanges:withStrings:|
          'ns::|setSelectedRanges:|
          'ns::|contentViewAtIndex:effectiveCharacterRange:|
          'ns::|firstSelectedRange|
          'ns::|setIncrementalSearchingEnabled:|
          'ns::|isIncrementalSearchingEnabled|
          'ns::|setPreferredTextFinderStyle:|
          'ns::|performFindPanelAction:|
          'ns::|performTextFinderAction:|
          'ns::|preferredTextFinderStyle|
          'ns::|canReadSelectionFromItems|
          'ns::|selectionItems|
          'ns::|readSelectionFromItems:|
          'ns::|insertText:|
          'ns::|draggingSession:endedAtPoint:operation:|
          'ns::|draggingSession:sourceOperationMaskForDraggingContext:|
          'ns::|updateDraggingItemsForDrag:|
          'ns::|sharingService:didShareItems:|
          'ns::|sharingService:transitionImageForShareItem:contentRect:|
          'ns::|sharingService:sourceFrameOnScreenForShareItem:|
          'ns::|sharingService:sourceWindowForShareItems:sharingContentScope:|
          'ns::|flagsChanged:|
          'ns::|sharingServicePicker:delegateForSharingService:|
          'ns::|rightMouseUp:|
          'ns::|drawsVerticallyForCharacterAtIndex:|
          'ns::|windowLevel|
          'ns::|baselineDeltaForCharacterAtIndex:|
          'ns::|fractionOfDistanceThroughGlyphForPoint:|
          'ns::|attributedString|
          'ns::|characterIndexForPoint:|
          'ns::|firstRectForCharacterRange:actualRange:|
          'ns::|validAttributesForMarkedText|
          'ns::|attributedSubstringForProposedRange:actualRange:|
          'ns::|markedRange|
          'ns::|unmarkText|
          'ns::|setMarkedText:selectedRange:replacementRange:|
          'ns::|viewForRange:firstRect:actualRange:|
          'ns::|selectAndShowRange:|
          'ns::|replaceCharactersInRange:withAnnotatedString:|
          'ns::|removeAnnotation:range:|
          'ns::|addAnnotations:range:|
          'ns::|setAnnotations:range:|
          'ns::|annotatedSubstringForProposedRange:actualRange:|
          'ns::|setTextCompletionType:|
          'ns::|textCompletionType|
          'ns::|setLinkDetectionType:|
          'ns::|linkDetectionType|
          'ns::|setDataDetectionType:|
          'ns::|dataDetectionType|
          'ns::|setTextReplacementType:|
          'ns::|textReplacementType|
          'ns::|setSmartInsertDeleteType:|
          'ns::|smartInsertDeleteType|
          'ns::|setSmartDashesType:|
          'ns::|smartDashesType|
          'ns::|setSmartQuotesType:|
          'ns::|smartQuotesType|
          'ns::|setGrammarCheckingType:|
          'ns::|grammarCheckingType|
          'ns::|setSpellCheckingType:|
          'ns::|spellCheckingType|
          'ns::|setAutocorrectionType:|
          'ns::|autocorrectionType|
          'ns::|textContainerOrigin|
          'ns::|scrollRangeToVisible:|
          'ns::|setSelectedRange:affinity:stillSelecting:|
          'ns::|selectedRanges|
          'ns::|setSpellingState:range:|
          'ns::|isAutomaticTextCompletionEnabled|
          'ns::|setAutomaticLinkDetectionEnabled:|
          'ns::|isAutomaticLinkDetectionEnabled|
          'ns::|setAutomaticDataDetectionEnabled:|
          'ns::|isAutomaticDataDetectionEnabled|
          'ns::|setAutomaticTextReplacementEnabled:|
          'ns::|isAutomaticTextReplacementEnabled|
          'ns::|setSmartInsertDeleteEnabled:|
          'ns::|smartInsertDeleteEnabled|
          'ns::|setAutomaticDashSubstitutionEnabled:|
          'ns::|isAutomaticDashSubstitutionEnabled|
          'ns::|setAutomaticQuoteSubstitutionEnabled:|
          'ns::|isAutomaticQuoteSubstitutionEnabled|
          'ns::|setGrammarCheckingEnabled:|
          'ns::|isGrammarCheckingEnabled|
          'ns::|setContinuousSpellCheckingEnabled:|
          'ns::|isContinuousSpellCheckingEnabled|
          'ns::|setAutomaticSpellingCorrectionEnabled:|
          'ns::|isAutomaticSpellingCorrectionEnabled|
          'ns::|textCheckingControllerUsesStringAnnotations|
          'ns::|spellCheckerDocumentTag|
          'ns::|textCheckingController|
          'ns::|setPlaceholderString:|
          'ns::|insertBacktab:|
          'ns::|insertTab:|
          'ns::|makeTouchBar|
          'ns::|complete:|
          'ns::|insertNewline:|
          'ns::|changeColor:|
          'ns::|isCompatibleWithResponsiveScrolling|
          'ns::|drawBackgroundOverhangInRect:|
          'ns::|setTypingAttributes:|
          'ns::|setRichText:|
          'ns::|setVerticallyResizable:|
          'ns::|setHorizontallyResizable:|
          'ns::|setMaxSize:|
          'ns::|setMinSize:|
          'ns::|setUsesRuler:|
          'ns::|setWantsNotificationForMarkedText:|
          'ns::|setUsesFontPanel:|
          'ns::|setSelectedTextAttributes:|
          'ns::|selectedRange|
          'ns::|textContainer|
          'ns::|setTextContainer:|
          'ns::|setAutomaticTextCompletionEnabled:|
          'ns::|setAllowsCharacterPickerTouchBarItem:|
          'ns::|isFieldEditor|
          'ns::|textLayoutManager|
          'ns::|setSelectedRange:|
          'ns::|didChangeText|
          'ns::|typingAttributes|
          'ns::|shouldChangeTextInRange:replacementString:|
          'ns::|textStorage|
          'ns::|hasMarkedText|
          'ns::|undoManager|
          'ns::|paste:|
          'ns::|cut:|
          'ns::|becomeMainWindow|
          'ns::|draggedImage:endedAt:operation:|
          'ns::|draggingSourceOperationMaskForLocal:|
          'ns::|allowsMultipleSelection|
          'ns::|selectAll:|
          'ns::|setTextColor:|
          'ns::|layoutManager|
          'ns::|copy:|
          'ns::|textColor|
          'ns::|startSpeaking:|
          'ns::|setTouchBar:|
          'ns::|mouseMoved:|
          'ns::|insertText:replacementRange:|
          'ns::|accessibilityFocusRingBoundsForBounds:|
          'ns::|maxSize|
          'ns::|minSize|
          'ns::|setContentType:|
          'ns::|contentType|
          'ns::|defaultParagraphStyle|
          'ns::|attributedSubstringFromRange:|
          'ns::|setString:|
          'ns::|replaceCharactersInRange:withString:|
          'ns::|string|
          'ns::|trackMouse:adding:|
          'ns::|thicknessRequiredInRuler|
          'ns::|setRemovable:|
          'ns::|imageOrigin|
          'ns::|setImageOrigin:|
          'ns::|markerLocation|
          'ns::|setMarkerLocation:|
          'ns::|ruler|
          'ns::|imageRectInRuler|
          'ns::|isDragging|
          'ns::|initWithRulerView:markerLocation:image:imageOrigin:|
          'ns::|isMovable|
          'ns::|setMovable:|
          'ns::|isRemovable|
          'ns::|accessibilityIsMarkerUIElementsAttributeSettable|
          'ns::|accessibilityMarkerUIElementsAttribute|
          'ns::|accessibilityIsUnitDescriptionAttributeSettable|
          'ns::|accessibilityUnitDescriptionAttribute|
          'ns::|accessibilityIsUnitsAttributeSettable|
          'ns::|accessibilityUnitsAttribute|
          'ns::|setDisplaysTooltips:|
          'ns::|moveRulerlineFromLocation:toLocation:|
          'ns::|trackMarker:withMouseEvent:|
          'ns::|markers|
          'ns::|setClientView:|
          'ns::|originOffset|
          'ns::|setOriginOffset:|
          'ns::|setMeasurementUnits:|
          'ns::|reservedThicknessForAccessoryView|
          'ns::|reservedThicknessForMarkers|
          'ns::|ruleThickness|
          'ns::|setRuleThickness:|
          'ns::|requiredThickness|
          'ns::|setScrollView:|
          'ns::|drawMarkersInRect:|
          'ns::|drawRulerLines|
          'ns::|drawHashMarksAndLabelsInRect:|
          'ns::|drawSeparatorInRect:|
          'ns::|setLabelString:forValue:|
          'ns::|labelStringForValue:|
          'ns::|setReservedThicknessForAccessoryView:|
          'ns::|setReservedThicknessForMarkers:|
          'ns::|setMarkers:|
          'ns::|invalidateHashMarks|
          'ns::|initWithScrollView:orientation:|
          'ns::|removeMarker:|
          'ns::|addMarker:|
          'ns::|displaysTooltips|
          'ns::|measurementUnits|
          'ns::|baselineLocation|
          'ns::|clientView|
          'ns::|accessibilityMaxValueAttribute|
          'ns::|accessibilityMinValueAttribute|
          'ns::|accessoryView|
          'ns::|scrollView|
          'ns::|setAccessoryView:|
          'ns::|copiesOnScroll|
          'ns::|setAutomaticallyCalculatesContentSize:|
          'ns::|setScrollVelocity:|
          'ns::|scrollVelocity|
          'ns::|constrainScrollPoint:|
          'ns::|constrainBoundsRect:|
          'ns::|automaticallyCalculatesContentSize|
          'ns::|viewBoundsChanged:|
          'ns::|viewFrameChanged:|
          'ns::|documentRect|
          'ns::|setCopiesOnScroll:|
          'ns::|scrollToPoint:|
          'ns::|setContentSize:|
          'ns::|screen|
          'ns::|scrollerImp|
          'ns::|layer:shouldInheritContentsScale:fromWindow:|
          'ns::|hitPart|
          'ns::|arrowsPosition|
          'ns::|drawParts|
          'ns::|knobStyle|
          'ns::|shouldUseLayerPerPartForScrollerImp:|
          'ns::|mouseLocationInScrollerForScrollerImp:|
          'ns::|scrollerImp:animateExpansionTransitionWithDuration:|
          'ns::|scrollerImp:animateUIStateTransitionWithDuration:|
          'ns::|scrollerImp:overlayScrollerStateChangedTo:|
          'ns::|scrollerImp:animateTrackAlphaTo:duration:|
          'ns::|scrollerImp:animateKnobAlphaTo:duration:|
          'ns::|setUsePresentationValue:|
          'ns::|setPresentationValue:|
          'ns::|setOverlayScrollerTrackAlpha:|
          'ns::|setOverlayScrollerKnobAlpha:|
          'ns::|setExpansionTransitionProgress:|
          'ns::|setUiStateTransitionProgress:|
          'ns::|knobProportion|
          'ns::|setKnobProportion:|
          'ns::|trackScrollButtons:|
          'ns::|trackPagingArea:|
          'ns::|trackKnob:|
          'ns::|overlayScrollerTrackAlpha|
          'ns::|drawKnob|
          'ns::|drawArrow:highlightPart:|
          'ns::|drawKnobSlotInRect:highlight:|
          'ns::|drawArrow:highlight:|
          'ns::|usableParts|
          'ns::|setKnobStyle:|
          'ns::|setFloatValue:knobProportion:|
          'ns::|testPart:|
          'ns::|highlight:|
          'ns::|rectForPart:|
          'ns::|overlayScrollerKnobAlpha|
          'ns::|checkSpaceForParts|
          'ns::|setArrowsPosition:|
          'ns::|accessibilityIsOrientationAttributeSettable|
          'ns::|accessibilityOrientationAttribute|
          'ns::|rulerStateDescription|
          'ns::|setVerticalRulerView:|
          'ns::|setHorizontalRulerView:|
          'ns::|computed_contentExtendsPastContentInsets|
          'ns::|setAutomaticallyAdjustsContentViewInsets:|
          'ns::|automaticallyAdjustsContentViewInsets|
          'ns::|autoforwardsScrollWheelEvents|
          'ns::|removeFloatingHeaderView:|
          'ns::|addFloatingHeaderView:forAxis:|
          'ns::|setMagnification:centeredAtPoint:|
          'ns::|magnifyToFitRect:|
          'ns::|setMinMagnification:|
          'ns::|setMaxMagnification:|
          'ns::|setAllowsMagnification:|
          'ns::|setFindBarPosition:|
          'ns::|setUsesPredominantAxisScrolling:|
          'ns::|pageScroll|
          'ns::|setPageScroll:|
          'ns::|lineScroll|
          'ns::|hasBottomShadow|
          'ns::|topShadowMinimumRequiredContentYOffset|
          'ns::|setTopShadowMinimumRequiredContentYOffset:|
          'ns::|topShadowTopInset|
          'ns::|setTopShadowTopInset:|
          'ns::|hasTopShadow|
          'ns::|scrollsDynamically|
          'ns::|setScrollsDynamically:|
          'ns::|computed_distancesScrolledFromDocumentEdges|
          'ns::|computedHasScrolledContentsUnderTitlebar|
          'ns::|computedScrollViewFrame|
          'ns::|setFindBarVisible:|
          'ns::|setFindBarView:|
          'ns::|findBarViewDidChangeHeight|
          'ns::|scrollerImpPair:isContentPointVisible:|
          'ns::|scrollerImpPair:updateScrollerStyleForNewRecommendedScrollerStyle:|
          'ns::|scrollerImpPair:convertContentPoint:toScrollerImp:|
          'ns::|mouseLocationInContentAreaForScrollerImpPair:|
          'ns::|inLiveResizeForScrollerImpPair:|
          'ns::|contentAreaRectForScrollerImpPair:|
          'ns::|separatorOffset|
          'ns::|minMagnification|
          'ns::|maxMagnification|
          'ns::|allowsMagnification|
          'ns::|horizontalScrollElasticity|
          'ns::|verticalScrollElasticity|
          'ns::|setVerticalPageScroll:|
          'ns::|setHorizontalPageScroll:|
          'ns::|setVerticalLineScroll:|
          'ns::|setScrollerKnobStyle:|
          'ns::|scrollerKnobStyle|
          'ns::|scrollerInsets|
          'ns::|isFindBarVisible|
          'ns::|findBarPosition|
          'ns::|setVerticalScrollDecelerationFactor:|
          'ns::|verticalScrollDecelerationFactor|
          'ns::|setHorizontalScrollDecelerationFactor:|
          'ns::|horizontalScrollDecelerationFactor|
          'ns::|setDecelerationRate:|
          'ns::|setHasVerticalRuler:|
          'ns::|setHasHorizontalRuler:|
          'ns::|addFloatingSubview:forAxis:|
          'ns::|usesPredominantAxisScrolling|
          'ns::|accessibilityIsVerticalScrollBarAttributeSettable|
          'ns::|verticalPageScroll|
          'ns::|horizontalPageScroll|
          'ns::|hasVerticalRuler|
          'ns::|hasHorizontalRuler|
          'ns::|accessibilityVerticalScrollBarAttribute|
          'ns::|verticalRulerView|
          'ns::|horizontalRulerView|
          'ns::|setRulersVisible:|
          'ns::|rulersVisible|
          'ns::|endGestureWithEvent:|
          'ns::|beginGestureWithEvent:|
          'ns::|smartMagnifyWithEvent:|
          'ns::|accessibilityScrollToShowDescendantAttributeForParameter:|
          'ns::|setHorizontalScroller:|
          'ns::|findBarView|
          'ns::|decelerationRate|
          'ns::|setMagnification:|
          'ns::|magnifyWithEvent:|
          'ns::|pageUp:|
          'ns::|pageDown:|
          'ns::|setVerticalScroller:|
          'ns::|documentCursor|
          'ns::|setContentInset:|
          'ns::|contentInset|
          'ns::|setDrawsContentShadow:|
          'ns::|drawsContentShadow|
          'ns::|setDocumentCursor:|
          'ns::|flashScrollers|
          'ns::|verticalLineScroll|
          'ns::|scrollClipView:toPoint:|
          'ns::|accessibilityIsHorizontalScrollBarAttributeSettable|
          'ns::|accessibilityHorizontalScrollBarAttribute|
          'ns::|hasVerticalScroller|
          'ns::|setLineScroll:|
          'ns::|scrollerImpPair|
          'ns::|setScrollerStyle:|
          'ns::|automaticallyAdjustsContentInsets|
          'ns::|horizontalLineScroll|
          'ns::|contentInsets|
          'ns::|scrollerStyle|
          'ns::|setScrollerInsets:|
          'ns::|setHorizontalLineScroll:|
          'ns::|contentSize|
          'ns::|setAutoforwardsScrollWheelEvents:|
          'ns::|documentVisibleRect|
          'ns::|autohidesScrollers|
          'ns::|setAutohidesScrollers:|
          'ns::|tile|
          'ns::|hasHorizontalScroller|
          'ns::|borderType|
          'ns::|verticalScroller|
          'ns::|reflectScrolledClipView:|
          'ns::|setHasBottomShadow:|
          'ns::|setHasTopShadow:|
          'ns::|setContentView:|
          'ns::|gestureRecognizer:shouldReceiveTouch:|
          'ns::|documentView|
          'ns::|contentView|
          'ns::|hasHorizontalMoreContentIndicators|
          'ns::|setDocumentView:|
          'ns::|setHasHorizontalMoreContentIndicators:|
          'ns::|setContentInsets:|
          'ns::|setAutomaticallyAdjustsContentInsets:|
          'ns::|setHorizontalScrollElasticity:|
          'ns::|horizontalScroller|
          'ns::|setHasHorizontalScroller:|
          'ns::|setVerticalScrollElasticity:|
          'ns::|setHasVerticalScroller:|
          'ns::|setBorderType:|
          'ns::|accessibilityIsTabsAttributeSettable|
          'ns::|accessibilityTabsAttribute|
          'ns::|selectPreviousTabViewItem:|
          'ns::|selectNextTabViewItem:|
          'ns::|selectLastTabViewItem:|
          'ns::|selectFirstTabViewItem:|
          'ns::|selectTabViewItemWithIdentifier:|
          'ns::|takeSelectedTabViewItemFromSender:|
          'ns::|insertTabViewItem:atIndex:|
          'ns::|setTabViewBorderType:|
          'ns::|setTabPosition:|
          'ns::|setTabViewType:|
          'ns::|setAllowsTruncatedLabels:|
          'ns::|tabViewBorderType|
          'ns::|tabPosition|
          'ns::|setTabViewItems:|
          'ns::|allowsTruncatedLabels|
          'ns::|tabViewItemAtPoint:|
          'ns::|tabViewMinimumSizeConstraint|
          'ns::|indexOfTabViewItemWithIdentifier:|
          'ns::|tabViewItemAtIndex:|
          'ns::|numberOfTabViewItems|
          'ns::|indexOfTabViewItem:|
          'ns::|selectTabViewItemAtIndex:|
          'ns::|tabViewType|
          'ns::|selectTabViewItem:|
          'ns::|addTabViewItem:|
          'ns::|selectedTabViewItem|
          'ns::|setTabViewMinimumSizeConstraint:|
          'ns::|tabViewItems|
          'ns::|removeTabViewItem:|
          'ns::|mouseTracker:didStopTrackingWithEvent:|
          'ns::|mouseTracker:shouldContinueTrackingWithEvent:|
          'ns::|mouseTracker:shouldStartTrackingWithEvent:|
          'ns::|contentRect|
          'ns::|springLoadingExited:|
          'ns::|springLoadingUpdated:|
          'ns::|moveUp:|
          'ns::|moveDown:|
          'ns::|springLoadingActivated:draggingInfo:|
          'ns::|springLoadingHighlightChanged:|
          'ns::|springLoadingEntered:|
          'ns::|moveLeft:|
          'ns::|moveRight:|
          'ns::|accessibilityIsContentsAttributeSettable|
          'ns::|accessibilityContentsAttribute|
          'ns::|minimumSize|
          'ns::|setBaselineRelativeArrangement:|
          'ns::|setArrangedSubviews:|
          'ns::|rightSpacer|
          'ns::|leftSpacer|
          'ns::|bottomSpacer|
          'ns::|topSpacer|
          'ns::|currentSpacers|
          'ns::|currentContainers|
          'ns::|endViewsContainer|
          'ns::|middleViewsContainer|
          'ns::|beginningViewsContainer|
          'ns::|effectiveSpacingAfterView:|
          'ns::|setHasEqualSpacing:|
          'ns::|hasEqualSpacing|
          'ns::|setTransverseAlignmentPriority:|
          'ns::|transverseAlignmentPriority|
          'ns::|setTransverseAlignment:|
          'ns::|transverseAlignment|
          'ns::|setPerpendicularAlignment:|
          'ns::|perpendicularAlignment|
          'ns::|visibilityPriorityForView:|
          'ns::|clippingResistancePriorityForOrientation:|
          'ns::|isBaselineRelativeArrangement|
          'ns::|secondaryAlignmentPriority|
          'ns::|huggingPriorityForOrientation:|
          'ns::|attachedViews|
          'ns::|isViewDetached:|
          'ns::|trailingOrBottomViewsManager|
          'ns::|centerViewsManager|
          'ns::|leadingOrTopViewsManager|
          'ns::|detachedViews|
          'ns::|customSpacingAfterView:|
          'ns::|distribution|
          'ns::|setAlignmentPriority:|
          'ns::|alignmentPriority|
          'ns::|setSecondaryAlignmentPriority:|
          'ns::|setSecondaryAlignment:|
          'ns::|secondaryAlignment|
          'ns::|enumerateViewsIncludingDetached:usingBlock:|
          'ns::|detachesHiddenViews|
          'ns::|viewsInGravity:|
          'ns::|setClippingResistancePriority:forOrientation:|
          'ns::|setVisibilityPriority:forView:|
          'ns::|setViews:inGravity:|
          'ns::|addView:inGravity:|
          'ns::|setHuggingPriority:forOrientation:|
          'ns::|setCustomSpacing:afterView:|
          'ns::|views|
          'ns::|edgeInsets|
          'ns::|insertView:atIndex:inGravity:|
          'ns::|setDistribution:|
          'ns::|removeView:|
          'ns::|setSpacing:|
          'ns::|spacing|
          'ns::|setDetachesHiddenViews:|
          'ns::|setOrientation:|
          'ns::|setEdgeInsets:|
          'ns::|accessibilityIsSplittersAttributeSettable|
          'ns::|accessibilitySplittersAttribute|
          'ns::|debugReasonForLayoutMode|
          'ns::|accessibilityResetChildrenAttribute|
          'ns::|setStayPutPriority:forSubviewAtIndex:|
          'ns::|stayPutPriorityForSubviewAtIndex:|
          'ns::|cursorRectForDividerAtIndex:|
          'ns::|positionOfDividerAtIndex:|
          'ns::|isSubviewCollapsed:|
          'ns::|setDividerColor:|
          'ns::|setIsPaneSplitter:|
          'ns::|setHoldingPriority:forSubviewAtIndex:|
          'ns::|adjustSubviews|
          'ns::|holdingPriorityForSubviewAtIndex:|
          'ns::|drawDividerInRect:|
          'ns::|arrangesAllSubviews|
          'ns::|maxPossiblePositionOfDividerAtIndex:|
          'ns::|minPossiblePositionOfDividerAtIndex:|
          'ns::|isArrangedViewCollapsed:|
          'ns::|dividerColor|
          'ns::|isPaneSplitter|
          'ns::|dividerStyle|
          'ns::|instantiateWithObjectInstantiator:|
          'ns::|validateToolbarItem:|
          'ns::|dividerThickness|
          'ns::|insertArrangedSubview:atIndex:|
          'ns::|removeArrangedSubview:|
          'ns::|setDividerStyle:|
          'ns::|setArrangesAllSubviews:|
          'ns::|setPosition:ofDividerAtIndex:|
          'ns::|setVertical:|
          'ns::|autosaveName|
          'ns::|setAutosaveName:|
          'ns::|toggleSidebar:|
          'ns::|addArrangedSubview:|
          'ns::|setSpringLoaded:|
          'ns::|isSpringLoaded|
          'ns::|isVertical|
          'ns::|orientation|
          'ns::|arrangedSubviews|
          'ns::|setEntryType:|
          'ns::|entryType|
          'ns::|controlTint|
          'ns::|mnemonicLocation|
          'ns::|setMnemonicLocation:|
          'ns::|isEntryAcceptable:|
          'ns::|accessibilityStyleRangeForIndexAttributeForParameter:|
          'ns::|accessibilityAttributedStringForRangeAttributeForParameter:|
          'ns::|accessibilityRTFForRangeAttributeForParameter:|
          'ns::|accessibilityBoundsForRangeAttributeForParameter:|
          'ns::|accessibilityRangeForIndexAttributeForParameter:|
          'ns::|accessibilityRangeForPositionAttributeForParameter:|
          'ns::|accessibilityStringForRangeAttributeForParameter:|
          'ns::|accessibilityRangeForLineAttributeForParameter:|
          'ns::|accessibilityLineForIndexAttributeForParameter:|
          'ns::|accessibilityIsInsertionPointLineNumberAttributeSettable|
          'ns::|accessibilityInsertionPointLineNumberAttribute|
          'ns::|accessibilitySetVisibleCharacterRangeAttribute:|
          'ns::|accessibilityIsVisibleCharacterRangeAttributeSettable|
          'ns::|accessibilityVisibleCharacterRangeAttribute|
          'ns::|accessibilityIsNumberOfCharactersAttributeSettable|
          'ns::|accessibilityNumberOfCharactersAttribute|
          'ns::|accessibilitySetSelectedTextRangeAttribute:|
          'ns::|accessibilityIsSelectedTextRangeAttributeSettable|
          'ns::|accessibilitySelectedTextRangeAttribute|
          'ns::|accessibilitySetSelectedTextAttribute:|
          'ns::|accessibilityIsSelectedTextAttributeSettable|
          'ns::|accessibilitySelectedTextAttribute|
          'ns::|accessibilityCurrentEditor|
          'ns::|setAccessibilityOverridesAlwaysTakePrecedence:|
          'ns::|accessibilityOverridesAlwaysTakePrecedence|
          'ns::|setAccessibilityChartDescriptor:|
          'ns::|accessibilityChartDescriptor|
          'ns::|setAccessibilityContentSiblingBelow:|
          'ns::|accessibilityContentSiblingBelow|
          'ns::|setAccessibilityContentSiblingAbove:|
          'ns::|accessibilityContentSiblingAbove|
          'ns::|setNextContentSibling:|
          'ns::|accessibilityNextContentSibling|
          'ns::|setPreviousContentSibling:|
          'ns::|accessibilityPreviousContentSibling|
          'ns::|setAccessibilityFrameInParentSpace:|
          'ns::|accessibilityFrameInParentSpace|
          'ns::|setAccessibilityHeaderGroup:|
          'ns::|accessibilityHeaderGroup|
          'ns::|setAccessibilitySections:|
          'ns::|accessibilitySections|
          'ns::|setAccessibilityMimicNativeView:|
          'ns::|isAccessibilityMimicNativeView|
          'ns::|setAccessibilityFunctionRowTopLevelElements:|
          'ns::|accessibilityFunctionRowTopLevelElements|
          'ns::|setAccessibilityEnhancedUserInterface:|
          'ns::|isAccessibilityEnhancedUserInterface|
          'ns::|setAccessibilityEmbeddedImageDescription:|
          'ns::|accessibilityEmbeddedImageDescription|
          'ns::|setAccessibilityCustomChoosers:|
          'ns::|accessibilityCustomChoosers|
          'ns::|setAccessibilityPath:|
          'ns::|accessibilityPath|
          'ns::|setAccessibilityAttributedUserInputLabels:|
          'ns::|accessibilityAttributedUserInputLabels|
          'ns::|setAccessibilityCustomContent:|
          'ns::|accessibilityCustomContent|
          'ns::|setAccessibilityUserInputLabels:|
          'ns::|accessibilityUserInputLabels|
          'ns::|setAccessibilityContainerType:|
          'ns::|accessibilityContainerType|
          'ns::|setAccessibilityAutoInteractable:|
          'ns::|isAccessibilityAutoInteractable|
          'ns::|setAccessibilityAuditIssues:|
          'ns::|accessibilityAuditIssues|
          'ns::|accessibilityHeaderForRowIndex:|
          'ns::|accessibilityHeaderForColumnIndex:|
          'ns::|accessibilityResultsForSearchPredicate:|
          'ns::|setFieldEditorTextContainer:|
          'ns::|setTitleTextContainer:|
          'ns::|setStyleEffectConfiguration:|
          'ns::|setAllowsAppearanceTextEffects:|
          'ns::|allowsAppearanceTextEffects|
          'ns::|canSmoothFontsInFrame:forLayerBackedView:|
          'ns::|draggingImageComponentsWithFrame:inView:|
          'ns::|opaqueRectForTitleBounds:|
          'ns::|wantsNotificationForMarkedText|
          'ns::|sendsActionOnEndEditing|
          'ns::|setSendsActionOnEndEditing:|
          'ns::|menuForEvent:inRect:ofView:|
          'ns::|resetCursorRect:inView:|
          'ns::|fieldEditorForView:|
          'ns::|selectWithFrame:inView:editor:delegate:start:length:|
          'ns::|editWithFrame:inView:editor:delegate:event:|
          'ns::|keyUp:inRect:ofView:|
          'ns::|keyDown:inRect:ofView:|
          'ns::|touchCancelledAt:inView:|
          'ns::|touchMovedFrom:to:inView:|
          'ns::|touchBeganAt:inView:|
          'ns::|fontDilationStyle|
          'ns::|setUpFieldEditorAttributes:|
          'ns::|calcDrawInfo:|
          'ns::|textDidChange:|
          'ns::|textView:shouldChangeTextInRange:replacementString:|
          'ns::|setTruncatesLastVisibleLine:|
          'ns::|setAllowsDefaultTighteningForTruncation:|
          'ns::|allowsDefaultTighteningForTruncation|
          'ns::|setImportsGraphics:|
          'ns::|importsGraphics|
          'ns::|showsFirstResponder|
          'ns::|setAllowsUndo:|
          'ns::|hasValidObjectValue|
          'ns::|styleEffectConfiguration|
          'ns::|isSelectable|
          'ns::|fieldEditorTextContainer|
          'ns::|cancelTrackingAt:inView:|
          'ns::|continueTrackingPeriodicEvent:inView:|
          'ns::|cachesLineRef|
          'ns::|titleTextContainer|
          'ns::|isScrollable|
          'ns::|truncatesLastVisibleLine|
          'ns::|allowsUndo|
          'ns::|allowsEditingTokens|
          'ns::|allowsEditingTextAttributes|
          'ns::|wraps|
          'ns::|imageInterpolation|
          'ns::|setImageInterpolation:|
          'ns::|setCellAttribute:to:|
          'ns::|cellAttribute:|
          'ns::|stopTracking:at:inView:mouseIsUp:|
          'ns::|continueTrackingGesture:inView:|
          'ns::|focusRingMaskBoundsForFrame:inView:|
          'ns::|layoutLayerWithFrame:inView:|
          'ns::|updateLayerWithFrame:inView:|
          'ns::|wantsUpdateLayerInView:|
          'ns::|touchEndedAt:inView:|
          'ns::|continueTracking:at:inView:|
          'ns::|startTrackingAt:inView:|
          'ns::|trackMouse:inRect:ofView:untilMouseUp:|
          'ns::|isBezeled|
          'ns::|setScrollable:|
          'ns::|nextState|
          'ns::|drawingRectForBounds:|
          'ns::|mnemonic|
          'ns::|updateTrackingAreaWithFrame:inView:|
          'ns::|drawFocusRingMaskWithFrame:inView:|
          'ns::|setShowsFirstResponder:|
          'ns::|setAllowsMixedState:|
          'ns::|allowsMixedState|
          'ns::|expansionFrameWithFrame:inView:|
          'ns::|highlightColorWithFrame:inView:|
          'ns::|imageRectForBounds:|
          'ns::|setBackgroundStyle:|
          'ns::|drawInteriorWithFrame:inView:|
          'ns::|initImageCell:|
          'ns::|setWraps:|
          'ns::|setBezeled:|
          'ns::|drawsBackground|
          'ns::|highlight:withFrame:inView:|
          'ns::|hitTestForEvent:inRect:ofView:|
          'ns::|setTitleWithMnemonic:|
          'ns::|setSelectable:|
          'ns::|setEditable:|
          'ns::|drawWithFrame:inView:|
          'ns::|cellSize|
          'ns::|initTextCell:|
          'ns::|accessibilitySetValueAttribute:|
          'ns::|accessibilityIsValueAttributeSettable|
          'ns::|accessibilityValueAttribute|
          'ns::|isEditable|
          'ns::|setAccessibilityCustomActions:|
          'ns::|setAccessibilityMinimized:|
          'ns::|isAccessibilityMinimized|
          'ns::|setAccessibilityMinimizeButton:|
          'ns::|accessibilityMinimizeButton|
          'ns::|setAccessibilityZoomButton:|
          'ns::|accessibilityZoomButton|
          'ns::|setAccessibilityCloseButton:|
          'ns::|accessibilityCloseButton|
          'ns::|setAccessibilityDefaultButton:|
          'ns::|accessibilityDefaultButton|
          'ns::|setAccessibilityDocument:|
          'ns::|accessibilityDocument|
          'ns::|setAccessibilityGrowArea:|
          'ns::|accessibilityGrowArea|
          'ns::|setAccessibilityFullScreenButton:|
          'ns::|accessibilityFullScreenButton|
          'ns::|setAccessibilityMain:|
          'ns::|isAccessibilityMain|
          'ns::|setAccessibilityProxy:|
          'ns::|accessibilityProxy|
          'ns::|setAccessibilityModal:|
          'ns::|isAccessibilityModal|
          'ns::|setAccessibilityToolbarButton:|
          'ns::|accessibilityToolbarButton|
          'ns::|setAccessibilitySelectedTextRanges:|
          'ns::|accessibilitySelectedTextRanges|
          'ns::|setAccessibilitySelectedTextRange:|
          'ns::|accessibilitySelectedTextRange|
          'ns::|setAccessibilitySelectedText:|
          'ns::|accessibilitySelectedText|
          'ns::|setAccessibilityNumberOfCharacters:|
          'ns::|accessibilityNumberOfCharacters|
          'ns::|setAccessibilityVisibleCharacterRange:|
          'ns::|accessibilityVisibleCharacterRange|
          'ns::|setAccessibilitySharedTextUIElements:|
          'ns::|accessibilitySharedTextUIElements|
          'ns::|setAccessibilitySharedCharacterRange:|
          'ns::|accessibilitySharedCharacterRange|
          'ns::|setAccessibilityInsertionPointLineNumber:|
          'ns::|accessibilityInsertionPointLineNumber|
          'ns::|setAccessibilityColumnIndexRange:|
          'ns::|accessibilityColumnIndexRange|
          'ns::|setAccessibilityRowIndexRange:|
          'ns::|accessibilityRowIndexRange|
          'ns::|setAccessibilityColumnHeaderUIElements:|
          'ns::|accessibilityColumnHeaderUIElements|
          'ns::|setAccessibilityVisibleCells:|
          'ns::|accessibilityVisibleCells|
          'ns::|setAccessibilitySelectedCells:|
          'ns::|setAccessibilityRowHeaderUIElements:|
          'ns::|accessibilityRowHeaderUIElements|
          'ns::|setAccessibilitySortDirection:|
          'ns::|accessibilitySortDirection|
          'ns::|setAccessibilitySelectedColumns:|
          'ns::|accessibilitySelectedColumns|
          'ns::|setAccessibilityVisibleColumns:|
          'ns::|accessibilityVisibleColumns|
          'ns::|setAccessibilitySelectedRows:|
          'ns::|accessibilitySelectedRows|
          'ns::|setAccessibilityVisibleRows:|
          'ns::|accessibilityVisibleRows|
          'ns::|setAccessibilityRows:|
          'ns::|accessibilityRows|
          'ns::|setAccessibilityColumns:|
          'ns::|accessibilityColumns|
          'ns::|setAccessibilityIndex:|
          'ns::|setAccessibilityRowCount:|
          'ns::|setAccessibilityColumnCount:|
          'ns::|setAccessibilityHeader:|
          'ns::|accessibilityHeader|
          'ns::|setAccessibilityTabs:|
          'ns::|accessibilityTabs|
          'ns::|setAccessibilityIncrementButton:|
          'ns::|setAccessibilityDecrementButton:|
          'ns::|setAccessibilitySplitters:|
          'ns::|accessibilitySplitters|
          'ns::|setAccessibilityLabelValue:|
          'ns::|accessibilityLabelValue|
          'ns::|setAccessibilityLabelUIElements:|
          'ns::|accessibilityLabelUIElements|
          'ns::|setAccessibilityAllowedValues:|
          'ns::|accessibilityAllowedValues|
          'ns::|setAccessibilityVerticalScrollBar:|
          'ns::|accessibilityVerticalScrollBar|
          'ns::|setAccessibilityHorizontalScrollBar:|
          'ns::|accessibilityHorizontalScrollBar|
          'ns::|setAccessibilityMarkerTypeDescription:|
          'ns::|accessibilityMarkerTypeDescription|
          'ns::|setAccessibilityRulerMarkerType:|
          'ns::|accessibilityRulerMarkerType|
          'ns::|setAccessibilityUnitDescription:|
          'ns::|accessibilityUnitDescription|
          'ns::|setAccessibilityUnits:|
          'ns::|accessibilityUnits|
          'ns::|setAccessibilityMarkerGroupUIElement:|
          'ns::|accessibilityMarkerGroupUIElement|
          'ns::|setAccessibilityMarkerValues:|
          'ns::|accessibilityMarkerValues|
          'ns::|setAccessibilityMarkerUIElements:|
          'ns::|accessibilityMarkerUIElements|
          'ns::|setAccessibilityDisclosureLevel:|
          'ns::|accessibilityDisclosureLevel|
          'ns::|setAccessibilityDisclosedRows:|
          'ns::|accessibilityDisclosedRows|
          'ns::|setAccessibilityDisclosedByRow:|
          'ns::|accessibilityDisclosedByRow|
          'ns::|setAccessibilityDisclosed:|
          'ns::|isAccessibilityDisclosed|
          'ns::|setAccessibilityCriticalValue:|
          'ns::|accessibilityCriticalValue|
          'ns::|setAccessibilityWarningValue:|
          'ns::|accessibilityWarningValue|
          'ns::|setAccessibilityHandles:|
          'ns::|accessibilityHandles|
          'ns::|setAccessibilityVerticalUnitDescription:|
          'ns::|accessibilityVerticalUnitDescription|
          'ns::|setAccessibilityHorizontalUnitDescription:|
          'ns::|accessibilityHorizontalUnitDescription|
          'ns::|setAccessibilityVerticalUnits:|
          'ns::|accessibilityVerticalUnits|
          'ns::|setAccessibilityHorizontalUnits:|
          'ns::|accessibilityHorizontalUnits|
          'ns::|setAccessibilityOrderedByRow:|
          'ns::|isAccessibilityOrderedByRow|
          'ns::|setAccessibilityColumnTitles:|
          'ns::|accessibilityColumnTitles|
          'ns::|setAccessibilityMenuBar:|
          'ns::|accessibilityMenuBar|
          'ns::|setAccessibilityExtrasMenuBar:|
          'ns::|accessibilityExtrasMenuBar|
          'ns::|setAccessibilityWindows:|
          'ns::|accessibilityWindows|
          'ns::|setAccessibilityFocusedWindow:|
          'ns::|accessibilityFocusedWindow|
          'ns::|setAccessibilityFrontmost:|
          'ns::|isAccessibilityFrontmost|
          'ns::|setAccessibilityHidden:|
          'ns::|isAccessibilityHidden|
          'ns::|setAccessibilityMainWindow:|
          'ns::|accessibilityMainWindow|
          'ns::|setAccessibilityApplicationFocusedUIElement:|
          'ns::|accessibilityApplicationFocusedUIElement|
          'ns::|setAccessibilityCustomRotors:|
          'ns::|accessibilityCustomRotors|
          'ns::|setAccessibilityRequired:|
          'ns::|isAccessibilityRequired|
          'ns::|setAccessibilitySharedFocusElements:|
          'ns::|accessibilitySharedFocusElements|
          'ns::|setAccessibilityAlternateUIVisible:|
          'ns::|isAccessibilityAlternateUIVisible|
          'ns::|setAccessibilityContents:|
          'ns::|accessibilityContents|
          'ns::|setAccessibilityProtectedContent:|
          'ns::|isAccessibilityProtectedContent|
          'ns::|setAccessibilityCancelButton:|
          'ns::|accessibilityCancelButton|
          'ns::|setAccessibilityClearButton:|
          'ns::|accessibilityClearButton|
          'ns::|setAccessibilityChildrenInNavigationOrder:|
          'ns::|setAccessibilityChildren:|
          'ns::|setAccessibilityEnabled:|
          'ns::|isAccessibilityEnabled|
          'ns::|setAccessibilityEdited:|
          'ns::|isAccessibilityEdited|
          'ns::|setAccessibilityExpanded:|
          'ns::|isAccessibilityExpanded|
          'ns::|setAccessibilityFilename:|
          'ns::|accessibilityFilename|
          'ns::|setAccessibilityHelp:|
          'ns::|accessibilityHelp|
          'ns::|setAccessibilityIdentifier:|
          'ns::|setAccessibilityWindow:|
          'ns::|accessibilityWindow|
          'ns::|setAccessibilityLinkedUIElements:|
          'ns::|accessibilityLinkedUIElements|
          'ns::|setAccessibilityMaxValue:|
          'ns::|accessibilityMaxValue|
          'ns::|setAccessibilityMinValue:|
          'ns::|accessibilityMinValue|
          'ns::|setAccessibilityShownMenu:|
          'ns::|accessibilityShownMenu|
          'ns::|setAccessibilityServesAsTitleForUIElements:|
          'ns::|accessibilityServesAsTitleForUIElements|
          'ns::|setAccessibilitySelected:|
          'ns::|isAccessibilitySelected|
          'ns::|setAccessibilitySearchMenu:|
          'ns::|accessibilitySearchMenu|
          'ns::|setAccessibilitySearchButton:|
          'ns::|accessibilitySearchButton|
          'ns::|setAccessibilityRoleDescription:|
          'ns::|setAccessibilityRole:|
          'ns::|setAccessibilityPreviousContents:|
          'ns::|accessibilityPreviousContents|
          'ns::|setAccessibilityPlaceholderValue:|
          'ns::|accessibilityPlaceholderValue|
          'ns::|setAccessibilityParent:|
          'ns::|setAccessibilityOverflowButton:|
          'ns::|accessibilityOverflowButton|
          'ns::|setAccessibilityOrientation:|
          'ns::|accessibilityOrientation|
          'ns::|setAccessibilityNextContents:|
          'ns::|accessibilityNextContents|
          'ns::|setAccessibilityTitleUIElement:|
          'ns::|accessibilityTitleUIElement|
          'ns::|setAccessibilityTitle:|
          'ns::|setAccessibilityVisibleChildren:|
          'ns::|setAccessibilityValueDescription:|
          'ns::|accessibilityValueDescription|
          'ns::|setAccessibilityValue:|
          'ns::|accessibilityValue|
          'ns::|setAccessibilityURL:|
          'ns::|accessibilityURL|
          'ns::|setAccessibilityTopLevelUIElement:|
          'ns::|accessibilityTopLevelUIElement|
          'ns::|setAccessibilityActivationPoint:|
          'ns::|accessibilityActivationPoint|
          'ns::|setAccessibilityFocused:|
          'ns::|setAccessibilityFrame:|
          'ns::|setAccessibilityElement:|
          'ns::|isAccessibilitySelectorAllowed:|
          'ns::|accessibilityPerformShowMenu|
          'ns::|accessibilityPerformShowDefaultUI|
          'ns::|accessibilityPerformShowAlternateUI|
          'ns::|accessibilityPerformRaise|
          'ns::|accessibilityPerformPress|
          'ns::|accessibilityPerformPick|
          'ns::|accessibilityPerformIncrement|
          'ns::|accessibilityPerformDelete|
          'ns::|accessibilityPerformDecrement|
          'ns::|accessibilityPerformConfirm|
          'ns::|accessibilityPerformCancel|
          'ns::|accessibilityLineForIndex:|
          'ns::|accessibilityStyleRangeForIndex:|
          'ns::|accessibilityRTFForRange:|
          'ns::|accessibilityFrameForRange:|
          'ns::|accessibilityRangeForIndex:|
          'ns::|accessibilityRangeForPosition:|
          'ns::|accessibilityStringForRange:|
          'ns::|accessibilityRangeForLine:|
          'ns::|accessibilityAttributedStringForRange:|
          'ns::|accessibilityCellForColumn:row:|
          'ns::|accessibilityScreenSizeForLayoutSize:|
          'ns::|accessibilityScreenPointForLayoutPoint:|
          'ns::|accessibilityLayoutSizeForScreenSize:|
          'ns::|accessibilityLayoutPointForScreenPoint:|
          'ns::|accessibilityIdentifier|
          'ns::|isAccessibilityFocused|
          'ns::|accessibilityPostNotification:|
          'ns::|setAllowsEditingTextAttributes:|
          'ns::|setControlTint:|
          'ns::|cellSizeForBounds:|
          'ns::|setBordered:|
          'ns::|isBordered|
          'ns::|setAccessibilityLabel:|
          'ns::|titleRectForBounds:|
          'ns::|textAlignmentPolicy|
          'ns::|interiorBackgroundStyle|
          'ns::|setControlView:|
          'ns::|accessibilityElementWithParent:|
          'ns::|accessibilityTitle|
          'ns::|mouseExited:|
          'ns::|mouseEntered:|
          'ns::|accessibilitySelectedCells|
          'ns::|setAccessibilitySelectedChildren:|
          'ns::|accessibilitySelectedChildren|
          'ns::|accessibilityColumnCount|
          'ns::|accessibilityRoleDescription|
          'ns::|accessibilityVisibleChildren|
          'ns::|accessibilityRowCount|
          'ns::|isAccessibilityElement|
          'ns::|controlView|
          'ns::|accessibilityChildrenInNavigationOrder|
          'ns::|accessibilityCustomActions|
          'ns::|accessibilityIndex|
          'ns::|accessibilityLabel|
          'ns::|accessibilityRole|
          'ns::|accessibilityChildren|
          'ns::|accessibilityIncrementButton|
          'ns::|accessibilityDecrementButton|
          'ns::|accessibilitySubrole|
          'ns::|setDrawsBackground:|
          'ns::|setAccessibilitySubrole:|
          'ns::|title|
          'ns::|image|
          'ns::|keyEquivalent|
          'ns::|setTitle:|
          'ns::|setImage:|
          'ns::|setState:|
          'ns::|setType:|
          'ns::|state|
          'ns::|removeTarget:action:forControlEvents:|
          'ns::|addTarget:action:forControlEvents:|
          'ns::|expansionFrameWithFrame:|
          'ns::|drawCellInside:|
          'ns::|calcSize|
          'ns::|textViewDidChangeSelection:|
          'ns::|selectWithFrame:editor:delegate:start:length:|
          'ns::|editWithFrame:editor:delegate:event:|
          'ns::|setSkipEditValidation:|
          'ns::|skipEditValidation|
          'ns::|setIgnoresMultiClick:|
          'ns::|ignoresMultiClick|
          'ns::|sizeThatFits:|
          'ns::|selectedTag|
          'ns::|cellIfExists|
          'ns::|setAllowsLogicalLayoutDirection:|
          'ns::|setFloatingPointFormat:left:right:|
          'ns::|textView:willChangeSelectionFromCharacterRange:toCharacterRange:|
          'ns::|accessibilityPostNotification:context:|
          'ns::|keyUp:|
          'ns::|allowsExpansionToolTips|
          'ns::|allowsLogicalLayoutDirection|
          'ns::|setAllowsExpansionToolTips:|
          'ns::|touchesCancelledWithEvent:|
          'ns::|touchesEndedWithEvent:|
          'ns::|touchesMovedWithEvent:|
          'ns::|touchesBeganWithEvent:|
          'ns::|setNeedsDisplay|
          'ns::|mouseDownFlags|
          'ns::|setUsesSingleLineMode:|
          'ns::|takeObjectValueFrom:|
          'ns::|takeStringValueFrom:|
          'ns::|takeDoubleValueFrom:|
          'ns::|takeFloatValueFrom:|
          'ns::|takeIntegerValueFrom:|
          'ns::|takeIntValueFrom:|
          'ns::|sendActionOn:|
          'ns::|endEditing:|
          'ns::|usesSingleLineMode|
          'ns::|validateEditing|
          'ns::|currentEditor|
          'ns::|drawCell:|
          'ns::|sendActionOnMask|
          'ns::|setNextState|
          'ns::|getPeriodicDelay:interval:|
          'ns::|drawWithExpansionFrame:inView:|
          'ns::|backgroundStyle|
          'ns::|refusesFirstResponder|
          'ns::|becomeFirstResponder|
          'ns::|updateCellInside:|
          'ns::|resignKeyWindow|
          'ns::|selectCell:|
          'ns::|setRefusesFirstResponder:|
          'ns::|resignFirstResponder|
          'ns::|keyDown:|
          'ns::|selectedCell|
          'ns::|updateCell:|
          'ns::|abortEditing|
          'ns::|setCell:|
          'ns::|sendAction:to:|
          'ns::|setFloatValue:|
          'ns::|setIntegerValue:|
          'ns::|setIntValue:|
          'ns::|representedObject|
          'ns::|becomeKeyWindow|
          'ns::|setAttributedStringValue:|
          'ns::|sizeToFit|
          'ns::|attributedStringValue|
          'ns::|performClick:|
          'ns::|setFont:|
          'ns::|font|
          'ns::|touchBarRestingMitigation|
          'ns::|touchBarInsetMitigation|
          'ns::|setTouchBarRestingMitigation:|
          'ns::|setTouchBarInsetMitigation:|
          'ns::|setDoubleValue:|
          'ns::|cell|
          'ns::|accessibilityIsEnabledAttributeSettable|
          'ns::|accessibilityEnabledAttribute|
          'ns::|accessibilitySizeOfChild:|
          'ns::|accessibilityPositionOfChild:|
          'ns::|accessibilitySetFocus:forChild:|
          'ns::|accessibilityIsChildFocusable:|
          'ns::|accessibilityHelpStringForChild:|
          'ns::|isHighlighted|
          'ns::|acceptsFirstResponder|
          'ns::|mouseDown:|
          'ns::|isContinuous|
          'ns::|setHighlighted:|
          'ns::|setContinuous:|
          'ns::|setControlSize:|
          'ns::|controlSize|
          'ns::|setLineBreakMode:|
          'ns::|baseWritingDirection|
          'ns::|lineBreakMode|
          'ns::|setStringValue:|
          'ns::|setObjectValue:|
          'ns::|objectValue|
          'ns::|setFormatter:|
          'ns::|formatter|
          'ns::|alignment|
          'ns::|setAlignment:|
          'ns::|setAction:|
          'ns::|setBaseWritingDirection:|
          'ns::|setRepresentedObject:|
          'ns::|setTag:|
          'ns::|action|
          'ns::|isEnabled|
          'ns::|target|
          'ns::|setTarget:|
          'ns::|setEnabled:|
          'ns::|removeConstraintWithIdentifier:|
          'ns::|textLayerShouldEnableFontSmoothing:|
          'ns::|declaredLayoutRules|
          'ns::|recursiveConstraintIdentifierDescription|
          'ns::|recursiveConstraintDescription|
          'ns::|computedSafeAreaRect|
          'ns::|computedSafeAreaInsets|
          'ns::|safeAreaLayoutGuide|
          'ns::|layoutMarginsGuide|
          'ns::|measureMin:max:ideal:|
          'ns::|solutionDidChangeInEngine:|
          'ns::|engine:willBreakConstraint:dueToMutuallyExclusiveConstraints:|
          'ns::|engine:markerForConstraintToBreakAmongConstraints:|
          'ns::|nsli_swapContainerForOutgoingConstraint:toIncomingConstraint:|
          'ns::|nsli_canHostIndependentVariableAnchor|
          'ns::|nsli_layoutAnchorForAttribute:|
          'ns::|nsli_engineToUserScalingCoefficients|
          'ns::|nsli_addConstraint:mutuallyExclusiveConstraints:|
          'ns::|exerciseAmbiguityInLayout|
          'ns::|ns_containerWidgetType|
          'ns::|ns_widgetType|
          'ns::|reuseIdentifier|
          'ns::|exitFullScreenModeWithOptions:|
          'ns::|enterFullScreenMode:withOptions:|
          'ns::|endTrailer|
          'ns::|beginTrailer|
          'ns::|endPageSetup|
          'ns::|addToPageSetup|
          'ns::|beginPageSetupRect:placement:|
          'ns::|beginPage:label:bBox:fonts:|
          'ns::|endSetup|
          'ns::|beginSetup|
          'ns::|endPrologue|
          'ns::|endHeaderComments|
          'ns::|beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:|
          'ns::|beginPageInRect:atPlacement:|
          'ns::|writeEPSInsideRect:toPasteboard:|
          'ns::|writePDFInsideRect:toPasteboard:|
          'ns::|endPage|
          'ns::|endDocument|
          'ns::|beginDocument|
          'ns::|drawPageBorderWithSize:|
          'ns::|drawSheetBorderWithSize:|
          'ns::|pageHeader|
          'ns::|pageFooter|
          'ns::|heightAdjustLimit|
          'ns::|adjustPageWidthNew:left:right:limit:|
          'ns::|widthAdjustLimit|
          'ns::|nsis_orientationHintForVariable:|
          'ns::|nsis_descriptionOfVariable:|
          'ns::|nsis_valueOfVariableIsUserObservable:|
          'ns::|nsis_shouldIntegralizeVariable:|
          'ns::|nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:|
          'ns::|nsli_setPiercingToken:|
          'ns::|nsli_piercingToken|
          'ns::|nsli_isFlipped|
          'ns::|nsli_autoresizingMask|
          'ns::|nsli_descriptionIncludesPointer|
          'ns::|nsli_resolvedValue:forSymbolicConstant:inConstraint:error:|
          'ns::|nsli_layoutRect|
          'ns::|constraintsAffectingLayoutForOrientation:|
          'ns::|nsli_lowerAttribute:intoExpression:withCoefficient:container:|
          'ns::|nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:|
          'ns::|nsli_description|
          'ns::|nsli_boundsHeightVariable|
          'ns::|nsli_boundsWidthVariable|
          'ns::|nsli_addConstraint:|
          'ns::|nsli_itemDescribingLayoutDirectionForConstraint:toItem:|
          'ns::|nsli_isRTL|
          'ns::|nsli_constraintWithAnchor:relatedBy:toAnchor:withSystemSpacingMultipliedBy:|
          'ns::|nsli_defaultResolvedValue:forSymbolicConstant:inConstraint:error:|
          'ns::|nsli_convertSizeFromEngineSpace:|
          'ns::|nsli_convertSizeToEngineSpace:|
          'ns::|constraintsAffectingLayoutForOrientation:ofItem:|
          'ns::|nsli_removeConstraint:|
          'ns::|nsli_installedConstraints|
          'ns::|nsli_layoutEngine|
          'ns::|nsli_lowersExpressionRelativeToConstraintContainer|
          'ns::|nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:onBehalfOfLayoutGuide:|
          'ns::|removeLayoutGuide:|
          'ns::|dragPromisedFilesOfTypes:fromRect:source:slideBack:event:|
          'ns::|dragFile:fromRect:slideBack:event:|
          'ns::|dataWithPDFInsideRect:|
          'ns::|dataWithEPSInsideRect:|
          'ns::|nsli_superitem|
          'ns::|nsli_minYVariable|
          'ns::|nsli_minXVariable|
          'ns::|shouldSetFontSmoothingBackgroundColor|
          'ns::|setFontSmoothingBackgroundColor:|
          'ns::|fontSmoothingBackgroundColor|
          'ns::|computed_allowRolloverInToolbarControls|
          'ns::|computed_titlebarIsForcingDisplayOfDividers|
          'ns::|computed_inSelectedTableRow|
          'ns::|contentStyle|
          'ns::|showDefinitionForAttributedString:atPoint:|
          'ns::|activeDrawingRect|
          'ns::|viewDidChangeBackingProperties:|
          'ns::|updateLayerHandler|
          'ns::|willSendMenuNeedsUpdate:withEvent:|
          'ns::|postsBoundsChangedNotifications|
          'ns::|shouldDrawColor|
          'ns::|removeCursorRect:cursor:|
          'ns::|translateRectsNeedingDisplayInRect:by:|
          'ns::|scrollPoint:fromView:|
          'ns::|isVerticalContentSizeConstraintActive|
          'ns::|isHorizontalContentSizeConstraintActive|
          'ns::|setUsesConstraintsInsteadOfAutoresizing:|
          'ns::|usesConstraintsInsteadOfAutoresizing|
          'ns::|displayRectIgnoringOpacity:|
          'ns::|setGesturesEnabled:|
          'ns::|gesturesEnabled|
          'ns::|setWantsRestingTouches:|
          'ns::|setAcceptsTouchEvents:|
          'ns::|lockFocusIfCanDrawInContext:|
          'ns::|releaseGState|
          'ns::|gState|
          'ns::|convertRectFromBase:|
          'ns::|convertRectToBase:|
          'ns::|convertSizeFromBase:|
          'ns::|convertSizeToBase:|
          'ns::|convertPointToBase:|
          'ns::|layerUsesCoreImageFilters|
          'ns::|setLayerUsesCoreImageFilters:|
          'ns::|boundsRotation|
          'ns::|boundsSize|
          'ns::|setWantsExtendedDynamicRange:|
          'ns::|wantsExtendedDynamicRange|
          'ns::|frameSize|
          'ns::|frameOrigin|
          'ns::|frameCenterRotation|
          'ns::|setFrameCenterRotation:|
          'ns::|frameTransform|
          'ns::|enableLayoutFlushing|
          'ns::|disableLayoutFlushing|
          'ns::|nsis_rawAlignmentRect|
          'ns::|nsis_unroundedFrame|
          'ns::|nsis_layoutRectFromHostingViewInEngine:|
          'ns::|computed_effectiveSemanticContext|
          'ns::|maskView|
          'ns::|setMaskView:|
          'ns::|effectiveAppearanceDidChange|
          'ns::|setGestureRecognizers:|
          'ns::|setWantsBestResolutionOpenGLSurface:|
          'ns::|layoutGuides|
          'ns::|cacheDisplayInRect:toBitmapImageRep:includeSubviews:|
          'ns::|displayIfNeededInRectIgnoringOpacity:|
          'ns::|displayIfNeededIgnoringOpacity|
          'ns::|displayIfNeededInRect:|
          'ns::|removeGestureRecognizer:|
          'ns::|convertSizeFromLayer:|
          'ns::|convertSizeToLayer:|
          'ns::|convertPointFromLayer:|
          'ns::|frameRotation|
          'ns::|setFrameTransform:|
          'ns::|boundsOrigin|
          'ns::|setPreparedContentRect:|
          'ns::|nsli_engineToUserScalingCoefficientsInEngine:|
          'ns::|compareGeometry:|
          'ns::|layerContentsPlacement|
          'ns::|hideActiveFirstResponderIndication|
          'ns::|removeAllGestureRecognizers|
          'ns::|setCanDrawConcurrently:|
          'ns::|setCanDrawSubviewsIntoLayer:|
          'ns::|accessibilityPopUpMenuCreated:returningAccessibilityParent:|
          'ns::|nsis_frameInEngine:forLayoutGuide:withRounding:|
          'ns::|view:customToolTip:fadeOutAllowedForToolTipWithDisplayInfo:|
          'ns::|view:customToolTip:frameForToolTipWithDisplayInfo:|
          'ns::|view:customToolTip:drawInView:displayInfo:|
          'ns::|rectPreservedDuringLiveResize|
          'ns::|addLayoutGuide:|
          'ns::|revealContext:rectsForItem:|
          'ns::|knowsPagesFirst:last:|
          'ns::|knowsPageRange:|
          'ns::|adjustPageHeightNew:top:bottom:limit:|
          'ns::|didAddSubview:|
          'ns::|isRotatedFromBase|
          'ns::|rectForSmartMagnificationAtPoint:inRect:|
          'ns::|locationOfPrintRect:|
          'ns::|isInFullScreenMode|
          'ns::|wantsDefaultClipping|
          'ns::|showDefinitionForAttributedString:range:options:baselineOriginProvider:|
          'ns::|isInTouchBar|
          'ns::|displayIgnoringOpacity|
          'ns::|canSmoothFontsInLayer|
          'ns::|accessibilityAuditPotentialChildren|
          'ns::|visibleAccessibleOrLeafSubviews|
          'ns::|drawOverlayRect:|
          'ns::|showActiveFirstResponderIndication|
          'ns::|needsToDrawRect:|
          'ns::|overlayBounds|
          'ns::|preparedContentRect|
          'ns::|convertSizeFromBacking:|
          'ns::|nsis_valueOfVariable:didChangeInEngine:|
          'ns::|canDrawSubviewsIntoLayer|
          'ns::|resizeSubviewsWithOldSize:|
          'ns::|sortSubviewsUsingFunction:context:|
          'ns::|convertPointToLayer:|
          'ns::|accessibilityFocusRingMaskBounds|
          'ns::|inputContext|
          'ns::|removeToolTip:|
          'ns::|isRotatedOrScaledFromBase|
          'ns::|viewDidUnhide|
          'ns::|viewDidHide|
          'ns::|geometryInWindowDidChange|
          'ns::|printJobTitle|
          'ns::|rectForPage:|
          'ns::|setVerticalContentSizeConstraintActive:|
          'ns::|setHorizontalContentSizeConstraintActive:|
          'ns::|prepareContentInRect:|
          'ns::|convertPointFromBase:|
          'ns::|setWantsExtendedDynamicRangeOpenGLSurface:|
          'ns::|wantsExtendedDynamicRangeOpenGLSurface|
          'ns::|addToolTipRect:owner:userData:|
          'ns::|didResignActiveFirstResponder|
          'ns::|didBecomeActiveFirstResponder|
          'ns::|loggingDescription|
          'ns::|needsUpdateConstraints|
          'ns::|needsLayout|
          'ns::|autoresizesSubviews|
          'ns::|canDrawConcurrently|
          'ns::|pressureConfiguration|
          'ns::|setPressureConfiguration:|
          'ns::|renewGState|
          'ns::|wantsBestResolutionOpenGLSurface|
          'ns::|ancestorSharedWithView:|
          'ns::|alignmentLayoutRect|
          'ns::|setUpdateLayerHandler:|
          'ns::|hasAmbiguousLayout|
          'ns::|resizeWithOldSuperviewSize:|
          'ns::|needsDisplay|
          'ns::|functionRow|
          'ns::|actionForLayer:forKey:|
          'ns::|drawLayer:inContext:|
          'ns::|setLayerContentsPlacement:|
          'ns::|nsis_frame|
          'ns::|removeAllToolTips|
          'ns::|isDrawingFindIndicator|
          'ns::|allowedTouchTypes|
          'ns::|wantsRestingTouches|
          'ns::|recursiveDescription|
          'ns::|trackEventsMatchingMask:timeout:mode:handler:|
          'ns::|removeTrackingRect:|
          'ns::|addTrackingRect:owner:userData:assumeInside:|
          'ns::|helpRequested:|
          'ns::|concludeDragOperation:|
          'ns::|prepareForDragOperation:|
          'ns::|cursorUpdate:|
          'ns::|discardCursorRects|
          'ns::|firstBaselineAnchor|
          'ns::|layoutRect|
          'ns::|contentCompressionResistancePriorityForOrientation:|
          'ns::|contentHuggingPriorityForOrientation:|
          'ns::|clipsToBounds|
          'ns::|setContentFilters:|
          'ns::|contentFilters|
          'ns::|setBackgroundFilters:|
          'ns::|backgroundFilters|
          'ns::|setShadow:|
          'ns::|shadow|
          'ns::|nsli_ancestorSharedWithItem:|
          'ns::|compositingFilter|
          'ns::|accessibilityPopUpMenuParent:|
          'ns::|focusRingMaskBounds|
          'ns::|displayRect:|
          'ns::|shouldBeArchived|
          'ns::|ignoreHitTest|
          'ns::|acceptsTouchEvents|
          'ns::|setNeedsUpdateConstraints:|
          'ns::|replaceSubview:with:options:completionHandler:|
          'ns::|setAutoresizesSubviews:|
          'ns::|viewWillMoveToWindow:|
          'ns::|viewDidChangeBackingProperties|
          'ns::|lastBaselineAnchor|
          'ns::|candidateListTouchBarItem|
          'ns::|interpretKeyEvents:|
          'ns::|convertRectFromLayer:|
          'ns::|updateTrackingAreas|
          'ns::|viewDidEndLiveResize|
          'ns::|viewWillStartLiveResize|
          'ns::|constraints|
          'ns::|beginDraggingSessionWithItems:event:source:|
          'ns::|viewWithTag:|
          'ns::|enclosingMenuItem|
          'ns::|autoscroll:|
          'ns::|rotateByAngle:|
          'ns::|setBoundsRotation:|
          'ns::|setFrameRotation:|
          'ns::|previousValidKeyView|
          'ns::|adjustScroll:|
          'ns::|scaleUnitSquareToSize:|
          'ns::|translateOriginToPoint:|
          'ns::|setBoundsSize:|
          'ns::|viewWillMoveToSuperview:|
          'ns::|allocateGState|
          'ns::|constraintsDidChangeInEngine:|
          'ns::|updateConstraintsForSubtreeIfNeeded|
          'ns::|rightAnchor|
          'ns::|setUpGState|
          'ns::|deepestAccessibilityDescendants|
          'ns::|accessibilityAuditContrast|
          'ns::|accessibilityAuditLabel|
          'ns::|accessibilityAuditHierarchy|
          'ns::|accessibilitySectionsAttribute|
          'ns::|accessibilityDrawFocusRing|
          'ns::|accessibilityAuditParent|
          'ns::|drawFocusRingMask|
          'ns::|accessibilityWindowPointForShowMenu|
          'ns::|opaqueAncestor|
          'ns::|heartBeat:|
          'ns::|canBecomeKeyView|
          'ns::|setAllowsVibrancy:|
          'ns::|convertSizeToBacking:|
          'ns::|focusRingType|
          'ns::|nextValidKeyView|
          'ns::|trackingAreas|
          'ns::|topAnchor|
          'ns::|worksWhenModal|
          'ns::|print:|
          'ns::|accessibilityPopUpMenuClosed:accessibilityParent:|
          'ns::|accessibilityPopUpMenuCreated:forSubview:returningAccessibilityParent:|
          'ns::|prepareForMenu:withEvent:|
          'ns::|prepareMenu:withEvent:|
          'ns::|didCloseMenu:withEvent:|
          'ns::|willOpenMenu:withEvent:|
          'ns::|alphaValue|
          'ns::|setClipsToBounds:|
          'ns::|compositingOperation|
          'ns::|setCompositingOperation:|
          'ns::|constraintForIdentifier:|
          'ns::|effectiveContentStyle|
          'ns::|layerContentsRedrawPolicy|
          'ns::|lastBaselineOffsetFromBottom|
          'ns::|convertPointFromBacking:|
          'ns::|noteFocusRingMaskChanged|
          'ns::|performMnemonic:|
          'ns::|touchBarHitTestInsets|
          'ns::|baselineOffsetFromBottom|
          'ns::|firstBaselineOffsetFromTop|
          'ns::|sortSubviewsUsingBlock:|
          'ns::|frameForAlignmentRect:|
          'ns::|setContentStyle:|
          'ns::|lockFocusIfCanDraw|
          'ns::|invalidateConstraints|
          'ns::|invalidateIntrinsicContentSizeForCell:|
          'ns::|centerScanRect:|
          'ns::|animationForKey:|
          'ns::|setNextResponder:|
          'ns::|translatesAutoresizingMaskIntoConstraints|
          'ns::|headerView|
          'ns::|setFocusRingType:|
          'ns::|registeredDraggedTypes|
          'ns::|setFlipped:|
          'ns::|viewDidMoveToSuperview|
          'ns::|postsFrameChangedNotifications|
          'ns::|cacheDisplayInRect:toBitmapImageRep:|
          'ns::|bitmapImageRepForCachingDisplayInRect:|
          'ns::|removeFromSuperviewWithoutNeedingDisplay|
          'ns::|menuForEvent:|
          'ns::|scrollRect:by:|
          'ns::|scrollWheel:|
          'ns::|performDragOperation:|
          'ns::|draggingExited:|
          'ns::|draggingUpdated:|
          'ns::|draggingEntered:|
          'ns::|needsPanelToBecomeKey|
          'ns::|acceptsFirstMouse:|
          'ns::|unregisterDraggedTypes|
          'ns::|registerForDraggedTypes:|
          'ns::|dragImage:at:offset:event:pasteboard:source:slideBack:|
          'ns::|enclosingScrollView|
          'ns::|canDraw|
          'ns::|getRectsExposedDuringLiveResize:count:|
          'ns::|preservesContentDuringLiveResize|
          'ns::|inLiveResize|
          'ns::|convertPointToBacking:|
          'ns::|getRectsBeingDrawn:count:|
          'ns::|displayRectIgnoringOpacity:inContext:|
          'ns::|scrollPoint:|
          'ns::|setPostsBoundsChangedNotifications:|
          'ns::|setPostsFrameChangedNotifications:|
          'ns::|previousKeyView|
          'ns::|nextKeyView|
          'ns::|isDescendantOf:|
          'ns::|setKeyboardFocusRingNeedsDisplayInRect:|
          'ns::|setNeedsDisplayInRect:|
          'ns::|scrollRectToVisible:|
          'ns::|convertSize:toView:|
          'ns::|mouse:inRect:|
          'ns::|willRemoveSubview:|
          'ns::|viewWillDraw|
          'ns::|nsli_heightVariable|
          'ns::|nsli_widthVariable|
          'ns::|updateConstraints|
          'ns::|replaceSubview:with:|
          'ns::|preferredLayoutAttributesFittingAttributes:|
          'ns::|displayIfNeeded|
          'ns::|setLayerContentsRedrawPolicy:|
          'ns::|wantsLayer|
          'ns::|declaredLayoutConstraints|
          'ns::|centerYAnchor|
          'ns::|trailingAnchor|
          'ns::|leftAnchor|
          'ns::|setSubviews:|
          'ns::|setFrameSize:|
          'ns::|shouldDelayWindowOrderingForEvent:|
          'ns::|convertRectToLayer:|
          'ns::|designatedFocusRingView|
          'ns::|unlockFocus|
          'ns::|lockFocus|
          'ns::|cornerRadius|
          'ns::|animations|
          'ns::|convertSize:fromView:|
          'ns::|mouseDownCanMoveWindow|
          'ns::|drawRect:|
          'ns::|autoresizingMask|
          'ns::|removeConstraints:|
          'ns::|alignmentRectForFrame:|
          'ns::|setFrameOrigin:|
          'ns::|setNextKeyView:|
          'ns::|setAutoresizingMask:|
          'ns::|makeBackingLayer|
          'ns::|setLayer:|
          'ns::|setBounds:|
          'ns::|addTrackingArea:|
          'ns::|removeTrackingArea:|
          'ns::|convertRect:fromView:|
          'ns::|accessibilityVerticalUnitDescriptionAttribute|
          'ns::|accessibilityHorizontalUnitDescriptionAttribute|
          'ns::|accessibilityIsSizeAttributeSettable|
          'ns::|accessibilitySizeAttribute|
          'ns::|accessibilityIsPositionAttributeSettable|
          'ns::|accessibilityPositionAttribute|
          'ns::|accessibilityIsTopLevelUIElementAttributeSettable|
          'ns::|accessibilityTopLevelUIElementAttribute|
          'ns::|accessibilityIsWindowAttributeSettable|
          'ns::|accessibilityWindowAttribute|
          'ns::|accessibilityIsParentAttributeSettable|
          'ns::|accessibilityParentAttribute|
          'ns::|accessibilitySetFocusedAttribute:|
          'ns::|accessibilityIsFocusedAttributeSettable|
          'ns::|accessibilityFocusedAttribute|
          'ns::|accessibilityIsHelpAttributeSettable|
          'ns::|accessibilityHelpAttribute|
          'ns::|display|
          'ns::|setOpaque:|
          'ns::|setAlphaValue:|
          'ns::|layoutSubtreeIfNeeded|
          'ns::|performKeyEquivalent:|
          'ns::|setToolTip:|
          'ns::|toolTip|
          'ns::|isHiddenOrHasHiddenAncestor|
          'ns::|subviews|
          'ns::|tag|
          'ns::|gestureRecognizerShouldBegin:|
          'ns::|setAnimations:|
          'ns::|setBoundsOrigin:|
          'ns::|nextEventMatchingMask:|
          'ns::|convertPoint:fromView:|
          'ns::|hitTest:|
          'ns::|setUserInterfaceLayoutDirection:|
          'ns::|alignmentRectInsets|
          'ns::|setCornerRadius:|
          'ns::|backgroundColor|
          'ns::|animator|
          'ns::|removeFromSuperview|
          'ns::|viewDidMoveToWindow|
          'ns::|gestureRecognizers|
          'ns::|setAllowedTouchTypes:|
          'ns::|leadingAnchor|
          'ns::|setIgnoreHitTest:|
          'ns::|addConstraints:|
          'ns::|bottomAnchor|
          'ns::|heightAnchor|
          'ns::|centerXAnchor|
          'ns::|addConstraint:|
          'ns::|addSubview:positioned:relativeTo:|
          'ns::|addSubview:|
          'ns::|setShouldBeArchived:|
          'ns::|setWantsLayer:|
          'ns::|viewDidChangeEffectiveAppearance|
          'ns::|intrinsicContentSize|
          'ns::|setContentHuggingPriority:forOrientation:|
          'ns::|setContentCompressionResistancePriority:forOrientation:|
          'ns::|removeConstraint:|
          'ns::|fittingSize|
          'ns::|addGestureRecognizer:|
          'ns::|setTranslatesAutoresizingMaskIntoConstraints:|
          'ns::|widthAnchor|
          'ns::|initWithFrame:|
          'ns::|convertRect:toView:|
          'ns::|superview|
          'ns::|setNeedsLayout:|
          'ns::|disableGeometryInWindowDidChangeNotification|
          'ns::|enableGeometryInWindowDidChangeNotification|
          'ns::|updateLayer|
          'ns::|wantsUpdateLayer|
          'ns::|isOpaque|
          'ns::|allowsVibrancy|
          'ns::|addCursorRect:cursor:|
          'ns::|isFlipped|
          'ns::|visibleRect|
          'ns::|convertPoint:toView:|
          'ns::|setFrame:|
          'ns::|bounds|
          'ns::|setCompositingFilter:|
          'ns::|setBackgroundColor:|
          'ns::|layer|
          'ns::|invalidateIntrinsicContentSize|
          'ns::|setNeedsDisplay:|
          'ns::|resetCursorRects|
          'ns::|layout|
          'ns::|setIdentifier:|
          'ns::|prepareForReuse|
          'ns::|identifier|
          'ns::|setHidden:|
          'ns::|removeObserver:name:object:|
          'ns::|postNotificationName:object:userInfo:|
          'ns::|addObserver:selector:name:object:|
          'ns::|postNotification:|
          'ns::|postNotificationName:object:|
          'ns::|removeObserver:|
          'ns::|addObserverForName:object:queue:usingBlock:|
          'ns::|isEmpty|
          'ns::|displayLinkWithHandler:|
          'ns::|userSpaceScaleFactor|
          'ns::|auxiliaryTopRightArea|
          'ns::|auxiliaryTopLeftArea|
          'ns::|lastDisplayUpdateTimestamp|
          'ns::|displayUpdateGranularity|
          'ns::|maximumRefreshInterval|
          'ns::|minimumRefreshInterval|
          'ns::|maximumFramesPerSecond|
          'ns::|imageInRect:underWindow:|
          'ns::|imageInRect:|
          'ns::|bezelPath|
          'ns::|supportedWindowDepths|
          'ns::|safeAreaInsets|
          'ns::|maximumReferenceExtendedDynamicRangeColorComponentValue|
          'ns::|maximumPotentialExtendedDynamicRangeColorComponentValue|
          'ns::|maximumExtendedDynamicRangeColorComponentValue|
          'ns::|devicePixelCounts|
          'ns::|canRepresentDisplayGamut:|
          'ns::|deviceDescription|
          'ns::|convertRectFromBacking:|
          'ns::|convertRectToBacking:|
          'ns::|backingAlignedRect:options:|
          'ns::|backingScaleFactor|
          'ns::|colorSpace|
          'ns::|displayLinkWithTarget:selector:|
          'ns::|frame|
          'ns::|visibleFrame|
          'ns::|depth|
          'ns::|objectIsForcedForKey:inDomain:|
          'ns::|objectIsForcedForKey:|
          'ns::|removePersistentDomainForName:|
          'ns::|persistentDomainForName:|
          'ns::|persistentDomainNames|
          'ns::|removeVolatileDomainForName:|
          'ns::|setVolatileDomain:forName:|
          'ns::|volatileDomainForName:|
          'ns::|registerDefaults:|
          'ns::|removeSuiteNamed:|
          'ns::|addSuiteNamed:|
          'ns::|setSearchList:|
          'ns::|searchList|
          'ns::|setURL:forKey:|
          'ns::|setBool:forKey:|
          'ns::|setDouble:forKey:|
          'ns::|setFloat:forKey:|
          'ns::|setLong:forKey:|
          'ns::|setInteger:forKey:|
          'ns::|doubleForKey:|
          'ns::|floatForKey:|
          'ns::|longForKey:|
          'ns::|stringArrayForKey:|
          'ns::|dataForKey:|
          'ns::|removeObjectForKey:inDomain:|
          'ns::|objectForKey:inDomain:|
          'ns::|setPersistentDomain:forName:|
          'ns::|initWithUser:|
          'ns::|initWithSuiteName:|
          'ns::|setObject:forKey:inDomain:|
          'ns::|dictionaryRepresentation|
          'ns::|integerForKey:|
          'ns::|dictionaryForKey:|
          'ns::|arrayForKey:|
          'ns::|stringForKey:|
          'ns::|URLForKey:|
          'ns::|boolForKey:|
          'ns::|volatileDomainNames|
          'ns::|synchronize|
          'ns::|setObject:forKey:|
          'ns::|removeObjectForKey:|
          'ns::|objectForKey:|
          'ns::|bs_defaultExists:|
          'ns::|bs_setDomain:|
          'ns::|command|
          'ns::|coalescedTouchesForTouch:|
          'ns::|touchesForView:|
          'ns::|trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:|
          'ns::|stageTransition|
          'ns::|isDirectionInvertedFromDevice|
          'ns::|deviceDeltaZ|
          'ns::|deviceDeltaY|
          'ns::|deviceDeltaX|
          'ns::|isGesture|
          'ns::|charactersByApplyingModifiers:|
          'ns::|eventRef|
          'ns::|isARepeat|
          'ns::|gestureAmount|
          'ns::|deltaZ|
          'ns::|isEnteringProximity|
          'ns::|pointingDeviceType|
          'ns::|capabilityMask|
          'ns::|pointingDeviceSerialNumber|
          'ns::|vendorPointingDeviceType|
          'ns::|systemTabletID|
          'ns::|pointingDeviceID|
          'ns::|tabletID|
          'ns::|vendorID|
          'ns::|tangentialPressure|
          'ns::|tilt|
          'ns::|absoluteZ|
          'ns::|absoluteY|
          'ns::|absoluteX|
          'ns::|vendorDefined|
          'ns::|buttonNumber|
          'ns::|pressureBehavior|
          'ns::|velocity|
          'ns::|hasPreciseScrollingDeltas|
          'ns::|trackingNumber|
          'ns::|buttonMask|
          'ns::|magnification|
          'ns::|trackingArea|
          'ns::|eventNumber|
          'ns::|keyCode|
          'ns::|associatedEventsMask|
          'ns::|gestureAxis|
          'ns::|scrollingDeltaY|
          'ns::|momentumPhase|
          'ns::|clickCount|
          'ns::|scrollingDeltaX|
          'ns::|data2|
          'ns::|data1|
          'ns::|CGEvent|
          'ns::|allTouches|
          'ns::|touchesMatchingPhase:inView:|
          'ns::|modifierFlags|
          'ns::|phase|
          'ns::|locationInWindow|
          'ns::|pressure|
          'ns::|deltaY|
          'ns::|deltaX|
          'ns::|windowNumber|
          'ns::|deviceID|
          'ns::|charactersIgnoringModifiers|
          'ns::|timestamp|
          'ns::|characters|
          'ns::|progress|
          'ns::|uniqueID|
          'ns::|rotation|
          'ns::|stage|
          'ns::|userData|
          'ns::|window|
          'ns::|subtype|
          'ns::|type|
          'ns::|stackSize|
          'ns::|setStackSize:|
          'ns::|isDying|
          'ns::|initWithTarget:selector:object:|
          'ns::|qualityOfService|
          'ns::|setThreadPriority:|
          'ns::|threadPriority|
          'ns::|isExecuting|
          'ns::|isFinished|
          'ns::|initWithBlock:|
          'ns::|main|
          'ns::|isCancelled|
          'ns::|runLoop|
          'ns::|threadDictionary|
          'ns::|cancel|
          'ns::|isMainThread|
          'ns::|start|
          'ns::|setName:|
          'ns::|setQualityOfService:|
          'ns::|name|
          'ns::|executableArchitecture|
          'ns::|ownsMenuBar|
          'ns::|isFinishedLaunching|
          'ns::|isTerminated|
          'ns::|applyPendingPropertyChanges|
          'ns::|forceTerminate|
          'ns::|launchDate|
          'ns::|applicationSerialNumber|
          'ns::|initWithApplicationSerialNumber:|
          'ns::|hide|
          'ns::|activateWithOptions:|
          'ns::|unhide|
          'ns::|icon|
          'ns::|terminate|
          'ns::|processIdentifier|
          'ns::|localizedName|
          'ns::|completeStateRestoration|
          'ns::|extendStateRestoration|
          'ns::|setDefaultHelpBookSearchEnabled:|
          'ns::|isDefaultHelpBookSearchEnabled|
          'ns::|searchString:inUserInterfaceItemString:searchRange:foundRange:|
          'ns::|unregisterUserInterfaceItemSearchHandler:|
          'ns::|registerUserInterfaceItemSearchHandler:|
          'ns::|servicesMenu|
          'ns::|changeWindowsItem:title:filename:|
          'ns::|removeWindowsItem:|
          'ns::|resetAutomaticCustomizeTouchBarMenuItemEnabled|
          'ns::|setAutomaticCustomizeTouchBarMenuItemEnabled:|
          'ns::|isAutomaticCustomizeTouchBarMenuItemEnabled|
          'ns::|updateWindowsItem:|
          'ns::|setValue:forSafeApertureCompatibilityEnvironmentVariable:|
          'ns::|setValue:forSafeApertureCompatibilityConnectionProperty:|
          'ns::|getValue:forSafeApertureCompatibilityDefaultsKey:|
          'ns::|valueForSafeApertureCompatibilityEnvironmentVariable:|
          'ns::|getValue:forSafeApertureCompatibilityURLResourceKey:|
          'ns::|registerServicesMenuSendTypes:returnTypes:|
          'ns::|orderFrontStandardAboutPanel:|
          'ns::|orderFrontStandardAboutPanelWithOptions:|
          'ns::|unregisterServiceProviderNamed:|
          'ns::|registerServiceProvider:withName:|
          'ns::|setServicesProvider:|
          'ns::|servicesProvider|
          'ns::|setGestureEventMask:|
          'ns::|gestureEventMask|
          'ns::|setAppleMenu:|
          'ns::|setWindowsMenu:|
          'ns::|setServicesMenu:|
          'ns::|showHelp:|
          'ns::|activateContextHelpMode:|
          'ns::|orderFrontFontPanel:|
          'ns::|targetForAction:|
          'ns::|tryToPerform:with:|
          'ns::|discardEventsMatchingMask:beforeEvent:|
          'ns::|shouldBeTreatedAsInkEvent:|
          'ns::|orderFrontPreferencesPanel:|
          'ns::|NS_touchBarProvidersKeyPaths|
          'ns::|NS_touchBarProviders|
          'ns::|restoreWindowWithIdentifier:state:completionHandler:|
          'ns::|addWindowsItem:title:filename:|
          'ns::|areCursorRectsEnabled|
          'ns::|setAppearance:|
          'ns::|sendAction:to:from:|
          'ns::|runModalForCarbonWindow:|
          'ns::|handleQuitScriptCommand:|
          'ns::|handlePrintScriptCommand:|
          'ns::|handleOpenScriptCommand:|
          'ns::|valueInOrderedWindowsWithUniqueID:|
          'ns::|orderedWindows|
          'ns::|orderedDocuments|
          'ns::|isAccessibilityMovingFromTable|
          'ns::|isAccessibilityEventProcessedNotificationEnabled|
          'ns::|isAccessibilityEventProcessedNotificationSupported|
          'ns::|isAccessibilityMainThreadIdleNotificationEnabled|
          'ns::|isAccessibilityMainThreadIdleNotificationSupported|
          'ns::|accessibilityFocusChangedToElement:|
          'ns::|setAccessibilityMovingFromTable:|
          'ns::|accessibilityHitTest|
          'ns::|accessibilityAuditIssuesAttribute|
          'ns::|accessibilitySetEnhancedUserInterfaceAttribute:|
          'ns::|accessibilityIsEnhancedUserInterfaceAttributeSettable|
          'ns::|accessibilityEnhancedUserInterfaceAttribute|
          'ns::|accessibilityIsFocusedUIElementAttributeSettable|
          'ns::|accessibilityFocusedUIElementAttribute|
          'ns::|accessibilityIsFocusedWindowAttributeSettable|
          'ns::|accessibilityIsMainWindowAttributeSettable|
          'ns::|accessibilityMainWindowAttribute|
          'ns::|accessibilitySetHiddenAttribute:|
          'ns::|accessibilityIsHiddenAttributeSettable|
          'ns::|accessibilityHiddenAttribute|
          'ns::|accessibilitySetFrontmostAttribute:|
          'ns::|accessibilityIsFrontmostAttributeSettable|
          'ns::|accessibilityFrontmostAttribute|
          'ns::|accessibilityIsChildrenAttributeSettable|
          'ns::|accessibilityChildrenInNavigationOrderAttribute|
          'ns::|accessibilityIsWindowsAttributeSettable|
          'ns::|accessibilityIsMenuBarAttributeSettable|
          'ns::|accessibilityIsTitleAttributeSettable|
          'ns::|accessibilityTitleAttribute|
          'ns::|accessibilityWorkaroundRemoveExtraWindow:|
          'ns::|accessibilityWorkaroundAddExtraWindow:|
          'ns::|set_currentSentenceHighlightInfo:|
          'ns::|set_currentWordHighlightInfo:|
          'ns::|accessibilityFocusedWindowAttribute|
          'ns::|accessibilityFunctionRowTopLevelElementsAttribute|
          'ns::|accessibilityWindowsAttribute|
          'ns::|accessibilityMenuBarAttribute|
          'ns::|accessibilityExtrasMenuBarAttribute|
          'ns::|importFromDevice:|
          'ns::|enableRelaunchOnLogin|
          'ns::|disableRelaunchOnLogin|
          'ns::|isLaunchedForTesting|
          'ns::|performActivateDeactivateTestUsingTestName:completionHandler:|
          'ns::|performResizeTestOnWindow:preTestHandler:postTestHandler:|
          'ns::|performResizeTestOnWindow:usingTestName:completionHandler:|
          'ns::|performScrollTestOnScrollView:usingTestName:completionHandler:|
          'ns::|installCACommitCompletionBlock:|
          'ns::|finishedSubTest:forTest:waitForCommit:withCompletionHandler:|
          'ns::|finishedSubTest:forTest:|
          'ns::|startedSubTest:forTest:withMetrics:|
          'ns::|startedSubTest:forTest:|
          'ns::|failedTest:withFailure:withResults:|
          'ns::|failedTest:withResults:|
          'ns::|failedTest:withFailure:|
          'ns::|failedTest:|
          'ns::|finishedTest:waitForCommit:extraResults:withTeardownBlock:|
          'ns::|finishedTest:waitForCommit:extraResults:|
          'ns::|finishedTest:extraResults:waitForNotification:withTeardownBlock:|
          'ns::|finishedTest:extraResults:waitForNotification:|
          'ns::|finishedTest:extraResults:withTeardownBlock:|
          'ns::|finishedTest:extraResults:|
          'ns::|finishedTest:|
          'ns::|startedTest:|
          'ns::|runTest:options:|
          'ns::|isRunningQuitTest|
          'ns::|isRunningTest:|
          'ns::|isRunningTest|
          'ns::|enabledRemoteNotificationTypes|
          'ns::|isRegisteredForRemoteNotifications|
          'ns::|unregisterForRemoteNotifications|
          'ns::|registerForRemoteNotifications|
          'ns::|registerForRemoteNotificationTypes:|
          'ns::|presentError:modalForWindow:delegate:didPresentSelector:contextInfo:|
          'ns::|willPresentError:|
          'ns::|presentError:|
          'ns::|memoryStatus|
          'ns::|removeIdleMonitor:|
          'ns::|addIdleMonitorUsingHandler:|
          'ns::|removeMemoryPressureMonitor:|
          'ns::|addMemoryPressureMonitorUsingHandler:|
          'ns::|abortAllToolTips|
          'ns::|setCanEnterFullScreenMode:|
          'ns::|exitFullScreenMode:|
          'ns::|setPresentationOptions:|
          'ns::|isFullKeyboardAccessEnabled|
          'ns::|speechSynthesizer:didFinishSpeaking:|
          'ns::|reportException:|
          'ns::|setDockMenu:|
          'ns::|helpMenu|
          'ns::|setHelpMenu:|
          'ns::|setMenu:|
          'ns::|setActivationPolicy:|
          'ns::|applicationIconImage|
          'ns::|frontWindow|
          'ns::|quickLookPreviewItemsAtWindowLocation:|
          'ns::|event:wouldActivateWindow:|
          'ns::|rightMouseDown:|
          'ns::|onFirstEvent|
          'ns::|preventWindowOrdering|
          'ns::|delayWindowOrdering|
          'ns::|runModalSession:|
          'ns::|abortModal|
          'ns::|endSheet:|
          'ns::|stopModal|
          'ns::|stop:|
          'ns::|beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:|
          'ns::|runModalForWindow:relativeToWindow:|
          'ns::|deactivate|
          'ns::|replyToOpenOrPrint:|
          'ns::|openTempFile:ok:|
          'ns::|openFile:ok:|
          'ns::|unhide:|
          'ns::|isProtectedDataAvailable|
          'ns::|occlusionState|
          'ns::|markAppLaunchComplete|
          'ns::|enterFullScreenMode:|
          'ns::|modeAndOptions:forPresentationOptions:usingForFullScreen:|
          'ns::|doCommandBySelector:|
          'ns::|showGuessPanel:|
          'ns::|orderFrontColorPanel:|
          'ns::|toggleTouchBarControlStripCustomizationPalette:|
          'ns::|toggleTouchBarCustomizationPalette:|
          'ns::|hideOtherApplications:|
          'ns::|unhideAllApplications:|
          'ns::|zoomAll:|
          'ns::|miniaturizeAll:|
          'ns::|alternateArrangeInFront:|
          'ns::|arrangeInFront:|
          'ns::|stopDictation:|
          'ns::|startDictation:|
          'ns::|runPageLayout:|
          'ns::|isSpeaking|
          'ns::|stopSpeaking:|
          'ns::|enableCursorRects|
          'ns::|disableCursorRects|
          'ns::|setMainMenu:|
          'ns::|quickLookPreviewItems:|
          'ns::|activeSpaceChanged:|
          'ns::|currentEvent|
          'ns::|restoreStateWithCoder:|
          'ns::|encodeRestorableStateWithCoder:|
          'ns::|shouldRestoreStateOnNextLaunch|
          'ns::|replyToApplicationShouldTerminate:|
          'ns::|cancelUserAttentionRequest:|
          'ns::|dockTile|
          'ns::|requestUserAttention:|
          'ns::|beginModalSessionForWindow:relativeToWindow:|
          'ns::|endModalSession:|
          'ns::|beginModalSessionForWindow:|
          'ns::|finishLaunching|
          'ns::|sendEvent:|
          'ns::|modalWindow|
          'ns::|makeWindowsPerform:inOrder:|
          'ns::|updateWindows|
          'ns::|currentSystemPresentationOptions|
          'ns::|unhideWithoutActivation|
          'ns::|activationPolicy|
          'ns::|validRequestorForSendType:returnType:|
          'ns::|setApplicationIconImage:|
          'ns::|orderFrontCharacterPalette:|
          'ns::|setIsActive:|
          'ns::|hide:|
          'ns::|terminate:|
          'ns::|touchBar|
          'ns::|speakString:|
          'ns::|stopModalWithCode:|
          'ns::|endSheet:returnCode:|
          'ns::|runModalForWindow:|
          'ns::|accessibilityChildrenAttribute|
          'ns::|setAccessibilityEventProcessedNotificationEnabled:|
          'ns::|setAccessibilityMainThreadIdleNotificationEnabled:|
          'ns::|accessibilityPerformAction:|
          'ns::|accessibilityActionDescription:|
          'ns::|accessibilityActionNames|
          'ns::|accessibilitySetValue:forAttribute:|
          'ns::|accessibilityIsAttributeSettable:|
          'ns::|accessibilityIsRoleDescriptionAttributeSettable|
          'ns::|accessibilityRoleDescriptionAttribute|
          'ns::|accessibilityIsRoleAttributeSettable|
          'ns::|accessibilityRoleAttribute|
          'ns::|supplementalTargetForAction:sender:|
          'ns::|closeAll:|
          'ns::|windowsMenu|
          'ns::|validateUserInterfaceItem:|
          'ns::|validateMenuItem:|
          'ns::|enumerateWindowsWithOptions:usingBlock:|
          'ns::|windows|
          'ns::|presentationOptions|
          'ns::|mainWindow|
          'ns::|targetForAction:to:from:|
          'ns::|canEnterFullScreenMode|
          'ns::|accessibilityMayContainProtectedContent|
          'ns::|mainMenu|
          'ns::|accessibilityAttributeValue:|
          'ns::|accessibilityAttributeNames|
          'ns::|accessibilityIsIgnored|
          'ns::|accessibilityFrame|
          'ns::|accessibilityHitTest:|
          'ns::|accessibilityFocusedUIElement|
          'ns::|accessibilitySetMayContainProtectedContent:|
          'ns::|accessibilityParent|
          'ns::|userInterfaceLayoutDirection|
          'ns::|windowWithWindowNumber:|
          'ns::|activateIgnoringOtherApps:|
          'ns::|appearance|
          'ns::|effectiveAppearance|
          'ns::|postEvent:atStart:|
          'ns::|nextEventMatchingMask:untilDate:inMode:dequeue:|
          'ns::|setWindowsNeedUpdate:|
          'ns::|pushRegistrationDidReceiveRemotePush:|
          'ns::|pushRegistrationDidFailToRegister:|
          'ns::|pushRegistrationDidRegisterWithDeviceToken:|
          'ns::|keyWindow|
          'ns::|contextID|
          'ns::|context|
          'ns::|isRunning|
          'ns::|enableAutomaticTermination|
          'ns::|disableAutomaticTermination|
          'ns::|isActive|
          'ns::|menu|
          'ns::|.cxx_destruct|
          'ns::|isHidden|
          'ns::|setDelegate:|
          'ns::|delegate|
          'ns::|run|
          'ns::|initWithFloat:|
          'ns::|initWithUnsignedLong:|
          'ns::|initWithUnsignedInteger:|
          'ns::|initWithInteger:|
          'ns::|initWithBool:|
          'ns::|decimalValue|
          'ns::|unsignedIntegerValue|
          'ns::|integerValue|
          'ns::|stringValue|
          'ns::|descriptionWithLocale:|
          'ns::|isEqualToNumber:|
          'ns::|initWithCoder:|
          'ns::|encodeWithCoder:|
          'ns::|compare:|
          'ns::|boolValue|
          'ns::|redactedDescription|
          'ns::|unsignedLongLongValue|
          'ns::|longLongValue|
          'ns::|doubleValue|
          'ns::|floatValue|
          'ns::|unsignedLongValue|
          'ns::|longValue|
          'ns::|unsignedIntValue|
          'ns::|intValue|
          'ns::|unsignedShortValue|
          'ns::|shortValue|
          'ns::|unsignedCharValue|
          'ns::|charValue|
          'ns::|initWithDouble:|
          'ns::|initWithUnsignedLongLong:|
          'ns::|initWithLongLong:|
          'ns::|initWithLong:|
          'ns::|initWithUnsignedInt:|
          'ns::|initWithInt:|
          'ns::|initWithUnsignedShort:|
          'ns::|initWithShort:|
          'ns::|initWithUnsignedChar:|
          'ns::|initWithChar:|
          'ns::|copyWithZone:|
          'ns::|processPredicate|
          'ns::|rbs_pid|
          'ns::|matchesProcess:|
          'ns::|preservationPriorityForTag:|
          'ns::|setPreservationPriority:forTag:|
          'ns::|setPreservationPriority:forTags:|
          'ns::|localizedAttributedStringForKey:value:table:|
          'ns::|executableArchitectures|
          'ns::|preflightAndReturnError:|
          'ns::|developmentLocalization|
          'ns::|pathsForResourcesOfType:inDirectory:forLanguage:|
          'ns::|pathForResource:ofType:inDirectory:forLanguage:|
          'ns::|invalidateResourceCache|
          'ns::|bundleLanguages|
          'ns::|versionNumber|
          'ns::|builtInPlugInsURL|
          'ns::|builtInPlugInsPath|
          'ns::|sharedSupportURL|
          'ns::|sharedSupportPath|
          'ns::|sharedFrameworksURL|
          'ns::|sharedFrameworksPath|
          'ns::|privateFrameworksURL|
          'ns::|privateFrameworksPath|
          'ns::|URLForAuxiliaryExecutable:|
          'ns::|pathForAuxiliaryExecutable:|
          'ns::|executablePath|
          'ns::|resourcePath|
          'ns::|localizedStringForKey:value:table:localization:|
          'ns::|localizedStringForKey:value:table:|
          'ns::|URLsForResourcesWithExtension:subdirectory:|
          'ns::|URLsForResourcesWithExtension:subdirectory:localization:|
          'ns::|findBundleResourceURLsCallingMethod:passingTest:|
          'ns::|pathsForResourcesOfType:inDirectory:|
          'ns::|pathForResource:ofType:inDirectory:|
          'ns::|localizedAttributedStringForKey:value:table:localization:|
          'ns::|pathsForResourcesOfType:inDirectory:forLocalization:|
          'ns::|pathForResource:ofType:inDirectory:forLocalization:|
          'ns::|isLoaded|
          'ns::|localizedInfoDictionary|
          'ns::|localizations|
          'ns::|initWithPath:|
          'ns::|unload|
          'ns::|URLForResource:withExtension:subdirectory:|
          'ns::|URLForResource:withExtension:subdirectory:localization:|
          'ns::|classNamed:|
          'ns::|URLForResource:withExtension:|
          'ns::|pathForResource:ofType:|
          'ns::|resourceURL|
          'ns::|bundlePath|
          'ns::|principalClass|
          'ns::|loadAndReturnError:|
          'ns::|objectForInfoDictionaryKey:|
          'ns::|executableURL|
          'ns::|appStoreReceiptURL|
          'ns::|bundleURL|
          'ns::|bundleIdentifier|
          'ns::|infoDictionary|
          'ns::|preferredLocalizations|
          'ns::|initWithURL:|
          'ns::|load|
          'ns::|localizedStringInDeviceLanguageForKey:|
          'ns::|loadNibFile:externalNameTable:options:withZone:|
          'ns::|loadNibFile:externalNameTable:withZone:|
          'ns::|pathForImageResource:|
          'ns::|URLForImageResource:|
          'ns::|URLsForImageResource:|
          'ns::|contextHelpForKey:|
          'ns::|pathForSoundResource:|
          'ns::|imageForResource:|
          'ns::|loadNibNamed:owner:topLevelObjects:|
          'ns::|mutableCopy|
          'ns::|forwardingTargetForSelector:|
          'ns::|forwardInvocation:|
          'ns::|methodForSelector:|
          'ns::|isFault|
          'ns::|allowsWeakReference|
          'ns::|retainWeakReference|
          'ns::|init|
          'ns::|debugDescription|
          'ns::|superclass|
          'ns::|hash|
          'ns::|zone|
          'ns::|respondsToSelector:|
          'ns::|conformsToProtocol:|
          'ns::|isMemberOfClass:|
          'ns::|isKindOfClass:|
          'ns::|isProxy|
          'ns::|performSelector:withObject:withObject:|
          'ns::|performSelector:withObject:|
          'ns::|performSelector:|
          'ns::|self|
          'ns::|class|
          'ns::|isEqual:|
          'ns::|dealloc|
          'ns::|finalize|
          'ns::|copy|
          'ns::|autorelease|
          'ns::|retainCount|
          'ns::|release|
          'ns::|retain|
          'ns::|methodSignatureForSelector:|
          'ns::|doesNotRecognizeSelector:|
          'ns::|description|
          'ns::|isNSValue__|
          'ns::|isNSTimeZone__|
          'ns::|isNSOrderedSet__|
          'ns::|isNSObject__|
          'ns::|isNSData__|
          'ns::|isNSSet__|
          'ns::|isNSDictionary__|
          'ns::|isNSArray__|
          'ns::|isNSDate__|
          'ns::|isNSNumber__|
          'ns::|isNSCFConstantString__|
          'ns::|isNSString__|
          'ns::|takeStoredValuesFromDictionary:|
          'ns::|removeObject:fromBothSidesOfRelationshipWithKey:|
          'ns::|flushKeyBindings|
          'ns::|clearProperties|
          'ns::|allPropertyKeys|
          'ns::|addObject:toBothSidesOfRelationshipWithKey:|
          'ns::|validateTakeValue:forKeyPath:|
          'ns::|addObject:toPropertyWithKey:|
          'ns::|removeObject:fromPropertyWithKey:|
          'ns::|isToManyKey:|
          'ns::|validateValue:forKey:|
          'ns::|ownsDestinationObjectsForRelationshipKey:|
          'ns::|entityName|
          'ns::|classDescriptionForDestinationKey:|
          'ns::|performSelectorInBackground:withObject:|
          'ns::|performSelector:onThread:withObject:waitUntilDone:|
          'ns::|performSelectorOnMainThread:withObject:waitUntilDone:|
          'ns::|performSelectorOnMainThread:withObject:waitUntilDone:modes:|
          'ns::|performSelector:onThread:withObject:waitUntilDone:modes:|
          'ns::|isCaseInsensitiveLike:|
          'ns::|isLike:|
          'ns::|doesContain:|
          'ns::|isNotEqualTo:|
          'ns::|isGreaterThan:|
          'ns::|isGreaterThanOrEqualTo:|
          'ns::|isLessThan:|
          'ns::|isLessThanOrEqualTo:|
          'ns::|isEqualTo:|
          'ns::|classCode|
          'ns::|performSelector:object:afterDelay:|
          'ns::|performSelector:withObject:afterDelay:|
          'ns::|performSelector:withObject:afterDelay:inModes:|
          'ns::|classForPortCoder|
          'ns::|removeValueAtIndex:fromPropertyWithKey:|
          'ns::|insertValue:inPropertyWithKey:|
          'ns::|replaceValueAtIndex:inPropertyWithKey:withValue:|
          'ns::|insertValue:atIndex:inPropertyWithKey:|
          'ns::|valueWithUniqueID:inPropertyWithKey:|
          'ns::|valueWithName:inPropertyWithKey:|
          'ns::|valueAtIndex:inPropertyWithKey:|
          'ns::|coerceValueForScriptingProperties:|
          'ns::|scriptingProperties|
          'ns::|scriptingValueForSpecifier:|
          'ns::|setScriptingProperties:|
          'ns::|coerceValue:forKey:|
          'ns::|autoContentAccessingProxy|
          'ns::|removeObserver:forKeyPath:|
          'ns::|observationInfo|
          'ns::|didChangeValueForKey:withSetMutation:usingObjects:|
          'ns::|willChangeValueForKey:withSetMutation:usingObjects:|
          'ns::|didChange:valuesAtIndexes:forKey:|
          'ns::|willChange:valuesAtIndexes:forKey:|
          'ns::|setValuesForKeysWithDictionary:|
          'ns::|mutableSetValueForKey:|
          'ns::|mutableOrderedSetValueForKey:|
          'ns::|mutableArrayValueForKey:|
          'ns::|validateValue:forKey:error:|
          'ns::|setNilValueForKey:|
          'ns::|setValue:forUndefinedKey:|
          'ns::|addObservationTransformer:|
          'ns::|addObserverBlock:|
          'ns::|addChainedObservers:|
          'ns::|className|
          'ns::|removeObservation:forObservableKeyPath:|
          'ns::|removeObserver:forKeyPath:context:|
          'ns::|observeValueForKeyPath:ofObject:change:context:|
          'ns::|addObserver:forKeyPath:options:context:|
          'ns::|setObservation:forObservingKeyPath:|
          'ns::|finishObserving|
          'ns::|receiveObservedError:|
          'ns::|receiveObservedValue:|
          'ns::|removeObservation:|
          'ns::|addObserver:forObservableKeyPath:|
          'ns::|mutableSetValueForKeyPath:|
          'ns::|mutableOrderedSetValueForKeyPath:|
          'ns::|mutableArrayValueForKeyPath:|
          'ns::|setValue:forKeyPath:|
          'ns::|validateValue:forKeyPath:error:|
          'ns::|createKeyValueBindingForKey:typeMask:|
          'ns::|keyValueBindingForKey:typeMask:|
          'ns::|unableToSetNilForKey:|
          'ns::|takeValuesFromDictionary:|
          'ns::|valuesForKeys:|
          'ns::|takeValue:forKeyPath:|
          'ns::|takeValue:forKey:|
          'ns::|takeStoredValue:forKey:|
          'ns::|storedValueForKey:|
          'ns::|handleTakeValue:forUnboundKey:|
          'ns::|handleQueryWithUnboundKey:|
          'ns::|newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:|
          'ns::|methodDescriptionForSelector:|
          'ns::|copyScriptingValue:forKey:withProperties:|
          'ns::|classDescription|
          'ns::|inverseForRelationshipKey:|
          'ns::|toManyRelationshipKeys|
          'ns::|toOneRelationshipKeys|
          'ns::|attributeKeys|
          'ns::|classForArchiver|
          'ns::|replacementObjectForArchiver:|
          'ns::|objectSpecifier|
          'ns::|valueForKeyPath:|
          'ns::|dictionaryWithValuesForKeys:|
          'ns::|replacementObjectForKeyedArchiver:|
          'ns::|classForKeyedArchiver|
          'ns::|addObserver:|
          'ns::|valueForUndefinedKey:|
          'ns::|valueForKey:|
          'ns::|didChangeValueForKey:|
          'ns::|willChangeValueForKey:|
          'ns::|replacementObjectForPortCoder:|
          'ns::|setValue:forKey:|
          'ns::|setObservationInfo:|
          'ns::|implementsSelector:|
          'ns::|awakeAfterUsingCoder:|
          'ns::|replacementObjectForCoder:|
          'ns::|classForCoder|
          'ns::|bs_encoded|
          'ns::|bs_secureEncoded|
          'ns::|bs_isPlistableType|
          'ns::|supportsBSXPCSecureCoding|
          'ns::|NSRepresentation|
          'ns::|RBSIsXPCObject|
          'ns::|supportsRBSXPCSecureCoding|
          'ns::|CA_archivingValueForKey:|
          'ns::|CAMLType|
          'ns::|CA_interpolateValues:::interpolator:|
          'ns::|encodeWithCAMLWriter:|
          'ns::|CA_validateValue:forKey:|
          'ns::|CAMLTypeSupportedForKey:|
          'ns::|CAMLTypeForKey:|
          'ns::|CA_copyNumericValue:|
          'ns::|CA_copyRenderValueWithColorspace:|
          'ns::|CA_copyRenderValue|
          'ns::|CA_prepareRenderValue|
          'ns::|CA_roundToIntegerFromValue:|
          'ns::|CA_distanceToValue:|
          'ns::|CA_interpolateValue:byFraction:|
          'ns::|CA_addValue:multipliedBy:|
          'ns::|NS_removeTiledLayerDescendent:|
          'ns::|NS_addTiledLayerDescendent:|
          'ns::|NS_tiledLayerVisibleRect|
          'ns::|accessibilitySetPresenterProcessIdentifier:|
          'ns::|NSLifeguard_autorelease|
          'ns::|accessibilityRemoveTemporaryChild:|
          'ns::|accessibilityAddTemporaryChild:|
          'ns::|prepareForInterfaceBuilder|
          'ns::|infoForBinding:|
          'ns::|exposedBindings|
          'ns::|optionDescriptionsForBinding:|
          'ns::|NS_observationForKeyPaths:options:block:|
          'ns::|NS_observationForKeyPath:options:block:|
          'ns::|valueClassForBinding:|
          'ns::|unbind:|
          'ns::|setUserInterfaceItemIdentifier:|
          'ns::|userInterfaceItemIdentifier|
          'ns::|awakeFromNib|
          'ns::|bind:toObject:withKeyPath:options:|
          'ns::|accessibilitySupportsCustomElementData|
          'ns::|accessibilityDecodeOverriddenAttributes:|
          'ns::|accessibilityEncodeOverriddenAttributes:|
          'ns::|accessibilitySetOverrideValue:forAttribute:|
          'ns::|accessibilityAllowsOverriddenAttributesWhenIgnored|
          'ns::|accessibilityShouldSendNotification:|
          'ns::|accessibilitySupportsNotifications|
          'ns::|accessibilitySupportsOverriddenAttributes|
          'ns::|accessibilityShouldUseUniqueId|
          'ns::|accessibilityPresenterProcessIdentifier|
          'ns::|accessibilityPerformShowMenuOfChild:|
          'ns::|accessibilityTemporaryChildren|
          'ns::|accessibilityAttributedValueForStringAttributeAttributeForParameter:|
          'ns::|accessibilityIndexForChildUIElementAttributeForParameter:|
          'ns::|accessibilityAttributeValue:forParameter:|
          'ns::|accessibilityParameterizedAttributeNames|
          'ns::|accessibilityArrayAttributeValues:index:maxCount:|
          'ns::|accessibilityIndexOfChild:|
          'ns::|accessibilityArrayAttributeCount:|
          'ns::|accessibilityVisibleArea|
          'ns::|accessibilityReplaceRange:withText:|
          'ns::|accessibilityOverriddenAttributes|) :ns)