(in-package :clui)
(named-readtables:in-readtable :objc-readtable)


(defun ns::|accessibilityOverriddenAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityOverriddenAttributes) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityReplaceRange:withText:| (thing _ with-text)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityReplaceRange:withText:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-text)))) nil t))

(defun ns::|accessibilityVisibleArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleArea) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityArrayAttributeCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityArrayAttributeCount:) (( :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityIndexOfChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIndexOfChild:) (( :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityArrayAttributeValues:index:maxCount:| (thing _ index max-count)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityArrayAttributeValues:index:maxCount:) (( :POINTER :UNSIGNED-LONG-LONG :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) index max-count)))

(defun ns::|accessibilityParameterizedAttributeNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityParameterizedAttributeNames) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityAttributeValue:forParameter:| (thing _ for-parameter)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributeValue:forParameter:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-parameter))))

(defun ns::|accessibilityIndexForChildUIElementAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIndexForChildUIElementAttributeForParameter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityAttributedValueForStringAttributeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributedValueForStringAttributeAttributeForParameter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityTemporaryChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTemporaryChildren) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityPerformShowMenuOfChild:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformShowMenuOfChild:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|accessibilityPresenterProcessIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPresenterProcessIdentifier) (()  :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityShouldUseUniqueId| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityShouldUseUniqueId) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySupportsOverriddenAttributes| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilitySupportsOverriddenAttributes) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySupportsNotifications| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilitySupportsNotifications) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityShouldSendNotification:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityShouldSendNotification:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|accessibilityAllowsOverriddenAttributesWhenIgnored| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityAllowsOverriddenAttributesWhenIgnored) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySetOverrideValue:forAttribute:| (thing _ for-attribute)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetOverrideValue:forAttribute:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-attribute)))) nil t))

(defun ns::|accessibilityEncodeOverriddenAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityEncodeOverriddenAttributes:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityDecodeOverriddenAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDecodeOverriddenAttributes:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySupportsCustomElementData| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilitySupportsCustomElementData) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|bind:toObject:withKeyPath:options:| (thing _ to-object with-key-path options)
  (let ((message-lambda 
         (make-message-lambda @(bind:toObject:withKeyPath:options:) (( :POINTER :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-object) (objc-object-id with-key-path) (objc-object-id options))))

(defun ns::|awakeFromNib| (thing)
  (let ((message-lambda 
         (make-message-lambda @(awakeFromNib) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|userInterfaceItemIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userInterfaceItemIdentifier) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setUserInterfaceItemIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUserInterfaceItemIdentifier:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|unbind:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unbind:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|valueClassForBinding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueClassForBinding:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|NS_observationForKeyPath:options:block:| (thing _ options block)
  (let ((message-lambda 
         (make-message-lambda @(NS_observationForKeyPath:options:block:) (( :POINTER :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options (objc-object-id block))))

(defun ns::|NS_observationForKeyPaths:options:block:| (thing _ options block)
  (let ((message-lambda 
         (make-message-lambda @(NS_observationForKeyPaths:options:block:) (( :POINTER :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options (objc-object-id block))))

(defun ns::|optionDescriptionsForBinding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(optionDescriptionsForBinding:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|exposedBindings| (thing)
  (let ((message-lambda 
         (make-message-lambda @(exposedBindings) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|infoForBinding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(infoForBinding:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|prepareForInterfaceBuilder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(prepareForInterfaceBuilder) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityAddTemporaryChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAddTemporaryChild:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityRemoveTemporaryChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRemoveTemporaryChild:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|NSLifeguard_autorelease| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NSLifeguard_autorelease) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilitySetPresenterProcessIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetPresenterProcessIdentifier:) (( :INT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|NS_tiledLayerVisibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_tiledLayerVisibleRect) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|NS_addTiledLayerDescendent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_addTiledLayerDescendent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|NS_removeTiledLayerDescendent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_removeTiledLayerDescendent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|CA_addValue:multipliedBy:| (thing _ multiplied-by)
  (let ((message-lambda 
         (make-message-lambda @(CA_addValue:multipliedBy:) (( :POINTER :INT)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) multiplied-by)))

(defun ns::|CA_interpolateValue:byFraction:| (thing _ by-fraction)
  (let ((message-lambda 
         (make-message-lambda @(CA_interpolateValue:byFraction:) (( :POINTER :FLOAT)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) by-fraction)))

(defun ns::|CA_distanceToValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_distanceToValue:) (( :POINTER)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|CA_roundToIntegerFromValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_roundToIntegerFromValue:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|CA_prepareRenderValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CA_prepareRenderValue) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|CA_copyRenderValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CA_copyRenderValue) (()  ( :POINTER ( :STRUCT ns::|Object|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|CA_copyRenderValueWithColorspace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_copyRenderValueWithColorspace:) (( ( :POINTER ( :STRUCT ns::|CGColorSpace|)))  ( :POINTER ( :STRUCT ns::|Object|)))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|CA_copyNumericValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_copyNumericValue:) (( ( :ARRAY :DOUBLE 20))  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|CAMLTypeForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CAMLTypeForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|CAMLTypeSupportedForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(CAMLTypeSupportedForKey:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|CA_validateValue:forKey:| (thing _ for-key)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(CA_validateValue:forKey:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key)))) nil t))

(defun ns::|encodeWithCAMLWriter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(encodeWithCAMLWriter:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|CA_interpolateValues:::interpolator:| (thing _ g769 g770 interpolator)
  (let ((message-lambda 
         (make-message-lambda @(CA_interpolateValues:::interpolator:) (( :POINTER :POINTER :POINTER ( :POINTER ( :STRUCT ns::|ValueInterpolator|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id g769) (objc-object-id g770) (objc-object-id interpolator))))

(defun ns::|CAMLType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CAMLType) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|CA_archivingValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CA_archivingValueForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|supportsRBSXPCSecureCoding| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(supportsRBSXPCSecureCoding) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|RBSIsXPCObject| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(RBSIsXPCObject) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|NSRepresentation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NSRepresentation) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|supportsBSXPCSecureCoding| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(supportsBSXPCSecureCoding) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|bs_isPlistableType| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(bs_isPlistableType) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|bs_secureEncoded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bs_secureEncoded) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bs_encoded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bs_encoded) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|classForCoder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classForCoder) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|replacementObjectForCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replacementObjectForCoder:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|awakeAfterUsingCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(awakeAfterUsingCoder:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|implementsSelector:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(implementsSelector:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|setObservationInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setObservationInfo:) (( ( :POINTER :VOID))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun ns::|replacementObjectForPortCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replacementObjectForPortCoder:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|willChangeValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(willChangeValueForKey:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|didChangeValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(didChangeValueForKey:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|valueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|valueForUndefinedKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueForUndefinedKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addObserver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addObserver:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|classForKeyedArchiver| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classForKeyedArchiver) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|replacementObjectForKeyedArchiver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replacementObjectForKeyedArchiver:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|dictionaryWithValuesForKeys:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dictionaryWithValuesForKeys:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|valueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueForKeyPath:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|objectSpecifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(objectSpecifier) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|replacementObjectForArchiver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replacementObjectForArchiver:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|classForArchiver| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classForArchiver) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|attributeKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributeKeys) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|toOneRelationshipKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toOneRelationshipKeys) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|toManyRelationshipKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toManyRelationshipKeys) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|inverseForRelationshipKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(inverseForRelationshipKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|classDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|copyScriptingValue:forKey:withProperties:| (thing _ for-key with-properties)
  (let ((message-lambda 
         (make-message-lambda @(copyScriptingValue:forKey:withProperties:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key) (objc-object-id with-properties))))

(defun ns::|methodDescriptionForSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(methodDescriptionForSelector:) (( :POINTER)  ( :POINTER ( :STRUCT ns::|objc_method_description|)))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:| (thing _ for-value-for-key with-contents-value properties)
  (let ((message-lambda 
         (make-message-lambda @(newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:) (( :POINTER :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-value-for-key) (objc-object-id with-contents-value) (objc-object-id properties))))

(defun ns::|handleQueryWithUnboundKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleQueryWithUnboundKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|handleTakeValue:forUnboundKey:| (thing _ for-unbound-key)
  (let ((message-lambda 
         (make-message-lambda @(handleTakeValue:forUnboundKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-unbound-key))))

(defun ns::|storedValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(storedValueForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|takeStoredValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(takeStoredValue:forKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun ns::|takeValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(takeValue:forKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun ns::|takeValue:forKeyPath:| (thing _ for-key-path)
  (let ((message-lambda 
         (make-message-lambda @(takeValue:forKeyPath:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path))))

(defun ns::|valuesForKeys:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valuesForKeys:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|takeValuesFromDictionary:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeValuesFromDictionary:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|unableToSetNilForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unableToSetNilForKey:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|keyValueBindingForKey:typeMask:| (thing _ type-mask)
  (let ((message-lambda 
         (make-message-lambda @(keyValueBindingForKey:typeMask:) (( :POINTER :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) type-mask)))

(defun ns::|createKeyValueBindingForKey:typeMask:| (thing _ type-mask)
  (let ((message-lambda 
         (make-message-lambda @(createKeyValueBindingForKey:typeMask:) (( :POINTER :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) type-mask)))

(defun ns::|validateValue:forKeyPath:error:| (thing _ for-key-path error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateValue:forKeyPath:error:) (( ( :POINTER :POINTER) :POINTER ( :POINTER :POINTER))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path) (objc-object-id error)))) nil t))

(defun ns::|setValue:forKeyPath:| (thing _ for-key-path)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forKeyPath:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path))))

(defun ns::|mutableArrayValueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableArrayValueForKeyPath:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|mutableOrderedSetValueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableOrderedSetValueForKeyPath:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|mutableSetValueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableSetValueForKeyPath:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addObserver:forObservableKeyPath:| (thing _ for-observable-key-path)
  (let ((message-lambda 
         (make-message-lambda @(addObserver:forObservableKeyPath:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-observable-key-path))))

(defun ns::|removeObservation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeObservation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|receiveObservedValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(receiveObservedValue:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|receiveObservedError:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(receiveObservedError:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|finishObserving| (thing)
  (let ((message-lambda 
         (make-message-lambda @(finishObserving) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setObservation:forObservingKeyPath:| (thing _ for-observing-key-path)
  (let ((message-lambda 
         (make-message-lambda @(setObservation:forObservingKeyPath:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-observing-key-path))))

(defun ns::|addObserver:forKeyPath:options:context:| (thing _ for-key-path options context)
  (let ((message-lambda 
         (make-message-lambda @(addObserver:forKeyPath:options:context:) (( :POINTER :POINTER :UNSIGNED-LONG-LONG ( :POINTER :VOID))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path) options (objc-object-id context))))

(defun ns::|observeValueForKeyPath:ofObject:change:context:| (thing _ of-object change context)
  (let ((message-lambda 
         (make-message-lambda @(observeValueForKeyPath:ofObject:change:context:) (( :POINTER :POINTER :POINTER ( :POINTER :VOID))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id of-object) (objc-object-id change) (objc-object-id context))))

(defun ns::|removeObserver:forKeyPath:context:| (thing _ for-key-path context)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:forKeyPath:context:) (( :POINTER :POINTER ( :POINTER :VOID))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path) (objc-object-id context))))

(defun ns::|removeObservation:forObservableKeyPath:| (thing _ for-observable-key-path)
  (let ((message-lambda 
         (make-message-lambda @(removeObservation:forObservableKeyPath:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-observable-key-path))))

(defun ns::|className| (thing)
  (let ((message-lambda 
         (make-message-lambda @(className) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|addChainedObservers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addChainedObservers:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addObserverBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addObserverBlock:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addObservationTransformer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addObservationTransformer:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setValue:forUndefinedKey:| (thing _ for-undefined-key)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forUndefinedKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-undefined-key))))

(defun ns::|setNilValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNilValueForKey:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|validateValue:forKey:error:| (thing _ for-key error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateValue:forKey:error:) (( ( :POINTER :POINTER) :POINTER ( :POINTER :POINTER))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key) (objc-object-id error)))) nil t))

(defun ns::|mutableArrayValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableArrayValueForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|mutableOrderedSetValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableOrderedSetValueForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|mutableSetValueForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableSetValueForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setValuesForKeysWithDictionary:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setValuesForKeysWithDictionary:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|willChange:valuesAtIndexes:forKey:| (thing _ values-at-indexes for-key)
  (let ((message-lambda 
         (make-message-lambda @(willChange:valuesAtIndexes:forKey:) (( :UNSIGNED-LONG-LONG :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id values-at-indexes) (objc-object-id for-key))))

(defun ns::|didChange:valuesAtIndexes:forKey:| (thing _ values-at-indexes for-key)
  (let ((message-lambda 
         (make-message-lambda @(didChange:valuesAtIndexes:forKey:) (( :UNSIGNED-LONG-LONG :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id values-at-indexes) (objc-object-id for-key))))

(defun ns::|willChangeValueForKey:withSetMutation:usingObjects:| (thing _ with-set-mutation using-objects)
  (let ((message-lambda 
         (make-message-lambda @(willChangeValueForKey:withSetMutation:usingObjects:) (( :POINTER :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) with-set-mutation (objc-object-id using-objects))))

(defun ns::|didChangeValueForKey:withSetMutation:usingObjects:| (thing _ with-set-mutation using-objects)
  (let ((message-lambda 
         (make-message-lambda @(didChangeValueForKey:withSetMutation:usingObjects:) (( :POINTER :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) with-set-mutation (objc-object-id using-objects))))

(defun ns::|observationInfo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(observationInfo) (()  ( :POINTER :VOID))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|removeObserver:forKeyPath:| (thing _ for-key-path)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:forKeyPath:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path))))

(defun ns::|autoContentAccessingProxy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autoContentAccessingProxy) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|coerceValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(coerceValue:forKey:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun ns::|setScriptingProperties:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScriptingProperties:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|scriptingValueForSpecifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scriptingValueForSpecifier:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|scriptingProperties| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scriptingProperties) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|coerceValueForScriptingProperties:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(coerceValueForScriptingProperties:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|valueAtIndex:inPropertyWithKey:| (thing _ in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(valueAtIndex:inPropertyWithKey:) (( :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-property-with-key))))

(defun ns::|valueWithName:inPropertyWithKey:| (thing _ in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(valueWithName:inPropertyWithKey:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-property-with-key))))

(defun ns::|valueWithUniqueID:inPropertyWithKey:| (thing _ in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(valueWithUniqueID:inPropertyWithKey:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-property-with-key))))

(defun ns::|insertValue:atIndex:inPropertyWithKey:| (thing _ at-index in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(insertValue:atIndex:inPropertyWithKey:) (( :POINTER :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index (objc-object-id in-property-with-key))))

(defun ns::|replaceValueAtIndex:inPropertyWithKey:withValue:| (thing _ in-property-with-key with-value)
  (let ((message-lambda 
         (make-message-lambda @(replaceValueAtIndex:inPropertyWithKey:withValue:) (( :UNSIGNED-LONG-LONG :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-property-with-key) (objc-object-id with-value))))

(defun ns::|insertValue:inPropertyWithKey:| (thing _ in-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(insertValue:inPropertyWithKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-property-with-key))))

(defun ns::|removeValueAtIndex:fromPropertyWithKey:| (thing _ from-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(removeValueAtIndex:fromPropertyWithKey:) (( :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-property-with-key))))

(defun ns::|classForPortCoder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classForPortCoder) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|performSelector:withObject:afterDelay:inModes:| (thing _ with-object after-delay in-modes)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:withObject:afterDelay:inModes:) (( :POINTER :POINTER :DOUBLE :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object) after-delay (objc-object-id in-modes))))

(defun ns::|performSelector:withObject:afterDelay:| (thing _ with-object after-delay)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:withObject:afterDelay:) (( :POINTER :POINTER :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object) after-delay)))

(defun ns::|performSelector:object:afterDelay:| (thing _ object after-delay)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:object:afterDelay:) (( :POINTER :POINTER :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id object) after-delay)))

(defun ns::|classCode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(classCode) (()  :UNSIGNED-INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqualTo:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|isLessThanOrEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLessThanOrEqualTo:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|isLessThan:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLessThan:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|isGreaterThanOrEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGreaterThanOrEqualTo:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|isGreaterThan:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGreaterThan:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|isNotEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNotEqualTo:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|doesContain:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(doesContain:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|isLike:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLike:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|isCaseInsensitiveLike:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isCaseInsensitiveLike:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|performSelector:onThread:withObject:waitUntilDone:modes:| (thing _ on-thread with-object wait-until-done modes)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:onThread:withObject:waitUntilDone:modes:) (( :POINTER :POINTER :POINTER :CHAR :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id on-thread) (objc-object-id with-object) (if wait-until-done 1 0) (objc-object-id modes))))

(defun ns::|performSelectorOnMainThread:withObject:waitUntilDone:modes:| (thing _ with-object wait-until-done modes)
  (let ((message-lambda 
         (make-message-lambda @(performSelectorOnMainThread:withObject:waitUntilDone:modes:) (( :POINTER :POINTER :CHAR :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object) (if wait-until-done 1 0) (objc-object-id modes))))

(defun ns::|performSelectorOnMainThread:withObject:waitUntilDone:| (thing _ with-object wait-until-done)
  (let ((message-lambda 
         (make-message-lambda @(performSelectorOnMainThread:withObject:waitUntilDone:) (( :POINTER :POINTER :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object) (if wait-until-done 1 0))))

(defun ns::|performSelector:onThread:withObject:waitUntilDone:| (thing _ on-thread with-object wait-until-done)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:onThread:withObject:waitUntilDone:) (( :POINTER :POINTER :POINTER :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id on-thread) (objc-object-id with-object) (if wait-until-done 1 0))))

(defun ns::|performSelectorInBackground:withObject:| (thing _ with-object)
  (let ((message-lambda 
         (make-message-lambda @(performSelectorInBackground:withObject:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object))))

(defun ns::|classDescriptionForDestinationKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(classDescriptionForDestinationKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|entityName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(entityName) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|ownsDestinationObjectsForRelationshipKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ownsDestinationObjectsForRelationshipKey:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|validateValue:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(validateValue:forKey:) (( ( :POINTER :POINTER) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun ns::|isToManyKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isToManyKey:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|removeObject:fromPropertyWithKey:| (thing _ from-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(removeObject:fromPropertyWithKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id from-property-with-key))))

(defun ns::|addObject:toPropertyWithKey:| (thing _ to-property-with-key)
  (let ((message-lambda 
         (make-message-lambda @(addObject:toPropertyWithKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-property-with-key))))

(defun ns::|validateTakeValue:forKeyPath:| (thing _ for-key-path)
  (let ((message-lambda 
         (make-message-lambda @(validateTakeValue:forKeyPath:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key-path))))

(defun ns::|addObject:toBothSidesOfRelationshipWithKey:| (thing _ to-both-sides-of-relationship-with-key)
  (let ((message-lambda 
         (make-message-lambda @(addObject:toBothSidesOfRelationshipWithKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-both-sides-of-relationship-with-key))))

(defun ns::|allPropertyKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allPropertyKeys) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|clearProperties| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clearProperties) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|flushKeyBindings| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flushKeyBindings) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|removeObject:fromBothSidesOfRelationshipWithKey:| (thing _ from-both-sides-of-relationship-with-key)
  (let ((message-lambda 
         (make-message-lambda @(removeObject:fromBothSidesOfRelationshipWithKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id from-both-sides-of-relationship-with-key))))

(defun ns::|takeStoredValuesFromDictionary:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeStoredValuesFromDictionary:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isNSString__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSString__) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isNSCFConstantString__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSCFConstantString__) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isNSNumber__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSNumber__) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isNSDate__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSDate__) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isNSArray__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSArray__) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isNSDictionary__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSDictionary__) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isNSSet__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSSet__) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isNSData__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSData__) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isNSObject__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSObject__) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isNSOrderedSet__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSOrderedSet__) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isNSTimeZone__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSTimeZone__) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isNSValue__| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNSValue__) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|description| (thing)
  (let ((message-lambda 
         (make-message-lambda @(description) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|doesNotRecognizeSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(doesNotRecognizeSelector:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|methodSignatureForSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(methodSignatureForSelector:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|retain| (thing)
  (let ((message-lambda 
         (make-message-lambda @(retain) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|release| (thing)
  (let ((message-lambda 
         (make-message-lambda @(release) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|retainCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(retainCount) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|autorelease| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autorelease) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|copy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(copy) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|finalize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(finalize) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|dealloc| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dealloc) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isEqual:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqual:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|class| (thing)
  (let ((message-lambda 
         (make-message-lambda @(class) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|self| (thing)
  (let ((message-lambda 
         (make-message-lambda @(self) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|performSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|performSelector:withObject:| (thing _ with-object)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:withObject:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object))))

(defun ns::|performSelector:withObject:withObject:| (thing _ with-object with-objectx)
  (let ((message-lambda 
         (make-message-lambda @(performSelector:withObject:withObject:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object) (objc-object-id with-objectx))))

(defun ns::|isProxy| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isProxy) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isKindOfClass:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isKindOfClass:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|isMemberOfClass:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMemberOfClass:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|conformsToProtocol:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(conformsToProtocol:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|respondsToSelector:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(respondsToSelector:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|zone| (thing)
  (let ((message-lambda 
         (make-message-lambda @(zone) (()  ( :POINTER ( :STRUCT ns::|_NSZone|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|hash| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hash) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|superclass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(superclass) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|debugDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(debugDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|init| (thing)
  (let ((message-lambda 
         (make-message-lambda @(init) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|retainWeakReference| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(retainWeakReference) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|allowsWeakReference| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsWeakReference) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|isFault| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFault) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|methodForSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(methodForSelector:) (( :POINTER)  ( :POINTER :POINTER))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|forwardInvocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(forwardInvocation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|forwardingTargetForSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(forwardingTargetForSelector:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|mutableCopy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mutableCopy) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|loadNibNamed:owner:topLevelObjects:| (thing _ owner top-level-objects)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(loadNibNamed:owner:topLevelObjects:) (( :POINTER :POINTER ( :POINTER :POINTER))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id owner) (objc-object-id top-level-objects)))) nil t))

(defun ns::|imageForResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(imageForResource:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pathForSoundResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pathForSoundResource:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|contextHelpForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contextHelpForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|URLsForImageResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(URLsForImageResource:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|URLForImageResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(URLForImageResource:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pathForImageResource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pathForImageResource:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|loadNibFile:externalNameTable:withZone:| (thing _ external-name-table with-zone)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(loadNibFile:externalNameTable:withZone:) (( :POINTER :POINTER ( :POINTER ( :STRUCT ns::|_NSZone|)))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id external-name-table) (objc-object-id with-zone)))) nil t))

(defun ns::|loadNibFile:externalNameTable:options:withZone:| (thing _ external-name-table options with-zone)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(loadNibFile:externalNameTable:options:withZone:) (( :POINTER :POINTER :POINTER ( :POINTER ( :STRUCT ns::|_NSZone|)))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id external-name-table) (objc-object-id options) (objc-object-id with-zone)))) nil t))

(defun ns::|localizedStringInDeviceLanguageForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(localizedStringInDeviceLanguageForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|load| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(load) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|initWithURL:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithURL:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|preferredLocalizations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredLocalizations) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|infoDictionary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(infoDictionary) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bundleIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bundleIdentifier) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bundleURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bundleURL) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|appStoreReceiptURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(appStoreReceiptURL) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|executableURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(executableURL) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|objectForInfoDictionaryKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(objectForInfoDictionaryKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|loadAndReturnError:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(loadAndReturnError:) (( ( :POINTER :POINTER))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|principalClass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(principalClass) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bundlePath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bundlePath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|resourceURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resourceURL) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pathForResource:ofType:| (thing _ of-type)
  (let ((message-lambda 
         (make-message-lambda @(pathForResource:ofType:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id of-type))))

(defun ns::|URLForResource:withExtension:| (thing _ with-extension)
  (let ((message-lambda 
         (make-message-lambda @(URLForResource:withExtension:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-extension))))

(defun ns::|classNamed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(classNamed:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|URLForResource:withExtension:subdirectory:localization:| (thing _ with-extension subdirectory localization)
  (let ((message-lambda 
         (make-message-lambda @(URLForResource:withExtension:subdirectory:localization:) (( :POINTER :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-extension) (objc-object-id subdirectory) (objc-object-id localization))))

(defun ns::|URLForResource:withExtension:subdirectory:| (thing _ with-extension subdirectory)
  (let ((message-lambda 
         (make-message-lambda @(URLForResource:withExtension:subdirectory:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-extension) (objc-object-id subdirectory))))

(defun ns::|unload| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(unload) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|initWithPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithPath:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|localizations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizations) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|localizedInfoDictionary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedInfoDictionary) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isLoaded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLoaded) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|pathForResource:ofType:inDirectory:forLocalization:| (thing _ of-type in-directory for-localization)
  (let ((message-lambda 
         (make-message-lambda @(pathForResource:ofType:inDirectory:forLocalization:) (( :POINTER :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id of-type) (objc-object-id in-directory) (objc-object-id for-localization))))

(defun ns::|pathsForResourcesOfType:inDirectory:forLocalization:| (thing _ in-directory for-localization)
  (let ((message-lambda 
         (make-message-lambda @(pathsForResourcesOfType:inDirectory:forLocalization:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-directory) (objc-object-id for-localization))))

(defun ns::|localizedAttributedStringForKey:value:table:localization:| (thing _ value table localization)
  (let ((message-lambda 
         (make-message-lambda @(localizedAttributedStringForKey:value:table:localization:) (( :POINTER :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id value) (objc-object-id table) (objc-object-id localization))))

(defun ns::|pathForResource:ofType:inDirectory:| (thing _ of-type in-directory)
  (let ((message-lambda 
         (make-message-lambda @(pathForResource:ofType:inDirectory:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id of-type) (objc-object-id in-directory))))

(defun ns::|pathsForResourcesOfType:inDirectory:| (thing _ in-directory)
  (let ((message-lambda 
         (make-message-lambda @(pathsForResourcesOfType:inDirectory:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-directory))))

(defun ns::|findBundleResourceURLsCallingMethod:passingTest:| (thing _ passing-test)
  (let ((message-lambda 
         (make-message-lambda @(findBundleResourceURLsCallingMethod:passingTest:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id passing-test))))

(defun ns::|URLsForResourcesWithExtension:subdirectory:localization:| (thing _ subdirectory localization)
  (let ((message-lambda 
         (make-message-lambda @(URLsForResourcesWithExtension:subdirectory:localization:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id subdirectory) (objc-object-id localization))))

(defun ns::|URLsForResourcesWithExtension:subdirectory:| (thing _ subdirectory)
  (let ((message-lambda 
         (make-message-lambda @(URLsForResourcesWithExtension:subdirectory:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id subdirectory))))

(defun ns::|localizedStringForKey:value:table:| (thing _ value table)
  (let ((message-lambda 
         (make-message-lambda @(localizedStringForKey:value:table:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id value) (objc-object-id table))))

(defun ns::|localizedStringForKey:value:table:localization:| (thing _ value table localization)
  (let ((message-lambda 
         (make-message-lambda @(localizedStringForKey:value:table:localization:) (( :POINTER :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id value) (objc-object-id table) (objc-object-id localization))))

(defun ns::|resourcePath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resourcePath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|executablePath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(executablePath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pathForAuxiliaryExecutable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pathForAuxiliaryExecutable:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|URLForAuxiliaryExecutable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(URLForAuxiliaryExecutable:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|privateFrameworksPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(privateFrameworksPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|privateFrameworksURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(privateFrameworksURL) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|sharedFrameworksPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedFrameworksPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|sharedFrameworksURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedFrameworksURL) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|sharedSupportPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedSupportPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|sharedSupportURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedSupportURL) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|builtInPlugInsPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(builtInPlugInsPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|builtInPlugInsURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(builtInPlugInsURL) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|versionNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(versionNumber) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bundleLanguages| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bundleLanguages) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|invalidateResourceCache| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateResourceCache) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pathForResource:ofType:inDirectory:forLanguage:| (thing _ of-type in-directory for-language)
  (let ((message-lambda 
         (make-message-lambda @(pathForResource:ofType:inDirectory:forLanguage:) (( :POINTER :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id of-type) (objc-object-id in-directory) (objc-object-id for-language))))

(defun ns::|pathsForResourcesOfType:inDirectory:forLanguage:| (thing _ in-directory for-language)
  (let ((message-lambda 
         (make-message-lambda @(pathsForResourcesOfType:inDirectory:forLanguage:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-directory) (objc-object-id for-language))))

(defun ns::|developmentLocalization| (thing)
  (let ((message-lambda 
         (make-message-lambda @(developmentLocalization) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|preflightAndReturnError:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(preflightAndReturnError:) (( ( :POINTER :POINTER))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|executableArchitectures| (thing)
  (let ((message-lambda 
         (make-message-lambda @(executableArchitectures) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|localizedAttributedStringForKey:value:table:| (thing _ value table)
  (let ((message-lambda 
         (make-message-lambda @(localizedAttributedStringForKey:value:table:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id value) (objc-object-id table))))

(defun ns::|setPreservationPriority:forTags:| (thing _ for-tags)
  (let ((message-lambda 
         (make-message-lambda @(setPreservationPriority:forTags:) (( :DOUBLE :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-tags))))

(defun ns::|setPreservationPriority:forTag:| (thing _ for-tag)
  (let ((message-lambda 
         (make-message-lambda @(setPreservationPriority:forTag:) (( :DOUBLE :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-tag))))

(defun ns::|preservationPriorityForTag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(preservationPriorityForTag:) (( :POINTER)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))










(defun ns::|matchesProcess:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(matchesProcess:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|rbs_pid| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rbs_pid) (()  :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|processPredicate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(processPredicate) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|copyWithZone:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copyWithZone:) (( ( :POINTER ( :STRUCT ns::|_NSZone|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun ns::|initWithChar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithChar:) (( :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|initWithUnsignedChar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUnsignedChar:) (( :UNSIGNED-CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithShort:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithShort:) (( :SHORT)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithUnsignedShort:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUnsignedShort:) (( :UNSIGNED-SHORT)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithInt:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithInt:) (( :INT)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithUnsignedInt:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUnsignedInt:) (( :UNSIGNED-INT)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithLong:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithLong:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithLongLong:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithLongLong:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithUnsignedLongLong:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUnsignedLongLong:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithDouble:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithDouble:) (( :DOUBLE)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|charValue| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(charValue) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|unsignedCharValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsignedCharValue) (()  :UNSIGNED-CHAR)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|shortValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shortValue) (()  :SHORT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|unsignedShortValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsignedShortValue) (()  :UNSIGNED-SHORT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|intValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(intValue) (()  :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|unsignedIntValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsignedIntValue) (()  :UNSIGNED-INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|longValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(longValue) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|unsignedLongValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsignedLongValue) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|floatValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(floatValue) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|doubleValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(doubleValue) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|longLongValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(longLongValue) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|unsignedLongLongValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsignedLongLongValue) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|redactedDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(redactedDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|boolValue| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(boolValue) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|compare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(compare:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|encodeWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(encodeWithCoder:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithCoder:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isEqualToNumber:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqualToNumber:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|descriptionWithLocale:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(descriptionWithLocale:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stringValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringValue) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|integerValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(integerValue) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|unsignedIntegerValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsignedIntegerValue) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|decimalValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(decimalValue) (()  ( :ARRAY :CHAR 22))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithBool:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithBool:) (( :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|initWithInteger:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithInteger:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithUnsignedInteger:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUnsignedInteger:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithUnsignedLong:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUnsignedLong:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithFloat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithFloat:) (( :FLOAT)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|run| (thing)
  (let ((message-lambda 
         (make-message-lambda @(run) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))






(defun ns::|delegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(delegate) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDelegate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDelegate:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHidden) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|.cxx_destruct| (thing)
  (let ((message-lambda 
         (make-message-lambda @(.cxx_destruct) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|menu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(menu) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isActive) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))











(defun ns::|disableAutomaticTermination| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableAutomaticTermination) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|enableAutomaticTermination| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableAutomaticTermination) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isRunning| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRunning) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|context| (thing)
  (let ((message-lambda 
         (make-message-lambda @(context) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contextID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contextID) (()  :UNSIGNED-INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|keyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyWindow) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pushRegistrationDidRegisterWithDeviceToken:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pushRegistrationDidRegisterWithDeviceToken:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pushRegistrationDidFailToRegister:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pushRegistrationDidFailToRegister:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pushRegistrationDidReceiveRemotePush:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pushRegistrationDidReceiveRemotePush:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setWindowsNeedUpdate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindowsNeedUpdate:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|nextEventMatchingMask:untilDate:inMode:dequeue:| (thing _ until-date in-mode dequeue)
  (let ((message-lambda 
         (make-message-lambda @(nextEventMatchingMask:untilDate:inMode:dequeue:) (( :UNSIGNED-LONG-LONG :POINTER :POINTER :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id until-date) (objc-object-id in-mode) (if dequeue 1 0))))

(defun ns::|postEvent:atStart:| (thing _ at-start)
  (let ((message-lambda 
         (make-message-lambda @(postEvent:atStart:) (( :POINTER :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if at-start 1 0))))

(defun ns::|effectiveAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(effectiveAppearance) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|appearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(appearance) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|activateIgnoringOtherApps:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(activateIgnoringOtherApps:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|windowWithWindowNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(windowWithWindowNumber:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|userInterfaceLayoutDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userInterfaceLayoutDirection) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityParent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilitySetMayContainProtectedContent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetMayContainProtectedContent:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityFocusedUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedUIElement) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityHitTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHitTest:) (( ( :STRUCT ns::|CGPoint|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFrame) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsIgnored| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsIgnored) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|accessibilityAttributeNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributeNames) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityAttributeValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributeValue:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|mainMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mainMenu) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityMayContainProtectedContent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityMayContainProtectedContent) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|canEnterFullScreenMode| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canEnterFullScreenMode) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|targetForAction:to:from:| (thing _ to from)
  (let ((message-lambda 
         (make-message-lambda @(targetForAction:to:from:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to) (objc-object-id from))))

(defun ns::|mainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mainWindow) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|presentationOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(presentationOptions) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|windows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windows) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|enumerateWindowsWithOptions:usingBlock:| (thing _ using-block)
  (let ((message-lambda 
         (make-message-lambda @(enumerateWindowsWithOptions:usingBlock:) (( :LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id using-block))))

(defun ns::|validateMenuItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateMenuItem:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|validateUserInterfaceItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateUserInterfaceItem:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|windowsMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowsMenu) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|closeAll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(closeAll:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|supplementalTargetForAction:sender:| (thing _ sender)
  (let ((message-lambda 
         (make-message-lambda @(supplementalTargetForAction:sender:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id sender))))


(defun ns::|accessibilityRoleAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRoleAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsRoleAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsRoleAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityRoleDescriptionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRoleDescriptionAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsRoleDescriptionAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsRoleDescriptionAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityIsAttributeSettable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsAttributeSettable:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|accessibilitySetValue:forAttribute:| (thing _ for-attribute)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetValue:forAttribute:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-attribute))))

(defun ns::|accessibilityActionNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityActionNames) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityActionDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityActionDescription:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityPerformAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformAction:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAccessibilityMainThreadIdleNotificationEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMainThreadIdleNotificationEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setAccessibilityEventProcessedNotificationEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEventProcessedNotificationEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityChildrenAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChildrenAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|runModalForWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runModalForWindow:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|endSheet:returnCode:| (thing _ return-code)
  (let ((message-lambda 
         (make-message-lambda @(endSheet:returnCode:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) return-code)))

(defun ns::|stopModalWithCode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stopModalWithCode:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|speakString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(speakString:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|touchBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBar) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|terminate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(terminate:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|hide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(hide:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setIsActive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsActive:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|orderFrontCharacterPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontCharacterPalette:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setApplicationIconImage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setApplicationIconImage:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|validRequestorForSendType:returnType:| (thing _ return-type)
  (let ((message-lambda 
         (make-message-lambda @(validRequestorForSendType:returnType:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id return-type))))

(defun ns::|activationPolicy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(activationPolicy) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|unhideWithoutActivation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unhideWithoutActivation) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|currentSystemPresentationOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentSystemPresentationOptions) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|updateWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateWindows) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|makeWindowsPerform:inOrder:| (thing _ in-order)
  (let ((message-lambda 
         (make-message-lambda @(makeWindowsPerform:inOrder:) (( :POINTER :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if in-order 1 0))))

(defun ns::|modalWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(modalWindow) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|sendEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sendEvent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|finishLaunching| (thing)
  (let ((message-lambda 
         (make-message-lambda @(finishLaunching) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|beginModalSessionForWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(beginModalSessionForWindow:) (( :POINTER)  ( :POINTER ( :STRUCT ns::|_NSModalSession|)))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|endModalSession:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endModalSession:) (( ( :POINTER ( :STRUCT ns::|_NSModalSession|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|beginModalSessionForWindow:relativeToWindow:| (thing _ relative-to-window)
  (let ((message-lambda 
         (make-message-lambda @(beginModalSessionForWindow:relativeToWindow:) (( :POINTER :POINTER)  ( :POINTER ( :STRUCT ns::|_NSModalSession|)))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id relative-to-window))))

(defun ns::|requestUserAttention:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(requestUserAttention:) (( :UNSIGNED-LONG-LONG)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|dockTile| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dockTile) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|cancelUserAttentionRequest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cancelUserAttentionRequest:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|replyToApplicationShouldTerminate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replyToApplicationShouldTerminate:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|shouldRestoreStateOnNextLaunch| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRestoreStateOnNextLaunch) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|encodeRestorableStateWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(encodeRestorableStateWithCoder:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|restoreStateWithCoder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(restoreStateWithCoder:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|currentEvent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentEvent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|activeSpaceChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(activeSpaceChanged:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|quickLookPreviewItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(quickLookPreviewItems:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setMainMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMainMenu:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|disableCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableCursorRects) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|enableCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableCursorRects) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stopSpeaking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stopSpeaking:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isSpeaking| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSpeaking) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|runPageLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runPageLayout:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|startDictation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(startDictation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stopDictation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stopDictation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|arrangeInFront:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(arrangeInFront:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|alternateArrangeInFront:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alternateArrangeInFront:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|miniaturizeAll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(miniaturizeAll:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|zoomAll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(zoomAll:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|unhideAllApplications:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unhideAllApplications:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|hideOtherApplications:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(hideOtherApplications:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleTouchBarCustomizationPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTouchBarCustomizationPalette:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleTouchBarControlStripCustomizationPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTouchBarControlStripCustomizationPalette:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|orderFrontColorPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontColorPanel:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|showGuessPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showGuessPanel:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|doCommandBySelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(doCommandBySelector:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|modeAndOptions:forPresentationOptions:usingForFullScreen:| (thing _ for-presentation-options using-for-full-screen)
  (let ((message-lambda 
         (make-message-lambda @(modeAndOptions:forPresentationOptions:usingForFullScreen:) (( ( :POINTER :UNSIGNED-INT) :UNSIGNED-LONG-LONG :CHAR)  :UNSIGNED-INT)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) for-presentation-options (if using-for-full-screen 1 0))))

(defun ns::|enterFullScreenMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(enterFullScreenMode:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|markAppLaunchComplete| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markAppLaunchComplete) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|occlusionState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(occlusionState) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isProtectedDataAvailable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isProtectedDataAvailable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|unhide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unhide:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|openFile:ok:| (thing _ ok)
  (let ((message-lambda 
         (make-message-lambda @(openFile:ok:) (( :POINTER ( :POINTER :LONG-LONG))  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id ok))))

(defun ns::|openTempFile:ok:| (thing _ ok)
  (let ((message-lambda 
         (make-message-lambda @(openTempFile:ok:) (( :POINTER ( :POINTER :LONG-LONG))  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id ok))))

(defun ns::|replyToOpenOrPrint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replyToOpenOrPrint:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|deactivate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deactivate) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|runModalForWindow:relativeToWindow:| (thing _ relative-to-window)
  (let ((message-lambda 
         (make-message-lambda @(runModalForWindow:relativeToWindow:) (( :POINTER :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id relative-to-window))))

(defun ns::|beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:| (thing _ modal-for-window modal-delegate did-end-selector context-info)
  (let ((message-lambda 
         (make-message-lambda @(beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:) (( :POINTER :POINTER :POINTER :POINTER ( :POINTER :VOID))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id modal-for-window) (objc-object-id modal-delegate) (objc-object-id did-end-selector) (objc-object-id context-info))))

(defun ns::|stop:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stop:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stopModal| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stopModal) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|endSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endSheet:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|abortModal| (thing)
  (let ((message-lambda 
         (make-message-lambda @(abortModal) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|runModalSession:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runModalSession:) (( ( :POINTER ( :STRUCT ns::|_NSModalSession|)))  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|delayWindowOrdering| (thing)
  (let ((message-lambda 
         (make-message-lambda @(delayWindowOrdering) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|preventWindowOrdering| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preventWindowOrdering) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|onFirstEvent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(onFirstEvent) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|rightMouseDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rightMouseDown:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|event:wouldActivateWindow:| (thing _ would-activate-window)
  (let ((message-lambda 
         (make-message-lambda @(event:wouldActivateWindow:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id would-activate-window))))

(defun ns::|quickLookPreviewItemsAtWindowLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(quickLookPreviewItemsAtWindowLocation:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|frontWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frontWindow) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|applicationIconImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(applicationIconImage) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setActivationPolicy:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setActivationPolicy:) (( :LONG-LONG)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|setMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMenu:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setHelpMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHelpMenu:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|helpMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(helpMenu) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDockMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDockMenu:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|reportException:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(reportException:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|speechSynthesizer:didFinishSpeaking:| (thing _ did-finish-speaking)
  (let ((message-lambda 
         (make-message-lambda @(speechSynthesizer:didFinishSpeaking:) (( :POINTER :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if did-finish-speaking 1 0))))

(defun ns::|isFullKeyboardAccessEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFullKeyboardAccessEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setPresentationOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPresentationOptions:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|exitFullScreenMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(exitFullScreenMode:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setCanEnterFullScreenMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanEnterFullScreenMode:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|abortAllToolTips| (thing)
  (let ((message-lambda 
         (make-message-lambda @(abortAllToolTips) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|addMemoryPressureMonitorUsingHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addMemoryPressureMonitorUsingHandler:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|removeMemoryPressureMonitor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeMemoryPressureMonitor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addIdleMonitorUsingHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addIdleMonitorUsingHandler:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|removeIdleMonitor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeIdleMonitor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|memoryStatus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(memoryStatus) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|presentError:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(presentError:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|willPresentError:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(willPresentError:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|presentError:modalForWindow:delegate:didPresentSelector:contextInfo:| (thing _ modal-for-window delegate did-present-selector context-info)
  (let ((message-lambda 
         (make-message-lambda @(presentError:modalForWindow:delegate:didPresentSelector:contextInfo:) (( :POINTER :POINTER :POINTER :POINTER ( :POINTER :VOID))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id modal-for-window) (objc-object-id delegate) (objc-object-id did-present-selector) (objc-object-id context-info))))

(defun ns::|registerForRemoteNotificationTypes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerForRemoteNotificationTypes:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|registerForRemoteNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(registerForRemoteNotifications) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|unregisterForRemoteNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unregisterForRemoteNotifications) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isRegisteredForRemoteNotifications| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRegisteredForRemoteNotifications) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|enabledRemoteNotificationTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enabledRemoteNotificationTypes) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isRunningTest| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRunningTest) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isRunningTest:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRunningTest:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|isRunningQuitTest| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRunningQuitTest) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|runTest:options:| (thing _ options)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(runTest:options:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id options)))) nil t))

(defun ns::|startedTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(startedTest:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|finishedTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|finishedTest:extraResults:| (thing _ extra-results)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:extraResults:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id extra-results))))

(defun ns::|finishedTest:extraResults:withTeardownBlock:| (thing _ extra-results with-teardown-block)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:extraResults:withTeardownBlock:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id extra-results) (objc-object-id with-teardown-block))))

(defun ns::|finishedTest:extraResults:waitForNotification:| (thing _ extra-results wait-for-notification)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:extraResults:waitForNotification:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id extra-results) (objc-object-id wait-for-notification))))

(defun ns::|finishedTest:extraResults:waitForNotification:withTeardownBlock:| (thing _ extra-results wait-for-notification with-teardown-block)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:extraResults:waitForNotification:withTeardownBlock:) (( :POINTER :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id extra-results) (objc-object-id wait-for-notification) (objc-object-id with-teardown-block))))

(defun ns::|finishedTest:waitForCommit:extraResults:| (thing _ wait-for-commit extra-results)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:waitForCommit:extraResults:) (( :POINTER :CHAR :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if wait-for-commit 1 0) (objc-object-id extra-results))))

(defun ns::|finishedTest:waitForCommit:extraResults:withTeardownBlock:| (thing _ wait-for-commit extra-results with-teardown-block)
  (let ((message-lambda 
         (make-message-lambda @(finishedTest:waitForCommit:extraResults:withTeardownBlock:) (( :POINTER :CHAR :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if wait-for-commit 1 0) (objc-object-id extra-results) (objc-object-id with-teardown-block))))

(defun ns::|failedTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(failedTest:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|failedTest:withFailure:| (thing _ with-failure)
  (let ((message-lambda 
         (make-message-lambda @(failedTest:withFailure:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-failure))))

(defun ns::|failedTest:withResults:| (thing _ with-results)
  (let ((message-lambda 
         (make-message-lambda @(failedTest:withResults:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-results))))

(defun ns::|failedTest:withFailure:withResults:| (thing _ with-failure with-results)
  (let ((message-lambda 
         (make-message-lambda @(failedTest:withFailure:withResults:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-failure) (objc-object-id with-results))))

(defun ns::|startedSubTest:forTest:| (thing _ for-test)
  (let ((message-lambda 
         (make-message-lambda @(startedSubTest:forTest:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-test))))

(defun ns::|startedSubTest:forTest:withMetrics:| (thing _ for-test with-metrics)
  (let ((message-lambda 
         (make-message-lambda @(startedSubTest:forTest:withMetrics:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-test) (objc-object-id with-metrics))))

(defun ns::|finishedSubTest:forTest:| (thing _ for-test)
  (let ((message-lambda 
         (make-message-lambda @(finishedSubTest:forTest:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-test))))

(defun ns::|finishedSubTest:forTest:waitForCommit:withCompletionHandler:| (thing _ for-test wait-for-commit with-completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(finishedSubTest:forTest:waitForCommit:withCompletionHandler:) (( :POINTER :POINTER :CHAR :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-test) (if wait-for-commit 1 0) (objc-object-id with-completion-handler))))

(defun ns::|installCACommitCompletionBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(installCACommitCompletionBlock:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|performScrollTestOnScrollView:usingTestName:completionHandler:| (thing _ using-test-name completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(performScrollTestOnScrollView:usingTestName:completionHandler:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id using-test-name) (objc-object-id completion-handler))))

(defun ns::|performResizeTestOnWindow:usingTestName:completionHandler:| (thing _ using-test-name completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(performResizeTestOnWindow:usingTestName:completionHandler:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id using-test-name) (objc-object-id completion-handler))))

(defun ns::|performResizeTestOnWindow:preTestHandler:postTestHandler:| (thing _ pre-test-handler post-test-handler)
  (let ((message-lambda 
         (make-message-lambda @(performResizeTestOnWindow:preTestHandler:postTestHandler:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id pre-test-handler) (objc-object-id post-test-handler))))

(defun ns::|performActivateDeactivateTestUsingTestName:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(performActivateDeactivateTestUsingTestName:completionHandler:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id completion-handler))))

(defun ns::|isLaunchedForTesting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLaunchedForTesting) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|disableRelaunchOnLogin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableRelaunchOnLogin) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|enableRelaunchOnLogin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableRelaunchOnLogin) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|importFromDevice:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(importFromDevice:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityExtrasMenuBarAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityExtrasMenuBarAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityMenuBarAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMenuBarAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityWindowsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowsAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityFunctionRowTopLevelElementsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFunctionRowTopLevelElementsAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityFocusedWindowAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedWindowAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|set_currentWordHighlightInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(set_currentWordHighlightInfo:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|set_currentSentenceHighlightInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(set_currentSentenceHighlightInfo:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityWorkaroundAddExtraWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWorkaroundAddExtraWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityWorkaroundRemoveExtraWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWorkaroundRemoveExtraWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityTitleAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTitleAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsTitleAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTitleAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityIsMenuBarAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMenuBarAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityIsWindowsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsWindowsAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityChildrenInNavigationOrderAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChildrenInNavigationOrderAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsChildrenAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsChildrenAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityFrontmostAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFrontmostAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsFrontmostAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFrontmostAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySetFrontmostAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetFrontmostAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityHiddenAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHiddenAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsHiddenAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsHiddenAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySetHiddenAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetHiddenAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityMainWindowAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMainWindowAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsMainWindowAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMainWindowAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityIsFocusedWindowAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFocusedWindowAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityFocusedUIElementAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedUIElementAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsFocusedUIElementAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFocusedUIElementAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityEnhancedUserInterfaceAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityEnhancedUserInterfaceAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsEnhancedUserInterfaceAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsEnhancedUserInterfaceAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySetEnhancedUserInterfaceAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetEnhancedUserInterfaceAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityAuditIssuesAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditIssuesAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityHitTest| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHitTest) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityMovingFromTable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMovingFromTable:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityFocusChangedToElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusChangedToElement:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityMainThreadIdleNotificationSupported| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMainThreadIdleNotificationSupported) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isAccessibilityMainThreadIdleNotificationEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMainThreadIdleNotificationEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isAccessibilityEventProcessedNotificationSupported| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEventProcessedNotificationSupported) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isAccessibilityEventProcessedNotificationEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEventProcessedNotificationEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isAccessibilityMovingFromTable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMovingFromTable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|orderedDocuments| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orderedDocuments) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|orderedWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orderedWindows) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|valueInOrderedWindowsWithUniqueID:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueInOrderedWindowsWithUniqueID:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|handleOpenScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleOpenScriptCommand:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|handlePrintScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handlePrintScriptCommand:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|handleQuitScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleQuitScriptCommand:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|runModalForCarbonWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runModalForCarbonWindow:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|sendAction:to:from:| (thing _ to from)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(sendAction:to:from:) (( :POINTER :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to) (objc-object-id from)))) nil t))

(defun ns::|setAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAppearance:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|areCursorRectsEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(areCursorRectsEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|addWindowsItem:title:filename:| (thing _ title filename)
  (let ((message-lambda 
         (make-message-lambda @(addWindowsItem:title:filename:) (( :POINTER :POINTER :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id title) (if filename 1 0))))

(defun ns::|restoreWindowWithIdentifier:state:completionHandler:| (thing _ state completion-handler)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(restoreWindowWithIdentifier:state:completionHandler:) (( :POINTER :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id state) (objc-object-id completion-handler)))) nil t))

(defun ns::|NS_touchBarProviders| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_touchBarProviders) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|NS_touchBarProvidersKeyPaths| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_touchBarProvidersKeyPaths) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|orderFrontPreferencesPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontPreferencesPanel:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|shouldBeTreatedAsInkEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldBeTreatedAsInkEvent:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|discardEventsMatchingMask:beforeEvent:| (thing _ before-event)
  (let ((message-lambda 
         (make-message-lambda @(discardEventsMatchingMask:beforeEvent:) (( :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id before-event))))

(defun ns::|tryToPerform:with:| (thing _ with)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(tryToPerform:with:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with)))) nil t))

(defun ns::|targetForAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(targetForAction:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|orderFrontFontPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontFontPanel:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|activateContextHelpMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(activateContextHelpMode:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|showHelp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showHelp:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setServicesMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setServicesMenu:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setWindowsMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindowsMenu:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAppleMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAppleMenu:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|gestureEventMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gestureEventMask) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setGestureEventMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGestureEventMask:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|servicesProvider| (thing)
  (let ((message-lambda 
         (make-message-lambda @(servicesProvider) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setServicesProvider:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setServicesProvider:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|registerServiceProvider:withName:| (thing _ with-name)
  (let ((message-lambda 
         (make-message-lambda @(registerServiceProvider:withName:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-name))))

(defun ns::|unregisterServiceProviderNamed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unregisterServiceProviderNamed:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|orderFrontStandardAboutPanelWithOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontStandardAboutPanelWithOptions:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|orderFrontStandardAboutPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontStandardAboutPanel:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|registerServicesMenuSendTypes:returnTypes:| (thing _ return-types)
  (let ((message-lambda 
         (make-message-lambda @(registerServicesMenuSendTypes:returnTypes:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id return-types))))

(defun ns::|getValue:forSafeApertureCompatibilityURLResourceKey:| (thing _ for-safe-aperture-compatibility-u-r-l-resource-key)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getValue:forSafeApertureCompatibilityURLResourceKey:) (( ( :POINTER :CHAR) :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-safe-aperture-compatibility-u-r-l-resource-key)))) nil t))

(defun ns::|valueForSafeApertureCompatibilityEnvironmentVariable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(valueForSafeApertureCompatibilityEnvironmentVariable:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|getValue:forSafeApertureCompatibilityDefaultsKey:| (thing _ for-safe-aperture-compatibility-defaults-key)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getValue:forSafeApertureCompatibilityDefaultsKey:) (( ( :POINTER :CHAR) :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-safe-aperture-compatibility-defaults-key)))) nil t))

(defun ns::|setValue:forSafeApertureCompatibilityConnectionProperty:| (thing _ for-safe-aperture-compatibility-connection-property)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forSafeApertureCompatibilityConnectionProperty:) (( ( :POINTER :VOID) ( :POINTER ( :STRUCT ns::|__CFString|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-safe-aperture-compatibility-connection-property))))

(defun ns::|setValue:forSafeApertureCompatibilityEnvironmentVariable:| (thing _ for-safe-aperture-compatibility-environment-variable)
  (let ((message-lambda 
         (make-message-lambda @(setValue:forSafeApertureCompatibilityEnvironmentVariable:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-safe-aperture-compatibility-environment-variable))))

(defun ns::|updateWindowsItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateWindowsItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAutomaticCustomizeTouchBarMenuItemEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticCustomizeTouchBarMenuItemEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAutomaticCustomizeTouchBarMenuItemEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticCustomizeTouchBarMenuItemEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|resetAutomaticCustomizeTouchBarMenuItemEnabled| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resetAutomaticCustomizeTouchBarMenuItemEnabled) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|removeWindowsItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeWindowsItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|changeWindowsItem:title:filename:| (thing _ title filename)
  (let ((message-lambda 
         (make-message-lambda @(changeWindowsItem:title:filename:) (( :POINTER :POINTER :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id title) (if filename 1 0))))

(defun ns::|servicesMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(servicesMenu) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|registerUserInterfaceItemSearchHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerUserInterfaceItemSearchHandler:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|unregisterUserInterfaceItemSearchHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unregisterUserInterfaceItemSearchHandler:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|searchString:inUserInterfaceItemString:searchRange:foundRange:| (thing _ in-user-interface-item-string search-range found-range)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(searchString:inUserInterfaceItemString:searchRange:foundRange:) (( :POINTER :POINTER ( :STRUCT ns::|_NSRange|) ( :POINTER ( :STRUCT ns::|_NSRange|)))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-user-interface-item-string) search-range (objc-object-id found-range)))) nil t))

(defun ns::|isDefaultHelpBookSearchEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDefaultHelpBookSearchEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setDefaultHelpBookSearchEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDefaultHelpBookSearchEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|extendStateRestoration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(extendStateRestoration) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|completeStateRestoration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(completeStateRestoration) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))









(defun ns::|localizedName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedName) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|processIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(processIdentifier) (()  :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))






(defun ns::|terminate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(terminate) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|icon| (thing)
  (let ((message-lambda 
         (make-message-lambda @(icon) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|unhide| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(unhide) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|activateWithOptions:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(activateWithOptions:) (( :UNSIGNED-LONG-LONG)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|hide| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hide) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|initWithApplicationSerialNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithApplicationSerialNumber:) (( ( :POINTER ( :STRUCT ns::|__LSASN|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|applicationSerialNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(applicationSerialNumber) (()  ( :POINTER ( :STRUCT ns::|__LSASN|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|launchDate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(launchDate) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|forceTerminate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(forceTerminate) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|applyPendingPropertyChanges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(applyPendingPropertyChanges) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isTerminated| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isTerminated) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isFinishedLaunching| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFinishedLaunching) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|ownsMenuBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ownsMenuBar) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|executableArchitecture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(executableArchitecture) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|name| (thing)
  (let ((message-lambda 
         (make-message-lambda @(name) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setQualityOfService:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setQualityOfService:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setName:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|start| (thing)
  (let ((message-lambda 
         (make-message-lambda @(start) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isMainThread| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMainThread) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|cancel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cancel) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|threadDictionary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(threadDictionary) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|runLoop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(runLoop) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isCancelled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isCancelled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|main| (thing)
  (let ((message-lambda 
         (make-message-lambda @(main) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithBlock:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isFinished| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFinished) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isExecuting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isExecuting) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|threadPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(threadPriority) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setThreadPriority:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setThreadPriority:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|qualityOfService| (thing)
  (let ((message-lambda 
         (make-message-lambda @(qualityOfService) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithTarget:selector:object:| (thing _ selector object)
  (let ((message-lambda 
         (make-message-lambda @(initWithTarget:selector:object:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id selector) (objc-object-id object))))

(defun ns::|isDying| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDying) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setStackSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStackSize:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|stackSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stackSize) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))









(defun ns::|type| (thing)
  (let ((message-lambda 
         (make-message-lambda @(type) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|subtype| (thing)
  (let ((message-lambda 
         (make-message-lambda @(subtype) (()  :SHORT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|window| (thing)
  (let ((message-lambda 
         (make-message-lambda @(window) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|userData| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userData) (()  ( :POINTER :VOID))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stage) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|rotation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rotation) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|uniqueID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(uniqueID) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|progress| (thing)
  (let ((message-lambda 
         (make-message-lambda @(progress) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|characters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(characters) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|timestamp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timestamp) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|charactersIgnoringModifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(charactersIgnoringModifiers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|deviceID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceID) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|windowNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowNumber) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|deltaX| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deltaX) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|deltaY| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deltaY) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pressure| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pressure) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|locationInWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(locationInWindow) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|phase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(phase) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|modifierFlags| (thing)
  (let ((message-lambda 
         (make-message-lambda @(modifierFlags) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|touchesMatchingPhase:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchesMatchingPhase:inView:) (( :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun ns::|allTouches| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allTouches) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|CGEvent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CGEvent) (()  ( :POINTER ( :STRUCT ns::|__CGEvent|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|data1| (thing)
  (let ((message-lambda 
         (make-message-lambda @(data1) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|data2| (thing)
  (let ((message-lambda 
         (make-message-lambda @(data2) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|scrollingDeltaX| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollingDeltaX) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|clickCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clickCount) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|momentumPhase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(momentumPhase) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|scrollingDeltaY| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollingDeltaY) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|gestureAxis| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gestureAxis) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|associatedEventsMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(associatedEventsMask) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|keyCode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyCode) (()  :UNSIGNED-SHORT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|eventNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(eventNumber) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|trackingArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trackingArea) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|magnification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(magnification) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|buttonMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(buttonMask) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|trackingNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trackingNumber) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|hasPreciseScrollingDeltas| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasPreciseScrollingDeltas) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|velocity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(velocity) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pressureBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pressureBehavior) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|buttonNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(buttonNumber) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|vendorDefined| (thing)
  (let ((message-lambda 
         (make-message-lambda @(vendorDefined) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|absoluteX| (thing)
  (let ((message-lambda 
         (make-message-lambda @(absoluteX) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|absoluteY| (thing)
  (let ((message-lambda 
         (make-message-lambda @(absoluteY) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|absoluteZ| (thing)
  (let ((message-lambda 
         (make-message-lambda @(absoluteZ) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|tilt| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tilt) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|tangentialPressure| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tangentialPressure) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|vendorID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(vendorID) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|tabletID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabletID) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pointingDeviceID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pointingDeviceID) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|systemTabletID| (thing)
  (let ((message-lambda 
         (make-message-lambda @(systemTabletID) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|vendorPointingDeviceType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(vendorPointingDeviceType) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pointingDeviceSerialNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pointingDeviceSerialNumber) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|capabilityMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(capabilityMask) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pointingDeviceType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pointingDeviceType) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isEnteringProximity| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEnteringProximity) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|deltaZ| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deltaZ) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|gestureAmount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gestureAmount) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isARepeat| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isARepeat) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|eventRef| (thing)
  (let ((message-lambda 
         (make-message-lambda @(eventRef) (()  ( :POINTER :VOID))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|charactersByApplyingModifiers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(charactersByApplyingModifiers:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|isGesture| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGesture) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|deviceDeltaX| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceDeltaX) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|deviceDeltaY| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceDeltaY) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|deviceDeltaZ| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceDeltaZ) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isDirectionInvertedFromDevice| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDirectionInvertedFromDevice) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|stageTransition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stageTransition) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:| (thing _ dampen-amount-threshold-min max using-handler)
  (let ((message-lambda 
         (make-message-lambda @(trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:) (( :UNSIGNED-LONG-LONG :DOUBLE :DOUBLE :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ dampen-amount-threshold-min max (objc-object-id using-handler))))

(defun ns::|touchesForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesForView:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|coalescedTouchesForTouch:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(coalescedTouchesForTouch:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|command| (thing)
  (let ((message-lambda 
         (make-message-lambda @(command) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bs_setDomain:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_setDomain:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|bs_defaultExists:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(bs_defaultExists:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))




(defun ns::|objectForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(objectForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|removeObjectForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeObjectForKey:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setObject:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setObject:forKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))


(defun ns::|synchronize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(synchronize) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|volatileDomainNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(volatileDomainNames) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|boolForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(boolForKey:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|URLForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(URLForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stringForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|arrayForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(arrayForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|dictionaryForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dictionaryForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|integerForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(integerForKey:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|dictionaryRepresentation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dictionaryRepresentation) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setObject:forKey:inDomain:| (thing _ for-key in-domain)
  (let ((message-lambda 
         (make-message-lambda @(setObject:forKey:inDomain:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key) (objc-object-id in-domain))))

(defun ns::|initWithSuiteName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithSuiteName:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithUser:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUser:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setPersistentDomain:forName:| (thing _ for-name)
  (let ((message-lambda 
         (make-message-lambda @(setPersistentDomain:forName:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-name))))

(defun ns::|objectForKey:inDomain:| (thing _ in-domain)
  (let ((message-lambda 
         (make-message-lambda @(objectForKey:inDomain:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-domain))))

(defun ns::|removeObjectForKey:inDomain:| (thing _ in-domain)
  (let ((message-lambda 
         (make-message-lambda @(removeObjectForKey:inDomain:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-domain))))

(defun ns::|dataForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dataForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stringArrayForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringArrayForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|longForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(longForKey:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|floatForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(floatForKey:) (( :POINTER)  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|doubleForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(doubleForKey:) (( :POINTER)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setInteger:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setInteger:forKey:) (( :LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-key))))

(defun ns::|setLong:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setLong:forKey:) (( :LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-key))))

(defun ns::|setFloat:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setFloat:forKey:) (( :FLOAT :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-key))))

(defun ns::|setDouble:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setDouble:forKey:) (( :DOUBLE :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-key))))

(defun ns::|setBool:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setBool:forKey:) (( :CHAR :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) (objc-object-id for-key))))

(defun ns::|setURL:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setURL:forKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun ns::|searchList| (thing)
  (let ((message-lambda 
         (make-message-lambda @(searchList) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSearchList:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSearchList:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addSuiteNamed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addSuiteNamed:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|removeSuiteNamed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeSuiteNamed:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|registerDefaults:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerDefaults:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|volatileDomainForName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(volatileDomainForName:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setVolatileDomain:forName:| (thing _ for-name)
  (let ((message-lambda 
         (make-message-lambda @(setVolatileDomain:forName:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-name))))

(defun ns::|removeVolatileDomainForName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeVolatileDomainForName:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|persistentDomainNames| (thing)
  (let ((message-lambda 
         (make-message-lambda @(persistentDomainNames) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|persistentDomainForName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(persistentDomainForName:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|removePersistentDomainForName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removePersistentDomainForName:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|objectIsForcedForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(objectIsForcedForKey:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|objectIsForcedForKey:inDomain:| (thing _ in-domain)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(objectIsForcedForKey:inDomain:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-domain)))) nil t))






(defun ns::|depth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(depth) (()  :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|visibleFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(visibleFrame) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|frame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frame) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|displayLinkWithTarget:selector:| (thing _ selector)
  (let ((message-lambda 
         (make-message-lambda @(displayLinkWithTarget:selector:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id selector))))

(defun ns::|colorSpace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorSpace) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|backingScaleFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backingScaleFactor) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|backingAlignedRect:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(backingAlignedRect:options:) (( ( :STRUCT ns::|CGRect|) :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ options)))

(defun ns::|convertRectToBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectToBacking:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|convertRectFromBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectFromBacking:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|deviceDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deviceDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|canRepresentDisplayGamut:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canRepresentDisplayGamut:) (( :LONG-LONG)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|devicePixelCounts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(devicePixelCounts) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|maximumExtendedDynamicRangeColorComponentValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumExtendedDynamicRangeColorComponentValue) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|maximumPotentialExtendedDynamicRangeColorComponentValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumPotentialExtendedDynamicRangeColorComponentValue) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|maximumReferenceExtendedDynamicRangeColorComponentValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumReferenceExtendedDynamicRangeColorComponentValue) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|safeAreaInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(safeAreaInsets) (()  ( :STRUCT ns::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|supportedWindowDepths| (thing)
  (let ((message-lambda 
         (make-message-lambda @(supportedWindowDepths) (()  ( :POINTER :INT))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bezelPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bezelPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|imageInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(imageInRect:) (( ( :STRUCT ns::|CGRect|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|imageInRect:underWindow:| (thing _ under-window)
  (let ((message-lambda 
         (make-message-lambda @(imageInRect:underWindow:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id under-window))))

(defun ns::|maximumFramesPerSecond| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumFramesPerSecond) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|minimumRefreshInterval| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minimumRefreshInterval) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|maximumRefreshInterval| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumRefreshInterval) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|displayUpdateGranularity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayUpdateGranularity) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|lastDisplayUpdateTimestamp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lastDisplayUpdateTimestamp) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|auxiliaryTopLeftArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(auxiliaryTopLeftArea) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|auxiliaryTopRightArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(auxiliaryTopRightArea) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|userSpaceScaleFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userSpaceScaleFactor) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|displayLinkWithHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayLinkWithHandler:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|size| (thing)
  (let ((message-lambda 
         (make-message-lambda @(size) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))








(defun ns::|itemAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(itemAtIndex:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|itemArray| (thing)
  (let ((message-lambda 
         (make-message-lambda @(itemArray) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|identifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(identifier) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|update| (thing)
  (let ((message-lambda 
         (make-message-lambda @(update) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIdentifier:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithTitle:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitle:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|supermenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(supermenu) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|numberOfItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(numberOfItems) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|removeItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|removeAllItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeAllItems) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|title| (thing)
  (let ((message-lambda 
         (make-message-lambda @(title) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|setAccessibilitySubrole:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySubrole:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setUserInterfaceLayoutDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUserInterfaceLayoutDirection:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilitySubrole| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySubrole) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityDecrementButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDecrementButton) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIncrementButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIncrementButton) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|removeItemAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeItemAtIndex:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|accessibilityChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChildren) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityRole| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRole) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityLabel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLabel) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIndex| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIndex) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityCustomActions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCustomActions) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|accessibilityChildrenInNavigationOrder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChildrenInNavigationOrder) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isAccessibilityElement| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityElement) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|indexOfItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfItem:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertItem:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertItem:atIndex:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|performKeyEquivalent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(performKeyEquivalent:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|accessibilityRowCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRowCount) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityVisibleChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleChildren) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityRoleDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRoleDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityColumnCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumnCount) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilitySelectedChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedChildren) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySelectedChildren:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedChildren:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySelectedCells| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedCells) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|accessibilityTitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTitle) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|setAccessibilityLabel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityLabel:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|font| (thing)
  (let ((message-lambda 
         (make-message-lambda @(font) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFont:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFont:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|sizeToFit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sizeToFit) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|indexOfItemWithTarget:andAction:| (thing _ and-action)
  (let ((message-lambda 
         (make-message-lambda @(indexOfItemWithTarget:andAction:) (( :POINTER :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id and-action))))


(defun ns::|performActionForItemAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performActionForItemAtIndex:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|isAccessibilityFocused| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityFocused) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityIdentifier) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityLayoutPointForScreenPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLayoutPointForScreenPoint:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityLayoutSizeForScreenSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLayoutSizeForScreenSize:) (( ( :STRUCT ns::|CGSize|))  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityScreenPointForLayoutPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityScreenPointForLayoutPoint:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityScreenSizeForLayoutSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityScreenSizeForLayoutSize:) (( ( :STRUCT ns::|CGSize|))  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityCellForColumn:row:| (thing _ row)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCellForColumn:row:) (( :LONG-LONG :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ row)))

(defun ns::|accessibilityAttributedStringForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributedStringForRange:) (( ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityRangeForLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForLine:) (( :LONG-LONG)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityStringForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityStringForRange:) (( ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityRangeForPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForPosition:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityRangeForIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForIndex:) (( :LONG-LONG)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityFrameForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFrameForRange:) (( ( :STRUCT ns::|_NSRange|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityRTFForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRTFForRange:) (( ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityStyleRangeForIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityStyleRangeForIndex:) (( :LONG-LONG)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityLineForIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLineForIndex:) (( :LONG-LONG)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityPerformCancel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformCancel) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityPerformConfirm| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformConfirm) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityPerformDecrement| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformDecrement) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityPerformDelete| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformDelete) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityPerformIncrement| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformIncrement) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityPerformPick| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformPick) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityPerformPress| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformPress) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityPerformRaise| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformRaise) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityPerformShowAlternateUI| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformShowAlternateUI) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityPerformShowDefaultUI| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformShowDefaultUI) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityPerformShowMenu| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityPerformShowMenu) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isAccessibilitySelectorAllowed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilitySelectorAllowed:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|setAccessibilityElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityElement:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setAccessibilityFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFrame:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAccessibilityFocused:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFocused:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityActivationPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityActivationPoint) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityActivationPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityActivationPoint:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityTopLevelUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTopLevelUIElement) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityTopLevelUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityTopLevelUIElement:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityURL) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityURL:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityURL:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityValue) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityValue:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityValueDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityValueDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityValueDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityValueDescription:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAccessibilityVisibleChildren:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleChildren:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAccessibilityTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityTitle:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityTitleUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTitleUIElement) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityTitleUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityTitleUIElement:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityNextContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityNextContents) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityNextContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityNextContents:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityOrientation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityOrientation) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityOrientation:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityOverflowButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityOverflowButton) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityOverflowButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityOverflowButton:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAccessibilityParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityParent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityPlaceholderValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPlaceholderValue) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityPlaceholderValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityPlaceholderValue:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityPreviousContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPreviousContents) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityPreviousContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityPreviousContents:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAccessibilityRole:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRole:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAccessibilityRoleDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRoleDescription:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySearchButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySearchButton) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySearchButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySearchButton:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySearchMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySearchMenu) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySearchMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySearchMenu:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilitySelected| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilitySelected) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilitySelected:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelected:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityServesAsTitleForUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityServesAsTitleForUIElements) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityServesAsTitleForUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityServesAsTitleForUIElements:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityShownMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityShownMenu) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityShownMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityShownMenu:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityMinValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinValue) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityMinValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMinValue:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityMaxValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMaxValue) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityMaxValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMaxValue:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityLinkedUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLinkedUIElements) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityLinkedUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityLinkedUIElements:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindow) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAccessibilityIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityIdentifier:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityHelp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHelp) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityHelp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHelp:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityFilename| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFilename) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityFilename:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFilename:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityExpanded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityExpanded) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityExpanded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityExpanded:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isAccessibilityEdited| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEdited) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityEdited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEdited:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isAccessibilityEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setAccessibilityChildren:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityChildren:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAccessibilityChildrenInNavigationOrder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityChildrenInNavigationOrder:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityClearButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityClearButton) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityClearButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityClearButton:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityCancelButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCancelButton) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityCancelButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCancelButton:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityProtectedContent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityProtectedContent) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityProtectedContent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityProtectedContent:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContents) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityContents:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityAlternateUIVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityAlternateUIVisible) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityAlternateUIVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAlternateUIVisible:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilitySharedFocusElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedFocusElements) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySharedFocusElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySharedFocusElements:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityRequired| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityRequired) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityRequired:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRequired:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityCustomRotors| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCustomRotors) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityCustomRotors:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCustomRotors:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityApplicationFocusedUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityApplicationFocusedUIElement) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityApplicationFocusedUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityApplicationFocusedUIElement:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityMainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMainWindow) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityMainWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMainWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityHidden) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHidden:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isAccessibilityFrontmost| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityFrontmost) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityFrontmost:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFrontmost:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityFocusedWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedWindow) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityFocusedWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFocusedWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindows) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityWindows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityWindows:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityExtrasMenuBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityExtrasMenuBar) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityExtrasMenuBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityExtrasMenuBar:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityMenuBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMenuBar) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityMenuBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMenuBar:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityColumnTitles| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumnTitles) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityColumnTitles:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumnTitles:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityOrderedByRow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityOrderedByRow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityOrderedByRow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityOrderedByRow:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityHorizontalUnits| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalUnits) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityHorizontalUnits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHorizontalUnits:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityVerticalUnits| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalUnits) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityVerticalUnits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVerticalUnits:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityHorizontalUnitDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalUnitDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityHorizontalUnitDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHorizontalUnitDescription:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityVerticalUnitDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalUnitDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityVerticalUnitDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVerticalUnitDescription:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityHandles| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHandles) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityHandles:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHandles:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityWarningValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWarningValue) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityWarningValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityWarningValue:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityCriticalValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCriticalValue) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityCriticalValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCriticalValue:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityDisclosed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityDisclosed) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityDisclosed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDisclosed:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityDisclosedByRow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDisclosedByRow) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityDisclosedByRow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDisclosedByRow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityDisclosedRows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDisclosedRows) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityDisclosedRows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDisclosedRows:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityDisclosureLevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDisclosureLevel) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityDisclosureLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDisclosureLevel:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityMarkerUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerUIElements) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityMarkerUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMarkerUIElements:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityMarkerValues| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerValues) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityMarkerValues:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMarkerValues:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityMarkerGroupUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerGroupUIElement) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityMarkerGroupUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMarkerGroupUIElement:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityUnits| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUnits) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityUnits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityUnits:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityUnitDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUnitDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityUnitDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityUnitDescription:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityRulerMarkerType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRulerMarkerType) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityRulerMarkerType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRulerMarkerType:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityMarkerTypeDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerTypeDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityMarkerTypeDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMarkerTypeDescription:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityHorizontalScrollBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalScrollBar) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityHorizontalScrollBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHorizontalScrollBar:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityVerticalScrollBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalScrollBar) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityVerticalScrollBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVerticalScrollBar:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityAllowedValues| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAllowedValues) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityAllowedValues:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAllowedValues:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityLabelUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLabelUIElements) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityLabelUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityLabelUIElements:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityLabelValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLabelValue) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityLabelValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityLabelValue:) (( :FLOAT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilitySplitters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySplitters) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySplitters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySplitters:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAccessibilityDecrementButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDecrementButton:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAccessibilityIncrementButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityIncrementButton:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityTabs| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTabs) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityTabs:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityTabs:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityHeader| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHeader) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityHeader:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHeader:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAccessibilityColumnCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumnCount:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAccessibilityRowCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRowCount:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAccessibilityIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityIndex:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityColumns| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumns) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityColumns:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumns:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityRows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRows) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityRows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRows:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityVisibleRows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleRows) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityVisibleRows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleRows:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySelectedRows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedRows) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySelectedRows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedRows:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityVisibleColumns| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleColumns) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityVisibleColumns:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleColumns:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySelectedColumns| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedColumns) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySelectedColumns:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedColumns:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySortDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySortDirection) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySortDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySortDirection:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityRowHeaderUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRowHeaderUIElements) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityRowHeaderUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRowHeaderUIElements:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAccessibilitySelectedCells:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedCells:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityVisibleCells| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleCells) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityVisibleCells:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleCells:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityColumnHeaderUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumnHeaderUIElements) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityColumnHeaderUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumnHeaderUIElements:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityRowIndexRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRowIndexRange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityRowIndexRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityRowIndexRange:) (( ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityColumnIndexRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityColumnIndexRange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityColumnIndexRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityColumnIndexRange:) (( ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityInsertionPointLineNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityInsertionPointLineNumber) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityInsertionPointLineNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityInsertionPointLineNumber:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilitySharedCharacterRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedCharacterRange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySharedCharacterRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySharedCharacterRange:) (( ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilitySharedTextUIElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedTextUIElements) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySharedTextUIElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySharedTextUIElements:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityVisibleCharacterRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleCharacterRange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityVisibleCharacterRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityVisibleCharacterRange:) (( ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityNumberOfCharacters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityNumberOfCharacters) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityNumberOfCharacters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityNumberOfCharacters:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilitySelectedText| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedText) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySelectedText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedText:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySelectedTextRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextRange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySelectedTextRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedTextRange:) (( ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilitySelectedTextRanges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextRanges) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySelectedTextRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySelectedTextRanges:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityToolbarButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityToolbarButton) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityToolbarButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityToolbarButton:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityModal) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityModal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityModal:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityProxy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityProxy) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityProxy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityProxy:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityMain| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMain) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityMain:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMain:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityFullScreenButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFullScreenButton) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityFullScreenButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFullScreenButton:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityGrowArea| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityGrowArea) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityGrowArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityGrowArea:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDocument) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDocument:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityDefaultButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDefaultButton) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityDefaultButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityDefaultButton:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityCloseButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCloseButton) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityCloseButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCloseButton:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityZoomButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityZoomButton) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityZoomButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityZoomButton:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityMinimizeButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinimizeButton) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityMinimizeButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMinimizeButton:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityMinimized| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMinimized) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityMinimized:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMinimized:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setAccessibilityCustomActions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCustomActions:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertItemWithTitle:action:keyEquivalent:atIndex:| (thing _ action key-equivalent at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertItemWithTitle:action:keyEquivalent:atIndex:) (( :POINTER :POINTER :POINTER :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id action) (objc-object-id key-equivalent) at-index)))


(defun ns::|autoenablesItems| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoenablesItems) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|itemWithTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(itemWithTitle:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|indexOfItemWithSubmenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfItemWithSubmenu:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addItemWithTitle:action:keyEquivalent:| (thing _ action key-equivalent)
  (let ((message-lambda 
         (make-message-lambda @(addItemWithTitle:action:keyEquivalent:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id action) (objc-object-id key-equivalent))))


(defun ns::|minimumWidth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minimumWidth) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|showsStateColumn| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsStateColumn) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|appearanceParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(appearanceParent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAppearanceParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAppearanceParent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|storyboard| (thing)
  (let ((message-lambda 
         (make-message-lambda @(storyboard) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|presentControllerAsModalWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(presentControllerAsModalWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityResultsForSearchPredicate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityResultsForSearchPredicate:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityHeaderForColumnIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHeaderForColumnIndex:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityHeaderForRowIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHeaderForRowIndex:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityAuditIssues| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditIssues) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityAuditIssues:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAuditIssues:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityAutoInteractable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityAutoInteractable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityAutoInteractable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAutoInteractable:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityContainerType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContainerType) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityContainerType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityContainerType:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityUserInputLabels| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUserInputLabels) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityUserInputLabels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityUserInputLabels:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityCustomContent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCustomContent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityCustomContent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCustomContent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityAttributedUserInputLabels| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributedUserInputLabels) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityAttributedUserInputLabels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityAttributedUserInputLabels:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityPath:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityCustomChoosers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCustomChoosers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityCustomChoosers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityCustomChoosers:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityEmbeddedImageDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityEmbeddedImageDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityEmbeddedImageDescription:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEmbeddedImageDescription:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityEnhancedUserInterface| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityEnhancedUserInterface) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityEnhancedUserInterface:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityEnhancedUserInterface:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilityFunctionRowTopLevelElements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFunctionRowTopLevelElements) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityFunctionRowTopLevelElements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFunctionRowTopLevelElements:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isAccessibilityMimicNativeView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAccessibilityMimicNativeView) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityMimicNativeView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityMimicNativeView:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilitySections| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySections) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilitySections:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilitySections:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityHeaderGroup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHeaderGroup) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityHeaderGroup:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityHeaderGroup:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityFrameInParentSpace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFrameInParentSpace) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityFrameInParentSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityFrameInParentSpace:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityPreviousContentSibling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPreviousContentSibling) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPreviousContentSibling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreviousContentSibling:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityNextContentSibling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityNextContentSibling) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setNextContentSibling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNextContentSibling:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityContentSiblingAbove| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContentSiblingAbove) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityContentSiblingAbove:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityContentSiblingAbove:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityContentSiblingBelow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContentSiblingBelow) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityContentSiblingBelow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityContentSiblingBelow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityChartDescriptor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityChartDescriptor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAccessibilityChartDescriptor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityChartDescriptor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityOverridesAlwaysTakePrecedence| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityOverridesAlwaysTakePrecedence) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAccessibilityOverridesAlwaysTakePrecedence:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessibilityOverridesAlwaysTakePrecedence:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|indexOfItemWithRepresentedObject:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfItemWithRepresentedObject:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|indexOfItemWithTag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfItemWithTag:) (( :LONG-LONG)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAutoenablesItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoenablesItems:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|indexOfItemWithTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfItemWithTitle:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|popUpMenuPositioningItem:atLocation:inView:| (thing _ at-location in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(popUpMenuPositioningItem:atLocation:inView:) (( :POINTER ( :STRUCT ns::|CGPoint|) :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-location (objc-object-id in-view)))) nil t))

(defun ns::|cancelTracking| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cancelTracking) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setShowsStateColumn:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsStateColumn:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|helpRequested:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(helpRequested:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setSubmenu:forItem:| (thing _ for-item)
  (let ((message-lambda 
         (make-message-lambda @(setSubmenu:forItem:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-item))))

(defun ns::|setMenuRepresentation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMenuRepresentation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|recordKeyboardShortcutEvent:withKeyEquivalent:modifierMask:title:| (thing _ with-key-equivalent modifier-mask title)
  (let ((message-lambda 
         (make-message-lambda @(recordKeyboardShortcutEvent:withKeyEquivalent:modifierMask:title:) (( :POINTER :POINTER :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-key-equivalent) modifier-mask (objc-object-id title))))

(defun ns::|itemChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(itemChanged:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|attachedMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attachedMenu) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isAttached| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAttached) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|locationForSubmenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(locationForSubmenu:) (( :POINTER)  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|popUpMenuPositioningItem:atLocation:inView:appearance:| (thing _ at-location in-view appearance)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(popUpMenuPositioningItem:atLocation:inView:appearance:) (( :POINTER ( :STRUCT ns::|CGPoint|) :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-location (objc-object-id in-view) (objc-object-id appearance)))) nil t))

(defun ns::|menuBarHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(menuBarHeight) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSupermenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSupermenu:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setItemArray:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setItemArray:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|itemWithTag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(itemWithTag:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setMenuChangedMessagesEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMenuChangedMessagesEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|menuChangedMessagesEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(menuChangedMessagesEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|propertiesToUpdate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(propertiesToUpdate) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|menuRepresentation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(menuRepresentation) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setContextMenuRepresentation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContextMenuRepresentation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|contextMenuRepresentation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contextMenuRepresentation) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTearOffMenuRepresentation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTearOffMenuRepresentation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|tearOffMenuRepresentation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tearOffMenuRepresentation) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isTornOff| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isTornOff) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setMinimumWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinimumWidth:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|allowsContextMenuPlugIns| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsContextMenuPlugIns) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAllowsContextMenuPlugIns:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsContextMenuPlugIns:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|highlightItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(highlightItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|highlightedItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(highlightedItem) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|cancelTrackingWithoutAnimation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cancelTrackingWithoutAnimation) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))








(defun ns::|setHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHidden:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun ns::|state| (thing)
  (let ((message-lambda 
         (make-message-lambda @(state) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setTarget:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTarget:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|target| (thing)
  (let ((message-lambda 
         (make-message-lambda @(target) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|isEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setState:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|action| (thing)
  (let ((message-lambda 
         (make-message-lambda @(action) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithTitle:action:keyEquivalent:| (thing _ action key-equivalent)
  (let ((message-lambda 
         (make-message-lambda @(initWithTitle:action:keyEquivalent:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id action) (objc-object-id key-equivalent))))

(defun ns::|setAttributedTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAttributedTitle:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setImage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setImage:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setTag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTag:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setRepresentedObject:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepresentedObject:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setSubmenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSubmenu:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAction:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|view| (thing)
  (let ((message-lambda 
         (make-message-lambda @(view) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|keyEquivalent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyEquivalent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|keyEquivalentModifierMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyEquivalentModifierMask) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|image| (thing)
  (let ((message-lambda 
         (make-message-lambda @(image) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|attributedTitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributedTitle) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|indentationLevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(indentationLevel) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))





(defun ns::|tag| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tag) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))






(defun ns::|isHighlighted| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHighlighted) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|isHiddenOrHasHiddenAncestor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHiddenOrHasHiddenAncestor) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))




(defun ns::|controlView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(controlView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|toolTip| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toolTip) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setToolTip:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setToolTip:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|submenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(submenu) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isAlternate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAlternate) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isSeparatorItem| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSeparatorItem) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setKeyEquivalentModifierMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKeyEquivalentModifierMask:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAlternate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAlternate:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))











(defun ns::|setControlView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setControlView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setKeyEquivalent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKeyEquivalent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))





(defun ns::|hasSubmenu| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasSubmenu) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



























































































































































































































































(defun ns::|representedObject| (thing)
  (let ((message-lambda 
         (make-message-lambda @(representedObject) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTitleWithMnemonic:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleWithMnemonic:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|backgroundStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backgroundStyle) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|mnemonic| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mnemonic) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isDestructive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDestructive) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setDestructive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDestructive:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))














































(defun ns::|allowsKeyEquivalentWhenHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsKeyEquivalentWhenHidden) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|onStateImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(onStateImage) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|offStateImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(offStateImage) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|mixedStateImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mixedStateImage) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|copyNormalizedTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copyNormalizedTitle:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|menuItemOrSubmenuNeedsShortcutLocalization| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(menuItemOrSubmenuNeedsShortcutLocalization) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|userKeyEquivalent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userKeyEquivalent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|scheduleKeyboardAwareShortcutUpdate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scheduleKeyboardAwareShortcutUpdate) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|userKeyEquivalentModifierMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userKeyEquivalentModifierMask) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|keyEquivalentSharingMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyEquivalentSharingMode) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|parentItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(parentItem) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAllowsKeyEquivalentWhenHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsKeyEquivalentWhenHidden:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setAllowsAutomaticKeyEquivalentLocalization:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsAutomaticKeyEquivalentLocalization:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|allowsAutomaticKeyEquivalentLocalization| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsAutomaticKeyEquivalentLocalization) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAllowsAutomaticKeyEquivalentMirroring:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsAutomaticKeyEquivalentMirroring:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|allowsAutomaticKeyEquivalentMirroring| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsAutomaticKeyEquivalentMirroring) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setKeyEquivalentSharingMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKeyEquivalentSharingMode:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setMnemonicLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMnemonicLocation:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|mnemonicLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mnemonicLocation) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setOnStateImage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOnStateImage:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setOffStateImage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOffStateImage:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setMixedStateImage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMixedStateImage:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setIndentationLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIndentationLevel:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|recognizerWillBeginAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(recognizerWillBeginAnimation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|recognizerDidUpdateAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(recognizerDidUpdateAnimation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|recognizerDidCancelAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(recognizerDidCancelAnimation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|recognizerDidCompleteAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(recognizerDidCompleteAnimation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|recognizerDidDismissAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(recognizerDidDismissAnimation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|invokeActionBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(invokeActionBlock:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setActionBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setActionBlock:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|shouldMenuItemBeUpdatedDueToNotification| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldMenuItemBeUpdatedDueToNotification) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))




(defun ns::|set| (thing)
  (let ((message-lambda 
         (make-message-lambda @(set) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun ns::|mouseEntered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseEntered:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|mouseExited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseExited:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithImage:hotSpot:| (thing _ hot-spot)
  (let ((message-lambda 
         (make-message-lambda @(initWithImage:hotSpot:) (( :POINTER ( :STRUCT ns::|CGPoint|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) hot-spot)))

(defun ns::|initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:| (thing _ foreground-color-hint background-color-hint hot-spot)
  (let ((message-lambda 
         (make-message-lambda @(initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:) (( :POINTER :POINTER :POINTER ( :STRUCT ns::|CGPoint|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id foreground-color-hint) (objc-object-id background-color-hint) hot-spot)))

(defun ns::|pop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pop) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|hotSpot| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hotSpot) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setOnMouseExited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOnMouseExited:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setOnMouseEntered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOnMouseEntered:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isSetOnMouseExited| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSetOnMouseExited) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isSetOnMouseEntered| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSetOnMouseEntered) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|forceSet| (thing)
  (let ((message-lambda 
         (make-message-lambda @(forceSet) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|push| (thing)
  (let ((message-lambda 
         (make-message-lambda @(push) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithPasteboardPropertyList:ofType:| (thing _ of-type)
  (let ((message-lambda 
         (make-message-lambda @(initWithPasteboardPropertyList:ofType:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id of-type))))

(defun ns::|stringWithoutAmpersand| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringWithoutAmpersand) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|writableTypesForPasteboard:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(writableTypesForPasteboard:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pasteboardPropertyListForType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteboardPropertyListForType:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|rangeOfGraphicalSegmentAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rangeOfGraphicalSegmentAtIndex:) (( :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|NS_isSourceOver| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_isSourceOver) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|sizeWithAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sizeWithAttributes:) (( :POINTER)  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|boundingRectWithSize:options:attributes:context:| (thing _ options attributes context)
  (let ((message-lambda 
         (make-message-lambda @(boundingRectWithSize:options:attributes:context:) (( ( :STRUCT ns::|CGSize|) :LONG-LONG :POINTER :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ options (objc-object-id attributes) (objc-object-id context))))

(defun ns::|drawInRect:withAttributes:| (thing _ with-attributes)
  (let ((message-lambda 
         (make-message-lambda @(drawInRect:withAttributes:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-attributes))))

(defun ns::|drawAtPoint:withAttributes:| (thing _ with-attributes)
  (let ((message-lambda 
         (make-message-lambda @(drawAtPoint:withAttributes:) (( ( :STRUCT ns::|CGPoint|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-attributes))))

(defun ns::|drawWithRect:options:attributes:context:| (thing _ options attributes context)
  (let ((message-lambda 
         (make-message-lambda @(drawWithRect:options:attributes:context:) (( ( :STRUCT ns::|CGRect|) :LONG-LONG :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ options (objc-object-id attributes) (objc-object-id context))))

(defun ns::|boundingRectWithSize:options:attributes:| (thing _ options attributes)
  (let ((message-lambda 
         (make-message-lambda @(boundingRectWithSize:options:attributes:) (( ( :STRUCT ns::|CGSize|) :LONG-LONG :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ options (objc-object-id attributes))))

(defun ns::|drawWithRect:options:attributes:| (thing _ options attributes)
  (let ((message-lambda 
         (make-message-lambda @(drawWithRect:options:attributes:) (( ( :STRUCT ns::|CGRect|) :LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ options (objc-object-id attributes))))

(defun ns::|hasColorGlyphsInRange:attributes:| (thing _ attributes)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasColorGlyphsInRange:attributes:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id attributes)))) nil t))

(defun ns::|stringByStrippingLeadingAndTrailingWhitespaceAndQuotes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByStrippingLeadingAndTrailingWhitespaceAndQuotes) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringByAppendingPathExtensionForType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringByAppendingPathExtensionForType:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stringByAppendingPathComponent:conformingToType:| (thing _ conforming-to-type)
  (let ((message-lambda 
         (make-message-lambda @(stringByAppendingPathComponent:conformingToType:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id conforming-to-type))))

(defun ns::|imageMetadataFromFileName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(imageMetadataFromFileName) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|scaleableResourceMetadataFromFileName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scaleableResourceMetadataFromFileName) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSpace) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isDelete| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDelete) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|stringByTrimmingCharactersInCFCharacterSet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringByTrimmingCharactersInCFCharacterSet:) (( ( :POINTER ( :STRUCT ns::|__CFCharacterSet|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stringByTrimmingLastCharacter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByTrimmingLastCharacter) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringByReplacingCharactersInSet:withCharacter:| (thing _ with-character)
  (let ((message-lambda 
         (make-message-lambda @(stringByReplacingCharactersInSet:withCharacter:) (( ( :POINTER ( :STRUCT ns::|__CFCharacterSet|)) :UNSIGNED-INT)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) with-character)))

(defun ns::|stringByReplacingCharacter:withCharacter:| (thing _ with-character)
  (let ((message-lambda 
         (make-message-lambda @(stringByReplacingCharacter:withCharacter:) (( :UNSIGNED-INT :UNSIGNED-INT)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ with-character)))

(defun ns::|endsSentence| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(endsSentence) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isLeftAssociative| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isLeftAssociative) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isPlainSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isPlainSpace) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isSpaceOrReturn| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSpaceOrReturn) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isNewlineOrReturn| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNewlineOrReturn) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isTripledPunctuation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isTripledPunctuation) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|looksLikeEmailAddress| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(looksLikeEmailAddress) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|looksLikeNumberInput| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(looksLikeNumberInput) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|looksLikeURL| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(looksLikeURL) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isNaturallyRTL| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isNaturallyRTL) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|containsSubstring:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(containsSubstring:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|editDistanceFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(editDistanceFrom:) (( :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|ls_visuallyOrderCharactersReturningError:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(ls_visuallyOrderCharactersReturningError:) (( ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|ls_matchesStringForPluginQuery:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ls_matchesStringForPluginQuery:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|ls_cleanForPluginQuery| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ls_cleanForPluginQuery) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|ls_matchesForPluginQuery:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ls_matchesForPluginQuery:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|ls_isRecursiveKey| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ls_isRecursiveKey) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|ls_updatedKey| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ls_updatedKey) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|firstCharacter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstCharacter) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|componentsByLanguage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(componentsByLanguage:) (( :INT)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|pinyinStringFromPinyinWithToneNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pinyinStringFromPinyinWithToneNumber) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|zhuyinSyllableFromPinyinSyllable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(zhuyinSyllableFromPinyinSyllable) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringByStrippingDiacritics| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByStrippingDiacritics) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|toneFromPinyinSyllableWithNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toneFromPinyinSyllableWithNumber) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|strokeStringFromNumberString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(strokeStringFromNumberString) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringByApplyingPinyinToneMarkToFirstSyllableWithToneNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringByApplyingPinyinToneMarkToFirstSyllableWithToneNumber:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|simplifiedChineseCompare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(simplifiedChineseCompare:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|traditionalChinesePinyinCompare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(traditionalChinesePinyinCompare:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|traditionalChineseZhuyinCompare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(traditionalChineseZhuyinCompare:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))






(defun ns::|UTF8String| (thing)
  (let ((message-lambda 
         (make-message-lambda @(UTF8String) (()  :STRING)))) 
   (funcall message-lambda (objc-object-id thing) )))






(defun ns::|lengthOfBytesUsingEncoding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lengthOfBytesUsingEncoding:) (( :UNSIGNED-LONG-LONG)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|length| (thing)
  (let ((message-lambda 
         (make-message-lambda @(length) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|getBytes:maxLength:usedLength:encoding:options:range:remainingRange:| (thing _ max-length used-length encoding options range remaining-range)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getBytes:maxLength:usedLength:encoding:options:range:remainingRange:) (( ( :POINTER :VOID) :UNSIGNED-LONG-LONG ( :POINTER :UNSIGNED-LONG-LONG) :UNSIGNED-LONG-LONG :UNSIGNED-LONG-LONG ( :STRUCT ns::|_NSRange|) ( :POINTER ( :STRUCT ns::|_NSRange|)))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) max-length (objc-object-id used-length) encoding options range (objc-object-id remaining-range)))) nil t))

(defun ns::|initWithFormat:arguments:| (thing _ arguments)
  (let ((message-lambda 
         (make-message-lambda @(initWithFormat:arguments:) (( :POINTER ( :ARRAY ( :STRUCT ns::|__va_list_tag|) 1))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) arguments)))

(defun ns::|mutableCopyWithZone:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mutableCopyWithZone:) (( ( :POINTER ( :STRUCT ns::|_NSZone|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|cString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cString) (()  :STRING)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|compare:options:range:locale:| (thing _ options range locale)
  (let ((message-lambda 
         (make-message-lambda @(compare:options:range:locale:) (( :POINTER :UNSIGNED-LONG-LONG ( :STRUCT ns::|_NSRange|) :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options range (objc-object-id locale))))

(defun ns::|cStringUsingEncoding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cStringUsingEncoding:) (( :UNSIGNED-LONG-LONG)  :STRING)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|lowercaseStringWithLocale:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lowercaseStringWithLocale:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|uppercaseStringWithLocale:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(uppercaseStringWithLocale:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|characterAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(characterAtIndex:) (( :UNSIGNED-LONG-LONG)  :UNSIGNED-SHORT)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|getCharacters:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(getCharacters:range:) (( ( :POINTER :UNSIGNED-SHORT) ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun ns::|substringWithRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(substringWithRange:) (( ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|isEqualToString:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqualToString:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|fastestEncoding| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fastestEncoding) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|smallestEncoding| (thing)
  (let ((message-lambda 
         (make-message-lambda @(smallestEncoding) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithContentsOfFile:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentsOfFile:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithContentsOfURL:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentsOfURL:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))






(defun ns::|cStringLength| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cStringLength) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|getCString:maxLength:encoding:| (thing _ max-length encoding)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getCString:maxLength:encoding:) (( :STRING :UNSIGNED-LONG-LONG :UNSIGNED-LONG-LONG)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ max-length encoding))) nil t))

(defun ns::|hasPrefix:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasPrefix:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|hasSuffix:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasSuffix:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|getLineStart:end:contentsEnd:forRange:| (thing _ end contents-end for-range)
  (let ((message-lambda 
         (make-message-lambda @(getLineStart:end:contentsEnd:forRange:) (( ( :POINTER :UNSIGNED-LONG-LONG) ( :POINTER :UNSIGNED-LONG-LONG) ( :POINTER :UNSIGNED-LONG-LONG) ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id end) (objc-object-id contents-end) for-range)))


(defun ns::|getParagraphStart:end:contentsEnd:forRange:| (thing _ end contents-end for-range)
  (let ((message-lambda 
         (make-message-lambda @(getParagraphStart:end:contentsEnd:forRange:) (( ( :POINTER :UNSIGNED-LONG-LONG) ( :POINTER :UNSIGNED-LONG-LONG) ( :POINTER :UNSIGNED-LONG-LONG) ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id end) (objc-object-id contents-end) for-range)))

(defun ns::|initWithString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithString:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|fileSystemRepresentation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fileSystemRepresentation) (()  :STRING)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|formatConfiguration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(formatConfiguration) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringByAppendingPathComponent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringByAppendingPathComponent:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|lastPathComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lastPathComponent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringByDeletingPathExtension| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByDeletingPathExtension) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pathExtension| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pathExtension) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|lowercaseString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lowercaseString) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|caseInsensitiveCompare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(caseInsensitiveCompare:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|getFileSystemRepresentation:maxLength:| (thing _ max-length)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getFileSystemRepresentation:maxLength:) (( :STRING :UNSIGNED-LONG-LONG)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ max-length))) nil t))

(defun ns::|stringByDeletingLastPathComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByDeletingLastPathComponent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|rangeOfString:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(rangeOfString:options:) (( :POINTER :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options)))

(defun ns::|containsString:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(containsString:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|initWithFormat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithFormat:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|substringFromIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(substringFromIndex:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|rangeOfString:options:range:| (thing _ options range)
  (let ((message-lambda 
         (make-message-lambda @(rangeOfString:options:range:) (( :POINTER :UNSIGNED-LONG-LONG ( :STRUCT ns::|_NSRange|))  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options range)))

(defun ns::|dataUsingEncoding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dataUsingEncoding:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|substringToIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(substringToIndex:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithData:encoding:| (thing _ encoding)
  (let ((message-lambda 
         (make-message-lambda @(initWithData:encoding:) (( :POINTER :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) encoding)))

(defun ns::|stringByAppendingFormat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringByAppendingFormat:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stringByAppendingPathExtension:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringByAppendingPathExtension:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stringByAppendingString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringByAppendingString:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stringByReplacingOccurrencesOfString:withString:| (thing _ with-string)
  (let ((message-lambda 
         (make-message-lambda @(stringByReplacingOccurrencesOfString:withString:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-string))))

(defun ns::|pathComponents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pathComponents) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringByReplacingCharactersInRange:withString:| (thing _ with-string)
  (let ((message-lambda 
         (make-message-lambda @(stringByReplacingCharactersInRange:withString:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-string))))

(defun ns::|stringByExpandingTildeInPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByExpandingTildeInPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|componentsSeparatedByString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(componentsSeparatedByString:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|rangeOfCharacterFromSet:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(rangeOfCharacterFromSet:options:) (( :POINTER :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options)))

(defun ns::|rangeOfCharacterFromSet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rangeOfCharacterFromSet:) (( :POINTER)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithCharacters:length:| (thing _ length)
  (let ((message-lambda 
         (make-message-lambda @(initWithCharacters:length:) (( ( :POINTER :UNSIGNED-SHORT) :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) length)))

(defun ns::|stringByApplyingTransform:reverse:| (thing _ reverse)
  (let ((message-lambda 
         (make-message-lambda @(stringByApplyingTransform:reverse:) (( :POINTER :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if reverse 1 0))))

(defun ns::|rangeOfString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rangeOfString:) (( :POINTER)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithBytesNoCopy:length:encoding:freeWhenDone:| (thing _ length encoding free-when-done)
  (let ((message-lambda 
         (make-message-lambda @(initWithBytesNoCopy:length:encoding:freeWhenDone:) (( ( :POINTER :VOID) :UNSIGNED-LONG-LONG :UNSIGNED-LONG-LONG :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) length encoding (if free-when-done 1 0))))

(defun ns::|initWithCString:encoding:| (thing _ encoding)
  (let ((message-lambda 
         (make-message-lambda @(initWithCString:encoding:) (( :STRING :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ encoding)))

(defun ns::|compare:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(compare:options:) (( :POINTER :UNSIGNED-LONG-LONG)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options)))

(defun ns::|propertyList| (thing)
  (let ((message-lambda 
         (make-message-lambda @(propertyList) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|capitalizedString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(capitalizedString) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringByPaddingToLength:withString:startingAtIndex:| (thing _ with-string starting-at-index)
  (let ((message-lambda 
         (make-message-lambda @(stringByPaddingToLength:withString:startingAtIndex:) (( :UNSIGNED-LONG-LONG :POINTER :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-string) starting-at-index)))

(defun ns::|stringByStandardizingPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByStandardizingPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithUTF8String:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithUTF8String:) (( :STRING)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|stringByReplacingOccurrencesOfString:withString:options:range:| (thing _ with-string options range)
  (let ((message-lambda 
         (make-message-lambda @(stringByReplacingOccurrencesOfString:withString:options:range:) (( :POINTER :POINTER :UNSIGNED-LONG-LONG ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-string) options range)))

(defun ns::|enumerateSubstringsInRange:options:usingBlock:| (thing _ options using-block)
  (let ((message-lambda 
         (make-message-lambda @(enumerateSubstringsInRange:options:usingBlock:) (( ( :STRUCT ns::|_NSRange|) :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ options (objc-object-id using-block))))

(defun ns::|writeToFile:atomically:| (thing _ atomically)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeToFile:atomically:) (( :POINTER :CHAR)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if atomically 1 0)))) nil t))

(defun ns::|rangeOfComposedCharacterSequenceAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rangeOfComposedCharacterSequenceAtIndex:) (( :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|uppercaseString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(uppercaseString) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|rangeOfCharacterFromSet:options:range:| (thing _ options range)
  (let ((message-lambda 
         (make-message-lambda @(rangeOfCharacterFromSet:options:range:) (( :POINTER :UNSIGNED-LONG-LONG ( :STRUCT ns::|_NSRange|))  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options range)))

(defun ns::|stringByTrimmingCharactersInSet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringByTrimmingCharactersInSet:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithContentsOfFile:encoding:error:| (thing _ encoding error)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentsOfFile:encoding:error:) (( :POINTER :UNSIGNED-LONG-LONG ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) encoding (objc-object-id error))))

(defun ns::|componentsSeparatedByCharactersInSet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(componentsSeparatedByCharactersInSet:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|getCharacters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(getCharacters:) (( ( :POINTER :UNSIGNED-SHORT))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|writeToFile:atomically:encoding:error:| (thing _ atomically encoding error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeToFile:atomically:encoding:error:) (( :POINTER :CHAR :UNSIGNED-LONG-LONG ( :POINTER :POINTER))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if atomically 1 0) encoding (objc-object-id error)))) nil t))

(defun ns::|writeToURL:atomically:| (thing _ atomically)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeToURL:atomically:) (( :POINTER :CHAR)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if atomically 1 0)))) nil t))

(defun ns::|writeToURL:atomically:encoding:error:| (thing _ atomically encoding error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeToURL:atomically:encoding:error:) (( :POINTER :CHAR :UNSIGNED-LONG-LONG ( :POINTER :POINTER))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if atomically 1 0) encoding (objc-object-id error)))) nil t))

(defun ns::|scriptingIsEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scriptingIsEqualTo:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|scriptingIsLessThanOrEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scriptingIsLessThanOrEqualTo:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|scriptingIsLessThan:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scriptingIsLessThan:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|scriptingIsGreaterThanOrEqualTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scriptingIsGreaterThanOrEqualTo:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|scriptingIsGreaterThan:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scriptingIsGreaterThan:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|scriptingBeginsWith:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scriptingBeginsWith:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|scriptingEndsWith:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scriptingEndsWith:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|scriptingContains:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scriptingContains:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|compare:options:range:| (thing _ options range)
  (let ((message-lambda 
         (make-message-lambda @(compare:options:range:) (( :POINTER :UNSIGNED-LONG-LONG ( :STRUCT ns::|_NSRange|))  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options range)))

(defun ns::|variantFittingPresentationWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(variantFittingPresentationWidth:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithCharactersNoCopy:length:freeWhenDone:| (thing _ length free-when-done)
  (let ((message-lambda 
         (make-message-lambda @(initWithCharactersNoCopy:length:freeWhenDone:) (( ( :POINTER :UNSIGNED-SHORT) :UNSIGNED-LONG-LONG :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) length (if free-when-done 1 0))))

(defun ns::|getBytes:maxLength:filledLength:encoding:allowLossyConversion:range:remainingRange:| (thing _ max-length filled-length encoding allow-lossy-conversion range remaining-range)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getBytes:maxLength:filledLength:encoding:allowLossyConversion:range:remainingRange:) (( :STRING :UNSIGNED-LONG-LONG ( :POINTER :UNSIGNED-LONG-LONG) :UNSIGNED-LONG-LONG :CHAR ( :STRUCT ns::|_NSRange|) ( :POINTER ( :STRUCT ns::|_NSRange|)))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ max-length (objc-object-id filled-length) encoding (if allow-lossy-conversion 1 0) range (objc-object-id remaining-range)))) nil t))

(defun ns::|decomposedStringWithCanonicalMapping| (thing)
  (let ((message-lambda 
         (make-message-lambda @(decomposedStringWithCanonicalMapping) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|precomposedStringWithCanonicalMapping| (thing)
  (let ((message-lambda 
         (make-message-lambda @(precomposedStringWithCanonicalMapping) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|decomposedStringWithCompatibilityMapping| (thing)
  (let ((message-lambda 
         (make-message-lambda @(decomposedStringWithCompatibilityMapping) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|precomposedStringWithCompatibilityMapping| (thing)
  (let ((message-lambda 
         (make-message-lambda @(precomposedStringWithCompatibilityMapping) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|canBeConvertedToEncoding:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBeConvertedToEncoding:) (( :UNSIGNED-LONG-LONG)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|lossyCString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lossyCString) (()  :STRING)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|dataUsingEncoding:allowLossyConversion:| (thing _ allow-lossy-conversion)
  (let ((message-lambda 
         (make-message-lambda @(dataUsingEncoding:allowLossyConversion:) (( :UNSIGNED-LONG-LONG :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if allow-lossy-conversion 1 0))))

(defun ns::|quotedStringRepresentation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(quotedStringRepresentation) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|getCString:maxLength:range:remainingRange:| (thing _ max-length range remaining-range)
  (let ((message-lambda 
         (make-message-lambda @(getCString:maxLength:range:remainingRange:) (( :STRING :UNSIGNED-LONG-LONG ( :STRUCT ns::|_NSRange|) ( :POINTER ( :STRUCT ns::|_NSRange|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ max-length range (objc-object-id remaining-range))))

(defun ns::|getCString:maxLength:| (thing _ max-length)
  (let ((message-lambda 
         (make-message-lambda @(getCString:maxLength:) (( :STRING :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ max-length)))

(defun ns::|getCString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(getCString:) (( :STRING)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithFormat:locale:arguments:| (thing _ locale arguments)
  (let ((message-lambda 
         (make-message-lambda @(initWithFormat:locale:arguments:) (( :POINTER :POINTER ( :ARRAY ( :STRUCT ns::|__va_list_tag|) 1))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id locale) arguments)))

(defun ns::|isAbsolutePath| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAbsolutePath) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|stringByResolvingSymlinksInPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByResolvingSymlinksInPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|capitalizedStringWithLocale:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(capitalizedStringWithLocale:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithCString:length:| (thing _ length)
  (let ((message-lambda 
         (make-message-lambda @(initWithCString:length:) (( :STRING :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ length)))

(defun ns::|initWithBytesNoCopy:length:encoding:deallocator:| (thing _ length encoding deallocator)
  (let ((message-lambda 
         (make-message-lambda @(initWithBytesNoCopy:length:encoding:deallocator:) (( ( :POINTER :VOID) :UNSIGNED-LONG-LONG :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) length encoding (objc-object-id deallocator))))

(defun ns::|initWithCharactersNoCopy:length:deallocator:| (thing _ length deallocator)
  (let ((message-lambda 
         (make-message-lambda @(initWithCharactersNoCopy:length:deallocator:) (( ( :POINTER :UNSIGNED-SHORT) :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) length (objc-object-id deallocator))))

(defun ns::|initWithCStringNoCopy:length:freeWhenDone:| (thing _ length free-when-done)
  (let ((message-lambda 
         (make-message-lambda @(initWithCStringNoCopy:length:freeWhenDone:) (( :STRING :UNSIGNED-LONG-LONG :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ length (if free-when-done 1 0))))

(defun ns::|initWithFormat:locale:| (thing _ locale)
  (let ((message-lambda 
         (make-message-lambda @(initWithFormat:locale:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id locale))))

(defun ns::|stringByAbbreviatingWithTildeInPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByAbbreviatingWithTildeInPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringsByAppendingPaths:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringsByAppendingPaths:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:| (thing _ case-sensitive matches-into-array filter-types)
  (let ((message-lambda 
         (make-message-lambda @(completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:) (( ( :POINTER :POINTER) :CHAR ( :POINTER :POINTER) :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if case-sensitive 1 0) (objc-object-id matches-into-array) (objc-object-id filter-types))))

(defun ns::|stringByConvertingPathToURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByConvertingPathToURL) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringByConvertingURLToPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByConvertingURLToPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|writableTypeIdentifiersForItemProvider| (thing)
  (let ((message-lambda 
         (make-message-lambda @(writableTypeIdentifiersForItemProvider) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|loadDataWithTypeIdentifier:forItemProviderCompletionHandler:| (thing _ for-item-provider-completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(loadDataWithTypeIdentifier:forItemProviderCompletionHandler:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-item-provider-completion-handler))))



(defun ns::|matchesPattern:caseInsensitive:| (thing _ case-insensitive)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(matchesPattern:caseInsensitive:) (( :POINTER :CHAR)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if case-insensitive 1 0)))) nil t))

(defun ns::|matchesPattern:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(matchesPattern:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|initWithCString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithCString:) (( :STRING)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:| (thing _ valid-format-specifiers locale arguments error)
  (let ((message-lambda 
         (make-message-lambda @(initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:) (( :POINTER :POINTER :POINTER ( :ARRAY ( :STRUCT ns::|__va_list_tag|) 1) ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id valid-format-specifiers) (objc-object-id locale) arguments (objc-object-id error))))

(defun ns::|initWithContentsOfURL:encoding:error:| (thing _ encoding error)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentsOfURL:encoding:error:) (( :POINTER :UNSIGNED-LONG-LONG ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) encoding (objc-object-id error))))

(defun ns::|initWithContentsOfURL:usedEncoding:error:| (thing _ used-encoding error)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentsOfURL:usedEncoding:error:) (( :POINTER ( :POINTER :UNSIGNED-LONG-LONG) ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id used-encoding) (objc-object-id error))))

(defun ns::|initWithContentsOfFile:usedEncoding:error:| (thing _ used-encoding error)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentsOfFile:usedEncoding:error:) (( :POINTER ( :POINTER :UNSIGNED-LONG-LONG) ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id used-encoding) (objc-object-id error))))

(defun ns::|rangeOfString:options:range:locale:| (thing _ options range locale)
  (let ((message-lambda 
         (make-message-lambda @(rangeOfString:options:range:locale:) (( :POINTER :UNSIGNED-LONG-LONG ( :STRUCT ns::|_NSRange|) :POINTER)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options range (objc-object-id locale))))

(defun ns::|localizedCompare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(localizedCompare:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|localizedCaseInsensitiveCompare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(localizedCaseInsensitiveCompare:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|localizedStandardCompare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(localizedStandardCompare:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|rangeOfComposedCharacterSequencesForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rangeOfComposedCharacterSequencesForRange:) (( ( :STRUCT ns::|_NSRange|))  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|commonPrefixWithString:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(commonPrefixWithString:options:) (( :POINTER :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options)))

(defun ns::|localizedHasPrefix:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(localizedHasPrefix:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|localizedHasSuffix:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(localizedHasSuffix:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|localizedCaseInsensitiveContainsString:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(localizedCaseInsensitiveContainsString:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|localizedStandardContainsString:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(localizedStandardContainsString:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|localizedStandardRangeOfString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(localizedStandardRangeOfString:) (( :POINTER)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|localizedUppercaseString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedUppercaseString) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|localizedLowercaseString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedLowercaseString) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|localizedCapitalizedString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedCapitalizedString) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringByFoldingWithOptions:locale:| (thing _ locale)
  (let ((message-lambda 
         (make-message-lambda @(stringByFoldingWithOptions:locale:) (( :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id locale))))

(defun ns::|lineRangeForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lineRangeForRange:) (( ( :STRUCT ns::|_NSRange|))  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|paragraphRangeForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(paragraphRangeForRange:) (( ( :STRUCT ns::|_NSRange|))  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|enumerateLinesUsingBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(enumerateLinesUsingBlock:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|displayableString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayableString) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|getExternalRepresentation:extendedAttributes:forWritingToURLOrPath:usingEncoding:error:| (thing _ extended-attributes for-writing-to-u-r-l-or-path using-encoding error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getExternalRepresentation:extendedAttributes:forWritingToURLOrPath:usingEncoding:error:) (( ( :POINTER :POINTER) ( :POINTER :POINTER) :POINTER :UNSIGNED-LONG-LONG ( :POINTER :POINTER))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id extended-attributes) (objc-object-id for-writing-to-u-r-l-or-path) using-encoding (objc-object-id error)))) nil t))

(defun ns::|initWithData:usedEncoding:| (thing _ used-encoding)
  (let ((message-lambda 
         (make-message-lambda @(initWithData:usedEncoding:) (( :POINTER ( :POINTER :UNSIGNED-LONG-LONG))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id used-encoding))))

(defun ns::|propertyListFromStringsFileFormat| (thing)
  (let ((message-lambda 
         (make-message-lambda @(propertyListFromStringsFileFormat) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|maximumLengthOfBytesUsingEncoding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(maximumLengthOfBytesUsingEncoding:) (( :UNSIGNED-LONG-LONG)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|stringByAddingPercentEscapes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByAddingPercentEscapes) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|standardizedURLPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(standardizedURLPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringByRemovingPercentEscapes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByRemovingPercentEscapes) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringByAddingPercentEncodingWithAllowedCharacters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringByAddingPercentEncodingWithAllowedCharacters:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stringByRemovingPercentEncoding| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringByRemovingPercentEncoding) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringByAddingPercentEscapesUsingEncoding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringByAddingPercentEscapesUsingEncoding:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|stringByReplacingPercentEscapesUsingEncoding:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringByReplacingPercentEscapesUsingEncoding:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|stringMarkingUpcaseTransitionsWithDelimiter2:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringMarkingUpcaseTransitionsWithDelimiter2:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|linguisticTagsInRange:scheme:options:orthography:tokenRanges:| (thing _ scheme options orthography token-ranges)
  (let ((message-lambda 
         (make-message-lambda @(linguisticTagsInRange:scheme:options:orthography:tokenRanges:) (( ( :STRUCT ns::|_NSRange|) :POINTER :UNSIGNED-LONG-LONG :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id scheme) options (objc-object-id orthography) (objc-object-id token-ranges))))

(defun ns::|enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:| (thing _ scheme options orthography using-block)
  (let ((message-lambda 
         (make-message-lambda @(enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:) (( ( :STRUCT ns::|_NSRange|) :POINTER :UNSIGNED-LONG-LONG :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id scheme) options (objc-object-id orthography) (objc-object-id using-block))))

(defun ns::|significantText| (thing)
  (let ((message-lambda 
         (make-message-lambda @(significantText) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|attachments| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attachments) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|RTFFromRange:documentAttributes:| (thing _ document-attributes)
  (let ((message-lambda 
         (make-message-lambda @(RTFFromRange:documentAttributes:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id document-attributes))))



(defun ns::|writingOptionsForType:pasteboard:| (thing _ pasteboard)
  (let ((message-lambda 
         (make-message-lambda @(writingOptionsForType:pasteboard:) (( :POINTER :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id pasteboard))))

(defun ns::|RTFDFromRange:documentAttributes:| (thing _ document-attributes)
  (let ((message-lambda 
         (make-message-lambda @(RTFDFromRange:documentAttributes:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id document-attributes))))

(defun ns::|RTFDFileWrapperFromRange:documentAttributes:| (thing _ document-attributes)
  (let ((message-lambda 
         (make-message-lambda @(RTFDFileWrapperFromRange:documentAttributes:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id document-attributes))))

(defun ns::|docFormatFromRange:documentAttributes:| (thing _ document-attributes)
  (let ((message-lambda 
         (make-message-lambda @(docFormatFromRange:documentAttributes:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id document-attributes))))

(defun ns::|URLAtIndex:effectiveRange:| (thing _ effective-range)
  (let ((message-lambda 
         (make-message-lambda @(URLAtIndex:effectiveRange:) (( :UNSIGNED-LONG-LONG ( :POINTER ( :STRUCT ns::|_NSRange|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id effective-range))))


(defun ns::|dataFromRange:documentAttributes:error:| (thing _ document-attributes error)
  (let ((message-lambda 
         (make-message-lambda @(dataFromRange:documentAttributes:error:) (( ( :STRUCT ns::|_NSRange|) :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id document-attributes) (objc-object-id error))))

(defun ns::|initWithData:options:documentAttributes:error:| (thing _ options document-attributes error)
  (let ((message-lambda 
         (make-message-lambda @(initWithData:options:documentAttributes:error:) (( :POINTER :POINTER ( :POINTER :POINTER) ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id options) (objc-object-id document-attributes) (objc-object-id error))))

(defun ns::|boundingRectWithSize:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(boundingRectWithSize:options:) (( ( :STRUCT ns::|CGSize|) :LONG-LONG)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ options)))

(defun ns::|boundingRectWithSize:options:context:| (thing _ options context)
  (let ((message-lambda 
         (make-message-lambda @(boundingRectWithSize:options:context:) (( ( :STRUCT ns::|CGSize|) :LONG-LONG :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ options (objc-object-id context))))

(defun ns::|drawInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|drawAtPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawAtPoint:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|drawWithRect:options:context:| (thing _ options context)
  (let ((message-lambda 
         (make-message-lambda @(drawWithRect:options:context:) (( ( :STRUCT ns::|CGRect|) :LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ options (objc-object-id context))))


(defun ns::|doubleClickAtIndex:inRange:| (thing _ in-range)
  (let ((message-lambda 
         (make-message-lambda @(doubleClickAtIndex:inRange:) (( :UNSIGNED-LONG-LONG ( :STRUCT ns::|_NSRange|))  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _ in-range)))

(defun ns::|doubleClickAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(doubleClickAtIndex:) (( :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|rangeOfTextTable:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(rangeOfTextTable:atIndex:) (( :POINTER :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|rangeOfTextBlock:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(rangeOfTextBlock:atIndex:) (( :POINTER :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|fileWrapperFromRange:documentAttributes:error:| (thing _ document-attributes error)
  (let ((message-lambda 
         (make-message-lambda @(fileWrapperFromRange:documentAttributes:error:) (( ( :STRUCT ns::|_NSRange|) :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id document-attributes) (objc-object-id error))))




(defun ns::|initWithRTFD:documentAttributes:| (thing _ document-attributes)
  (let ((message-lambda 
         (make-message-lambda @(initWithRTFD:documentAttributes:) (( :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id document-attributes))))

(defun ns::|initWithRTF:documentAttributes:| (thing _ document-attributes)
  (let ((message-lambda 
         (make-message-lambda @(initWithRTF:documentAttributes:) (( :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id document-attributes))))

(defun ns::|initWithHTML:documentAttributes:| (thing _ document-attributes)
  (let ((message-lambda 
         (make-message-lambda @(initWithHTML:documentAttributes:) (( :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id document-attributes))))

(defun ns::|containsAttachments| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(containsAttachments) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|stringByStrippingAttachmentCharactersAndConvertingWritingDirectionToBidiControlCharactersFromRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringByStrippingAttachmentCharactersAndConvertingWritingDirectionToBidiControlCharactersFromRange:) (( ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|lineBreakBeforeIndex:withinRange:| (thing _ within-range)
  (let ((message-lambda 
         (make-message-lambda @(lineBreakBeforeIndex:withinRange:) (( :UNSIGNED-LONG-LONG ( :STRUCT ns::|_NSRange|))  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _ within-range)))

(defun ns::|lineBreakByHyphenatingBeforeIndex:withinRange:| (thing _ within-range)
  (let ((message-lambda 
         (make-message-lambda @(lineBreakByHyphenatingBeforeIndex:withinRange:) (( :UNSIGNED-LONG-LONG ( :STRUCT ns::|_NSRange|))  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _ within-range)))

(defun ns::|nextWordFromIndex:forward:| (thing _ forward)
  (let ((message-lambda 
         (make-message-lambda @(nextWordFromIndex:forward:) (( :UNSIGNED-LONG-LONG :CHAR)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if forward 1 0))))

(defun ns::|initWithURL:options:documentAttributes:error:| (thing _ options document-attributes error)
  (let ((message-lambda 
         (make-message-lambda @(initWithURL:options:documentAttributes:error:) (( :POINTER :POINTER ( :POINTER :POINTER) ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id options) (objc-object-id document-attributes) (objc-object-id error))))

(defun ns::|initWithPath:documentAttributes:| (thing _ document-attributes)
  (let ((message-lambda 
         (make-message-lambda @(initWithPath:documentAttributes:) (( :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id document-attributes))))

(defun ns::|initWithRTFDFileWrapper:documentAttributes:| (thing _ document-attributes)
  (let ((message-lambda 
         (make-message-lambda @(initWithRTFDFileWrapper:documentAttributes:) (( :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id document-attributes))))

(defun ns::|rangeOfTextList:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(rangeOfTextList:atIndex:) (( :POINTER :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|fontAttributesInRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(fontAttributesInRange:) (( ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|rulerAttributesInRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rulerAttributesInRange:) (( ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|hasColorGlyphsInRange:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasColorGlyphsInRange:) (( ( :STRUCT ns::|_NSRange|))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|drawWithRect:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(drawWithRect:options:) (( ( :STRUCT ns::|CGRect|) :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ options)))

(defun ns::|initWithAttachment:attributes:| (thing _ attributes)
  (let ((message-lambda 
         (make-message-lambda @(initWithAttachment:attributes:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id attributes))))

(defun ns::|itemNumberInTextList:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(itemNumberInTextList:atIndex:) (( :POINTER :UNSIGNED-LONG-LONG)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|containsAttachmentsInRange:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(containsAttachmentsInRange:) (( ( :STRUCT ns::|_NSRange|))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|initWithHTML:options:documentAttributes:| (thing _ options document-attributes)
  (let ((message-lambda 
         (make-message-lambda @(initWithHTML:options:documentAttributes:) (( :POINTER :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id options) (objc-object-id document-attributes))))

(defun ns::|defaultLanguage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(defaultLanguage) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithDocFormat:documentAttributes:| (thing _ document-attributes)
  (let ((message-lambda 
         (make-message-lambda @(initWithDocFormat:documentAttributes:) (( :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id document-attributes))))

(defun ns::|initWithFileURL:options:documentAttributes:error:| (thing _ options document-attributes error)
  (let ((message-lambda 
         (make-message-lambda @(initWithFileURL:options:documentAttributes:error:) (( :POINTER :POINTER ( :POINTER :POINTER) ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id options) (objc-object-id document-attributes) (objc-object-id error))))

(defun ns::|initWithURL:documentAttributes:| (thing _ document-attributes)
  (let ((message-lambda 
         (make-message-lambda @(initWithURL:documentAttributes:) (( :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id document-attributes))))

(defun ns::|initWithHTML:baseURL:documentAttributes:| (thing _ base-u-r-l document-attributes)
  (let ((message-lambda 
         (make-message-lambda @(initWithHTML:baseURL:documentAttributes:) (( :POINTER :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id base-u-r-l) (objc-object-id document-attributes))))

(defun ns::|dd_attributedSubstringFromRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dd_attributedSubstringFromRange:) (( ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|dd_attributedStringByAppendingAttributedString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dd_attributedStringByAppendingAttributedString:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|cs_writeToFileHandle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cs_writeToFileHandle:) (( ( :POINTER ( :STRUCT ns::|__sFILE|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|cs_rangesMatchingPredicate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cs_rangesMatchingPredicate:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|cs_writeToFileHandle:supportingANSIEscapeCodes:| (thing _ supporting-a-n-s-i-escape-codes)
  (let ((message-lambda 
         (make-message-lambda @(cs_writeToFileHandle:supportingANSIEscapeCodes:) (( ( :POINTER ( :STRUCT ns::|__sFILE|)) :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if supporting-a-n-s-i-escape-codes 1 0))))





(defun ns::|string| (thing)
  (let ((message-lambda 
         (make-message-lambda @(string) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|attributesAtIndex:effectiveRange:| (thing _ effective-range)
  (let ((message-lambda 
         (make-message-lambda @(attributesAtIndex:effectiveRange:) (( :UNSIGNED-LONG-LONG ( :POINTER ( :STRUCT ns::|_NSRange|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id effective-range))))

(defun ns::|attribute:atIndex:effectiveRange:| (thing _ at-index effective-range)
  (let ((message-lambda 
         (make-message-lambda @(attribute:atIndex:effectiveRange:) (( :POINTER :UNSIGNED-LONG-LONG ( :POINTER ( :STRUCT ns::|_NSRange|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index (objc-object-id effective-range))))

(defun ns::|attributesAtIndex:longestEffectiveRange:inRange:| (thing _ longest-effective-range in-range)
  (let ((message-lambda 
         (make-message-lambda @(attributesAtIndex:longestEffectiveRange:inRange:) (( :UNSIGNED-LONG-LONG ( :POINTER ( :STRUCT ns::|_NSRange|)) ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id longest-effective-range) in-range)))

(defun ns::|attribute:atIndex:longestEffectiveRange:inRange:| (thing _ at-index longest-effective-range in-range)
  (let ((message-lambda 
         (make-message-lambda @(attribute:atIndex:longestEffectiveRange:inRange:) (( :POINTER :UNSIGNED-LONG-LONG ( :POINTER ( :STRUCT ns::|_NSRange|)) ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index (objc-object-id longest-effective-range) in-range)))




(defun ns::|attributedSubstringFromRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(attributedSubstringFromRange:) (( ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|isEqualToAttributedString:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqualToAttributedString:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))


(defun ns::|attributedSubstringFromRange:replacingCharactersInRanges:numberOfRanges:withString:| (thing _ replacing-characters-in-ranges number-of-ranges with-string)
  (let ((message-lambda 
         (make-message-lambda @(attributedSubstringFromRange:replacingCharactersInRanges:numberOfRanges:withString:) (( ( :STRUCT ns::|_NSRange|) ( :POINTER ( :STRUCT ns::|_NSRange|)) :LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id replacing-characters-in-ranges) number-of-ranges (objc-object-id with-string))))

(defun ns::|attributedStringByWeaklyAddingAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(attributedStringByWeaklyAddingAttributes:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|enumerateAttributesInRange:options:usingBlock:| (thing _ options using-block)
  (let ((message-lambda 
         (make-message-lambda @(enumerateAttributesInRange:options:usingBlock:) (( ( :STRUCT ns::|_NSRange|) :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ options (objc-object-id using-block))))

(defun ns::|enumerateAttribute:inRange:options:usingBlock:| (thing _ in-range options using-block)
  (let ((message-lambda 
         (make-message-lambda @(enumerateAttribute:inRange:options:usingBlock:) (( :POINTER ( :STRUCT ns::|_NSRange|) :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-range options (objc-object-id using-block))))









(defun ns::|initWithMarkdownString:options:baseURL:error:| (thing _ options base-u-r-l error)
  (let ((message-lambda 
         (make-message-lambda @(initWithMarkdownString:options:baseURL:error:) (( :POINTER :POINTER :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id options) (objc-object-id base-u-r-l) (objc-object-id error))))

(defun ns::|attributedStringByInflectingString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributedStringByInflectingString) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithFormat:options:locale:| (thing _ options locale)
  (let ((message-lambda 
         (make-message-lambda @(initWithFormat:options:locale:) (( :POINTER :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options (objc-object-id locale))))

(defun ns::|initWithFormat:options:locale:arguments:| (thing _ options locale arguments)
  (let ((message-lambda 
         (make-message-lambda @(initWithFormat:options:locale:arguments:) (( :POINTER :UNSIGNED-LONG-LONG :POINTER ( :ARRAY ( :STRUCT ns::|__va_list_tag|) 1))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options (objc-object-id locale) arguments)))

(defun ns::|initWithMarkdown:options:baseURL:error:| (thing _ options base-u-r-l error)
  (let ((message-lambda 
         (make-message-lambda @(initWithMarkdown:options:baseURL:error:) (( :POINTER :POINTER :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id options) (objc-object-id base-u-r-l) (objc-object-id error))))

(defun ns::|initWithContentsOfMarkdownFileAtURL:options:baseURL:error:| (thing _ options base-u-r-l error)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentsOfMarkdownFileAtURL:options:baseURL:error:) (( :POINTER :POINTER :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id options) (objc-object-id base-u-r-l) (objc-object-id error))))

(defun ns::|dd_appendSpaces:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dd_appendSpaces:) (( :UNSIGNED-INT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|appendPrettyObject:withName:indent:showFullContent:| (thing _ with-name indent show-full-content)
  (let ((message-lambda 
         (make-message-lambda @(appendPrettyObject:withName:indent:showFullContent:) (( :POINTER :POINTER :INT :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-name) indent (if show-full-content 1 0))))

(defun ns::|appendPrettyInt:withName:indent:| (thing _ with-name indent)
  (let ((message-lambda 
         (make-message-lambda @(appendPrettyInt:withName:indent:) (( :INT :POINTER :INT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-name) indent)))

(defun ns::|appendPrettyBOOL:withName:indent:| (thing _ with-name indent)
  (let ((message-lambda 
         (make-message-lambda @(appendPrettyBOOL:withName:indent:) (( :CHAR :POINTER :INT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) (objc-object-id with-name) indent)))

(defun ns::|replaceCharactersInRange:withString:| (thing _ with-string)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withString:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-string))))

(defun ns::|initWithCapacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithCapacity:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|replaceOccurrencesOfString:withString:options:range:| (thing _ with-string options range)
  (let ((message-lambda 
         (make-message-lambda @(replaceOccurrencesOfString:withString:options:range:) (( :POINTER :POINTER :UNSIGNED-LONG-LONG ( :STRUCT ns::|_NSRange|))  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-string) options range)))

(defun ns::|insertString:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertString:atIndex:) (( :POINTER :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|appendString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendString:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|deleteCharactersInRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteCharactersInRange:) (( ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|appendFormat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendFormat:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setString:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|appendCharacters:length:| (thing _ length)
  (let ((message-lambda 
         (make-message-lambda @(appendCharacters:length:) (( ( :POINTER :UNSIGNED-SHORT) :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) length)))


(defun ns::|replaceCharactersInRange:withCharacters:length:| (thing _ with-characters length)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withCharacters:length:) (( ( :STRUCT ns::|_NSRange|) ( :POINTER :UNSIGNED-SHORT) :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-characters) length)))

(defun ns::|replaceCharactersInRange:withCString:length:| (thing _ with-c-string length)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withCString:length:) (( ( :STRUCT ns::|_NSRange|) :STRING :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ with-c-string length)))

(defun ns::|applyTransform:reverse:range:updatedRange:| (thing _ reverse range updated-range)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(applyTransform:reverse:range:updatedRange:) (( :POINTER :CHAR ( :STRUCT ns::|_NSRange|) ( :POINTER ( :STRUCT ns::|_NSRange|)))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if reverse 1 0) range (objc-object-id updated-range)))) nil t))

(defun ns::|rangeAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rangeAtIndex:) (( :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|indexOfFirstRangeContainingOrFollowing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfFirstRangeContainingOrFollowing:) (( :UNSIGNED-LONG-LONG)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|rangesContainLocation:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rangesContainLocation:) (( :UNSIGNED-LONG-LONG)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|firstRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstRange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|maximumRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumRange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|lastRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lastRange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|NS_isIdenticalToArray:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_isIdenticalToArray:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|NS_containsObjectIdenticalTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_containsObjectIdenticalTo:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|ui_arrayByRemovingLastObjectEqualTo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(ui_arrayByRemovingLastObjectEqualTo:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|resourceStack| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resourceStack) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|subarrayWithObjectsOfKind:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(subarrayWithObjectsOfKind:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))






(defun ns::|CI_initWithAffineTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CI_initWithAffineTransform:) (( ( :STRUCT ns::|CGAffineTransform|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|CI_initWithRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(CI_initWithRect:) (( ( :STRUCT ns::|CGRect|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|CI_affineTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CI_affineTransform) (()  ( :STRUCT ns::|CGAffineTransform|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|CI_rect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CI_rect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bs_each:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_each:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|bs_filter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_filter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|bs_firstObjectPassingTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_firstObjectPassingTest:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|bs_containsObjectPassingTest:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(bs_containsObjectPassingTest:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|bs_map:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_map:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|bs_compactMap:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_compactMap:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|bs_reduce:block:| (thing _ block)
  (let ((message-lambda 
         (make-message-lambda @(bs_reduce:block:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id block))))

(defun ns::|bs_dictionaryByPartitioning:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_dictionaryByPartitioning:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|bs_firstObjectOfClass:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_firstObjectOfClass:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|bs_flatten| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bs_flatten) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bs_differenceWithArray:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_differenceWithArray:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|bs_enumerateObjectsOfClass:usingBlock:| (thing _ using-block)
  (let ((message-lambda 
         (make-message-lambda @(bs_enumerateObjectsOfClass:usingBlock:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id using-block))))

(defun ns::|bs_first:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_first:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|bs_firstObjectOfClassNamed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_firstObjectOfClassNamed:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|bs_objectsOfClass:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_objectsOfClass:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|bs_reverse| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bs_reverse) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bs_mapNoNulls:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_mapNoNulls:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|bs_flattenedDifferenceWithArray:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_flattenedDifferenceWithArray:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))










(defun ns::|initWithContentsOfURL:error:| (thing _ error)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentsOfURL:error:) (( :POINTER ( :POINTER :POINTER))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id error))))



(defun ns::|sortedArrayUsingFunction:context:hint:| (thing _ context hint)
  (let ((message-lambda 
         (make-message-lambda @(sortedArrayUsingFunction:context:hint:) (( ( :POINTER :POINTER) ( :POINTER :VOID) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id context) (objc-object-id hint))))

(defun ns::|sortedArrayHint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sortedArrayHint) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|sortedArrayUsingSelector:hint:| (thing _ hint)
  (let ((message-lambda 
         (make-message-lambda @(sortedArrayUsingSelector:hint:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id hint))))


(defun ns::|writeToURL:error:| (thing _ error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeToURL:error:) (( :POINTER ( :POINTER :POINTER))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id error)))) nil t))

(defun ns::|differenceFromArray:withOptions:usingEquivalenceTest:| (thing _ with-options using-equivalence-test)
  (let ((message-lambda 
         (make-message-lambda @(differenceFromArray:withOptions:usingEquivalenceTest:) (( :POINTER :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) with-options (objc-object-id using-equivalence-test))))





(defun ns::|addObserver:toObjectsAtIndexes:forKeyPath:options:context:| (thing _ to-objects-at-indexes for-key-path options context)
  (let ((message-lambda 
         (make-message-lambda @(addObserver:toObjectsAtIndexes:forKeyPath:options:context:) (( :POINTER :POINTER :POINTER :UNSIGNED-LONG-LONG ( :POINTER :VOID))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-objects-at-indexes) (objc-object-id for-key-path) options (objc-object-id context))))

(defun ns::|removeObserver:fromObjectsAtIndexes:forKeyPath:context:| (thing _ from-objects-at-indexes for-key-path context)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:fromObjectsAtIndexes:forKeyPath:context:) (( :POINTER :POINTER :POINTER ( :POINTER :VOID))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id from-objects-at-indexes) (objc-object-id for-key-path) (objc-object-id context))))

(defun ns::|removeObserver:fromObjectsAtIndexes:forKeyPath:| (thing _ from-objects-at-indexes for-key-path)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:fromObjectsAtIndexes:forKeyPath:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id from-objects-at-indexes) (objc-object-id for-key-path))))

(defun ns::|differenceFromArray:withOptions:| (thing _ with-options)
  (let ((message-lambda 
         (make-message-lambda @(differenceFromArray:withOptions:) (( :POINTER :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) with-options)))

(defun ns::|differenceFromArray:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(differenceFromArray:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|arrayByApplyingDifference:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(arrayByApplyingDifference:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))






(defun ns::|pathsMatchingExtensions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pathsMatchingExtensions:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stringsByAppendingPathComponent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringsByAppendingPathComponent:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|filteredArrayUsingPredicate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(filteredArrayUsingPredicate:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|sortedArrayUsingDescriptors:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sortedArrayUsingDescriptors:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))






(defun ns::|count| (thing)
  (let ((message-lambda 
         (make-message-lambda @(count) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|objectAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(objectAtIndex:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|objectEnumerator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(objectEnumerator) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|getObjects:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(getObjects:range:) (( ( :POINTER :POINTER) ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun ns::|indexOfObject:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfObject:) (( :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|countByEnumeratingWithState:objects:count:| (thing _ objects count)
  (let ((message-lambda 
         (make-message-lambda @(countByEnumeratingWithState:objects:count:) (( ( :POINTER ( :ARRAY :CHAR 64)) ( :POINTER :POINTER) :UNSIGNED-LONG-LONG)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id objects) count)))

(defun ns::|enumerateObjectsWithOptions:usingBlock:| (thing _ using-block)
  (let ((message-lambda 
         (make-message-lambda @(enumerateObjectsWithOptions:usingBlock:) (( :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id using-block))))

(defun ns::|allObjects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allObjects) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|countForObject:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(countForObject:) (( :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithObjects:count:| (thing _ count)
  (let ((message-lambda 
         (make-message-lambda @(initWithObjects:count:) (( ( :POINTER :POINTER) :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) count)))

(defun ns::|indexOfObjectIdenticalTo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfObjectIdenticalTo:) (( :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|objectAtIndexedSubscript:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(objectAtIndexedSubscript:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithArray:range:copyItems:| (thing _ range copy-items)
  (let ((message-lambda 
         (make-message-lambda @(initWithArray:range:copyItems:) (( :POINTER ( :STRUCT ns::|_NSRange|) :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range (if copy-items 1 0))))

(defun ns::|initWithArray:copyItems:| (thing _ copy-items)
  (let ((message-lambda 
         (make-message-lambda @(initWithArray:copyItems:) (( :POINTER :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if copy-items 1 0))))

(defun ns::|initWithArray:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithArray:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|objectsAtIndexes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(objectsAtIndexes:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|indexOfObject:inRange:| (thing _ in-range)
  (let ((message-lambda 
         (make-message-lambda @(indexOfObject:inRange:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-range)))

(defun ns::|sortedArrayFromRange:options:usingComparator:| (thing _ options using-comparator)
  (let ((message-lambda 
         (make-message-lambda @(sortedArrayFromRange:options:usingComparator:) (( ( :STRUCT ns::|_NSRange|) :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ options (objc-object-id using-comparator))))

(defun ns::|initWithObject:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithObject:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|containsObject:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(containsObject:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|initWithSet:copyItems:| (thing _ copy-items)
  (let ((message-lambda 
         (make-message-lambda @(initWithSet:copyItems:) (( :POINTER :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if copy-items 1 0))))




(defun ns::|indexOfObjectPassingTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfObjectPassingTest:) (( :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithOrderedSet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithOrderedSet:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|enumerateObjectsUsingBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(enumerateObjectsUsingBlock:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|getObjects:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(getObjects:) (( ( :POINTER :POINTER))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|descriptionWithLocale:indent:| (thing _ indent)
  (let ((message-lambda 
         (make-message-lambda @(descriptionWithLocale:indent:) (( :POINTER :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) indent)))

(defun ns::|indexesOfObjectsAtIndexes:options:passingTest:| (thing _ options passing-test)
  (let ((message-lambda 
         (make-message-lambda @(indexesOfObjectsAtIndexes:options:passingTest:) (( :POINTER :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options (objc-object-id passing-test))))

(defun ns::|indexesOfObjectsWithOptions:passingTest:| (thing _ passing-test)
  (let ((message-lambda 
         (make-message-lambda @(indexesOfObjectsWithOptions:passingTest:) (( :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id passing-test))))

(defun ns::|indexOfObjectWithOptions:passingTest:| (thing _ passing-test)
  (let ((message-lambda 
         (make-message-lambda @(indexOfObjectWithOptions:passingTest:) (( :UNSIGNED-LONG-LONG :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id passing-test))))

(defun ns::|isEqualToArray:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqualToArray:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|indexOfObjectAtIndexes:options:passingTest:| (thing _ options passing-test)
  (let ((message-lambda 
         (make-message-lambda @(indexOfObjectAtIndexes:options:passingTest:) (( :POINTER :UNSIGNED-LONG-LONG :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options (objc-object-id passing-test))))

(defun ns::|objectWithOptions:passingTest:| (thing _ passing-test)
  (let ((message-lambda 
         (make-message-lambda @(objectWithOptions:passingTest:) (( :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id passing-test))))

(defun ns::|objectsWithOptions:passingTest:| (thing _ passing-test)
  (let ((message-lambda 
         (make-message-lambda @(objectsWithOptions:passingTest:) (( :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id passing-test))))

(defun ns::|sortedArrayWithOptions:usingComparator:| (thing _ using-comparator)
  (let ((message-lambda 
         (make-message-lambda @(sortedArrayWithOptions:usingComparator:) (( :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id using-comparator))))

(defun ns::|initWithOrderedSet:range:copyItems:| (thing _ range copy-items)
  (let ((message-lambda 
         (make-message-lambda @(initWithOrderedSet:range:copyItems:) (( :POINTER ( :STRUCT ns::|_NSRange|) :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range (if copy-items 1 0))))


(defun ns::|componentsJoinedByString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(componentsJoinedByString:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|containsObject:inRange:| (thing _ in-range)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(containsObject:inRange:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-range))) nil t))

(defun ns::|containsObjectIdenticalTo:inRange:| (thing _ in-range)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(containsObjectIdenticalTo:inRange:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-range))) nil t))

(defun ns::|containsObjectIdenticalTo:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(containsObjectIdenticalTo:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|countForObject:inRange:| (thing _ in-range)
  (let ((message-lambda 
         (make-message-lambda @(countForObject:inRange:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-range)))

(defun ns::|enumerateObjectsAtIndexes:options:usingBlock:| (thing _ options using-block)
  (let ((message-lambda 
         (make-message-lambda @(enumerateObjectsAtIndexes:options:usingBlock:) (( :POINTER :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options (objc-object-id using-block))))

(defun ns::|firstObject| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstObject) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|firstObjectCommonWithArray:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(firstObjectCommonWithArray:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|indexOfObjectIdenticalTo:inRange:| (thing _ in-range)
  (let ((message-lambda 
         (make-message-lambda @(indexOfObjectIdenticalTo:inRange:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-range)))

(defun ns::|indexesOfObject:inRange:| (thing _ in-range)
  (let ((message-lambda 
         (make-message-lambda @(indexesOfObject:inRange:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-range)))

(defun ns::|indexesOfObject:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexesOfObject:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|indexesOfObjectIdenticalTo:inRange:| (thing _ in-range)
  (let ((message-lambda 
         (make-message-lambda @(indexesOfObjectIdenticalTo:inRange:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-range)))

(defun ns::|indexesOfObjectIdenticalTo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexesOfObjectIdenticalTo:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|indexOfObject:inSortedRange:options:usingComparator:| (thing _ in-sorted-range options using-comparator)
  (let ((message-lambda 
         (make-message-lambda @(indexOfObject:inSortedRange:options:usingComparator:) (( :POINTER ( :STRUCT ns::|_NSRange|) :UNSIGNED-LONG-LONG :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-sorted-range options (objc-object-id using-comparator))))

(defun ns::|indexesOfObjectsPassingTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexesOfObjectsPassingTest:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|lastObject| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lastObject) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|makeObjectsPerformSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeObjectsPerformSelector:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|makeObjectsPerformSelector:withObject:| (thing _ with-object)
  (let ((message-lambda 
         (make-message-lambda @(makeObjectsPerformSelector:withObject:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-object))))

(defun ns::|objectAtIndexes:options:passingTest:| (thing _ options passing-test)
  (let ((message-lambda 
         (make-message-lambda @(objectAtIndexes:options:passingTest:) (( :POINTER :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options (objc-object-id passing-test))))

(defun ns::|objectPassingTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(objectPassingTest:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|objectsAtIndexes:options:passingTest:| (thing _ options passing-test)
  (let ((message-lambda 
         (make-message-lambda @(objectsAtIndexes:options:passingTest:) (( :POINTER :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) options (objc-object-id passing-test))))

(defun ns::|objectsPassingTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(objectsPassingTest:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|reverseObjectEnumerator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(reverseObjectEnumerator) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|reversedArray| (thing)
  (let ((message-lambda 
         (make-message-lambda @(reversedArray) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|sortedArrayUsingComparator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sortedArrayUsingComparator:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|sortedArrayUsingFunction:context:| (thing _ context)
  (let ((message-lambda 
         (make-message-lambda @(sortedArrayUsingFunction:context:) (( ( :POINTER :POINTER) ( :POINTER :VOID))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id context))))

(defun ns::|sortedArrayUsingSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sortedArrayUsingSelector:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|subarrayWithRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(subarrayWithRange:) (( ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithArray:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(initWithArray:range:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun ns::|initWithObjects:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithObjects:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithSet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithSet:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithOrderedSet:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(initWithOrderedSet:range:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun ns::|initWithOrderedSet:copyItems:| (thing _ copy-items)
  (let ((message-lambda 
         (make-message-lambda @(initWithOrderedSet:copyItems:) (( :POINTER :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if copy-items 1 0))))

(defun ns::|arrayByAddingObject:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(arrayByAddingObject:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|arrayByAddingObjectsFromArray:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(arrayByAddingObjectsFromArray:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|arrayByApplyingSelector:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(arrayByApplyingSelector:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|arrayByExcludingObjectsInArray:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(arrayByExcludingObjectsInArray:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|arrayByExcludingToObjectsInArray:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(arrayByExcludingToObjectsInArray:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))





(defun ns::|isEmpty| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEmpty) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|addObserverForName:object:queue:usingBlock:| (thing _ object queue using-block)
  (let ((message-lambda 
         (make-message-lambda @(addObserverForName:object:queue:usingBlock:) (( :POINTER :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id object) (objc-object-id queue) (objc-object-id using-block))))

(defun ns::|removeObserver:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|postNotificationName:object:| (thing _ object)
  (let ((message-lambda 
         (make-message-lambda @(postNotificationName:object:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id object))))

(defun ns::|postNotification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(postNotification:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addObserver:selector:name:object:| (thing _ selector name object)
  (let ((message-lambda 
         (make-message-lambda @(addObserver:selector:name:object:) (( :POINTER :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id selector) (objc-object-id name) (objc-object-id object))))

(defun ns::|postNotificationName:object:userInfo:| (thing _ object user-info)
  (let ((message-lambda 
         (make-message-lambda @(postNotificationName:object:userInfo:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id object) (objc-object-id user-info))))

(defun ns::|removeObserver:name:object:| (thing _ name object)
  (let ((message-lambda 
         (make-message-lambda @(removeObserver:name:object:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id name) (objc-object-id object))))




(defun ns::|userInfo| (thing)
  (let ((message-lambda 
         (make-message-lambda @(userInfo) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|options| (thing)
  (let ((message-lambda 
         (make-message-lambda @(options) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithRect:options:owner:userInfo:| (thing _ options owner user-info)
  (let ((message-lambda 
         (make-message-lambda @(initWithRect:options:owner:userInfo:) (( ( :STRUCT ns::|CGRect|) :UNSIGNED-LONG-LONG :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ options (objc-object-id owner) (objc-object-id user-info))))

(defun ns::|mouseMoved:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseMoved:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|rect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|owner| (thing)
  (let ((message-lambda 
         (make-message-lambda @(owner) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithRect:options:pressureConfigurations:owner:userInfo:| (thing _ options pressure-configurations owner user-info)
  (let ((message-lambda 
         (make-message-lambda @(initWithRect:options:pressureConfigurations:owner:userInfo:) (( ( :STRUCT ns::|CGRect|) :UNSIGNED-LONG-LONG :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ options (objc-object-id pressure-configurations) (objc-object-id owner) (objc-object-id user-info))))

(defun ns::|pressureConfigurations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pressureConfigurations) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|gestureBehaviors| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gestureBehaviors) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setGestureBehaviors:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGestureBehaviors:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))










(defun ns::|prepareForReuse| (thing)
  (let ((message-lambda 
         (make-message-lambda @(prepareForReuse) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|layout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layout) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|resetCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resetCursorRects) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setNeedsDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplay:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|invalidateIntrinsicContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateIntrinsicContentSize) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|layer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setBackgroundColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackgroundColor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|setCompositingFilter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCompositingFilter:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|bounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bounds) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrame:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|convertPoint:toView:| (thing _ to-view)
  (let ((message-lambda 
         (make-message-lambda @(convertPoint:toView:) (( ( :STRUCT ns::|CGPoint|) :POINTER)  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-view))))

(defun ns::|visibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(visibleRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFlipped) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|addCursorRect:cursor:| (thing _ cursor)
  (let ((message-lambda 
         (make-message-lambda @(addCursorRect:cursor:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id cursor))))

(defun ns::|allowsVibrancy| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsVibrancy) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isOpaque| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isOpaque) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|wantsUpdateLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsUpdateLayer) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|updateLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateLayer) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|enableGeometryInWindowDidChangeNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableGeometryInWindowDidChangeNotification) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|disableGeometryInWindowDidChangeNotification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableGeometryInWindowDidChangeNotification) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setNeedsLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsLayout:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|superview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(superview) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|convertRect:toView:| (thing _ to-view)
  (let ((message-lambda 
         (make-message-lambda @(convertRect:toView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-view))))

(defun ns::|initWithFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithFrame:) (( ( :STRUCT ns::|CGRect|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|widthAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(widthAnchor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTranslatesAutoresizingMaskIntoConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTranslatesAutoresizingMaskIntoConstraints:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|addGestureRecognizer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addGestureRecognizer:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|fittingSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fittingSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|removeConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeConstraint:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setContentCompressionResistancePriority:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setContentCompressionResistancePriority:forOrientation:) (( :FLOAT :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-orientation)))

(defun ns::|setContentHuggingPriority:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setContentHuggingPriority:forOrientation:) (( :FLOAT :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-orientation)))

(defun ns::|intrinsicContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(intrinsicContentSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewDidChangeEffectiveAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidChangeEffectiveAppearance) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|setWantsLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsLayer:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setShouldBeArchived:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShouldBeArchived:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|addSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addSubview:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addSubview:positioned:relativeTo:| (thing _ positioned relative-to)
  (let ((message-lambda 
         (make-message-lambda @(addSubview:positioned:relativeTo:) (( :POINTER :LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) positioned (objc-object-id relative-to))))

(defun ns::|addConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addConstraint:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|centerXAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(centerXAnchor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|heightAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(heightAnchor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bottomAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bottomAnchor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|addConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addConstraints:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setIgnoreHitTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIgnoreHitTest:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|leadingAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(leadingAnchor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAllowedTouchTypes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowedTouchTypes:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|gestureRecognizers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gestureRecognizers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewDidMoveToWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidMoveToWindow) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|removeFromSuperview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeFromSuperview) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|animator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animator) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|backgroundColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backgroundColor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setCornerRadius:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerRadius:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|alignmentRectInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alignmentRectInsets) (()  ( :STRUCT ns::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|hitTest:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(hitTest:) (( ( :STRUCT ns::|CGPoint|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|convertPoint:fromView:| (thing _ from-view)
  (let ((message-lambda 
         (make-message-lambda @(convertPoint:fromView:) (( ( :STRUCT ns::|CGPoint|) :POINTER)  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-view))))

(defun ns::|nextEventMatchingMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nextEventMatchingMask:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setBoundsOrigin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBoundsOrigin:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAnimations:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAnimations:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|gestureRecognizerShouldBegin:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(gestureRecognizerShouldBegin:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))



(defun ns::|subviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(subviews) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))












(defun ns::|layoutSubtreeIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutSubtreeIfNeeded) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAlphaValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAlphaValue:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setOpaque:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOpaque:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|display| (thing)
  (let ((message-lambda 
         (make-message-lambda @(display) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))







(defun ns::|accessibilityHelpAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHelpAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsHelpAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsHelpAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityFocusedAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusedAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsFocusedAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFocusedAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySetFocusedAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetFocusedAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityParentAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityParentAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsParentAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsParentAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityWindowAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsWindowAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsWindowAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityTopLevelUIElementAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTopLevelUIElementAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsTopLevelUIElementAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTopLevelUIElementAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityPositionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPositionAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsPositionAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsPositionAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySizeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySizeAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsSizeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSizeAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))






(defun ns::|accessibilityHorizontalUnitDescriptionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalUnitDescriptionAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityVerticalUnitDescriptionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalUnitDescriptionAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|convertRect:fromView:| (thing _ from-view)
  (let ((message-lambda 
         (make-message-lambda @(convertRect:fromView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-view))))


(defun ns::|removeTrackingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeTrackingArea:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addTrackingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addTrackingArea:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|setBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBounds:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayer:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|makeBackingLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(makeBackingLayer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|setAutoresizingMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoresizingMask:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setNextKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNextKeyView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setFrameOrigin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameOrigin:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|alignmentRectForFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignmentRectForFrame:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|removeConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeConstraints:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|autoresizingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autoresizingMask) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|drawRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|mouseDownCanMoveWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouseDownCanMoveWindow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|convertSize:fromView:| (thing _ from-view)
  (let ((message-lambda 
         (make-message-lambda @(convertSize:fromView:) (( ( :STRUCT ns::|CGSize|) :POINTER)  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-view))))

(defun ns::|animations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animations) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|cornerRadius| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cornerRadius) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|lockFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lockFocus) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|unlockFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unlockFocus) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun ns::|designatedFocusRingView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(designatedFocusRingView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|convertRectToLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectToLayer:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|shouldDelayWindowOrderingForEvent:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldDelayWindowOrderingForEvent:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|setFrameSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|setSubviews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSubviews:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|leftAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(leftAnchor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|trailingAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trailingAnchor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|centerYAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(centerYAnchor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|declaredLayoutConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(declaredLayoutConstraints) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|wantsLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsLayer) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setLayerContentsRedrawPolicy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayerContentsRedrawPolicy:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|displayIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayIfNeeded) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|preferredLayoutAttributesFittingAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(preferredLayoutAttributesFittingAttributes:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|replaceSubview:with:| (thing _ with)
  (let ((message-lambda 
         (make-message-lambda @(replaceSubview:with:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with))))

(defun ns::|updateConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateConstraints) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_widthVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_widthVariable) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_heightVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_heightVariable) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewWillDraw| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewWillDraw) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|willRemoveSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(willRemoveSubview:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|mouse:inRect:| (thing _ in-rect)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouse:inRect:) (( ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGRect|))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ in-rect))) nil t))

(defun ns::|convertSize:toView:| (thing _ to-view)
  (let ((message-lambda 
         (make-message-lambda @(convertSize:toView:) (( ( :STRUCT ns::|CGSize|) :POINTER)  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-view))))

(defun ns::|scrollRectToVisible:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scrollRectToVisible:) (( ( :STRUCT ns::|CGRect|))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|setNeedsDisplayInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplayInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setKeyboardFocusRingNeedsDisplayInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKeyboardFocusRingNeedsDisplayInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|isDescendantOf:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDescendantOf:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|nextKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nextKeyView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|previousKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(previousKeyView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPostsFrameChangedNotifications:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPostsFrameChangedNotifications:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setPostsBoundsChangedNotifications:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPostsBoundsChangedNotifications:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|scrollPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollPoint:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|displayRectIgnoringOpacity:inContext:| (thing _ in-context)
  (let ((message-lambda 
         (make-message-lambda @(displayRectIgnoringOpacity:inContext:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-context))))

(defun ns::|getRectsBeingDrawn:count:| (thing _ count)
  (let ((message-lambda 
         (make-message-lambda @(getRectsBeingDrawn:count:) (( ( :POINTER ( :POINTER ( :STRUCT ns::|CGRect|))) ( :POINTER :LONG-LONG))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id count))))

(defun ns::|convertPointToBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointToBacking:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|inLiveResize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(inLiveResize) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|preservesContentDuringLiveResize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(preservesContentDuringLiveResize) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|getRectsExposedDuringLiveResize:count:| (thing _ count)
  (let ((message-lambda 
         (make-message-lambda @(getRectsExposedDuringLiveResize:count:) (( ( :ARRAY ( :STRUCT ns::|CGRect|) 4) ( :POINTER :LONG-LONG))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id count))))

(defun ns::|canDraw| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canDraw) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|enclosingScrollView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enclosingScrollView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|dragImage:at:offset:event:pasteboard:source:slideBack:| (thing _ at offset event pasteboard source slide-back)
  (let ((message-lambda 
         (make-message-lambda @(dragImage:at:offset:event:pasteboard:source:slideBack:) (( :POINTER ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGSize|) :POINTER :POINTER :POINTER :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at offset (objc-object-id event) (objc-object-id pasteboard) (objc-object-id source) (if slide-back 1 0))))

(defun ns::|registerForDraggedTypes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerForDraggedTypes:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|unregisterDraggedTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unregisterDraggedTypes) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|acceptsFirstMouse:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsFirstMouse:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|needsPanelToBecomeKey| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsPanelToBecomeKey) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|draggingEntered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingEntered:) (( :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|draggingUpdated:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingUpdated:) (( :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|draggingExited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingExited:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|performDragOperation:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(performDragOperation:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|scrollWheel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollWheel:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|scrollRect:by:| (thing _ by)
  (let ((message-lambda 
         (make-message-lambda @(scrollRect:by:) (( ( :STRUCT ns::|CGRect|) ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ by)))

(defun ns::|menuForEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(menuForEvent:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|removeFromSuperviewWithoutNeedingDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeFromSuperviewWithoutNeedingDisplay) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bitmapImageRepForCachingDisplayInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bitmapImageRepForCachingDisplayInRect:) (( ( :STRUCT ns::|CGRect|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|cacheDisplayInRect:toBitmapImageRep:| (thing _ to-bitmap-image-rep)
  (let ((message-lambda 
         (make-message-lambda @(cacheDisplayInRect:toBitmapImageRep:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-bitmap-image-rep))))

(defun ns::|postsFrameChangedNotifications| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(postsFrameChangedNotifications) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|viewDidMoveToSuperview| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidMoveToSuperview) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFlipped:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFlipped:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|registeredDraggedTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(registeredDraggedTypes) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFocusRingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFocusRingType:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|headerView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(headerView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|translatesAutoresizingMaskIntoConstraints| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(translatesAutoresizingMaskIntoConstraints) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setNextResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNextResponder:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|animationForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(animationForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|centerScanRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(centerScanRect:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|invalidateIntrinsicContentSizeForCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(invalidateIntrinsicContentSizeForCell:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|invalidateConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateConstraints) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|lockFocusIfCanDraw| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(lockFocusIfCanDraw) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setContentStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentStyle:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|frameForAlignmentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(frameForAlignmentRect:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|sortSubviewsUsingBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sortSubviewsUsingBlock:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|firstBaselineOffsetFromTop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstBaselineOffsetFromTop) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|baselineOffsetFromBottom| (thing)
  (let ((message-lambda 
         (make-message-lambda @(baselineOffsetFromBottom) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|touchBarHitTestInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBarHitTestInsets) (()  ( :STRUCT ns::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|performMnemonic:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(performMnemonic:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|noteFocusRingMaskChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(noteFocusRingMaskChanged) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|convertPointFromBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointFromBacking:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|lastBaselineOffsetFromBottom| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lastBaselineOffsetFromBottom) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|layerContentsRedrawPolicy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layerContentsRedrawPolicy) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|effectiveContentStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(effectiveContentStyle) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|constraintForIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constraintForIdentifier:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setCompositingOperation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCompositingOperation:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|compositingOperation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(compositingOperation) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setClipsToBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setClipsToBounds:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|alphaValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alphaValue) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|willOpenMenu:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(willOpenMenu:withEvent:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-event))))

(defun ns::|didCloseMenu:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(didCloseMenu:withEvent:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-event))))

(defun ns::|prepareMenu:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(prepareMenu:withEvent:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-event))))

(defun ns::|prepareForMenu:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(prepareForMenu:withEvent:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-event))))

(defun ns::|accessibilityPopUpMenuCreated:forSubview:returningAccessibilityParent:| (thing _ for-subview returning-accessibility-parent)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPopUpMenuCreated:forSubview:returningAccessibilityParent:) (( :POINTER :POINTER ( :POINTER :POINTER))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-subview) (objc-object-id returning-accessibility-parent))))

(defun ns::|accessibilityPopUpMenuClosed:accessibilityParent:| (thing _ accessibility-parent)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPopUpMenuClosed:accessibilityParent:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id accessibility-parent))))

(defun ns::|print:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(print:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|worksWhenModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(worksWhenModal) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|topAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topAnchor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|trackingAreas| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trackingAreas) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nextValidKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nextValidKeyView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|focusRingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(focusRingType) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|convertSizeToBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeToBacking:) (( ( :STRUCT ns::|CGSize|))  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAllowsVibrancy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsVibrancy:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|canBecomeKeyView| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBecomeKeyView) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|heartBeat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(heartBeat:) (( ( :POINTER ( :ARRAY :CHAR 27)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|opaqueAncestor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(opaqueAncestor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityWindowPointForShowMenu| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowPointForShowMenu) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|drawFocusRingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawFocusRingMask) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityAuditParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditParent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityDrawFocusRing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDrawFocusRing) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilitySectionsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySectionsAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityAuditHierarchy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditHierarchy) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityAuditLabel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditLabel) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityAuditContrast| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditContrast) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|deepestAccessibilityDescendants| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deepestAccessibilityDescendants) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setUpGState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setUpGState) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|rightAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rightAnchor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|updateConstraintsForSubtreeIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateConstraintsForSubtreeIfNeeded) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|constraintsDidChangeInEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constraintsDidChangeInEngine:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|allocateGState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allocateGState) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewWillMoveToSuperview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewWillMoveToSuperview:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setBoundsSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBoundsSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|translateOriginToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(translateOriginToPoint:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|scaleUnitSquareToSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scaleUnitSquareToSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|adjustScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(adjustScroll:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|previousValidKeyView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(previousValidKeyView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFrameRotation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameRotation:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setBoundsRotation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBoundsRotation:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|rotateByAngle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rotateByAngle:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|autoscroll:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoscroll:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|enclosingMenuItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enclosingMenuItem) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewWithTag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewWithTag:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|beginDraggingSessionWithItems:event:source:| (thing _ event source)
  (let ((message-lambda 
         (make-message-lambda @(beginDraggingSessionWithItems:event:source:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id event) (objc-object-id source))))

(defun ns::|constraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(constraints) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewWillStartLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewWillStartLiveResize) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewDidEndLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidEndLiveResize) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|updateTrackingAreas| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateTrackingAreas) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|convertRectFromLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectFromLayer:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|interpretKeyEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(interpretKeyEvents:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|candidateListTouchBarItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(candidateListTouchBarItem) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|lastBaselineAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lastBaselineAnchor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewDidChangeBackingProperties| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidChangeBackingProperties) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewWillMoveToWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewWillMoveToWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAutoresizesSubviews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoresizesSubviews:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|replaceSubview:with:options:completionHandler:| (thing _ with options completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(replaceSubview:with:options:completionHandler:) (( :POINTER :POINTER :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with) options (objc-object-id completion-handler))))

(defun ns::|setNeedsUpdateConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsUpdateConstraints:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|acceptsTouchEvents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsTouchEvents) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|ignoreHitTest| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ignoreHitTest) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|shouldBeArchived| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldBeArchived) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|displayRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|focusRingMaskBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(focusRingMaskBounds) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityPopUpMenuParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPopUpMenuParent:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|compositingFilter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(compositingFilter) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_ancestorSharedWithItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_ancestorSharedWithItem:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|shadow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadow) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|backgroundFilters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backgroundFilters) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setBackgroundFilters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackgroundFilters:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|contentFilters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentFilters) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setContentFilters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentFilters:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|clipsToBounds| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(clipsToBounds) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|contentHuggingPriorityForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentHuggingPriorityForOrientation:) (( :LONG-LONG)  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|contentCompressionResistancePriorityForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentCompressionResistancePriorityForOrientation:) (( :LONG-LONG)  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|layoutRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutRect) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|firstBaselineAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstBaselineAnchor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|discardCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(discardCursorRects) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|cursorUpdate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cursorUpdate:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|prepareForDragOperation:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(prepareForDragOperation:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|concludeDragOperation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(concludeDragOperation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|addTrackingRect:owner:userData:assumeInside:| (thing _ owner user-data assume-inside)
  (let ((message-lambda 
         (make-message-lambda @(addTrackingRect:owner:userData:assumeInside:) (( ( :STRUCT ns::|CGRect|) :POINTER ( :POINTER :VOID) :CHAR)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id owner) (objc-object-id user-data) (if assume-inside 1 0))))

(defun ns::|removeTrackingRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeTrackingRect:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|trackEventsMatchingMask:timeout:mode:handler:| (thing _ timeout mode handler)
  (let ((message-lambda 
         (make-message-lambda @(trackEventsMatchingMask:timeout:mode:handler:) (( :UNSIGNED-LONG-LONG :DOUBLE :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ timeout (objc-object-id mode) (objc-object-id handler))))

(defun ns::|recursiveDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(recursiveDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|wantsRestingTouches| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsRestingTouches) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|allowedTouchTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allowedTouchTypes) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isDrawingFindIndicator| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDrawingFindIndicator) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|removeAllToolTips| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeAllToolTips) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsis_frame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsis_frame) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setLayerContentsPlacement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayerContentsPlacement:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|drawLayer:inContext:| (thing _ in-context)
  (let ((message-lambda 
         (make-message-lambda @(drawLayer:inContext:) (( :POINTER ( :POINTER ( :STRUCT ns::|CGContext|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-context))))

(defun ns::|actionForLayer:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(actionForLayer:forKey:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun ns::|functionRow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(functionRow) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|needsDisplay| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsDisplay) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|resizeWithOldSuperviewSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(resizeWithOldSuperviewSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|hasAmbiguousLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasAmbiguousLayout) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setUpdateLayerHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUpdateLayerHandler:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|alignmentLayoutRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alignmentLayoutRect) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|ancestorSharedWithView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(ancestorSharedWithView:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|wantsBestResolutionOpenGLSurface| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsBestResolutionOpenGLSurface) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|renewGState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(renewGState) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPressureConfiguration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPressureConfiguration:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pressureConfiguration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pressureConfiguration) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|canDrawConcurrently| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canDrawConcurrently) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|autoresizesSubviews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoresizesSubviews) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|needsLayout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsLayout) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|needsUpdateConstraints| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsUpdateConstraints) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|loggingDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(loggingDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|didBecomeActiveFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(didBecomeActiveFirstResponder) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|didResignActiveFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(didResignActiveFirstResponder) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|addToolTipRect:owner:userData:| (thing _ owner user-data)
  (let ((message-lambda 
         (make-message-lambda @(addToolTipRect:owner:userData:) (( ( :STRUCT ns::|CGRect|) :POINTER ( :POINTER :VOID))  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id owner) (objc-object-id user-data))))

(defun ns::|wantsExtendedDynamicRangeOpenGLSurface| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsExtendedDynamicRangeOpenGLSurface) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setWantsExtendedDynamicRangeOpenGLSurface:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsExtendedDynamicRangeOpenGLSurface:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|convertPointFromBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointFromBase:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|prepareContentInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(prepareContentInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setHorizontalContentSizeConstraintActive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalContentSizeConstraintActive:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setVerticalContentSizeConstraintActive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalContentSizeConstraintActive:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|rectForPage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rectForPage:) (( :LONG-LONG)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|printJobTitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(printJobTitle) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|geometryInWindowDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(geometryInWindowDidChange) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewDidHide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidHide) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewDidUnhide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidUnhide) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isRotatedOrScaledFromBase| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRotatedOrScaledFromBase) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|removeToolTip:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeToolTip:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|inputContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(inputContext) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityFocusRingMaskBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusRingMaskBounds) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|convertPointToLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointToLayer:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|sortSubviewsUsingFunction:context:| (thing _ context)
  (let ((message-lambda 
         (make-message-lambda @(sortSubviewsUsingFunction:context:) (( ( :POINTER :POINTER) ( :POINTER :VOID))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id context))))

(defun ns::|resizeSubviewsWithOldSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(resizeSubviewsWithOldSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|canDrawSubviewsIntoLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canDrawSubviewsIntoLayer) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|nsis_valueOfVariable:didChangeInEngine:| (thing _ did-change-in-engine)
  (let ((message-lambda 
         (make-message-lambda @(nsis_valueOfVariable:didChangeInEngine:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id did-change-in-engine))))

(defun ns::|convertSizeFromBacking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeFromBacking:) (( ( :STRUCT ns::|CGSize|))  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|preparedContentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preparedContentRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|overlayBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(overlayBounds) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|needsToDrawRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsToDrawRect:) (( ( :STRUCT ns::|CGRect|))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|showActiveFirstResponderIndication| (thing)
  (let ((message-lambda 
         (make-message-lambda @(showActiveFirstResponderIndication) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|drawOverlayRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawOverlayRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|visibleAccessibleOrLeafSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(visibleAccessibleOrLeafSubviews) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityAuditPotentialChildren| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAuditPotentialChildren) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|canSmoothFontsInLayer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canSmoothFontsInLayer) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|displayIgnoringOpacity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayIgnoringOpacity) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isInTouchBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInTouchBar) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|showDefinitionForAttributedString:range:options:baselineOriginProvider:| (thing _ range options baseline-origin-provider)
  (let ((message-lambda 
         (make-message-lambda @(showDefinitionForAttributedString:range:options:baselineOriginProvider:) (( :POINTER ( :STRUCT ns::|_NSRange|) :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range (objc-object-id options) (objc-object-id baseline-origin-provider))))

(defun ns::|wantsDefaultClipping| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsDefaultClipping) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isInFullScreenMode| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInFullScreenMode) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|locationOfPrintRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(locationOfPrintRect:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|rectForSmartMagnificationAtPoint:inRect:| (thing _ in-rect)
  (let ((message-lambda 
         (make-message-lambda @(rectForSmartMagnificationAtPoint:inRect:) (( ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ in-rect)))

(defun ns::|isRotatedFromBase| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRotatedFromBase) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|didAddSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(didAddSubview:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|adjustPageHeightNew:top:bottom:limit:| (thing _ top bottom limit)
  (let ((message-lambda 
         (make-message-lambda @(adjustPageHeightNew:top:bottom:limit:) (( ( :POINTER :DOUBLE) :DOUBLE :DOUBLE :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) top bottom limit)))

(defun ns::|knowsPageRange:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(knowsPageRange:) (( ( :POINTER ( :STRUCT ns::|_NSRange|)))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|knowsPagesFirst:last:| (thing _ last)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(knowsPagesFirst:last:) (( ( :POINTER :LONG-LONG) ( :POINTER :LONG-LONG))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id last)))) nil t))

(defun ns::|revealContext:rectsForItem:| (thing _ rects-for-item)
  (let ((message-lambda 
         (make-message-lambda @(revealContext:rectsForItem:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id rects-for-item))))

(defun ns::|addLayoutGuide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addLayoutGuide:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|rectPreservedDuringLiveResize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rectPreservedDuringLiveResize) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|view:customToolTip:drawInView:displayInfo:| (thing _ custom-tool-tip draw-in-view display-info)
  (let ((message-lambda 
         (make-message-lambda @(view:customToolTip:drawInView:displayInfo:) (( :POINTER :LONG-LONG :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) custom-tool-tip (objc-object-id draw-in-view) (objc-object-id display-info))))

(defun ns::|view:customToolTip:frameForToolTipWithDisplayInfo:| (thing _ custom-tool-tip frame-for-tool-tip-with-display-info)
  (let ((message-lambda 
         (make-message-lambda @(view:customToolTip:frameForToolTipWithDisplayInfo:) (( :POINTER :LONG-LONG :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) custom-tool-tip (objc-object-id frame-for-tool-tip-with-display-info))))

(defun ns::|view:customToolTip:fadeOutAllowedForToolTipWithDisplayInfo:| (thing _ custom-tool-tip fade-out-allowed-for-tool-tip-with-display-info)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(view:customToolTip:fadeOutAllowedForToolTipWithDisplayInfo:) (( :POINTER :LONG-LONG :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) custom-tool-tip (objc-object-id fade-out-allowed-for-tool-tip-with-display-info)))) nil t))

(defun ns::|nsis_frameInEngine:forLayoutGuide:withRounding:| (thing _ for-layout-guide with-rounding)
  (let ((message-lambda 
         (make-message-lambda @(nsis_frameInEngine:forLayoutGuide:withRounding:) (( :POINTER :POINTER :CHAR)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-layout-guide) (if with-rounding 1 0))))

(defun ns::|accessibilityPopUpMenuCreated:returningAccessibilityParent:| (thing _ returning-accessibility-parent)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPopUpMenuCreated:returningAccessibilityParent:) (( :POINTER ( :POINTER :POINTER))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id returning-accessibility-parent))))

(defun ns::|setCanDrawSubviewsIntoLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanDrawSubviewsIntoLayer:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setCanDrawConcurrently:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanDrawConcurrently:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|removeAllGestureRecognizers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeAllGestureRecognizers) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|hideActiveFirstResponderIndication| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hideActiveFirstResponderIndication) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|layerContentsPlacement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layerContentsPlacement) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|compareGeometry:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(compareGeometry:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|nsli_engineToUserScalingCoefficientsInEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_engineToUserScalingCoefficientsInEngine:) (( :POINTER)  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setPreparedContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreparedContentRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|boundsOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(boundsOrigin) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFrameTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameTransform:) (( ( :STRUCT ns::|CGAffineTransform|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|frameRotation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameRotation) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|convertPointFromLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointFromLayer:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|convertSizeToLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeToLayer:) (( ( :STRUCT ns::|CGSize|))  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|convertSizeFromLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeFromLayer:) (( ( :STRUCT ns::|CGSize|))  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|removeGestureRecognizer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeGestureRecognizer:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|displayIfNeededInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayIfNeededInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|displayIfNeededIgnoringOpacity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayIfNeededIgnoringOpacity) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|displayIfNeededInRectIgnoringOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayIfNeededInRectIgnoringOpacity:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|cacheDisplayInRect:toBitmapImageRep:includeSubviews:| (thing _ to-bitmap-image-rep include-subviews)
  (let ((message-lambda 
         (make-message-lambda @(cacheDisplayInRect:toBitmapImageRep:includeSubviews:) (( ( :STRUCT ns::|CGRect|) :POINTER :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-bitmap-image-rep) (if include-subviews 1 0))))

(defun ns::|layoutGuides| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutGuides) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setWantsBestResolutionOpenGLSurface:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsBestResolutionOpenGLSurface:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setGestureRecognizers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGestureRecognizers:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|effectiveAppearanceDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(effectiveAppearanceDidChange) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setMaskView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaskView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|maskView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maskView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|computed_effectiveSemanticContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computed_effectiveSemanticContext) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsis_layoutRectFromHostingViewInEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsis_layoutRectFromHostingViewInEngine:) (( :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|nsis_unroundedFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsis_unroundedFrame) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsis_rawAlignmentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsis_rawAlignmentRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|disableLayoutFlushing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableLayoutFlushing) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|enableLayoutFlushing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableLayoutFlushing) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|frameTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameTransform) (()  ( :STRUCT ns::|CGAffineTransform|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFrameCenterRotation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameCenterRotation:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|frameCenterRotation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameCenterRotation) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|frameOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameOrigin) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|frameSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|wantsExtendedDynamicRange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsExtendedDynamicRange) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setWantsExtendedDynamicRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsExtendedDynamicRange:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|boundsSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(boundsSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|boundsRotation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(boundsRotation) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setLayerUsesCoreImageFilters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayerUsesCoreImageFilters:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|layerUsesCoreImageFilters| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(layerUsesCoreImageFilters) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|convertPointToBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointToBase:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|convertSizeToBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeToBase:) (( ( :STRUCT ns::|CGSize|))  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|convertSizeFromBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertSizeFromBase:) (( ( :STRUCT ns::|CGSize|))  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|convertRectToBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectToBase:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|convertRectFromBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectFromBase:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|gState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gState) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|releaseGState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(releaseGState) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|lockFocusIfCanDrawInContext:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(lockFocusIfCanDrawInContext:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|setAcceptsTouchEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAcceptsTouchEvents:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setWantsRestingTouches:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsRestingTouches:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|gesturesEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(gesturesEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setGesturesEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGesturesEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|displayRectIgnoringOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayRectIgnoringOpacity:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|usesConstraintsInsteadOfAutoresizing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesConstraintsInsteadOfAutoresizing) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setUsesConstraintsInsteadOfAutoresizing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesConstraintsInsteadOfAutoresizing:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isHorizontalContentSizeConstraintActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHorizontalContentSizeConstraintActive) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isVerticalContentSizeConstraintActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isVerticalContentSizeConstraintActive) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|scrollPoint:fromView:| (thing _ from-view)
  (let ((message-lambda 
         (make-message-lambda @(scrollPoint:fromView:) (( ( :POINTER ( :STRUCT ns::|CGPoint|)) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id from-view))))

(defun ns::|translateRectsNeedingDisplayInRect:by:| (thing _ by)
  (let ((message-lambda 
         (make-message-lambda @(translateRectsNeedingDisplayInRect:by:) (( ( :STRUCT ns::|CGRect|) ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ by)))

(defun ns::|removeCursorRect:cursor:| (thing _ cursor)
  (let ((message-lambda 
         (make-message-lambda @(removeCursorRect:cursor:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id cursor))))

(defun ns::|shouldDrawColor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldDrawColor) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|postsBoundsChangedNotifications| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(postsBoundsChangedNotifications) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|willSendMenuNeedsUpdate:withEvent:| (thing _ with-event)
  (let ((message-lambda 
         (make-message-lambda @(willSendMenuNeedsUpdate:withEvent:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-event))))

(defun ns::|updateLayerHandler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateLayerHandler) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewDidChangeBackingProperties:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewDidChangeBackingProperties:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|activeDrawingRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(activeDrawingRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|showDefinitionForAttributedString:atPoint:| (thing _ at-point)
  (let ((message-lambda 
         (make-message-lambda @(showDefinitionForAttributedString:atPoint:) (( :POINTER ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-point)))

(defun ns::|contentStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentStyle) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|computed_inSelectedTableRow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computed_inSelectedTableRow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|computed_titlebarIsForcingDisplayOfDividers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computed_titlebarIsForcingDisplayOfDividers) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|computed_allowRolloverInToolbarControls| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computed_allowRolloverInToolbarControls) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|fontSmoothingBackgroundColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fontSmoothingBackgroundColor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFontSmoothingBackgroundColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFontSmoothingBackgroundColor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|shouldSetFontSmoothingBackgroundColor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldSetFontSmoothingBackgroundColor) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|nsli_minXVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_minXVariable) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_minYVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_minYVariable) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_superitem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_superitem) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|dataWithEPSInsideRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dataWithEPSInsideRect:) (( ( :STRUCT ns::|CGRect|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|dataWithPDFInsideRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dataWithPDFInsideRect:) (( ( :STRUCT ns::|CGRect|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|dragFile:fromRect:slideBack:event:| (thing _ from-rect slide-back event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(dragFile:fromRect:slideBack:event:) (( :POINTER ( :STRUCT ns::|CGRect|) :CHAR :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) from-rect (if slide-back 1 0) (objc-object-id event)))) nil t))

(defun ns::|dragPromisedFilesOfTypes:fromRect:source:slideBack:event:| (thing _ from-rect source slide-back event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(dragPromisedFilesOfTypes:fromRect:source:slideBack:event:) (( :POINTER ( :STRUCT ns::|CGRect|) :POINTER :CHAR :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) from-rect (objc-object-id source) (if slide-back 1 0) (objc-object-id event)))) nil t))

(defun ns::|removeLayoutGuide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeLayoutGuide:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:onBehalfOfLayoutGuide:| (thing _ into-expression with-coefficient for-constraint on-behalf-of-layout-guide)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:onBehalfOfLayoutGuide:) (( :INT :POINTER :DOUBLE :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id into-expression) with-coefficient (objc-object-id for-constraint) (objc-object-id on-behalf-of-layout-guide)))) nil t))

(defun ns::|nsli_lowersExpressionRelativeToConstraintContainer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_lowersExpressionRelativeToConstraintContainer) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|nsli_layoutEngine| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_layoutEngine) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_installedConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_installedConstraints) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_removeConstraint:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_removeConstraint:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|constraintsAffectingLayoutForOrientation:ofItem:| (thing _ of-item)
  (let ((message-lambda 
         (make-message-lambda @(constraintsAffectingLayoutForOrientation:ofItem:) (( :LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id of-item))))

(defun ns::|nsli_convertSizeToEngineSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_convertSizeToEngineSpace:) (( ( :STRUCT ns::|CGSize|))  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|nsli_convertSizeFromEngineSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_convertSizeFromEngineSpace:) (( ( :STRUCT ns::|CGSize|))  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|nsli_defaultResolvedValue:forSymbolicConstant:inConstraint:error:| (thing _ for-symbolic-constant in-constraint error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_defaultResolvedValue:forSymbolicConstant:inConstraint:error:) (( ( :POINTER :DOUBLE) :POINTER :POINTER ( :POINTER :POINTER))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-symbolic-constant) (objc-object-id in-constraint) (objc-object-id error)))) nil t))

(defun ns::|nsli_constraintWithAnchor:relatedBy:toAnchor:withSystemSpacingMultipliedBy:| (thing _ related-by to-anchor with-system-spacing-multiplied-by)
  (let ((message-lambda 
         (make-message-lambda @(nsli_constraintWithAnchor:relatedBy:toAnchor:withSystemSpacingMultipliedBy:) (( :POINTER :LONG-LONG :POINTER :DOUBLE)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) related-by (objc-object-id to-anchor) with-system-spacing-multiplied-by)))

(defun ns::|nsli_isRTL| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_isRTL) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|nsli_itemDescribingLayoutDirectionForConstraint:toItem:| (thing _ to-item)
  (let ((message-lambda 
         (make-message-lambda @(nsli_itemDescribingLayoutDirectionForConstraint:toItem:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-item))))

(defun ns::|nsli_addConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_addConstraint:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|nsli_boundsWidthVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_boundsWidthVariable) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_boundsHeightVariable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_boundsHeightVariable) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_description| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_description) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:| (thing _ into-expression with-coefficient for-constraint)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:) (( :INT :POINTER :DOUBLE :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id into-expression) with-coefficient (objc-object-id for-constraint)))) nil t))

(defun ns::|nsli_lowerAttribute:intoExpression:withCoefficient:container:| (thing _ into-expression with-coefficient container)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_lowerAttribute:intoExpression:withCoefficient:container:) (( :INT :POINTER :DOUBLE :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id into-expression) with-coefficient (objc-object-id container)))) nil t))

(defun ns::|constraintsAffectingLayoutForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constraintsAffectingLayoutForOrientation:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|nsli_layoutRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_layoutRect) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_resolvedValue:forSymbolicConstant:inConstraint:error:| (thing _ for-symbolic-constant in-constraint error)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_resolvedValue:forSymbolicConstant:inConstraint:error:) (( ( :POINTER :DOUBLE) :POINTER :POINTER ( :POINTER :POINTER))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-symbolic-constant) (objc-object-id in-constraint) (objc-object-id error)))) nil t))

(defun ns::|nsli_descriptionIncludesPointer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_descriptionIncludesPointer) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|nsli_autoresizingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_autoresizingMask) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_isFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_isFlipped) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|nsli_piercingToken| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_piercingToken) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_setPiercingToken:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_setPiercingToken:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|nsis_shouldIntegralizeVariable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsis_shouldIntegralizeVariable:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|nsis_valueOfVariableIsUserObservable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsis_valueOfVariableIsUserObservable:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|nsis_descriptionOfVariable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsis_descriptionOfVariable:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|nsis_orientationHintForVariable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsis_orientationHintForVariable:) (( :POINTER)  :INT)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|widthAdjustLimit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(widthAdjustLimit) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|adjustPageWidthNew:left:right:limit:| (thing _ left right limit)
  (let ((message-lambda 
         (make-message-lambda @(adjustPageWidthNew:left:right:limit:) (( ( :POINTER :DOUBLE) :DOUBLE :DOUBLE :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) left right limit)))

(defun ns::|heightAdjustLimit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(heightAdjustLimit) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pageFooter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pageFooter) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pageHeader| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pageHeader) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|drawSheetBorderWithSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawSheetBorderWithSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|drawPageBorderWithSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawPageBorderWithSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|beginDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginDocument) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|endDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endDocument) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|endPage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endPage) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|writePDFInsideRect:toPasteboard:| (thing _ to-pasteboard)
  (let ((message-lambda 
         (make-message-lambda @(writePDFInsideRect:toPasteboard:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-pasteboard))))

(defun ns::|writeEPSInsideRect:toPasteboard:| (thing _ to-pasteboard)
  (let ((message-lambda 
         (make-message-lambda @(writeEPSInsideRect:toPasteboard:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-pasteboard))))

(defun ns::|beginPageInRect:atPlacement:| (thing _ at-placement)
  (let ((message-lambda 
         (make-message-lambda @(beginPageInRect:atPlacement:) (( ( :STRUCT ns::|CGRect|) ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ at-placement)))

(defun ns::|beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:| (thing _ creation-date created-by fonts for-whom pages title)
  (let ((message-lambda 
         (make-message-lambda @(beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:) (( ( :STRUCT ns::|CGRect|) :POINTER :POINTER :POINTER :POINTER :LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id creation-date) (objc-object-id created-by) (objc-object-id fonts) (objc-object-id for-whom) pages (objc-object-id title))))

(defun ns::|endHeaderComments| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endHeaderComments) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|endPrologue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endPrologue) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|beginSetup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginSetup) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|endSetup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endSetup) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|beginPage:label:bBox:fonts:| (thing _ label b-box fonts)
  (let ((message-lambda 
         (make-message-lambda @(beginPage:label:bBox:fonts:) (( :LONG-LONG :POINTER ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id label) b-box (objc-object-id fonts))))

(defun ns::|beginPageSetupRect:placement:| (thing _ placement)
  (let ((message-lambda 
         (make-message-lambda @(beginPageSetupRect:placement:) (( ( :STRUCT ns::|CGRect|) ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ placement)))

(defun ns::|addToPageSetup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(addToPageSetup) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|endPageSetup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endPageSetup) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|beginTrailer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginTrailer) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|endTrailer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endTrailer) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|enterFullScreenMode:withOptions:| (thing _ with-options)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(enterFullScreenMode:withOptions:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-options)))) nil t))

(defun ns::|exitFullScreenModeWithOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(exitFullScreenModeWithOptions:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|reuseIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(reuseIdentifier) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|ns_widgetType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ns_widgetType) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|ns_containerWidgetType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ns_containerWidgetType) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|exerciseAmbiguityInLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(exerciseAmbiguityInLayout) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_addConstraint:mutuallyExclusiveConstraints:| (thing _ mutually-exclusive-constraints)
  (let ((message-lambda 
         (make-message-lambda @(nsli_addConstraint:mutuallyExclusiveConstraints:) (( :POINTER ( :POINTER :POINTER))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id mutually-exclusive-constraints))))

(defun ns::|nsli_engineToUserScalingCoefficients| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nsli_engineToUserScalingCoefficients) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nsli_layoutAnchorForAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(nsli_layoutAnchorForAttribute:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|nsli_canHostIndependentVariableAnchor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nsli_canHostIndependentVariableAnchor) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|nsli_swapContainerForOutgoingConstraint:toIncomingConstraint:| (thing _ to-incoming-constraint)
  (let ((message-lambda 
         (make-message-lambda @(nsli_swapContainerForOutgoingConstraint:toIncomingConstraint:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-incoming-constraint))))

(defun ns::|engine:markerForConstraintToBreakAmongConstraints:| (thing _ marker-for-constraint-to-break-among-constraints)
  (let ((message-lambda 
         (make-message-lambda @(engine:markerForConstraintToBreakAmongConstraints:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id marker-for-constraint-to-break-among-constraints))))

(defun ns::|engine:willBreakConstraint:dueToMutuallyExclusiveConstraints:| (thing _ will-break-constraint due-to-mutually-exclusive-constraints)
  (let ((message-lambda 
         (make-message-lambda @(engine:willBreakConstraint:dueToMutuallyExclusiveConstraints:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id will-break-constraint) (objc-object-id due-to-mutually-exclusive-constraints))))

(defun ns::|solutionDidChangeInEngine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(solutionDidChangeInEngine:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|measureMin:max:ideal:| (thing _ max ideal)
  (let ((message-lambda 
         (make-message-lambda @(measureMin:max:ideal:) (( ( :POINTER ( :STRUCT ns::|CGSize|)) ( :POINTER ( :STRUCT ns::|CGSize|)) ( :POINTER ( :STRUCT ns::|CGSize|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id max) (objc-object-id ideal))))

(defun ns::|layoutMarginsGuide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutMarginsGuide) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|safeAreaLayoutGuide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(safeAreaLayoutGuide) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|computedSafeAreaInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computedSafeAreaInsets) (()  ( :STRUCT ns::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|computedSafeAreaRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computedSafeAreaRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|recursiveConstraintDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(recursiveConstraintDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|recursiveConstraintIdentifierDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(recursiveConstraintIdentifierDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|declaredLayoutRules| (thing)
  (let ((message-lambda 
         (make-message-lambda @(declaredLayoutRules) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|textLayerShouldEnableFontSmoothing:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(textLayerShouldEnableFontSmoothing:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|removeConstraintWithIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeConstraintWithIdentifier:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

















(defun ns::|setBaseWritingDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBaseWritingDirection:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|setAlignment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAlignment:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|alignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alignment) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|formatter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(formatter) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFormatter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFormatter:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|objectValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(objectValue) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setObjectValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setObjectValue:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setStringValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStringValue:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|lineBreakMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineBreakMode) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|baseWritingDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(baseWritingDirection) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setLineBreakMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineBreakMode:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|controlSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(controlSize) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setControlSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setControlSize:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))








(defun ns::|setContinuous:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContinuous:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))



(defun ns::|setHighlighted:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHighlighted:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isContinuous| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isContinuous) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|mouseDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseDown:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|acceptsFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsFirstResponder) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))






(defun ns::|accessibilityHelpStringForChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHelpStringForChild:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityIsChildFocusable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsChildFocusable:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|accessibilitySetFocus:forChild:| (thing _ for-child)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetFocus:forChild:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-child))))

(defun ns::|accessibilityPositionOfChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPositionOfChild:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySizeOfChild:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySizeOfChild:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|accessibilityEnabledAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityEnabledAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsEnabledAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsEnabledAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|cell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cell) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|setDoubleValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDoubleValue:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setTouchBarInsetMitigation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTouchBarInsetMitigation:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setTouchBarRestingMitigation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTouchBarRestingMitigation:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|touchBarInsetMitigation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBarInsetMitigation) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|touchBarRestingMitigation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBarRestingMitigation) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|performClick:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performClick:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|attributedStringValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributedStringValue) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|setAttributedStringValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAttributedStringValue:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|becomeKeyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(becomeKeyWindow) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|setIntValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIntValue:) (( :INT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setIntegerValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIntegerValue:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setFloatValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFloatValue:) (( :FLOAT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|sendAction:to:| (thing _ to)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(sendAction:to:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to)))) nil t))

(defun ns::|setCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCell:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|abortEditing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(abortEditing) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|updateCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateCell:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectedCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedCell) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|keyDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(keyDown:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|resignFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(resignFirstResponder) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setRefusesFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRefusesFirstResponder:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|selectCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectCell:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|resignKeyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignKeyWindow) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|updateCellInside:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateCellInside:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|becomeFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(becomeFirstResponder) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|refusesFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(refusesFirstResponder) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))





(defun ns::|drawWithExpansionFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(drawWithExpansionFrame:inView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun ns::|getPeriodicDelay:interval:| (thing _ interval)
  (let ((message-lambda 
         (make-message-lambda @(getPeriodicDelay:interval:) (( ( :POINTER :FLOAT) ( :POINTER :FLOAT))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id interval))))

(defun ns::|setNextState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setNextState) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|sendActionOnMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sendActionOnMask) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|drawCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawCell:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|currentEditor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentEditor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|validateEditing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(validateEditing) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|usesSingleLineMode| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesSingleLineMode) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|endEditing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endEditing:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|sendActionOn:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sendActionOn:) (( :UNSIGNED-LONG-LONG)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|takeIntValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeIntValueFrom:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|takeIntegerValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeIntegerValueFrom:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|takeFloatValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeFloatValueFrom:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|takeDoubleValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeDoubleValueFrom:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|takeStringValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeStringValueFrom:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|takeObjectValueFrom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeObjectValueFrom:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setUsesSingleLineMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesSingleLineMode:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|mouseDownFlags| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mouseDownFlags) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|setNeedsDisplay| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplay) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|touchesBeganWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesBeganWithEvent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|touchesMovedWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesMovedWithEvent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|touchesEndedWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesEndedWithEvent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|touchesCancelledWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(touchesCancelledWithEvent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAllowsExpansionToolTips:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsExpansionToolTips:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|allowsLogicalLayoutDirection| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsLogicalLayoutDirection) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|allowsExpansionToolTips| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsExpansionToolTips) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|keyUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(keyUp:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityPostNotification:context:| (thing _ context)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPostNotification:context:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id context))))

(defun ns::|textView:willChangeSelectionFromCharacterRange:toCharacterRange:| (thing _ will-change-selection-from-character-range to-character-range)
  (let ((message-lambda 
         (make-message-lambda @(textView:willChangeSelectionFromCharacterRange:toCharacterRange:) (( :POINTER ( :STRUCT ns::|_NSRange|) ( :STRUCT ns::|_NSRange|))  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) will-change-selection-from-character-range to-character-range)))

(defun ns::|setFloatingPointFormat:left:right:| (thing _ left right)
  (let ((message-lambda 
         (make-message-lambda @(setFloatingPointFormat:left:right:) (( :CHAR :UNSIGNED-LONG-LONG :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) left right)))

(defun ns::|setAllowsLogicalLayoutDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsLogicalLayoutDirection:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|cellIfExists| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cellIfExists) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|selectedTag| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedTag) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|sizeThatFits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(sizeThatFits:) (( ( :STRUCT ns::|CGSize|))  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|ignoresMultiClick| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ignoresMultiClick) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setIgnoresMultiClick:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIgnoresMultiClick:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))



(defun ns::|skipEditValidation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(skipEditValidation) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setSkipEditValidation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSkipEditValidation:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|editWithFrame:editor:delegate:event:| (thing _ editor delegate event)
  (let ((message-lambda 
         (make-message-lambda @(editWithFrame:editor:delegate:event:) (( ( :STRUCT ns::|CGRect|) :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id editor) (objc-object-id delegate) (objc-object-id event))))

(defun ns::|selectWithFrame:editor:delegate:start:length:| (thing _ editor delegate start length)
  (let ((message-lambda 
         (make-message-lambda @(selectWithFrame:editor:delegate:start:length:) (( ( :STRUCT ns::|CGRect|) :POINTER :POINTER :LONG-LONG :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id editor) (objc-object-id delegate) start length)))

(defun ns::|textViewDidChangeSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(textViewDidChangeSelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|calcSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(calcSize) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|drawCellInside:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawCellInside:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|expansionFrameWithFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(expansionFrameWithFrame:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|addTarget:action:forControlEvents:| (thing _ action for-control-events)
  (let ((message-lambda 
         (make-message-lambda @(addTarget:action:forControlEvents:) (( :POINTER :POINTER :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id action) for-control-events)))

(defun ns::|removeTarget:action:forControlEvents:| (thing _ action for-control-events)
  (let ((message-lambda 
         (make-message-lambda @(removeTarget:action:forControlEvents:) (( :POINTER :POINTER :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id action) for-control-events)))
















(defun ns::|setType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setType:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))



































(defun ns::|setDrawsBackground:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawsBackground:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


































































(defun ns::|accessibilityElementWithParent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityElementWithParent:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|interiorBackgroundStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(interiorBackgroundStyle) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|textAlignmentPolicy| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textAlignmentPolicy) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|titleRectForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(titleRectForBounds:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))




(defun ns::|isBordered| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isBordered) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setBordered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBordered:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun ns::|cellSizeForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cellSizeForBounds:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setControlTint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setControlTint:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|setAllowsEditingTextAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsEditingTextAttributes:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun ns::|accessibilityPostNotification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityPostNotification:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))





























































































































































































































































(defun ns::|isEditable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEditable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))





(defun ns::|accessibilityValueAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityValueAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsValueAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsValueAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySetValueAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetValueAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initTextCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initTextCell:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|cellSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cellSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|drawWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(drawWithFrame:inView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun ns::|setEditable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEditable:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setSelectable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectable:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun ns::|hitTestForEvent:inRect:ofView:| (thing _ in-rect of-view)
  (let ((message-lambda 
         (make-message-lambda @(hitTestForEvent:inRect:ofView:) (( :POINTER ( :STRUCT ns::|CGRect|) :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-rect (objc-object-id of-view))))


(defun ns::|highlight:withFrame:inView:| (thing _ with-frame in-view)
  (let ((message-lambda 
         (make-message-lambda @(highlight:withFrame:inView:) (( :CHAR ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) with-frame (objc-object-id in-view))))


(defun ns::|drawsBackground| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsBackground) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|setBezeled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBezeled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setWraps:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWraps:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun ns::|initImageCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initImageCell:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|drawInteriorWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(drawInteriorWithFrame:inView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun ns::|setBackgroundStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackgroundStyle:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|imageRectForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(imageRectForBounds:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|highlightColorWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(highlightColorWithFrame:inView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun ns::|expansionFrameWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(expansionFrameWithFrame:inView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))



(defun ns::|allowsMixedState| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsMixedState) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAllowsMixedState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsMixedState:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun ns::|setShowsFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsFirstResponder:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|drawFocusRingMaskWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(drawFocusRingMaskWithFrame:inView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun ns::|updateTrackingAreaWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(updateTrackingAreaWithFrame:inView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))


(defun ns::|drawingRectForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawingRectForBounds:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|nextState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nextState) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setScrollable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollable:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isBezeled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isBezeled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|trackMouse:inRect:ofView:untilMouseUp:| (thing _ in-rect of-view until-mouse-up)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(trackMouse:inRect:ofView:untilMouseUp:) (( :POINTER ( :STRUCT ns::|CGRect|) :POINTER :CHAR)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-rect (objc-object-id of-view) (if until-mouse-up 1 0)))) nil t))

(defun ns::|startTrackingAt:inView:| (thing _ in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(startTrackingAt:inView:) (( ( :STRUCT ns::|CGPoint|) :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view)))) nil t))

(defun ns::|continueTracking:at:inView:| (thing _ at in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(continueTracking:at:inView:) (( ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGPoint|) :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ at (objc-object-id in-view)))) nil t))

(defun ns::|touchEndedAt:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchEndedAt:inView:) (( ( :STRUCT ns::|CGPoint|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))


(defun ns::|wantsUpdateLayerInView:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsUpdateLayerInView:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|updateLayerWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(updateLayerWithFrame:inView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun ns::|layoutLayerWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(layoutLayerWithFrame:inView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun ns::|focusRingMaskBoundsForFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(focusRingMaskBoundsForFrame:inView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun ns::|continueTrackingGesture:inView:| (thing _ in-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(continueTrackingGesture:inView:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-view)))) nil t))

(defun ns::|stopTracking:at:inView:mouseIsUp:| (thing _ at in-view mouse-is-up)
  (let ((message-lambda 
         (make-message-lambda @(stopTracking:at:inView:mouseIsUp:) (( ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGPoint|) :POINTER :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ at (objc-object-id in-view) (if mouse-is-up 1 0))))

(defun ns::|cellAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cellAttribute:) (( :UNSIGNED-LONG-LONG)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setCellAttribute:to:| (thing _ to)
  (let ((message-lambda 
         (make-message-lambda @(setCellAttribute:to:) (( :UNSIGNED-LONG-LONG :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ to)))

(defun ns::|setImageInterpolation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setImageInterpolation:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|imageInterpolation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(imageInterpolation) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|wraps| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wraps) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|allowsEditingTextAttributes| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsEditingTextAttributes) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|allowsEditingTokens| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsEditingTokens) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|allowsUndo| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsUndo) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|truncatesLastVisibleLine| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(truncatesLastVisibleLine) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isScrollable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isScrollable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|titleTextContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titleTextContainer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|cachesLineRef| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(cachesLineRef) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|continueTrackingPeriodicEvent:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(continueTrackingPeriodicEvent:inView:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id in-view))))

(defun ns::|cancelTrackingAt:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(cancelTrackingAt:inView:) (( ( :STRUCT ns::|CGPoint|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))


(defun ns::|fieldEditorTextContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fieldEditorTextContainer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isSelectable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSelectable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|styleEffectConfiguration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(styleEffectConfiguration) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|hasValidObjectValue| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasValidObjectValue) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAllowsUndo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsUndo:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|showsFirstResponder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsFirstResponder) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|importsGraphics| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(importsGraphics) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setImportsGraphics:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setImportsGraphics:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|allowsDefaultTighteningForTruncation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsDefaultTighteningForTruncation) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAllowsDefaultTighteningForTruncation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsDefaultTighteningForTruncation:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))







(defun ns::|setTruncatesLastVisibleLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTruncatesLastVisibleLine:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun ns::|textView:shouldChangeTextInRange:replacementString:| (thing _ should-change-text-in-range replacement-string)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(textView:shouldChangeTextInRange:replacementString:) (( :POINTER ( :STRUCT ns::|_NSRange|) :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) should-change-text-in-range (objc-object-id replacement-string)))) nil t))

(defun ns::|textDidChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(textDidChange:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|calcDrawInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(calcDrawInfo:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setUpFieldEditorAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUpFieldEditorAttributes:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|fontDilationStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fontDilationStyle) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|touchBeganAt:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchBeganAt:inView:) (( ( :STRUCT ns::|CGPoint|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun ns::|touchMovedFrom:to:inView:| (thing _ to in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchMovedFrom:to:inView:) (( ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGPoint|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ to (objc-object-id in-view))))

(defun ns::|touchCancelledAt:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(touchCancelledAt:inView:) (( ( :STRUCT ns::|CGPoint|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun ns::|keyDown:inRect:ofView:| (thing _ in-rect of-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(keyDown:inRect:ofView:) (( :POINTER ( :STRUCT ns::|CGRect|) :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-rect (objc-object-id of-view)))) nil t))

(defun ns::|keyUp:inRect:ofView:| (thing _ in-rect of-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(keyUp:inRect:ofView:) (( :POINTER ( :STRUCT ns::|CGRect|) :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-rect (objc-object-id of-view)))) nil t))

(defun ns::|editWithFrame:inView:editor:delegate:event:| (thing _ in-view editor delegate event)
  (let ((message-lambda 
         (make-message-lambda @(editWithFrame:inView:editor:delegate:event:) (( ( :STRUCT ns::|CGRect|) :POINTER :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view) (objc-object-id editor) (objc-object-id delegate) (objc-object-id event))))

(defun ns::|selectWithFrame:inView:editor:delegate:start:length:| (thing _ in-view editor delegate start length)
  (let ((message-lambda 
         (make-message-lambda @(selectWithFrame:inView:editor:delegate:start:length:) (( ( :STRUCT ns::|CGRect|) :POINTER :POINTER :POINTER :LONG-LONG :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view) (objc-object-id editor) (objc-object-id delegate) start length)))

(defun ns::|fieldEditorForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(fieldEditorForView:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|resetCursorRect:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(resetCursorRect:inView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun ns::|menuForEvent:inRect:ofView:| (thing _ in-rect of-view)
  (let ((message-lambda 
         (make-message-lambda @(menuForEvent:inRect:ofView:) (( :POINTER ( :STRUCT ns::|CGRect|) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-rect (objc-object-id of-view))))

(defun ns::|setSendsActionOnEndEditing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSendsActionOnEndEditing:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|sendsActionOnEndEditing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(sendsActionOnEndEditing) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|wantsNotificationForMarkedText| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsNotificationForMarkedText) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|opaqueRectForTitleBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(opaqueRectForTitleBounds:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|draggingImageComponentsWithFrame:inView:| (thing _ in-view)
  (let ((message-lambda 
         (make-message-lambda @(draggingImageComponentsWithFrame:inView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-view))))

(defun ns::|canSmoothFontsInFrame:forLayerBackedView:| (thing _ for-layer-backed-view)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canSmoothFontsInFrame:forLayerBackedView:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-layer-backed-view)))) nil t))

(defun ns::|allowsAppearanceTextEffects| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsAppearanceTextEffects) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAllowsAppearanceTextEffects:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsAppearanceTextEffects:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setStyleEffectConfiguration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStyleEffectConfiguration:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setTitleTextContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleTextContainer:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setFieldEditorTextContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFieldEditorTextContainer:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))















































(defun ns::|accessibilityCurrentEditor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCurrentEditor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))









(defun ns::|accessibilitySelectedTextAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsSelectedTextAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSelectedTextAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySetSelectedTextAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetSelectedTextAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySelectedTextRangeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextRangeAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsSelectedTextRangeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSelectedTextRangeAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySetSelectedTextRangeAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetSelectedTextRangeAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityNumberOfCharactersAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityNumberOfCharactersAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsNumberOfCharactersAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsNumberOfCharactersAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityVisibleCharacterRangeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVisibleCharacterRangeAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsVisibleCharacterRangeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsVisibleCharacterRangeAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySetVisibleCharacterRangeAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetVisibleCharacterRangeAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityInsertionPointLineNumberAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityInsertionPointLineNumberAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsInsertionPointLineNumberAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsInsertionPointLineNumberAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityLineForIndexAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityLineForIndexAttributeForParameter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityRangeForLineAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForLineAttributeForParameter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityStringForRangeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityStringForRangeAttributeForParameter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityRangeForPositionAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForPositionAttributeForParameter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityRangeForIndexAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRangeForIndexAttributeForParameter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityBoundsForRangeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityBoundsForRangeAttributeForParameter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityRTFForRangeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityRTFForRangeAttributeForParameter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityAttributedStringForRangeAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAttributedStringForRangeAttributeForParameter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityStyleRangeForIndexAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityStyleRangeForIndexAttributeForParameter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|isEntryAcceptable:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEntryAcceptable:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))



(defun ns::|controlTint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(controlTint) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|entryType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(entryType) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setEntryType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEntryType:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


























(defun ns::|arrangedSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(arrangedSubviews) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


















(defun ns::|orientation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orientation) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|isVertical| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isVertical) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))










(defun ns::|isSpringLoaded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSpringLoaded) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setSpringLoaded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSpringLoaded:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))



(defun ns::|addArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addArrangedSubview:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|toggleSidebar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleSidebar:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun ns::|setAutosaveName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutosaveName:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|autosaveName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autosaveName) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setVertical:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVertical:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setPosition:ofDividerAtIndex:| (thing _ of-divider-at-index)
  (let ((message-lambda 
         (make-message-lambda @(setPosition:ofDividerAtIndex:) (( :DOUBLE :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ of-divider-at-index)))

(defun ns::|setArrangesAllSubviews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setArrangesAllSubviews:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setDividerStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDividerStyle:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|removeArrangedSubview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeArrangedSubview:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertArrangedSubview:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertArrangedSubview:atIndex:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|dividerThickness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dividerThickness) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|validateToolbarItem:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(validateToolbarItem:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|instantiateWithObjectInstantiator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(instantiateWithObjectInstantiator:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|dividerStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dividerStyle) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isPaneSplitter| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isPaneSplitter) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|dividerColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dividerColor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isArrangedViewCollapsed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isArrangedViewCollapsed:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|minPossiblePositionOfDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(minPossiblePositionOfDividerAtIndex:) (( :LONG-LONG)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|maxPossiblePositionOfDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(maxPossiblePositionOfDividerAtIndex:) (( :LONG-LONG)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|arrangesAllSubviews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(arrangesAllSubviews) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|drawDividerInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawDividerInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|holdingPriorityForSubviewAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(holdingPriorityForSubviewAtIndex:) (( :LONG-LONG)  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|adjustSubviews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(adjustSubviews) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setHoldingPriority:forSubviewAtIndex:| (thing _ for-subview-at-index)
  (let ((message-lambda 
         (make-message-lambda @(setHoldingPriority:forSubviewAtIndex:) (( :FLOAT :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-subview-at-index)))


(defun ns::|setIsPaneSplitter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsPaneSplitter:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setDividerColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDividerColor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isSubviewCollapsed:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSubviewCollapsed:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|positionOfDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(positionOfDividerAtIndex:) (( :LONG-LONG)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|cursorRectForDividerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cursorRectForDividerAtIndex:) (( :LONG-LONG)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|stayPutPriorityForSubviewAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stayPutPriorityForSubviewAtIndex:) (( :LONG-LONG)  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setStayPutPriority:forSubviewAtIndex:| (thing _ for-subview-at-index)
  (let ((message-lambda 
         (make-message-lambda @(setStayPutPriority:forSubviewAtIndex:) (( :FLOAT :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-subview-at-index)))

(defun ns::|accessibilityResetChildrenAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityResetChildrenAttribute) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|debugReasonForLayoutMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(debugReasonForLayoutMode) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilitySplittersAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySplittersAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsSplittersAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSplittersAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))






(defun ns::|setEdgeInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEdgeInsets:) (( ( :STRUCT ns::|NSEdgeInsets|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOrientation:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setDetachesHiddenViews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDetachesHiddenViews:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))





(defun ns::|spacing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(spacing) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSpacing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSpacing:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|removeView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|setDistribution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDistribution:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|insertView:atIndex:inGravity:| (thing _ at-index in-gravity)
  (let ((message-lambda 
         (make-message-lambda @(insertView:atIndex:inGravity:) (( :POINTER :UNSIGNED-LONG-LONG :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index in-gravity)))

(defun ns::|edgeInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(edgeInsets) (()  ( :STRUCT ns::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|views| (thing)
  (let ((message-lambda 
         (make-message-lambda @(views) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setCustomSpacing:afterView:| (thing _ after-view)
  (let ((message-lambda 
         (make-message-lambda @(setCustomSpacing:afterView:) (( :DOUBLE :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id after-view))))









(defun ns::|setHuggingPriority:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setHuggingPriority:forOrientation:) (( :FLOAT :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-orientation)))



(defun ns::|addView:inGravity:| (thing _ in-gravity)
  (let ((message-lambda 
         (make-message-lambda @(addView:inGravity:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-gravity)))

(defun ns::|setViews:inGravity:| (thing _ in-gravity)
  (let ((message-lambda 
         (make-message-lambda @(setViews:inGravity:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) in-gravity)))


(defun ns::|setVisibilityPriority:forView:| (thing _ for-view)
  (let ((message-lambda 
         (make-message-lambda @(setVisibilityPriority:forView:) (( :FLOAT :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-view))))

(defun ns::|setClippingResistancePriority:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setClippingResistancePriority:forOrientation:) (( :FLOAT :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-orientation)))

(defun ns::|viewsInGravity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewsInGravity:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|detachesHiddenViews| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(detachesHiddenViews) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|enumerateViewsIncludingDetached:usingBlock:| (thing _ using-block)
  (let ((message-lambda 
         (make-message-lambda @(enumerateViewsIncludingDetached:usingBlock:) (( :CHAR :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) (objc-object-id using-block))))

(defun ns::|secondaryAlignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(secondaryAlignment) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSecondaryAlignment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSecondaryAlignment:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setSecondaryAlignmentPriority:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSecondaryAlignmentPriority:) (( :FLOAT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|alignmentPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alignmentPriority) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAlignmentPriority:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAlignmentPriority:) (( :FLOAT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|distribution| (thing)
  (let ((message-lambda 
         (make-message-lambda @(distribution) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|customSpacingAfterView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(customSpacingAfterView:) (( :POINTER)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|detachedViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(detachedViews) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|leadingOrTopViewsManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(leadingOrTopViewsManager) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|centerViewsManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(centerViewsManager) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|trailingOrBottomViewsManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(trailingOrBottomViewsManager) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isViewDetached:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isViewDetached:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|attachedViews| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attachedViews) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|huggingPriorityForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(huggingPriorityForOrientation:) (( :LONG-LONG)  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|secondaryAlignmentPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(secondaryAlignmentPriority) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isBaselineRelativeArrangement| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isBaselineRelativeArrangement) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|clippingResistancePriorityForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(clippingResistancePriorityForOrientation:) (( :LONG-LONG)  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|visibilityPriorityForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(visibilityPriorityForView:) (( :POINTER)  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|perpendicularAlignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(perpendicularAlignment) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPerpendicularAlignment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPerpendicularAlignment:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|transverseAlignment| (thing)
  (let ((message-lambda 
         (make-message-lambda @(transverseAlignment) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTransverseAlignment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTransverseAlignment:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|transverseAlignmentPriority| (thing)
  (let ((message-lambda 
         (make-message-lambda @(transverseAlignmentPriority) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTransverseAlignmentPriority:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTransverseAlignmentPriority:) (( :FLOAT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|hasEqualSpacing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasEqualSpacing) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setHasEqualSpacing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasEqualSpacing:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|effectiveSpacingAfterView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(effectiveSpacingAfterView:) (( :POINTER)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|beginningViewsContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginningViewsContainer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|middleViewsContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(middleViewsContainer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|endViewsContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endViewsContainer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|currentContainers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentContainers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|currentSpacers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentSpacers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|topSpacer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topSpacer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bottomSpacer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bottomSpacer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|leftSpacer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(leftSpacer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|rightSpacer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rightSpacer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setArrangedSubviews:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setArrangedSubviews:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setBaselineRelativeArrangement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBaselineRelativeArrangement:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))








(defun ns::|minimumSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minimumSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))




































(defun ns::|accessibilityContentsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityContentsAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsContentsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsContentsAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|moveRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveRight:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveLeft:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))








(defun ns::|springLoadingEntered:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingEntered:) (( :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|springLoadingHighlightChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingHighlightChanged:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|springLoadingActivated:draggingInfo:| (thing _ dragging-info)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingActivated:draggingInfo:) (( :CHAR :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) (objc-object-id dragging-info))))





(defun ns::|moveDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveDown:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveUp:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun ns::|springLoadingUpdated:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingUpdated:) (( :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|springLoadingExited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(springLoadingExited:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|contentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|mouseTracker:shouldStartTrackingWithEvent:| (thing _ should-start-tracking-with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouseTracker:shouldStartTrackingWithEvent:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-start-tracking-with-event)))) nil t))

(defun ns::|mouseTracker:shouldContinueTrackingWithEvent:| (thing _ should-continue-tracking-with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouseTracker:shouldContinueTrackingWithEvent:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-continue-tracking-with-event)))) nil t))

(defun ns::|mouseTracker:didStopTrackingWithEvent:| (thing _ did-stop-tracking-with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(mouseTracker:didStopTrackingWithEvent:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id did-stop-tracking-with-event)))) nil t))

(defun ns::|removeTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeTabViewItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|tabViewItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabViewItems) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTabViewMinimumSizeConstraint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabViewMinimumSizeConstraint:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectedTabViewItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedTabViewItem) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|addTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addTabViewItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectTabViewItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|tabViewType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabViewType) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|selectTabViewItemAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectTabViewItemAtIndex:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|indexOfTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfTabViewItem:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|numberOfTabViewItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(numberOfTabViewItems) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|tabViewItemAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(tabViewItemAtIndex:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|indexOfTabViewItemWithIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfTabViewItemWithIdentifier:) (( :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|tabViewMinimumSizeConstraint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabViewMinimumSizeConstraint) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|tabViewItemAtPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(tabViewItemAtPoint:) (( ( :STRUCT ns::|CGPoint|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|allowsTruncatedLabels| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsTruncatedLabels) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setTabViewItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabViewItems:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|tabPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabPosition) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|tabViewBorderType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabViewBorderType) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAllowsTruncatedLabels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsTruncatedLabels:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setTabViewType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabViewType:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setTabPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabPosition:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setTabViewBorderType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabViewBorderType:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|insertTabViewItem:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertTabViewItem:atIndex:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|takeSelectedTabViewItemFromSender:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(takeSelectedTabViewItemFromSender:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectTabViewItemWithIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectTabViewItemWithIdentifier:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectFirstTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectFirstTabViewItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectLastTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectLastTabViewItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectNextTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectNextTabViewItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectPreviousTabViewItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectPreviousTabViewItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityTabsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTabsAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsTabsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTabsAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))







(defun ns::|close| (thing)
  (let ((message-lambda 
         (make-message-lambda @(close) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|document| (thing)
  (let ((message-lambda 
         (make-message-lambda @(document) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun ns::|showWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isWindowLoaded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isWindowLoaded) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setContentViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentViewController:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithWindow:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|prepareForSegue:sender:| (thing _ sender)
  (let ((message-lambda 
         (make-message-lambda @(prepareForSegue:sender:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id sender))))

(defun ns::|shouldPerformSegueWithIdentifier:sender:| (thing _ sender)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldPerformSegueWithIdentifier:sender:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id sender)))) nil t))

(defun ns::|setStoryboard:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStoryboard:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|contentViewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentViewController) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|presentViewController:asPopoverRelativeToRect:ofView:preferredEdge:behavior:| (thing _ as-popover-relative-to-rect of-view preferred-edge behavior)
  (let ((message-lambda 
         (make-message-lambda @(presentViewController:asPopoverRelativeToRect:ofView:preferredEdge:behavior:) (( :POINTER ( :STRUCT ns::|CGRect|) :POINTER :UNSIGNED-LONG-LONG :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) as-popover-relative-to-rect (objc-object-id of-view) preferred-edge behavior)))


(defun ns::|presentingViewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(presentingViewController) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|performSegueWithIdentifier:sender:| (thing _ sender)
  (let ((message-lambda 
         (make-message-lambda @(performSegueWithIdentifier:sender:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id sender))))

(defun ns::|dismissController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dismissController:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|synchronizeWindowTitleWithDocumentName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(synchronizeWindowTitleWithDocumentName) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDocumentEdited:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDocumentEdited:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|windowNibName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowNibName) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithWindowNibName:owner:| (thing _ owner)
  (let ((message-lambda 
         (make-message-lambda @(initWithWindowNibName:owner:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id owner))))

(defun ns::|setDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDocument:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|shouldCloseDocument| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldCloseDocument) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|initWithWindowNibName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithWindowNibName:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|windowDidLoad| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowDidLoad) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|shouldCascadeWindows| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldCascadeWindows) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setShouldCascadeWindows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShouldCascadeWindows:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setWindowFrameAutosaveName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindowFrameAutosaveName:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setShouldCloseDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShouldCloseDocument:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|windowFrameAutosaveName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowFrameAutosaveName) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|windowNibPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowNibPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|loadWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(loadWindow) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|windowTitleForDocumentDisplayName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(windowTitleForDocumentDisplayName:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|windowWillLoad| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowWillLoad) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithWindowNibPath:owner:| (thing _ owner)
  (let ((message-lambda 
         (make-message-lambda @(initWithWindowNibPath:owner:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id owner))))












(defun ns::|beginRequestWithExtensionContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(beginRequestWithExtensionContext:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|preferredMaximumSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredMaximumSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|preferredMinimumSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredMinimumSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPreferredContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreferredContentSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithNibName:bundle:| (thing _ bundle)
  (let ((message-lambda 
         (make-message-lambda @(initWithNibName:bundle:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id bundle))))


(defun ns::|parentViewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(parentViewController) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|preferredScreenOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredScreenOrigin) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|maximumSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|extensionContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(extensionContext) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|sourceItemView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sourceItemView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSourceItemView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSourceItemView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setPreferredScreenOrigin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreferredScreenOrigin:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|viewDidLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidLayout) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|commitEditingWithDelegate:didCommitSelector:contextInfo:| (thing _ did-commit-selector context-info)
  (let ((message-lambda 
         (make-message-lambda @(commitEditingWithDelegate:didCommitSelector:contextInfo:) (( :POINTER :POINTER ( :POINTER :VOID))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id did-commit-selector) (objc-object-id context-info))))

(defun ns::|commitEditing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(commitEditing) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|loadView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(loadView) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|discardEditing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(discardEditing) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|commitEditingAndReturnError:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(commitEditingAndReturnError:) (( ( :POINTER :POINTER))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))


(defun ns::|nibName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nibName) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nibBundle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nibBundle) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun ns::|presentViewControllerAsModalWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(presentViewControllerAsModalWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|presentWindowControllerAsModalWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(presentWindowControllerAsModalWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|presentViewControllerAsSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(presentViewControllerAsSheet:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|presentWindowControllerAsSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(presentWindowControllerAsSheet:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|addChildViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addChildViewController:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|didMoveToParentViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(didMoveToParentViewController:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isViewLoaded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isViewLoaded) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|childViewControllers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(childViewControllers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setChildViewControllers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setChildViewControllers:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|presentedViewControllers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(presentedViewControllers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|constrainServiceScreenFrameBlock| (thing)
  (let ((message-lambda 
         (make-message-lambda @(constrainServiceScreenFrameBlock) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setConstrainServiceScreenFrameBlock:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setConstrainServiceScreenFrameBlock:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|updateViewConstraints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateViewConstraints) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewWillLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewWillLayout) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewDidLoad| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidLoad) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|presentedWindowControllers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(presentedWindowControllers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|definesPresentationContext| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(definesPresentationContext) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|dismissViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dismissViewController:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|presentViewController:animator:| (thing _ animator)
  (let ((message-lambda 
         (make-message-lambda @(presentViewController:animator:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id animator))))

(defun ns::|canPerformUnwindSegueAction:fromViewController:withSender:| (thing _ from-view-controller with-sender)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canPerformUnwindSegueAction:fromViewController:withSender:) (( :POINTER :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id from-view-controller) (objc-object-id with-sender)))) nil t))

(defun ns::|removeChildViewControllerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeChildViewControllerAtIndex:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|insertChildViewController:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertChildViewController:atIndex:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|moveChildViewControllerAtIndex:toIndex:| (thing _ to-index)
  (let ((message-lambda 
         (make-message-lambda @(moveChildViewControllerAtIndex:toIndex:) (( :LONG-LONG :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ to-index)))

(defun ns::|removeFromParentViewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeFromParentViewController) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|willMoveToParentViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(willMoveToParentViewController:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|showInParentViewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(showInParentViewController) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|showChildViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showChildViewController:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|preferredContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredContentSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|preferredContentSizeDidChangeForViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(preferredContentSizeDidChangeForViewController:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|childViewControllerDidChangePreferredContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(childViewControllerDidChangePreferredContentSize:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|presentedViewControllerDidChangePreferredContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(presentedViewControllerDidChangePreferredContentSize:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|beginAppearanceTransition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(beginAppearanceTransition:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|endAppearanceTransition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(endAppearanceTransition) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewWillAppear| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewWillAppear) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewWillDisappear| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewWillDisappear) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewDidAppear| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidAppear) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewDidDisappear| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewDidDisappear) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|objectDidBeginEditing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(objectDidBeginEditing:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|objectDidEndEditing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(objectDidEndEditing:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|transitionFromViewController:toViewController:options:completionHandler:| (thing _ to-view-controller options completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(transitionFromViewController:toViewController:options:completionHandler:) (( :POINTER :POINTER :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-view-controller) options (objc-object-id completion-handler))))

(defun ns::|viewControllerForUnwindSegueAction:fromViewController:withSender:| (thing _ from-view-controller with-sender)
  (let ((message-lambda 
         (make-message-lambda @(viewControllerForUnwindSegueAction:fromViewController:withSender:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id from-view-controller) (objc-object-id with-sender))))

(defun ns::|segueForUnwindingToViewController:fromViewController:identifier:| (thing _ from-view-controller identifier)
  (let ((message-lambda 
         (make-message-lambda @(segueForUnwindingToViewController:fromViewController:identifier:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id from-view-controller) (objc-object-id identifier))))

(defun ns::|viewWillTransitionToSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewWillTransitionToSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|dismissWindowController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dismissWindowController:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|applicationExtensionSession| (thing)
  (let ((message-lambda 
         (make-message-lambda @(applicationExtensionSession) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))
















(defun ns::|setBorderType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBorderType:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setHasVerticalScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasVerticalScroller:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setVerticalScrollElasticity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalScrollElasticity:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setHasHorizontalScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasHorizontalScroller:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|horizontalScroller| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalScroller) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setHorizontalScrollElasticity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalScrollElasticity:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAutomaticallyAdjustsContentInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticallyAdjustsContentInsets:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setContentInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentInsets:) (( ( :STRUCT ns::|NSEdgeInsets|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setHasHorizontalMoreContentIndicators:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasHorizontalMoreContentIndicators:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setDocumentView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDocumentView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun ns::|hasHorizontalMoreContentIndicators| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasHorizontalMoreContentIndicators) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun ns::|contentView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|documentView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(documentView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|gestureRecognizer:shouldReceiveTouch:| (thing _ should-receive-touch)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(gestureRecognizer:shouldReceiveTouch:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-receive-touch)))) nil t))





(defun ns::|setContentView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))













(defun ns::|setHasTopShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasTopShadow:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setHasBottomShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasBottomShadow:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun ns::|reflectScrolledClipView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(reflectScrolledClipView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|verticalScroller| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalScroller) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|borderType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(borderType) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|hasHorizontalScroller| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasHorizontalScroller) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|tile| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tile) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAutohidesScrollers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutohidesScrollers:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|autohidesScrollers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autohidesScrollers) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|documentVisibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(documentVisibleRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAutoforwardsScrollWheelEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoforwardsScrollWheelEvents:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|contentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setHorizontalLineScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalLineScroll:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setScrollerInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollerInsets:) (( ( :STRUCT ns::|NSEdgeInsets|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|scrollerStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerStyle) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentInsets) (()  ( :STRUCT ns::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|horizontalLineScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalLineScroll) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|automaticallyAdjustsContentInsets| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(automaticallyAdjustsContentInsets) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))




(defun ns::|setScrollerStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollerStyle:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|scrollerImpPair| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImpPair) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setLineScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineScroll:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|hasVerticalScroller| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasVerticalScroller) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityHorizontalScrollBarAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityHorizontalScrollBarAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsHorizontalScrollBarAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsHorizontalScrollBarAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|scrollClipView:toPoint:| (thing _ to-point)
  (let ((message-lambda 
         (make-message-lambda @(scrollClipView:toPoint:) (( :POINTER ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) to-point)))


(defun ns::|verticalLineScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalLineScroll) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|flashScrollers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flashScrollers) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDocumentCursor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDocumentCursor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|drawsContentShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsContentShadow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setDrawsContentShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawsContentShadow:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|contentInset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentInset) (()  ( :STRUCT ns::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setContentInset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentInset:) (( ( :STRUCT ns::|NSEdgeInsets|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|documentCursor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(documentCursor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|setVerticalScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalScroller:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pageDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pageDown:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pageUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pageUp:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|magnifyWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(magnifyWithEvent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setMagnification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMagnification:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|decelerationRate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(decelerationRate) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|findBarView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(findBarView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setHorizontalScroller:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalScroller:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityScrollToShowDescendantAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityScrollToShowDescendantAttributeForParameter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun ns::|smartMagnifyWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(smartMagnifyWithEvent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|beginGestureWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(beginGestureWithEvent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|endGestureWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endGestureWithEvent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|rulersVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulersVisible) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setRulersVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRulersVisible:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|horizontalRulerView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalRulerView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|verticalRulerView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalRulerView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityVerticalScrollBarAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityVerticalScrollBarAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|hasHorizontalRuler| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasHorizontalRuler) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|hasVerticalRuler| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasVerticalRuler) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|horizontalPageScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalPageScroll) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|verticalPageScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalPageScroll) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsVerticalScrollBarAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsVerticalScrollBarAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|usesPredominantAxisScrolling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesPredominantAxisScrolling) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|addFloatingSubview:forAxis:| (thing _ for-axis)
  (let ((message-lambda 
         (make-message-lambda @(addFloatingSubview:forAxis:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) for-axis)))

(defun ns::|setHasHorizontalRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasHorizontalRuler:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setHasVerticalRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasVerticalRuler:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setDecelerationRate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDecelerationRate:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|horizontalScrollDecelerationFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalScrollDecelerationFactor) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setHorizontalScrollDecelerationFactor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalScrollDecelerationFactor:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|verticalScrollDecelerationFactor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalScrollDecelerationFactor) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setVerticalScrollDecelerationFactor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalScrollDecelerationFactor:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|findBarPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(findBarPosition) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isFindBarVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFindBarVisible) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|scrollerInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerInsets) (()  ( :STRUCT ns::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|scrollerKnobStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerKnobStyle) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setScrollerKnobStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollerKnobStyle:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setVerticalLineScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalLineScroll:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setHorizontalPageScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalPageScroll:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setVerticalPageScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalPageScroll:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|verticalScrollElasticity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(verticalScrollElasticity) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|horizontalScrollElasticity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(horizontalScrollElasticity) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|allowsMagnification| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsMagnification) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|maxMagnification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maxMagnification) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|minMagnification| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minMagnification) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|separatorOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(separatorOffset) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentAreaRectForScrollerImpPair:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentAreaRectForScrollerImpPair:) (( :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|inLiveResizeForScrollerImpPair:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(inLiveResizeForScrollerImpPair:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|mouseLocationInContentAreaForScrollerImpPair:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseLocationInContentAreaForScrollerImpPair:) (( :POINTER)  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|scrollerImpPair:convertContentPoint:toScrollerImp:| (thing _ convert-content-point to-scroller-imp)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImpPair:convertContentPoint:toScrollerImp:) (( :POINTER ( :STRUCT ns::|CGPoint|) :POINTER)  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) convert-content-point (objc-object-id to-scroller-imp))))

(defun ns::|scrollerImpPair:updateScrollerStyleForNewRecommendedScrollerStyle:| (thing _ update-scroller-style-for-new-recommended-scroller-style)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImpPair:updateScrollerStyleForNewRecommendedScrollerStyle:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) update-scroller-style-for-new-recommended-scroller-style)))

(defun ns::|scrollerImpPair:isContentPointVisible:| (thing _ is-content-point-visible)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scrollerImpPair:isContentPointVisible:) (( :POINTER ( :STRUCT ns::|CGPoint|))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) is-content-point-visible))) nil t))

(defun ns::|findBarViewDidChangeHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(findBarViewDidChangeHeight) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFindBarView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFindBarView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setFindBarVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFindBarVisible:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|computedScrollViewFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computedScrollViewFrame) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|computedHasScrolledContentsUnderTitlebar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computedHasScrolledContentsUnderTitlebar) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|computed_distancesScrolledFromDocumentEdges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(computed_distancesScrolledFromDocumentEdges) (()  ( :STRUCT ns::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setScrollsDynamically:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollsDynamically:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|scrollsDynamically| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(scrollsDynamically) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|hasTopShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasTopShadow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setTopShadowTopInset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTopShadowTopInset:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|topShadowTopInset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topShadowTopInset) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTopShadowMinimumRequiredContentYOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTopShadowMinimumRequiredContentYOffset:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|topShadowMinimumRequiredContentYOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topShadowMinimumRequiredContentYOffset) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|hasBottomShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasBottomShadow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|lineScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineScroll) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPageScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPageScroll:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|pageScroll| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pageScroll) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setUsesPredominantAxisScrolling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesPredominantAxisScrolling:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setFindBarPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFindBarPosition:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAllowsMagnification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsMagnification:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setMaxMagnification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaxMagnification:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setMinMagnification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinMagnification:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|magnifyToFitRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(magnifyToFitRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setMagnification:centeredAtPoint:| (thing _ centered-at-point)
  (let ((message-lambda 
         (make-message-lambda @(setMagnification:centeredAtPoint:) (( :DOUBLE ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ centered-at-point)))

(defun ns::|addFloatingHeaderView:forAxis:| (thing _ for-axis)
  (let ((message-lambda 
         (make-message-lambda @(addFloatingHeaderView:forAxis:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) for-axis)))

(defun ns::|removeFloatingHeaderView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeFloatingHeaderView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|autoforwardsScrollWheelEvents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoforwardsScrollWheelEvents) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|automaticallyAdjustsContentViewInsets| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(automaticallyAdjustsContentViewInsets) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAutomaticallyAdjustsContentViewInsets:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticallyAdjustsContentViewInsets:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|computed_contentExtendsPastContentInsets| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(computed_contentExtendsPastContentInsets) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setHorizontalRulerView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontalRulerView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setVerticalRulerView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticalRulerView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|rulerStateDescription| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rulerStateDescription) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))











































(defun ns::|accessibilityOrientationAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityOrientationAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsOrientationAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsOrientationAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|setArrowsPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setArrowsPosition:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|checkSpaceForParts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(checkSpaceForParts) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|overlayScrollerKnobAlpha| (thing)
  (let ((message-lambda 
         (make-message-lambda @(overlayScrollerKnobAlpha) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|rectForPart:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rectForPart:) (( :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|highlight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(highlight:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))



(defun ns::|testPart:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(testPart:) (( ( :STRUCT ns::|CGPoint|))  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setFloatValue:knobProportion:| (thing _ knob-proportion)
  (let ((message-lambda 
         (make-message-lambda @(setFloatValue:knobProportion:) (( :FLOAT :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ knob-proportion)))

(defun ns::|setKnobStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKnobStyle:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|usableParts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(usableParts) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|drawArrow:highlight:| (thing _ highlight)
  (let ((message-lambda 
         (make-message-lambda @(drawArrow:highlight:) (( :UNSIGNED-LONG-LONG :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if highlight 1 0))))

(defun ns::|drawKnobSlotInRect:highlight:| (thing _ highlight)
  (let ((message-lambda 
         (make-message-lambda @(drawKnobSlotInRect:highlight:) (( ( :STRUCT ns::|CGRect|) :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if highlight 1 0))))

(defun ns::|drawArrow:highlightPart:| (thing _ highlight-part)
  (let ((message-lambda 
         (make-message-lambda @(drawArrow:highlightPart:) (( :UNSIGNED-LONG-LONG :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ highlight-part)))

(defun ns::|drawKnob| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawKnob) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|overlayScrollerTrackAlpha| (thing)
  (let ((message-lambda 
         (make-message-lambda @(overlayScrollerTrackAlpha) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|trackKnob:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(trackKnob:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|trackPagingArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(trackPagingArea:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|trackScrollButtons:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(trackScrollButtons:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setKnobProportion:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKnobProportion:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|knobProportion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(knobProportion) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setUiStateTransitionProgress:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUiStateTransitionProgress:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setExpansionTransitionProgress:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setExpansionTransitionProgress:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setOverlayScrollerKnobAlpha:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOverlayScrollerKnobAlpha:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setOverlayScrollerTrackAlpha:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOverlayScrollerTrackAlpha:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setPresentationValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPresentationValue:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setUsePresentationValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsePresentationValue:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|scrollerImp:animateKnobAlphaTo:duration:| (thing _ animate-knob-alpha-to duration)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:animateKnobAlphaTo:duration:) (( :POINTER :DOUBLE :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) animate-knob-alpha-to duration)))

(defun ns::|scrollerImp:animateTrackAlphaTo:duration:| (thing _ animate-track-alpha-to duration)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:animateTrackAlphaTo:duration:) (( :POINTER :DOUBLE :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) animate-track-alpha-to duration)))

(defun ns::|scrollerImp:overlayScrollerStateChangedTo:| (thing _ overlay-scroller-state-changed-to)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:overlayScrollerStateChangedTo:) (( :POINTER :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) overlay-scroller-state-changed-to)))

(defun ns::|scrollerImp:animateUIStateTransitionWithDuration:| (thing _ animate-u-i-state-transition-with-duration)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:animateUIStateTransitionWithDuration:) (( :POINTER :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) animate-u-i-state-transition-with-duration)))

(defun ns::|scrollerImp:animateExpansionTransitionWithDuration:| (thing _ animate-expansion-transition-with-duration)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp:animateExpansionTransitionWithDuration:) (( :POINTER :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) animate-expansion-transition-with-duration)))

(defun ns::|mouseLocationInScrollerForScrollerImp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseLocationInScrollerForScrollerImp:) (( :POINTER)  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|shouldUseLayerPerPartForScrollerImp:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldUseLayerPerPartForScrollerImp:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|knobStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(knobStyle) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|drawParts| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawParts) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|arrowsPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(arrowsPosition) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|hitPart| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hitPart) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|layer:shouldInheritContentsScale:fromWindow:| (thing _ should-inherit-contents-scale from-window)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(layer:shouldInheritContentsScale:fromWindow:) (( :POINTER :DOUBLE :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) should-inherit-contents-scale (objc-object-id from-window)))) nil t))

(defun ns::|scrollerImp| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollerImp) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))






(defun ns::|screen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(screen) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))




















(defun ns::|setContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|scrollToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollToPoint:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))




(defun ns::|setCopiesOnScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCopiesOnScroll:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))




(defun ns::|documentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(documentRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))







(defun ns::|viewFrameChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewFrameChanged:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|viewBoundsChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewBoundsChanged:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|automaticallyCalculatesContentSize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(automaticallyCalculatesContentSize) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|constrainBoundsRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constrainBoundsRect:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|constrainScrollPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(constrainScrollPoint:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))







(defun ns::|scrollVelocity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollVelocity) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setScrollVelocity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollVelocity:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))



(defun ns::|setAutomaticallyCalculatesContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticallyCalculatesContentSize:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))





(defun ns::|copiesOnScroll| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(copiesOnScroll) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))








(defun ns::|setAccessoryView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAccessoryView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))







(defun ns::|scrollView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scrollView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))













(defun ns::|accessoryView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessoryView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))







(defun ns::|accessibilityMinValueAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinValueAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityMaxValueAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMaxValueAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun ns::|clientView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clientView) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|baselineLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(baselineLocation) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|measurementUnits| (thing)
  (let ((message-lambda 
         (make-message-lambda @(measurementUnits) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|displaysTooltips| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(displaysTooltips) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|addMarker:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addMarker:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|removeMarker:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeMarker:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithScrollView:orientation:| (thing _ orientation)
  (let ((message-lambda 
         (make-message-lambda @(initWithScrollView:orientation:) (( :POINTER :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) orientation)))

(defun ns::|invalidateHashMarks| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateHashMarks) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setMarkers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMarkers:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setReservedThicknessForMarkers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setReservedThicknessForMarkers:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setReservedThicknessForAccessoryView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setReservedThicknessForAccessoryView:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|labelStringForValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(labelStringForValue:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setLabelString:forValue:| (thing _ for-value)
  (let ((message-lambda 
         (make-message-lambda @(setLabelString:forValue:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-value))))

(defun ns::|drawSeparatorInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawSeparatorInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|drawHashMarksAndLabelsInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawHashMarksAndLabelsInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|drawRulerLines| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawRulerLines) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|drawMarkersInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawMarkersInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setScrollView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setScrollView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|requiredThickness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(requiredThickness) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setRuleThickness:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRuleThickness:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|ruleThickness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ruleThickness) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|reservedThicknessForMarkers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(reservedThicknessForMarkers) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|reservedThicknessForAccessoryView| (thing)
  (let ((message-lambda 
         (make-message-lambda @(reservedThicknessForAccessoryView) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setMeasurementUnits:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMeasurementUnits:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setOriginOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOriginOffset:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|originOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(originOffset) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setClientView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setClientView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|markers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|trackMarker:withMouseEvent:| (thing _ with-mouse-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(trackMarker:withMouseEvent:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-mouse-event)))) nil t))

(defun ns::|moveRulerlineFromLocation:toLocation:| (thing _ to-location)
  (let ((message-lambda 
         (make-message-lambda @(moveRulerlineFromLocation:toLocation:) (( :DOUBLE :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ to-location)))

(defun ns::|setDisplaysTooltips:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDisplaysTooltips:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun ns::|accessibilityUnitsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUnitsAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsUnitsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsUnitsAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityUnitDescriptionAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityUnitDescriptionAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsUnitDescriptionAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsUnitDescriptionAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityMarkerUIElementsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMarkerUIElementsAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsMarkerUIElementsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMarkerUIElementsAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))









(defun ns::|isRemovable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRemovable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setMovable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMovable:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isMovable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMovable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun ns::|initWithRulerView:markerLocation:image:imageOrigin:| (thing _ marker-location image image-origin)
  (let ((message-lambda 
         (make-message-lambda @(initWithRulerView:markerLocation:image:imageOrigin:) (( :POINTER :DOUBLE :POINTER ( :STRUCT ns::|CGPoint|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) marker-location (objc-object-id image) image-origin)))

(defun ns::|isDragging| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDragging) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|imageRectInRuler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(imageRectInRuler) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|ruler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(ruler) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setMarkerLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMarkerLocation:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|markerLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markerLocation) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setImageOrigin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setImageOrigin:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|imageOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(imageOrigin) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setRemovable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRemovable:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|thicknessRequiredInRuler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(thicknessRequiredInRuler) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|trackMouse:adding:| (thing _ adding)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(trackMouse:adding:) (( :POINTER :CHAR)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if adding 1 0)))) nil t))













(defun ns::|defaultParagraphStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(defaultParagraphStyle) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))







(defun ns::|contentType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentType) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setContentType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentType:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))






(defun ns::|minSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|maxSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maxSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))










(defun ns::|accessibilityFocusRingBoundsForBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusRingBoundsForBounds:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))





(defun ns::|insertText:replacementRange:| (thing _ replacement-range)
  (let ((message-lambda 
         (make-message-lambda @(insertText:replacementRange:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) replacement-range)))




















(defun ns::|setTouchBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTouchBar:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|startSpeaking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(startSpeaking:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun ns::|textColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textColor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))















(defun ns::|copy:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copy:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|layoutManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutManager) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))








(defun ns::|setTextColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextColor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))









(defun ns::|selectAll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectAll:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|allowsMultipleSelection| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsMultipleSelection) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun ns::|draggingSourceOperationMaskForLocal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingSourceOperationMaskForLocal:) (( :CHAR)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|draggedImage:endedAt:operation:| (thing _ ended-at operation)
  (let ((message-lambda 
         (make-message-lambda @(draggedImage:endedAt:operation:) (( :POINTER ( :STRUCT ns::|CGPoint|) :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) ended-at operation)))










(defun ns::|becomeMainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(becomeMainWindow) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|cut:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cut:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|paste:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(paste:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|undoManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(undoManager) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|hasMarkedText| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasMarkedText) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|textStorage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textStorage) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|shouldChangeTextInRange:replacementString:| (thing _ replacement-string)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldChangeTextInRange:replacementString:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id replacement-string)))) nil t))

(defun ns::|typingAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(typingAttributes) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|didChangeText| (thing)
  (let ((message-lambda 
         (make-message-lambda @(didChangeText) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSelectedRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedRange:) (( ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|textLayoutManager| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textLayoutManager) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isFieldEditor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFieldEditor) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAllowsCharacterPickerTouchBarItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsCharacterPickerTouchBarItem:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setAutomaticTextCompletionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticTextCompletionEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setTextContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextContainer:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|textContainer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContainer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|selectedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedRange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))






(defun ns::|setSelectedTextAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedTextAttributes:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setUsesFontPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesFontPanel:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setWantsNotificationForMarkedText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsNotificationForMarkedText:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setUsesRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesRuler:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setMinSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setMaxSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaxSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setHorizontallyResizable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHorizontallyResizable:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setVerticallyResizable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setVerticallyResizable:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setRichText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRichText:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setTypingAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTypingAttributes:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))
























(defun ns::|drawBackgroundOverhangInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawBackgroundOverhangInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))




(defun ns::|isCompatibleWithResponsiveScrolling| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isCompatibleWithResponsiveScrolling) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|changeColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeColor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertNewline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertNewline:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|complete:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(complete:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|makeTouchBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(makeTouchBar) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|insertTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertTab:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertBacktab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertBacktab:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|setPlaceholderString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPlaceholderString:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|textCheckingController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textCheckingController) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|spellCheckerDocumentTag| (thing)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDocumentTag) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|textCheckingControllerUsesStringAnnotations| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(textCheckingControllerUsesStringAnnotations) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isAutomaticSpellingCorrectionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticSpellingCorrectionEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAutomaticSpellingCorrectionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticSpellingCorrectionEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isContinuousSpellCheckingEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isContinuousSpellCheckingEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setContinuousSpellCheckingEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContinuousSpellCheckingEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isGrammarCheckingEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGrammarCheckingEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setGrammarCheckingEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGrammarCheckingEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isAutomaticQuoteSubstitutionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticQuoteSubstitutionEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAutomaticQuoteSubstitutionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticQuoteSubstitutionEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isAutomaticDashSubstitutionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticDashSubstitutionEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAutomaticDashSubstitutionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticDashSubstitutionEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|smartInsertDeleteEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(smartInsertDeleteEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setSmartInsertDeleteEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSmartInsertDeleteEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isAutomaticTextReplacementEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticTextReplacementEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAutomaticTextReplacementEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticTextReplacementEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isAutomaticDataDetectionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticDataDetectionEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAutomaticDataDetectionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticDataDetectionEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isAutomaticLinkDetectionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticLinkDetectionEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAutomaticLinkDetectionEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticLinkDetectionEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isAutomaticTextCompletionEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticTextCompletionEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setSpellingState:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setSpellingState:range:) (( :LONG-LONG ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ range)))

(defun ns::|selectedRanges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedRanges) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSelectedRange:affinity:stillSelecting:| (thing _ affinity still-selecting)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedRange:affinity:stillSelecting:) (( ( :STRUCT ns::|_NSRange|) :UNSIGNED-LONG-LONG :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ affinity (if still-selecting 1 0))))

(defun ns::|scrollRangeToVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollRangeToVisible:) (( ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|textContainerOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContainerOrigin) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|autocorrectionType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autocorrectionType) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAutocorrectionType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutocorrectionType:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|spellCheckingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckingType) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSpellCheckingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSpellCheckingType:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|grammarCheckingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(grammarCheckingType) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setGrammarCheckingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGrammarCheckingType:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|smartQuotesType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(smartQuotesType) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSmartQuotesType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSmartQuotesType:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|smartDashesType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(smartDashesType) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSmartDashesType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSmartDashesType:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|smartInsertDeleteType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(smartInsertDeleteType) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSmartInsertDeleteType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSmartInsertDeleteType:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|textReplacementType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textReplacementType) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTextReplacementType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextReplacementType:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|dataDetectionType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(dataDetectionType) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDataDetectionType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDataDetectionType:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|linkDetectionType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(linkDetectionType) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setLinkDetectionType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLinkDetectionType:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|textCompletionType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textCompletionType) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTextCompletionType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextCompletionType:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|annotatedSubstringForProposedRange:actualRange:| (thing _ actual-range)
  (let ((message-lambda 
         (make-message-lambda @(annotatedSubstringForProposedRange:actualRange:) (( ( :STRUCT ns::|_NSRange|) ( :POINTER ( :STRUCT ns::|_NSRange|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id actual-range))))

(defun ns::|setAnnotations:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setAnnotations:range:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun ns::|addAnnotations:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(addAnnotations:range:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun ns::|removeAnnotation:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(removeAnnotation:range:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun ns::|replaceCharactersInRange:withAnnotatedString:| (thing _ with-annotated-string)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withAnnotatedString:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-annotated-string))))

(defun ns::|selectAndShowRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectAndShowRange:) (( ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|viewForRange:firstRect:actualRange:| (thing _ first-rect actual-range)
  (let ((message-lambda 
         (make-message-lambda @(viewForRange:firstRect:actualRange:) (( ( :STRUCT ns::|_NSRange|) ( :POINTER ( :STRUCT ns::|CGRect|)) ( :POINTER ( :STRUCT ns::|_NSRange|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id first-rect) (objc-object-id actual-range))))

(defun ns::|setMarkedText:selectedRange:replacementRange:| (thing _ selected-range replacement-range)
  (let ((message-lambda 
         (make-message-lambda @(setMarkedText:selectedRange:replacementRange:) (( :POINTER ( :STRUCT ns::|_NSRange|) ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) selected-range replacement-range)))

(defun ns::|unmarkText| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unmarkText) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|markedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markedRange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|attributedSubstringForProposedRange:actualRange:| (thing _ actual-range)
  (let ((message-lambda 
         (make-message-lambda @(attributedSubstringForProposedRange:actualRange:) (( ( :STRUCT ns::|_NSRange|) ( :POINTER ( :STRUCT ns::|_NSRange|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id actual-range))))

(defun ns::|validAttributesForMarkedText| (thing)
  (let ((message-lambda 
         (make-message-lambda @(validAttributesForMarkedText) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|firstRectForCharacterRange:actualRange:| (thing _ actual-range)
  (let ((message-lambda 
         (make-message-lambda @(firstRectForCharacterRange:actualRange:) (( ( :STRUCT ns::|_NSRange|) ( :POINTER ( :STRUCT ns::|_NSRange|)))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id actual-range))))

(defun ns::|characterIndexForPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(characterIndexForPoint:) (( ( :STRUCT ns::|CGPoint|))  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|attributedString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributedString) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|fractionOfDistanceThroughGlyphForPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(fractionOfDistanceThroughGlyphForPoint:) (( ( :STRUCT ns::|CGPoint|))  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|baselineDeltaForCharacterAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(baselineDeltaForCharacterAtIndex:) (( :UNSIGNED-LONG-LONG)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|windowLevel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowLevel) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|drawsVerticallyForCharacterAtIndex:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsVerticallyForCharacterAtIndex:) (( :UNSIGNED-LONG-LONG)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))



(defun ns::|rightMouseUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rightMouseUp:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|sharingServicePicker:delegateForSharingService:| (thing _ delegate-for-sharing-service)
  (let ((message-lambda 
         (make-message-lambda @(sharingServicePicker:delegateForSharingService:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id delegate-for-sharing-service))))

(defun ns::|flagsChanged:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(flagsChanged:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|sharingService:sourceWindowForShareItems:sharingContentScope:| (thing _ source-window-for-share-items sharing-content-scope)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:sourceWindowForShareItems:sharingContentScope:) (( :POINTER :POINTER ( :POINTER :LONG-LONG))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id source-window-for-share-items) (objc-object-id sharing-content-scope))))

(defun ns::|sharingService:sourceFrameOnScreenForShareItem:| (thing _ source-frame-on-screen-for-share-item)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:sourceFrameOnScreenForShareItem:) (( :POINTER :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id source-frame-on-screen-for-share-item))))

(defun ns::|sharingService:transitionImageForShareItem:contentRect:| (thing _ transition-image-for-share-item content-rect)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:transitionImageForShareItem:contentRect:) (( :POINTER :POINTER ( :POINTER ( :STRUCT ns::|CGRect|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id transition-image-for-share-item) (objc-object-id content-rect))))

(defun ns::|sharingService:didShareItems:| (thing _ did-share-items)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:didShareItems:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id did-share-items))))


(defun ns::|updateDraggingItemsForDrag:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateDraggingItemsForDrag:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|draggingSession:sourceOperationMaskForDraggingContext:| (thing _ source-operation-mask-for-dragging-context)
  (let ((message-lambda 
         (make-message-lambda @(draggingSession:sourceOperationMaskForDraggingContext:) (( :POINTER :LONG-LONG)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) source-operation-mask-for-dragging-context)))

(defun ns::|draggingSession:endedAtPoint:operation:| (thing _ ended-at-point operation)
  (let ((message-lambda 
         (make-message-lambda @(draggingSession:endedAtPoint:operation:) (( :POINTER ( :STRUCT ns::|CGPoint|) :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) ended-at-point operation)))

(defun ns::|insertText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertText:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|readSelectionFromItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(readSelectionFromItems:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectionItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectionItems) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|canReadSelectionFromItems| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canReadSelectionFromItems) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|preferredTextFinderStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredTextFinderStyle) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|performTextFinderAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performTextFinderAction:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|performFindPanelAction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performFindPanelAction:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setPreferredTextFinderStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreferredTextFinderStyle:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|isIncrementalSearchingEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isIncrementalSearchingEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setIncrementalSearchingEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIncrementalSearchingEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|firstSelectedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstSelectedRange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentViewAtIndex:effectiveCharacterRange:| (thing _ effective-character-range)
  (let ((message-lambda 
         (make-message-lambda @(contentViewAtIndex:effectiveCharacterRange:) (( :UNSIGNED-LONG-LONG ( :POINTER ( :STRUCT ns::|_NSRange|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id effective-character-range))))

(defun ns::|setSelectedRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedRanges:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|shouldReplaceCharactersInRanges:withStrings:| (thing _ with-strings)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldReplaceCharactersInRanges:withStrings:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-strings)))) nil t))

(defun ns::|didReplaceCharacters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(didReplaceCharacters) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|visibleCharacterRanges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(visibleCharacterRanges) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|changeDocumentBackgroundColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeDocumentBackgroundColor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|changeAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeAttributes:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|changeFont:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeFont:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|underline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(underline:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|outline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(outline:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|useStandardKerning:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(useStandardKerning:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|turnOffKerning:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(turnOffKerning:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|tightenKerning:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(tightenKerning:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|loosenKerning:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(loosenKerning:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|useStandardLigatures:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(useStandardLigatures:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|turnOffLigatures:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(turnOffLigatures:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|useAllLigatures:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(useAllLigatures:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|unscript:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unscript:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|superscript:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(superscript:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|subscript:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(subscript:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|raiseBaseline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(raiseBaseline:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|lowerBaseline:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lowerBaseline:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|copyFont:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copyFont:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pasteFont:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteFont:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|rangeForUserCharacterAttributeChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangeForUserCharacterAttributeChange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setUndoActionName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUndoActionName:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isRichText| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRichText) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|rangeForUserParagraphAttributeChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangeForUserParagraphAttributeChange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|placeholderString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(placeholderString) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPlaceholderAttributedString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPlaceholderAttributedString:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|placeholderAttributedString| (thing)
  (let ((message-lambda 
         (make-message-lambda @(placeholderAttributedString) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|delete:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(delete:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|getMarkedText:selectedRange:| (thing _ selected-range)
  (let ((message-lambda 
         (make-message-lambda @(getMarkedText:selectedRange:) (( ( :POINTER :POINTER) ( :POINTER ( :STRUCT ns::|_NSRange|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id selected-range))))

(defun ns::|firstRectForCharacterRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(firstRectForCharacterRange:) (( ( :STRUCT ns::|_NSRange|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|conversationIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(conversationIdentifier) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setMarkedText:selectedRange:| (thing _ selected-range)
  (let ((message-lambda 
         (make-message-lambda @(setMarkedText:selectedRange:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) selected-range)))

(defun ns::|spellCheckerDidLearnWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidLearnWord:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|spellCheckerDidUnlearnWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidUnlearnWord:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|spellCheckerDidChangeLanguage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeLanguage:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|spellCheckerDidChangeCorrection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeCorrection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|spellCheckerDidChangeReplacement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeReplacement:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|spellCheckerDidChangeQuoteSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeQuoteSubstitution:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|spellCheckerDidChangeDashSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spellCheckerDidChangeDashSubstitution:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|layoutSublayersOfLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(layoutSublayersOfLayer:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|invokeExtensionService:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(invokeExtensionService:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|touchBar:makeItemForIdentifier:| (thing _ make-item-for-identifier)
  (let ((message-lambda 
         (make-message-lambda @(touchBar:makeItemForIdentifier:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id make-item-for-identifier))))


(defun ns::|candidateListTouchBarItem:endSelectingCandidateAtIndex:| (thing _ end-selecting-candidate-at-index)
  (let ((message-lambda 
         (make-message-lambda @(candidateListTouchBarItem:endSelectingCandidateAtIndex:) (( :POINTER :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) end-selecting-candidate-at-index)))


(defun ns::|checkSpelling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(checkSpelling:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleContinuousSpellChecking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleContinuousSpellChecking:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleGrammarChecking:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleGrammarChecking:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleAutomaticSpellingCorrection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticSpellingCorrection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|changeSpelling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeSpelling:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|ignoreSpelling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(ignoreSpelling:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleAutomaticQuoteSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticQuoteSubstitution:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleAutomaticDashSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticDashSubstitution:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleAutomaticLinkDetection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticLinkDetection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleAutomaticTextReplacement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticTextReplacement:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToLeftEndOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToLeftEndOfLine:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToRightEndOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToRightEndOfLine:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToLeftEndOfLineAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToLeftEndOfLineAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToRightEndOfLineAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToRightEndOfLineAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToBeginningOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfLine:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToEndOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfLine:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToBeginningOfLineAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfLineAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToEndOfLineAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfLineAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|quickLookWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(quickLookWithEvent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|rulerView:pointForLocation:| (thing _ point-for-location)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:pointForLocation:) (( :POINTER :DOUBLE)  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) point-for-location)))

(defun ns::|rulerView:shouldAddMarker:| (thing _ should-add-marker)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulerView:shouldAddMarker:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-add-marker)))) nil t))

(defun ns::|rulerView:shouldMoveMarker:| (thing _ should-move-marker)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulerView:shouldMoveMarker:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-move-marker)))) nil t))

(defun ns::|rulerView:willAddMarker:atLocation:| (thing _ will-add-marker at-location)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:willAddMarker:atLocation:) (( :POINTER :POINTER :DOUBLE)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id will-add-marker) at-location)))

(defun ns::|rulerView:willMoveMarker:toLocation:| (thing _ will-move-marker to-location)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:willMoveMarker:toLocation:) (( :POINTER :POINTER :DOUBLE)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id will-move-marker) to-location)))

(defun ns::|rulerView:shouldRemoveMarker:| (thing _ should-remove-marker)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulerView:shouldRemoveMarker:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-remove-marker)))) nil t))

(defun ns::|rulerView:locationForPoint:| (thing _ location-for-point)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:locationForPoint:) (( :POINTER ( :STRUCT ns::|CGPoint|))  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) location-for-point)))

(defun ns::|rulerView:didAddMarker:| (thing _ did-add-marker)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:didAddMarker:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id did-add-marker))))

(defun ns::|rulerView:didMoveMarker:| (thing _ did-move-marker)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:didMoveMarker:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id did-move-marker))))

(defun ns::|rulerView:didRemoveMarker:| (thing _ did-remove-marker)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:didRemoveMarker:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id did-remove-marker))))

(defun ns::|rulerView:willSetClientView:| (thing _ will-set-client-view)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:willSetClientView:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id will-set-client-view))))

(defun ns::|rulerView:handleMouseDown:forMarker:| (thing _ handle-mouse-down for-marker)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rulerView:handleMouseDown:forMarker:) (( :POINTER :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id handle-mouse-down) (objc-object-id for-marker)))) nil t))

(defun ns::|rulerView:handleMouseDown:| (thing _ handle-mouse-down)
  (let ((message-lambda 
         (make-message-lambda @(rulerView:handleMouseDown:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id handle-mouse-down))))

(defun ns::|setFieldEditor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFieldEditor:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|shouldChangeTextInRanges:replacementStrings:| (thing _ replacement-strings)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldChangeTextInRanges:replacementStrings:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id replacement-strings)))) nil t))

(defun ns::|readSelectionFromPasteboard:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(readSelectionFromPasteboard:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|moveToEndOfDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfDocument:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|orderFrontSubstitutionsPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontSubstitutionsPanel:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|checkTextInDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(checkTextInDocument:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleAutomaticDataDetection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticDataDetection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|writablePasteboardTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(writablePasteboardTypes) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|writeSelectionToPasteboard:type:| (thing _ type)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeSelectionToPasteboard:type:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id type)))) nil t))

(defun ns::|itemsForSharingServiceInRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(itemsForSharingServiceInRanges:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|enabledTextCheckingTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enabledTextCheckingTypes) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|updateCandidates| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateCandidates) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAllowedInputSourceLocales:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowedInputSourceLocales:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleSmartInsertDelete:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleSmartInsertDelete:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|checkTextInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(checkTextInSelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setUsesAdaptiveColorMappingForDarkAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesAdaptiveColorMappingForDarkAppearance:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|scrollToBeginningOfDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollToBeginningOfDocument:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|scrollToEndOfDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollToEndOfDocument:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|RTFFromRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(RTFFromRange:) (( ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|RTFDFromRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(RTFDFromRange:) (( ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|replaceCharactersInRange:withRTF:| (thing _ with-r-t-f)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withRTF:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-r-t-f))))

(defun ns::|replaceCharactersInRange:withRTFD:| (thing _ with-r-t-f-d)
  (let ((message-lambda 
         (make-message-lambda @(replaceCharactersInRange:withRTFD:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-r-t-f-d))))

(defun ns::|writeRTFDToFile:atomically:| (thing _ atomically)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeRTFDToFile:atomically:) (( :POINTER :CHAR)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if atomically 1 0)))) nil t))

(defun ns::|readRTFDFromFile:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(readRTFDFromFile:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|setTextColor:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setTextColor:range:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun ns::|setFont:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setFont:range:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range)))

(defun ns::|usesFontPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesFontPanel) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isHorizontallyResizable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isHorizontallyResizable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isVerticallyResizable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isVerticallyResizable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|copyRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copyRuler:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pasteRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteRuler:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|alignLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignLeft:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|alignRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignRight:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|alignCenter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignCenter:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleRuler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleRuler:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isRulerVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRulerVisible) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityElementForAttachment:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityElementForAttachment:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|clickedOnLink:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(clickedOnLink:atIndex:) (( :POINTER :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|selectionAffinity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectionAffinity) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|layoutOrientation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutOrientation) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|dragSelectionWithEvent:offset:slideBack:| (thing _ offset slide-back)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(dragSelectionWithEvent:offset:slideBack:) (( :POINTER ( :STRUCT ns::|CGSize|) :CHAR)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) offset (if slide-back 1 0)))) nil t))

(defun ns::|sharingServicePicker:sharingServicesForItems:mask:proposedSharingServices:| (thing _ sharing-services-for-items mask proposed-sharing-services)
  (let ((message-lambda 
         (make-message-lambda @(sharingServicePicker:sharingServicesForItems:mask:proposedSharingServices:) (( :POINTER :POINTER :UNSIGNED-LONG-LONG :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id sharing-services-for-items) mask (objc-object-id proposed-sharing-services))))

(defun ns::|sharingService:containerFrameOnScreenForShareItem:| (thing _ container-frame-on-screen-for-share-item)
  (let ((message-lambda 
         (make-message-lambda @(sharingService:containerFrameOnScreenForShareItem:) (( :POINTER :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id container-frame-on-screen-for-share-item))))

(defun ns::|allowsCharacterPickerTouchBarItem| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsCharacterPickerTouchBarItem) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|allowedInputSourceLocales| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allowedInputSourceLocales) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|selectedTextAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectedTextAttributes) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setUsesRolloverButtonForSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesRolloverButtonForSelection:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|initWithFrame:textContainer:| (thing _ text-container)
  (let ((message-lambda 
         (make-message-lambda @(initWithFrame:textContainer:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id text-container))))

(defun ns::|inputContextAllowingInitialization:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(inputContextAllowingInitialization:) (( :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|drawInsertionPointInRect:color:turnedOn:| (thing _ color turned-on)
  (let ((message-lambda 
         (make-message-lambda @(drawInsertionPointInRect:color:turnedOn:) (( ( :STRUCT ns::|CGRect|) :POINTER :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id color) (if turned-on 1 0))))

(defun ns::|insertionPointColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(insertionPointColor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setInsertionPointColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInsertionPointColor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|invalidateTextContainerOrigin| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateTextContainerOrigin) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|updateInsertionPointStateAndRestartTimer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(updateInsertionPointStateAndRestartTimer:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setNeedsDisplayInRect:avoidAdditionalLayout:| (thing _ avoid-additional-layout)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplayInRect:avoidAdditionalLayout:) (( ( :STRUCT ns::|CGRect|) :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if avoid-additional-layout 1 0))))

(defun ns::|textContainerInset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContainerInset) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|checkTextInRange:types:options:| (thing _ types options)
  (let ((message-lambda 
         (make-message-lambda @(checkTextInRange:types:options:) (( ( :STRUCT ns::|_NSRange|) :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ types (objc-object-id options))))

(defun ns::|checkTextInDocumentUsingTypes:options:restrictToSelection:| (thing _ options restrict-to-selection)
  (let ((message-lambda 
         (make-message-lambda @(checkTextInDocumentUsingTypes:options:restrictToSelection:) (( :UNSIGNED-LONG-LONG :POINTER :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id options) (if restrict-to-selection 1 0))))

(defun ns::|handleTextCheckingResults:forRange:types:options:orthography:wordCount:| (thing _ for-range types options orthography word-count)
  (let ((message-lambda 
         (make-message-lambda @(handleTextCheckingResults:forRange:types:options:orthography:wordCount:) (( :POINTER ( :STRUCT ns::|_NSRange|) :UNSIGNED-LONG-LONG :POINTER :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) for-range types (objc-object-id options) (objc-object-id orthography) word-count)))

(defun ns::|rangeForUserTextChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangeForUserTextChange) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|acceptsGlyphInfo| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsGlyphInfo) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|updateRuler| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateRuler) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|breakUndoCoalescing| (thing)
  (let ((message-lambda 
         (make-message-lambda @(breakUndoCoalescing) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAlignment:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setAlignment:range:) (( :LONG-LONG ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ range)))

(defun ns::|setBaseWritingDirection:range:| (thing _ range)
  (let ((message-lambda 
         (make-message-lambda @(setBaseWritingDirection:range:) (( :LONG-LONG ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ range)))

(defun ns::|rangesForUserCharacterAttributeChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangesForUserCharacterAttributeChange) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|usesInspectorBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesInspectorBar) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|usesRuler| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesRuler) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|updateInspectorBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateInspectorBar) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|updateTextTouchBarItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateTextTouchBarItems) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|renderingColorForDocumentColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(renderingColorForDocumentColor:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|allowsDocumentBackgroundColorChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsDocumentBackgroundColorChange) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|acceptableDragTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(acceptableDragTypes) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|updateDragTypeRegistration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateDragTypeRegistration) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|updateFontPanel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateFontPanel) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDefaultParagraphStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDefaultParagraphStyle:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setConstrainedFrameSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setConstrainedFrameSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|rangesForUserTextChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangesForUserTextChange) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|documentColorForRenderingColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(documentColorForRenderingColor:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|writeSelectionToPasteboard:types:| (thing _ types)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeSelectionToPasteboard:types:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id types)))) nil t))


(defun ns::|setRulerVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRulerVisible:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|usesAdaptiveColorMappingForDarkAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesAdaptiveColorMappingForDarkAppearance) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|drawViewBackgroundInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawViewBackgroundInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|drawPlaceholderInRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawPlaceholderInRect:) (( ( :STRUCT ns::|CGRect|))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|shouldRenderPlaceholder| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRenderPlaceholder) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|toggleBaseWritingDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleBaseWritingDirection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertNewlineIgnoringFieldEditor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertNewlineIgnoringFieldEditor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertParagraphSeparator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertParagraphSeparator:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertLineBreak:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertLineBreak:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertLineSeparator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertLineSeparator:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|uppercaseWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(uppercaseWord:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|lowercaseWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lowercaseWord:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|capitalizeWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(capitalizeWord:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|makeBaseWritingDirectionNatural:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeBaseWritingDirectionNatural:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|makeBaseWritingDirectionLeftToRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeBaseWritingDirectionLeftToRight:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|makeBaseWritingDirectionRightToLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeBaseWritingDirectionRightToLeft:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|makeTextWritingDirectionNatural:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeTextWritingDirectionNatural:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|makeTextWritingDirectionLeftToRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeTextWritingDirectionLeftToRight:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|makeTextWritingDirectionRightToLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeTextWritingDirectionRightToLeft:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertPageBreak:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertPageBreak:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertContainerBreak:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertContainerBreak:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|replaceQuotesInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replaceQuotesInSelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|replaceDashesInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replaceDashesInSelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|replaceTextInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replaceTextInSelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|transliterateToLatin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(transliterateToLatin:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|removeAccents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeAccents:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|centerSelectionInVisibleArea:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(centerSelectionInVisibleArea:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pasteAsPlainText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteAsPlainText:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pasteAsRichText:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteAsRichText:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|preferredPasteboardTypeFromArray:restrictedToTypesFromArray:| (thing _ restricted-to-types-from-array)
  (let ((message-lambda 
         (make-message-lambda @(preferredPasteboardTypeFromArray:restrictedToTypesFromArray:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id restricted-to-types-from-array))))

(defun ns::|spotlight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(spotlight:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleTraditionalCharacterShape:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTraditionalCharacterShape:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|copyLink:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(copyLink:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|alignJustified:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(alignJustified:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|orderFrontSpacingPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontSpacingPanel:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertTable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertTable:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|orderFrontLinkPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontLinkPanel:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|orderFrontListPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontListPanel:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|orderFrontTablePanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontTablePanel:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addLinksInSelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addLinksInSelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|changeBaseWritingDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeBaseWritingDirection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|changeLayoutOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeLayoutOrientation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleQuickLookPreviewPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleQuickLookPreviewPanel:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|characterRangeForRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(characterRangeForRect:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|displaysLinkToolTips| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(displaysLinkToolTips) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|linkTextAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(linkTextAttributes) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|usesRolloverButtonForSelection| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesRolloverButtonForSelection) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|selectionRangeForProposedRange:granularity:| (thing _ granularity)
  (let ((message-lambda 
         (make-message-lambda @(selectionRangeForProposedRange:granularity:) (( ( :STRUCT ns::|_NSRange|) :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _ granularity)))

(defun ns::|selectionGranularity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(selectionGranularity) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSelectedRanges:affinity:stillSelecting:| (thing _ affinity still-selecting)
  (let ((message-lambda 
         (make-message-lambda @(setSelectedRanges:affinity:stillSelecting:) (( :POINTER :UNSIGNED-LONG-LONG :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) affinity (if still-selecting 1 0))))

(defun ns::|setSelectionGranularity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSelectionGranularity:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|shouldRemoveCaseTransformations| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRemoveCaseTransformations) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|convertToSimplifiedChinese:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertToSimplifiedChinese:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|convertToTraditionalChinese:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertToTraditionalChinese:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|convertToFullWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertToFullWidth:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|convertToHalfWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertToHalfWidth:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|shouldRemoveTransformationAction:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRemoveTransformationAction:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|usesFindBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesFindBar) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|usesFindPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesFindPanel) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|drawCharactersInTextRange:atPoint:| (thing _ at-point)
  (let ((message-lambda 
         (make-message-lambda @(drawCharactersInTextRange:atPoint:) (( :POINTER ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-point)))

(defun ns::|setLayoutOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayoutOrientation:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|viewportBoundsForTextViewportLayoutController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(viewportBoundsForTextViewportLayoutController:) (( :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|textViewportLayoutController:configureRenderingSurfaceForTextLayoutFragment:| (thing _ configure-rendering-surface-for-text-layout-fragment)
  (let ((message-lambda 
         (make-message-lambda @(textViewportLayoutController:configureRenderingSurfaceForTextLayoutFragment:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id configure-rendering-surface-for-text-layout-fragment))))

(defun ns::|textViewportLayoutControllerWillLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(textViewportLayoutControllerWillLayout:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|textViewportLayoutControllerDidLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(textViewportLayoutControllerDidLayout:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveForward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveForward:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveBackward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveBackward:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveWordForward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordForward:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveWordBackward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordBackward:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToBeginningOfParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfParagraph:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToEndOfParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfParagraph:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToBeginningOfDocument:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfDocument:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveBackwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveBackwardAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveForwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveForwardAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveWordForwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordForwardAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveWordBackwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordBackwardAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveUpAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveUpAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveDownAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveDownAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToBeginningOfParagraphAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfParagraphAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToEndOfParagraphAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfParagraphAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToEndOfDocumentAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToEndOfDocumentAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveToBeginningOfDocumentAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToBeginningOfDocumentAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pageDownAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pageDownAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|pageUpAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pageUpAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveParagraphForwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveParagraphForwardAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveParagraphBackwardAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveParagraphBackwardAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveWordRight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordRight:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveWordLeft:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordLeft:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveRightAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveRightAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveLeftAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveLeftAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveWordRightAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordRightAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveWordLeftAndModifySelection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveWordLeftAndModifySelection:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|scrollPageUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollPageUp:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|scrollPageDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollPageDown:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|scrollLineUp:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollLineUp:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|scrollLineDown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(scrollLineDown:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|transpose:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(transpose:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectParagraph:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectLine:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectWord:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectWord:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertTabIgnoringFieldEditor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertTabIgnoringFieldEditor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertSingleQuoteIgnoringSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertSingleQuoteIgnoringSubstitution:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertDoubleQuoteIgnoringSubstitution:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertDoubleQuoteIgnoringSubstitution:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|deleteForward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteForward:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|deleteBackward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteBackward:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|deleteBackwardByDecomposingPreviousCharacter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteBackwardByDecomposingPreviousCharacter:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|deleteWordForward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteWordForward:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|deleteWordBackward:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteWordBackward:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|deleteToBeginningOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToBeginningOfLine:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|deleteToEndOfLine:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToEndOfLine:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|deleteToBeginningOfParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToBeginningOfParagraph:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|deleteToEndOfParagraph:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToEndOfParagraph:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|yank:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(yank:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setMark:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMark:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|deleteToMark:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deleteToMark:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectToMark:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectToMark:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|swapWithMark:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(swapWithMark:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|replaceTextContainer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(replaceTextContainer:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setTextContainerInset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTextContainerInset:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|textContainerInsets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContainerInsets) (()  ( :STRUCT ns::|NSEdgeInsets|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|textContentStorage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(textContentStorage) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|inspectorBarItemIdentifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(inspectorBarItemIdentifiers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|shouldDrawInsertionPoint| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldDrawInsertionPoint) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|updateSpellingPanel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateSpellingPanel) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|performValidatedReplacementInRange:withAttributedString:| (thing _ with-attributed-string)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(performValidatedReplacementInRange:withAttributedString:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id with-attributed-string)))) nil t))

(defun ns::|viewportBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewportBounds) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewportAnchor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(viewportAnchor) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|locationForPositionInViewport:offset:| (thing _ offset)
  (let ((message-lambda 
         (make-message-lambda @(locationForPositionInViewport:offset:) (( ( :STRUCT ns::|CGPoint|) ( :POINTER ( :STRUCT ns::|CGSize|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id offset))))

(defun ns::|mouseCancelled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mouseCancelled:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|lockDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lockDocument) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|unlockDocument| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unlockDocument) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|characterIndexForInsertionAtPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(characterIndexForInsertionAtPoint:) (( ( :STRUCT ns::|CGPoint|))  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|rectsForCharacterRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(rectsForCharacterRange:) (( ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|drawCharactersInRange:forContentView:| (thing _ for-content-view)
  (let ((message-lambda 
         (make-message-lambda @(drawCharactersInRange:forContentView:) (( ( :STRUCT ns::|_NSRange|) :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id for-content-view))))



(defun ns::|set_inLayout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(set_inLayout:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setUsesInspectorBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesInspectorBar:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setAllowsDocumentBackgroundColorChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsDocumentBackgroundColorChange:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setUsesFindBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesFindBar:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilitySelectedTextRangesAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySelectedTextRangesAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsSelectedTextRangesAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSelectedTextRangesAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySetSelectedTextRangesAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetSelectedTextRangesAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySharedTextUIElementsAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedTextUIElementsAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsSharedTextUIElementsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSharedTextUIElementsAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySharedCharacterRangeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedCharacterRangeAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsSharedCharacterRangeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSharedCharacterRangeAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySharedTextElementForIndexAttributeForParameter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySharedTextElementForIndexAttributeForParameter:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityTextInputMarkedRangeAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTextInputMarkedRangeAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsTextInputMarkedRangeAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTextInputMarkedRangeAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setLinkTextAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLinkTextAttributes:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setMarkedTextAttributes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMarkedTextAttributes:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAcceptsGlyphInfo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAcceptsGlyphInfo:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|dragOperationForDraggingInfo:type:| (thing _ type)
  (let ((message-lambda 
         (make-message-lambda @(dragOperationForDraggingInfo:type:) (( :POINTER :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id type))))

(defun ns::|cleanUpAfterDragOperation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cleanUpAfterDragOperation) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|smartDeleteRangeForProposedRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(smartDeleteRangeForProposedRange:) (( ( :STRUCT ns::|_NSRange|))  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|dragImageForSelectionWithEvent:origin:| (thing _ origin)
  (let ((message-lambda 
         (make-message-lambda @(dragImageForSelectionWithEvent:origin:) (( :POINTER ( :POINTER ( :STRUCT ns::|CGPoint|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id origin))))

(defun ns::|drawDragInsertionIndicatorWithRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawDragInsertionIndicatorWithRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|showFindIndicatorForRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showFindIndicatorForRange:) (( ( :STRUCT ns::|_NSRange|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|rangeForUserCompletion| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangeForUserCompletion) (()  ( :STRUCT ns::|_NSRange|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|completionsForPartialWordRange:indexOfSelectedItem:| (thing _ index-of-selected-item)
  (let ((message-lambda 
         (make-message-lambda @(completionsForPartialWordRange:indexOfSelectedItem:) (( ( :STRUCT ns::|_NSRange|) ( :POINTER :LONG-LONG))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id index-of-selected-item))))

(defun ns::|insertRightToLeftSlash:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertRightToLeftSlash:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertCompletion:forPartialWordRange:movement:isFinal:| (thing _ for-partial-word-range movement is-final)
  (let ((message-lambda 
         (make-message-lambda @(insertCompletion:forPartialWordRange:movement:isFinal:) (( :POINTER ( :STRUCT ns::|_NSRange|) :LONG-LONG :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) for-partial-word-range movement (if is-final 1 0))))

(defun ns::|yankAndSelect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(yankAndSelect:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|tokenizingCharacterSet| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tokenizingCharacterSet) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|readablePasteboardTypes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(readablePasteboardTypes) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|smartInsertForString:replacingRange:beforeString:afterString:| (thing _ replacing-range before-string after-string)
  (let ((message-lambda 
         (make-message-lambda @(smartInsertForString:replacingRange:beforeString:afterString:) (( :POINTER ( :STRUCT ns::|_NSRange|) ( :POINTER :POINTER) ( :POINTER :POINTER))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) replacing-range (objc-object-id before-string) (objc-object-id after-string))))

(defun ns::|rangesForUserParagraphAttributeChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rangesForUserParagraphAttributeChange) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|readSelectionFromPasteboard:type:| (thing _ type)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(readSelectionFromPasteboard:type:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id type)))) nil t))

(defun ns::|switchBlinkTimersIfNecessaryWithSharedData:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(switchBlinkTimersIfNecessaryWithSharedData:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))




(defun ns::|showHighlightWithCharacterRange:highlightStyle:| (thing _ highlight-style)
  (let ((message-lambda 
         (make-message-lambda @(showHighlightWithCharacterRange:highlightStyle:) (( ( :STRUCT ns::|_NSRange|) :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ highlight-style)))

(defun ns::|highlightRectsForCharacterRange:highlightStyle:| (thing _ highlight-style)
  (let ((message-lambda 
         (make-message-lambda @(highlightRectsForCharacterRange:highlightStyle:) (( ( :STRUCT ns::|_NSRange|) :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ highlight-style)))

(defun ns::|hideHighlight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hideHighlight) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|attributedSubstringForMarkedRange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributedSubstringForMarkedRange) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|highlightBoundingRectForCharacterRange:highlightStyle:| (thing _ highlight-style)
  (let ((message-lambda 
         (make-message-lambda @(highlightBoundingRectForCharacterRange:highlightStyle:) (( ( :STRUCT ns::|_NSRange|) :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ highlight-style)))

(defun ns::|menuItemsForTextCheckingResult:range:contextual:event:| (thing _ range contextual event)
  (let ((message-lambda 
         (make-message-lambda @(menuItemsForTextCheckingResult:range:contextual:event:) (( :POINTER ( :STRUCT ns::|_NSRange|) :CHAR :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) range (if contextual 1 0) (objc-object-id event))))


(defun ns::|revealContext:shouldUseDefaultHighlightForItem:| (thing _ should-use-default-highlight-for-item)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(revealContext:shouldUseDefaultHighlightForItem:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-use-default-highlight-for-item)))) nil t))

(defun ns::|revealContext:drawRectsForItem:| (thing _ draw-rects-for-item)
  (let ((message-lambda 
         (make-message-lambda @(revealContext:drawRectsForItem:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id draw-rects-for-item))))

(defun ns::|revealContext:startHighlightingItem:| (thing _ start-highlighting-item)
  (let ((message-lambda 
         (make-message-lambda @(revealContext:startHighlightingItem:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id start-highlighting-item))))

(defun ns::|revealContext:stopHighlightingItem:| (thing _ stop-highlighting-item)
  (let ((message-lambda 
         (make-message-lambda @(revealContext:stopHighlightingItem:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id stop-highlighting-item))))

(defun ns::|layoutManager:effectiveCUICatalogForTextEffect:| (thing _ effective-c-u-i-catalog-for-text-effect)
  (let ((message-lambda 
         (make-message-lambda @(layoutManager:effectiveCUICatalogForTextEffect:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id effective-c-u-i-catalog-for-text-effect))))

(defun ns::|updateQuickLookPreviewPanel| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateQuickLookPreviewPanel) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|updateTouchBarItemIdentifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateTouchBarItemIdentifiers) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|showFindIndicatorForRange:fade:| (thing _ fade)
  (let ((message-lambda 
         (make-message-lambda @(showFindIndicatorForRange:fade:) (( ( :STRUCT ns::|_NSRange|) :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if fade 1 0))))

(defun ns::|performPendingTextChecking| (thing)
  (let ((message-lambda 
         (make-message-lambda @(performPendingTextChecking) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pendingCandidateUpdate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(pendingCandidateUpdate) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|acquireKeyFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(acquireKeyFocus) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|resignKeyFocus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignKeyFocus) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|smartInsertBeforeStringForString:replacingRange:| (thing _ replacing-range)
  (let ((message-lambda 
         (make-message-lambda @(smartInsertBeforeStringForString:replacingRange:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) replacing-range)))

(defun ns::|smartInsertAfterStringForString:replacingRange:| (thing _ replacing-range)
  (let ((message-lambda 
         (make-message-lambda @(smartInsertAfterStringForString:replacingRange:) (( :POINTER ( :STRUCT ns::|_NSRange|))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) replacing-range)))

(defun ns::|isAutomaticLanguageIdentificationEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutomaticLanguageIdentificationEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAutomaticLanguageIdentificationEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutomaticLanguageIdentificationEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setDisplaysLinkToolTips:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDisplaysLinkToolTips:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setCentersOnScroll:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCentersOnScroll:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|centersOnScroll| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(centersOnScroll) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|markedTextAttributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(markedTextAttributes) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isCoalescingUndo| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isCoalescingUndo) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|allowsImageEditing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsImageEditing) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAllowsImageEditing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsImageEditing:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setUsesFindPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesFindPanel:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setUsesColorsWithInvertedLightness:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUsesColorsWithInvertedLightness:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|usesColorsWithInvertedLightness| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(usesColorsWithInvertedLightness) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|toggleUsesAdaptiveColorMappingForDarkAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleUsesAdaptiveColorMappingForDarkAppearance:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleAutomaticLanguageIdentification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticLanguageIdentification:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleAutomaticTextCompletion:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleAutomaticTextCompletion:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setEnabledTextCheckingTypes:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEnabledTextCheckingTypes:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|insertCandidateString:replacementRange:fromTextCheckingResult:| (thing _ replacement-range from-text-checking-result)
  (let ((message-lambda 
         (make-message-lambda @(insertCandidateString:replacementRange:fromTextCheckingResult:) (( :POINTER ( :STRUCT ns::|_NSRange|) :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) replacement-range (if from-text-checking-result 1 0))))

(defun ns::|insertCandidateTextCheckingResult:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(insertCandidateTextCheckingResult:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|candidateListTouchBarItem:changedCandidateListVisibility:| (thing _ changed-candidate-list-visibility)
  (let ((message-lambda 
         (make-message-lambda @(candidateListTouchBarItem:changedCandidateListVisibility:) (( :POINTER :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if changed-candidate-list-visibility 1 0))))

(defun ns::|invokeImmediateActionMenuItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(invokeImmediateActionMenuItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|applyActionForRanges:block:| (thing _ block)
  (let ((message-lambda 
         (make-message-lambda @(applyActionForRanges:block:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id block))))

(defun ns::|showDefinitionFromMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showDefinitionFromMenu:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|immediateActionRecognizerWillPrepare:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerWillPrepare:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|immediateActionRecognizerWillBeginAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerWillBeginAnimation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|immediateActionRecognizerDidUpdateAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerDidUpdateAnimation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|immediateActionRecognizerDidCancelAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerDidCancelAnimation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|immediateActionRecognizerDidCompleteAnimation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(immediateActionRecognizerDidCompleteAnimation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|touchBarItemController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBarItemController) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|changeAttributesWithModifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeAttributesWithModifier:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|functionBar:makeItemForIdentifier:| (thing _ make-item-for-identifier)
  (let ((message-lambda 
         (make-message-lambda @(functionBar:makeItemForIdentifier:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id make-item-for-identifier))))

(defun ns::|quickLookPreviewableItemsInRanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(quickLookPreviewableItemsInRanges:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|acceptsPreviewPanelControl:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsPreviewPanelControl:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|beginPreviewPanelControl:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(beginPreviewPanelControl:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|endPreviewPanelControl:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endPreviewPanelControl:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|numberOfPreviewItemsInPreviewPanel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(numberOfPreviewItemsInPreviewPanel:) (( :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|previewPanel:previewItemAtIndex:| (thing _ preview-item-at-index)
  (let ((message-lambda 
         (make-message-lambda @(previewPanel:previewItemAtIndex:) (( :POINTER :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) preview-item-at-index)))

(defun ns::|previewPanel:sourceFrameOnScreenForPreviewItem:| (thing _ source-frame-on-screen-for-preview-item)
  (let ((message-lambda 
         (make-message-lambda @(previewPanel:sourceFrameOnScreenForPreviewItem:) (( :POINTER :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id source-frame-on-screen-for-preview-item))))

(defun ns::|previewPanel:transitionImageForPreviewItem:contentRect:| (thing _ transition-image-for-preview-item content-rect)
  (let ((message-lambda 
         (make-message-lambda @(previewPanel:transitionImageForPreviewItem:contentRect:) (( :POINTER :POINTER ( :POINTER ( :STRUCT ns::|CGRect|)))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id transition-image-for-preview-item) (objc-object-id content-rect))))

(defun ns::|orderFrontSharingServicePicker:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontSharingServicePicker:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))
















(defun ns::|parentWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(parentWindow) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|hasTitleBar| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasTitleBar) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|level| (thing)
  (let ((message-lambda 
         (make-message-lambda @(level) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))







(defun ns::|subtitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(subtitle) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSubtitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSubtitle:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|setFrame:display:| (thing _ display)
  (let ((message-lambda 
         (make-message-lambda @(setFrame:display:) (( ( :STRUCT ns::|CGRect|) :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if display 1 0))))

(defun ns::|minFullScreenContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minFullScreenContentSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|convertScreenToBase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertScreenToBase:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))






(defun ns::|gestureRecognizer:shouldAttemptToRecognizeWithEvent:| (thing _ should-attempt-to-recognize-with-event)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(gestureRecognizer:shouldAttemptToRecognizeWithEvent:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id should-attempt-to-recognize-with-event)))) nil t))



(defun ns::|isVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isVisible) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setColorSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setColorSpace:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|isOnActiveSpace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isOnActiveSpace) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))










(defun ns::|accessibilityFocusRingBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFocusRingBounds) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|accessibilityWindowAttributeValueHelper| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowAttributeValueHelper) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityTopLevelUIElementAttributeValueHelper| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTopLevelUIElementAttributeValueHelper) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|convertRectToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectToScreen:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))





(defun ns::|remoteUIElement| (thing)
  (let ((message-lambda 
         (make-message-lambda @(remoteUIElement) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|windowRef| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowRef) (()  ( :POINTER :VOID))))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|accessibilityWindowNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityWindowNumber) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isTabOverviewVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isTabOverviewVisible) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|titleVisibility| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titleVisibility) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|tabbingIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabbingIdentifier) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|windowController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowController) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|setTabbingIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabbingIdentifier:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|tabbingMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabbingMode) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTabbingMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabbingMode:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|tab| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tab) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|styleMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(styleMask) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|sheetParent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sheetParent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|titlebarAppearsTransparent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarAppearsTransparent) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isResizable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isResizable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isKeyWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isKeyWindow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|makeKeyAndOrderFront:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(makeKeyAndOrderFront:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isMiniaturized| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMiniaturized) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun ns::|selectNextTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectNextTab:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectPreviousTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectPreviousTab:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|moveTabToNewWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveTabToNewWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|mergeAllWindows:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(mergeAllWindows:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleTabBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTabBar:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleTabOverview:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleTabOverview:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|performCloseOtherTabs:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performCloseOtherTabs:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|performClose:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performClose:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isTabbed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isTabbed) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|performCloseTabbedWindowGroup:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performCloseTabbedWindowGroup:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|pinTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pinTab:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|unpinTab:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unpinTab:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|tabGroup| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabGroup) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTabOverviewVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTabOverviewVisible:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|orderOutTabbedWindowGroup:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderOutTabbedWindowGroup:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|windowDidBecomeTabbed| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowDidBecomeTabbed) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|set_beforeTabPickerResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(set_beforeTabPickerResponder:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|setReleasedWhenClosed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setReleasedWhenClosed:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|orderWindow:relativeTo:| (thing _ relative-to)
  (let ((message-lambda 
         (make-message-lambda @(orderWindow:relativeTo:) (( :LONG-LONG :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ relative-to)))

(defun ns::|orderOut:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderOut:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|initWithContentRect:styleMask:backing:defer:| (thing _ style-mask backing defer)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentRect:styleMask:backing:defer:) (( ( :STRUCT ns::|CGRect|) :UNSIGNED-LONG-LONG :UNSIGNED-LONG-LONG :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ style-mask backing (if defer 1 0))))



(defun ns::|orderFront:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderFront:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|flushWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flushWindow) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))











(defun ns::|accessibilitySubroleAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySubroleAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsSubroleAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSubroleAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))
















(defun ns::|convertRectFromScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertRectFromScreen:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|convertPointFromScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointFromScreen:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))




(defun ns::|setCollectionBehavior:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCollectionBehavior:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLevel:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setHidesOnDeactivate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHidesOnDeactivate:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setIgnoresMouseEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIgnoresMouseEvents:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))



(defun ns::|canBecomeKeyWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBecomeKeyWindow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|canBecomeMainWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBecomeMainWindow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|graphicsPort| (thing)
  (let ((message-lambda 
         (make-message-lambda @(graphicsPort) (()  ( :POINTER :VOID))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|mouseLocationOutsideOfEventStream| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mouseLocationOutsideOfEventStream) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setRestorable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRestorable:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setMovableByWindowBackground:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMovableByWindowBackground:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setDefaultButtonCell:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDefaultButtonCell:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|animationBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animationBehavior) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAnimationBehavior:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAnimationBehavior:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|beginCriticalSheet:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(beginCriticalSheet:completionHandler:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id completion-handler))))

(defun ns::|beginSheet:completionHandler:| (thing _ completion-handler)
  (let ((message-lambda 
         (make-message-lambda @(beginSheet:completionHandler:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id completion-handler))))


(defun ns::|isSheet| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSheet) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setInitialFirstResponder:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInitialFirstResponder:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|initialFirstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(initialFirstResponder) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|layoutIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutIfNeeded) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAnchorAttribute:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setAnchorAttribute:forOrientation:) (( :LONG-LONG :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-orientation)))




(defun ns::|canHide| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canHide) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|makeKeyWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(makeKeyWindow) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|center| (thing)
  (let ((message-lambda 
         (make-message-lambda @(center) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFrameTopLeftPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameTopLeftPoint:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|deminiaturize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(deminiaturize:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|hidesOnDeactivate| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hidesOnDeactivate) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|attachedSheet| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attachedSheet) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|sheets| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sheets) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|makeMainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(makeMainWindow) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))
















(defun ns::|toggleFullScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleFullScreen:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setWindowController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindowController:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityIsChildOfApp| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsChildOfApp) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))






(defun ns::|firstResponder| (thing)
  (let ((message-lambda 
         (make-message-lambda @(firstResponder) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|constrainFrameRect:toScreen:| (thing _ to-screen)
  (let ((message-lambda 
         (make-message-lambda @(constrainFrameRect:toScreen:) (( ( :STRUCT ns::|CGRect|) :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-screen))))


(defun ns::|representedURL| (thing)
  (let ((message-lambda 
         (make-message-lambda @(representedURL) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|toolbar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toolbar) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|collectionBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(collectionBehavior) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTitlebarAppearsTransparent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarAppearsTransparent:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun ns::|maxFullScreenContentSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maxFullScreenContentSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setHasShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasShadow:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setStyleMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStyleMask:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|accessibilityActivationPointAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityActivationPointAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFrameFromString:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrameFromString:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stringWithSavedFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stringWithSavedFrame) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|titlePosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlePosition) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|setTitlePosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlePosition:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))



(defun ns::|accessibilityTitleUIElementAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityTitleUIElementAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|convertBaseToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertBaseToScreen:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityIsTitleUIElementAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsTitleUIElementAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|hasKeyAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasKeyAppearance) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|makeFirstResponder:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(makeFirstResponder:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|disableFlushWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableFlushWindow) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|enableFlushWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableFlushWindow) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))












(defun ns::|draggingEnded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(draggingEnded:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun ns::|setViewsNeedDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setViewsNeedDisplay:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|disableKeyEquivalentForDefaultButtonCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableKeyEquivalentForDefaultButtonCell) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|enableKeyEquivalentForDefaultButtonCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableKeyEquivalentForDefaultButtonCell) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|cancelOperation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cancelOperation:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setDepthLimit:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDepthLimit:) (( :INT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|depthLimit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(depthLimit) (()  :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun ns::|setResizeIncrements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setResizeIncrements:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|isExcludedFromWindowsMenu| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isExcludedFromWindowsMenu) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isMainWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMainWindow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|ignoresMouseEvents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ignoresMouseEvents) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|resignMainWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignMainWindow) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isAutodisplay| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAutodisplay) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAutodisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutodisplay:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|startRectForSheet:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(startRectForSheet:) (( :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|redo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(redo:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|undo:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(undo:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun ns::|frameRectForContentRect:styleMask:| (thing _ style-mask)
  (let ((message-lambda 
         (make-message-lambda @(frameRectForContentRect:styleMask:) (( ( :STRUCT ns::|CGRect|) :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ style-mask)))

(defun ns::|contentRectForFrameRect:styleMask:| (thing _ style-mask)
  (let ((message-lambda 
         (make-message-lambda @(contentRectForFrameRect:styleMask:) (( ( :STRUCT ns::|CGRect|) :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ style-mask)))

(defun ns::|minFrameSizeForMinContentSize:styleMask:| (thing _ style-mask)
  (let ((message-lambda 
         (make-message-lambda @(minFrameSizeForMinContentSize:styleMask:) (( ( :STRUCT ns::|CGSize|) :UNSIGNED-LONG-LONG)  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing)  _ style-mask)))

(defun ns::|windowTitleController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowTitleController) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|dragRectForFrameRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dragRectForFrameRect:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|resizeIncrements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resizeIncrements) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAspectRatio:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAspectRatio:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|aspectRatio| (thing)
  (let ((message-lambda 
         (make-message-lambda @(aspectRatio) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|invalidateCursorRectsForView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(invalidateCursorRectsForView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))







(defun ns::|isMovableByWindowBackground| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMovableByWindowBackground) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|keyViewSelectionDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(keyViewSelectionDirection) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentRectForFrameRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentRectForFrameRect:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|contentBorderThicknessForEdge:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(contentBorderThicknessForEdge:) (( :UNSIGNED-LONG-LONG)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|setToolbar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setToolbar:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setRestorationClass:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRestorationClass:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setFrame:display:animate:| (thing _ display animate)
  (let ((message-lambda 
         (make-message-lambda @(setFrame:display:animate:) (( ( :STRUCT ns::|CGRect|) :CHAR :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (if display 1 0) (if animate 1 0))))

(defun ns::|recalculateKeyViewLoop| (thing)
  (let ((message-lambda 
         (make-message-lambda @(recalculateKeyViewLoop) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|frameAutosaveName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameAutosaveName) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|saveFrameUsingName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(saveFrameUsingName:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setFrameUsingName:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setFrameUsingName:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|setFrameAutosaveName:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setFrameAutosaveName:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|standardWindowButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(standardWindowButton:) (( :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|selectNextKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectNextKeyView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectPreviousKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectPreviousKeyView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|convertPointToScreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(convertPointToScreen:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|endEditingFor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(endEditingFor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|fieldEditor:forObject:| (thing _ for-object)
  (let ((message-lambda 
         (make-message-lambda @(fieldEditor:forObject:) (( :CHAR :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) (objc-object-id for-object))))


(defun ns::|setTitleVisibility:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleVisibility:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|canBecomeVisibleWithoutLogin| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBecomeVisibleWithoutLogin) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|shadowOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowOptions) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|hasShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasShadow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|addChildWindow:ordered:| (thing _ ordered)
  (let ((message-lambda 
         (make-message-lambda @(addChildWindow:ordered:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) ordered)))

(defun ns::|removeChildWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeChildWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|sharingIndicator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharingIndicator) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|selectKeyViewPrecedingView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectKeyViewPrecedingView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|selectKeyViewFollowingView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(selectKeyViewFollowingView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setRepresentedFilename:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepresentedFilename:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|isDocumentEdited| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDocumentEdited) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|editTitleWithCompletionHandler:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(editTitleWithCompletionHandler:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|isFloatingPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFloatingPanel) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|allowsCursorRectsWhenInactive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsCursorRectsWhenInactive) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|GDBDumpCursorRects| (thing)
  (let ((message-lambda 
         (make-message-lambda @(GDBDumpCursorRects) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|setAllowsCursorRectsWhenInactive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsCursorRectsWhenInactive:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|contentLayoutRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentLayoutRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|handleSaveScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleSaveScriptCommand:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|handleCloseScriptCommand:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(handleCloseScriptCommand:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun ns::|wantsPeriodicDraggingUpdates| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsPeriodicDraggingUpdates) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|drawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|openDrawers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(openDrawers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setParentWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setParentWindow:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setOneShot:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOneShot:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setCanHide:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanHide:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setCanBecomeVisibleWithoutLogin:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanBecomeVisibleWithoutLogin:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))



(defun ns::|showToolbar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(showToolbar:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|hideToolbar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(hideToolbar:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|toggleToolbarShown:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleToolbarShown:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|runToolbarCustomizationPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runToolbarCustomizationPalette:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|performZoom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performZoom:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|performMiniaturize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performMiniaturize:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|titlebarAccessoryViewControllers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarAccessoryViewControllers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|performWindowDragWithEvent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(performWindowDragWithEvent:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySetSizeAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetSizeAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|acquireKeyAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(acquireKeyAppearance) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|resignKeyAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignKeyAppearance) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|isInKeyWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInKeyWindow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|childWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(childWindows) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|restorationClass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restorationClass) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|inspectorBar| (thing)
  (let ((message-lambda 
         (make-message-lambda @(inspectorBar) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAppearanceSource:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAppearanceSource:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|frameRectForContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(frameRectForContentRect:) (( ( :STRUCT ns::|CGRect|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setRepresentedURL:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepresentedURL:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|representedFilename| (thing)
  (let ((message-lambda 
         (make-message-lambda @(representedFilename) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|graphicsContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(graphicsContext) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|anchorAttributeForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(anchorAttributeForOrientation:) (( :LONG-LONG)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|updateConstraintsIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateConstraintsIfNeeded) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|becomesKeyOnlyIfNeeded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(becomesKeyOnlyIfNeeded) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|zoom:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(zoom:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|tabbedWindows| (thing)
  (let ((message-lambda 
         (make-message-lambda @(tabbedWindows) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|addTitlebarAccessoryViewController:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addTitlebarAccessoryViewController:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setBackingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackingType:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|miniaturize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(miniaturize:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|contentLayoutGuide| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentLayoutGuide) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPreservesContentDuringLiveResize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreservesContentDuringLiveResize:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|animationResizeTime:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(animationResizeTime:) (( ( :STRUCT ns::|CGRect|))  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|preventsApplicationTerminationWhenModal| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(preventsApplicationTerminationWhenModal) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setPreventsApplicationTerminationWhenModal:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreventsApplicationTerminationWhenModal:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|allowsToolTipsWhenApplicationIsInactive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsToolTipsWhenApplicationIsInactive) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|initWithContentRect:styleMask:backing:defer:screen:| (thing _ style-mask backing defer screen)
  (let ((message-lambda 
         (make-message-lambda @(initWithContentRect:styleMask:backing:defer:screen:) (( ( :STRUCT ns::|CGRect|) :UNSIGNED-LONG-LONG :UNSIGNED-LONG-LONG :CHAR :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ style-mask backing (if defer 1 0) (objc-object-id screen))))

(defun ns::|flushWindowIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flushWindowIfNeeded) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setShowsToolbarButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsToolbarButton:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setContentMinSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentMinSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setContentMaxSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentMaxSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))




(defun ns::|setAutorecalculatesKeyViewLoop:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutorecalculatesKeyViewLoop:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setTitlebarAlphaValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarAlphaValue:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|titlebarViewController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarViewController) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|deepestScreen| (thing)
  (let ((message-lambda 
         (make-message-lambda @(deepestScreen) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|sheetBehavior| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sheetBehavior) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|showsAutosaveButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsAutosaveButton) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setShowsAutosaveButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsAutosaveButton:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|unregisterSplitViewItemSeparatorTrackingAdapter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unregisterSplitViewItemSeparatorTrackingAdapter:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|registerSplitViewItemSeparatorTrackingAdapter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(registerSplitViewItemSeparatorTrackingAdapter:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|statusItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(statusItem) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAllowsToolTipsWhenApplicationIsInactive:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsToolTipsWhenApplicationIsInactive:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|acceptsMouseMovedEvents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceptsMouseMovedEvents) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|bottomCornerRounded| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(bottomCornerRounded) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAcceptsMouseMovedEvents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAcceptsMouseMovedEvents:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|autorecalculatesContentBorderThicknessForEdge:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autorecalculatesContentBorderThicknessForEdge:) (( :UNSIGNED-LONG-LONG)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|disableScreenUpdatesUntilFlush| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableScreenUpdatesUntilFlush) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setInspectorBar:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInspectorBar:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|showsContentSeparatorForEdge:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsContentSeparatorForEdge:) (( :UNSIGNED-LONG-LONG)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|removeUnderTitlebarView:withAssociatedWithView:| (thing _ with-associated-with-view)
  (let ((message-lambda 
         (make-message-lambda @(removeUnderTitlebarView:withAssociatedWithView:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-associated-with-view))))

(defun ns::|showsToolbarButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsToolbarButton) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|showsLockButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsLockButton) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|showsFullScreenButton| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsFullScreenButton) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|singleWindowSharingActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(singleWindowSharingActive) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|prefersFullWidthTitlebarWhenAccessoriesVisible| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(prefersFullWidthTitlebarWhenAccessoriesVisible) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|contentMinSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentMinSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentMaxSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentMaxSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setContentBorderThickness:forEdge:| (thing _ for-edge)
  (let ((message-lambda 
         (make-message-lambda @(setContentBorderThickness:forEdge:) (( :DOUBLE :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ for-edge)))

(defun ns::|windowTitlebarLayoutDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowTitlebarLayoutDirection) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|toolbarStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(toolbarStyle) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setBottomCornerRounded:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBottomCornerRounded:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|addUnderTitlebarView:withAssociatedWithView:| (thing _ with-associated-with-view)
  (let ((message-lambda 
         (make-message-lambda @(addUnderTitlebarView:withAssociatedWithView:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with-associated-with-view))))

(defun ns::|setPrefersFullWidthTitlebarWhenAccessoriesVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPrefersFullWidthTitlebarWhenAccessoriesVisible:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|titlebarBlendingMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarBlendingMode) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|titlebarAlphaValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarAlphaValue) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|removeTitlebarAccessoryViewControllerAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeTitlebarAccessoryViewControllerAtIndex:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|disableSnapshotRestoration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(disableSnapshotRestoration) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|enableSnapshotRestoration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(enableSnapshotRestoration) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|snapshotFromRect:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(snapshotFromRect:options:) (( ( :STRUCT ns::|CGRect|) :UNSIGNED-LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ options)))

(defun ns::|topLeftPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(topLeftPoint) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|cascadeTopLeftFromPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cascadeTopLeftFromPoint:) (( ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setExcludedFromWindowsMenu:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setExcludedFromWindowsMenu:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setToolbarStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setToolbarStyle:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|resizeFlags| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resizeFlags) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|windowSectionController| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windowSectionController) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|toggleUsingSmallToolbarIcons:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(toggleUsingSmallToolbarIcons:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setTitlebarSeparatorStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarSeparatorStyle:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|changeToolbarDisplayModeToNumber:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeToolbarDisplayModeToNumber:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|changeToolbarDisplayMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeToolbarDisplayMode:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|backingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backingType) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|canStoreColor| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canStoreColor) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|allowsConcurrentViewDrawing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsConcurrentViewDrawing) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun ns::|hasKeyAppearanceIncludingSheets:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasKeyAppearanceIncludingSheets:) (( :CHAR)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0)))) nil t))

(defun ns::|setDisplaysWhenScreenProfileChanges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDisplaysWhenScreenProfileChanges:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setAutorecalculatesContentBorderThickness:forEdge:| (thing _ for-edge)
  (let ((message-lambda 
         (make-message-lambda @(setAutorecalculatesContentBorderThickness:forEdge:) (( :CHAR :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) for-edge)))

(defun ns::|hasDynamicDepthLimit| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasDynamicDepthLimit) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|guessDockTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(guessDockTitle:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|lockButtonClicked:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lockButtonClicked:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|allowsInteriorShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsInteriorShadow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isFlushWindowDisabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFlushWindowDisabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|shadowStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowStyle) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|shadowParameters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowParameters) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|viewsNeedDisplay| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(viewsNeedDisplay) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|changeToolBarDisplayModeToDisplayMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(changeToolBarDisplayModeToDisplayMode:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|mouseConfinementRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mouseConfinementRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|displaysWhenScreenProfileChanges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(displaysWhenScreenProfileChanges) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setUnsnappedFrame:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUnsnappedFrame:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|unsnappedFrame| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsnappedFrame) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|defaultButtonCell| (thing)
  (let ((message-lambda 
         (make-message-lambda @(defaultButtonCell) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|resignMainAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resignMainAppearance) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|acquireMainAppearance| (thing)
  (let ((message-lambda 
         (make-message-lambda @(acquireMainAppearance) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isRestorable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isRestorable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|cacheMiniwindowTitle:guess:| (thing _ guess)
  (let ((message-lambda 
         (make-message-lambda @(cacheMiniwindowTitle:guess:) (( :POINTER :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if guess 1 0))))

(defun ns::|timeMachineDelegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeMachineDelegate) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|miniwindowTitle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(miniwindowTitle) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|hasMainAppearance| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasMainAppearance) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun ns::|registerScrollViewSeparatorTrackingAdapter:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(registerScrollViewSeparatorTrackingAdapter:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|unregisterScrollViewSeparatorTrackingAdapter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(unregisterScrollViewSeparatorTrackingAdapter:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|editTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(editTitle:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|animationForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(animationForKeyPath:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|adjustLayoutForResolutionChangeToRetina:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(adjustLayoutForResolutionChangeToRetina:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|rebuildLayoutFromScratch| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rebuildLayoutFromScratch) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isPreferenceToolbarWindow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isPreferenceToolbarWindow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|titlebarSeparatorStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarSeparatorStyle) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentTitlebarSeparatorStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentTitlebarSeparatorStyle) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setContentTitlebarSeparatorStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentTitlebarSeparatorStyle:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setTitleWithRepresentedFilename:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleWithRepresentedFilename:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addDocumentIconButton| (thing)
  (let ((message-lambda 
         (make-message-lambda @(addDocumentIconButton) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|insertTitlebarAccessoryViewController:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertTitlebarAccessoryViewController:atIndex:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|titlebarBlurFiltersDisabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarBlurFiltersDisabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setTitlebarBlurFiltersDisabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarBlurFiltersDisabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|frameTopLeftPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(frameTopLeftPoint) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setContentResizeIncrements:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentResizeIncrements:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|contentResizeIncrements| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentResizeIncrements) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setContentAspectRatio:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentAspectRatio:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|contentAspectRatio| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentAspectRatio) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|shadowOptionsForActiveAppearance:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(shadowOptionsForActiveAppearance:) (( :CHAR)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|useOptimizedDrawing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(useOptimizedDrawing:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setKeyView:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setKeyView:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|autorecalculatesKeyViewLoop| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autorecalculatesKeyViewLoop) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|runToolbarConfigurationPalette:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(runToolbarConfigurationPalette:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setShowsLockButton:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsLockButton:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setMouseConfinementRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMouseConfinementRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|isReleasedWhenClosed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isReleasedWhenClosed) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isZoomed| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isZoomed) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|contentSeparatorColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentSeparatorColor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentInsetColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentInsetColor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setShowsContentSeparator:forEdge:| (thing _ for-edge)
  (let ((message-lambda 
         (make-message-lambda @(setShowsContentSeparator:forEdge:) (( :CHAR :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) for-edge)))

(defun ns::|setDynamicDepthLimit:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDynamicDepthLimit:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|orderBack:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(orderBack:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|orderFrontRegardless| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orderFrontRegardless) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setMiniwindowImage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMiniwindowImage:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setMiniwindowTitle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMiniwindowTitle:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|miniwindowImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(miniwindowImage) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isOneShot| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isOneShot) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|cacheImageInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(cacheImageInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|restoreCachedImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restoreCachedImage) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|discardCachedImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(discardCachedImage) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFrameUsingName:force:| (thing _ force)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setFrameUsingName:force:) (( :POINTER :CHAR)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if force 1 0)))) nil t))

(defun ns::|invalidateShadow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateShadow) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|canMoveToCurrentSpaceOnScreen:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canMoveToCurrentSpaceOnScreen:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|setMinFullScreenContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinFullScreenContentSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setMaxFullScreenContentSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaxFullScreenContentSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAutofill:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutofill:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|autofill| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autofill) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAutofillColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutofillColor:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|autofillColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(autofillColor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setShowsResizeIndicator:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShowsResizeIndicator:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|showsResizeIndicator| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(showsResizeIndicator) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|addChildWindow:ordered:shareKey:| (thing _ ordered share-key)
  (let ((message-lambda 
         (make-message-lambda @(addChildWindow:ordered:shareKey:) (( :POINTER :LONG-LONG :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) ordered (if share-key 1 0))))

(defun ns::|setSharingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSharingType:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|sharingType| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharingType) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPreferredBackingLocation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreferredBackingLocation:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|preferredBackingLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredBackingLocation) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|backingLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backingLocation) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setAllowsConcurrentViewDrawing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsConcurrentViewDrawing:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|maxTitlebarTitleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maxTitlebarTitleRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|titlebarTitleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarTitleRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|titlebarTitleFont| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarTitleFont) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|appearanceSource| (thing)
  (let ((message-lambda 
         (make-message-lambda @(appearanceSource) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|titleHidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titleHidden) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setTitleHidden:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleHidden:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setTitleMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitleMode:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|titleMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titleMode) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|titlebarAppearsTransparentWhenFullscreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarAppearsTransparentWhenFullscreen) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setTitlebarAppearsTransparentWhenFullscreen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarAppearsTransparentWhenFullscreen:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|titlebarDrawsBottomDividerWhenTransparent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarDrawsBottomDividerWhenTransparent) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setTitlebarDrawsBottomDividerWhenTransparent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarDrawsBottomDividerWhenTransparent:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|titlebarHandlesDoubleClickWhenTransparent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(titlebarHandlesDoubleClickWhenTransparent) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setTitlebarHandlesDoubleClickWhenTransparent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarHandlesDoubleClickWhenTransparent:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|addTabbedWindow:ordered:| (thing _ ordered)
  (let ((message-lambda 
         (make-message-lambda @(addTabbedWindow:ordered:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) ordered)))

(defun ns::|canBeVisibleOnAllSpaces| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canBeVisibleOnAllSpaces) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setCanBeVisibleOnAllSpaces:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanBeVisibleOnAllSpaces:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|standardWindowTitleButtonsAlphaValue| (thing)
  (let ((message-lambda 
         (make-message-lambda @(standardWindowTitleButtonsAlphaValue) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setStandardWindowTitleButtonsAlphaValue:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStandardWindowTitleButtonsAlphaValue:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|titlebarHeight| (thing)
  (let ((message-lambda 
         (make-message-lambda @(titlebarHeight) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTitlebarHeight:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTitlebarHeight:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|standardWindowButtonGroupOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(standardWindowButtonGroupOffset) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setStandardWindowButtonGroupOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStandardWindowButtonGroupOffset:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|hasColorSensitiveUI| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasColorSensitiveUI) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setHasColorSensitiveUI:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHasColorSensitiveUI:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|windowRefWithCompositedAttribute:andFrameworkScaledAttribute:| (thing _ and-framework-scaled-attribute)
  (let ((message-lambda 
         (make-message-lambda @(windowRefWithCompositedAttribute:andFrameworkScaledAttribute:) (( :CHAR :CHAR)  ( :POINTER :VOID))))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0) (if and-framework-scaled-attribute 1 0))))

(defun ns::|initWithWindowRef:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithWindowRef:) (( ( :POINTER :VOID))  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|dockTitleIsGuess| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(dockTitleIsGuess) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|showDeminiaturizedWindow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(showDeminiaturizedWindow) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setShadowStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowStyle:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|restoreWindowOnDockDeath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restoreWindowOnDockDeath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|restoreWindowOnDockReincarnation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restoreWindowOnDockReincarnation) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|updateInDock| (thing)
  (let ((message-lambda 
         (make-message-lambda @(updateInDock) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setTimeMachineDelegate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTimeMachineDelegate:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|hostsLayersInWindowServer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hostsLayersInWindowServer) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|canHostLayersInWindowServer| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canHostLayersInWindowServer) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setCanHostLayersInWindowServer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCanHostLayersInWindowServer:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|accessibilitySubtitleUIElementAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySubtitleUIElementAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityAddDeferredNotification:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityAddDeferredNotification:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySetPositionAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetPositionAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityMainAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMainAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsMainAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMainAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySetMainAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetMainAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityMinimizedAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinimizedAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsMinimizedAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMinimizedAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySetMinimizedAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetMinimizedAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityCloseButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCloseButtonAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsCloseButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsCloseButtonAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityZoomButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityZoomButtonAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsZoomButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsZoomButtonAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityMinimizeButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityMinimizeButtonAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsMinimizeButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsMinimizeButtonAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityToolbarButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityToolbarButtonAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsToolbarButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsToolbarButtonAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityFullScreenButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFullScreenButtonAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsFullScreenButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFullScreenButtonAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityFullScreenAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityFullScreenAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsFullScreenAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsFullScreenAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilitySetFullScreenAttribute:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySetFullScreenAttribute:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilityProxyAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityProxyAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsProxyAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsProxyAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityIsGrowAreaAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsGrowAreaAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityDefaultButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDefaultButtonAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsDefaultButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsDefaultButtonAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityCancelButtonAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityCancelButtonAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsCancelButtonAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsCancelButtonAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityDocumentAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityDocumentAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsDocumentAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsDocumentAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityModalAttribute| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityModalAttribute) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|accessibilityIsModalAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsModalAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|accessibilityIsSectionsAttributeSettable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(accessibilityIsSectionsAttributeSettable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|hasCloseBox| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasCloseBox) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isMiniaturizable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isMiniaturizable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isModalPanel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isModalPanel) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isZoomable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isZoomable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|orderedIndex| (thing)
  (let ((message-lambda 
         (make-message-lambda @(orderedIndex) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setIsMiniaturized:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsMiniaturized:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setIsVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsVisible:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setIsZoomed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setIsZoomed:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setOrderedIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOrderedIndex:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|boundsAsQDRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(boundsAsQDRect) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setBoundsAsQDRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBoundsAsQDRect:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|view:acceptsFirstMouseEvent:initialKeyWindow:| (thing _ accepts-first-mouse-event initial-key-window)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(view:acceptsFirstMouseEvent:initialKeyWindow:) (( :POINTER :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id accepts-first-mouse-event) (objc-object-id initial-key-window)))) nil t))


(defun ns::|visualizeConstraints:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(visualizeConstraints:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|accessibilitySendDeferredNotifications| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilitySendDeferredNotifications) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setRemoteUIElement:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRemoteUIElement:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|liveResizeEdges| (thing)
  (let ((message-lambda 
         (make-message-lambda @(liveResizeEdges) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|anchorItemForOrientation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(anchorItemForOrientation:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAnchorItem:forOrientation:| (thing _ for-orientation)
  (let ((message-lambda 
         (make-message-lambda @(setAnchorItem:forOrientation:) (( :POINTER :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) for-orientation)))










(defun ns::|CGColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CGColor) (()  ( :POINTER ( :STRUCT ns::|CGColor|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setStroke| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setStroke) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|cyanComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cyanComponent) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|magentaComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(magentaComponent) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|yellowComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(yellowComponent) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|blackComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(blackComponent) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|alphaComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(alphaComponent) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|colorWithAlphaComponent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorWithAlphaComponent:) (( :DOUBLE)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|colorUsingColorSpace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorUsingColorSpace:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|redComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(redComponent) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|greenComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(greenComponent) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|blueComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(blueComponent) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|colorUsingType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorUsingType:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|numberOfComponents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(numberOfComponents) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|getComponents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(getComponents:) (( ( :POINTER :DOUBLE))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))





(defun ns::|colorUsingColorSpaceName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorUsingColorSpaceName:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|getRed:green:blue:alpha:| (thing _ green blue alpha)
  (let ((message-lambda 
         (make-message-lambda @(getRed:green:blue:alpha:) (( ( :POINTER :DOUBLE) ( :POINTER :DOUBLE) ( :POINTER :DOUBLE) ( :POINTER :DOUBLE))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id green) (objc-object-id blue) (objc-object-id alpha))))

(defun ns::|colorSpaceName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorSpaceName) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|blendedColorWithFraction:ofColor:| (thing _ of-color)
  (let ((message-lambda 
         (make-message-lambda @(blendedColorWithFraction:ofColor:) (( :DOUBLE :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id of-color))))

(defun ns::|getWhite:alpha:| (thing _ alpha)
  (let ((message-lambda 
         (make-message-lambda @(getWhite:alpha:) (( ( :POINTER :DOUBLE) ( :POINTER :DOUBLE))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id alpha))))

(defun ns::|getCyan:magenta:yellow:black:alpha:| (thing _ magenta yellow black alpha)
  (let ((message-lambda 
         (make-message-lambda @(getCyan:magenta:yellow:black:alpha:) (( ( :POINTER :DOUBLE) ( :POINTER :DOUBLE) ( :POINTER :DOUBLE) ( :POINTER :DOUBLE) ( :POINTER :DOUBLE))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id magenta) (objc-object-id yellow) (objc-object-id black) (objc-object-id alpha))))

(defun ns::|setFill| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setFill) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|getHue:saturation:brightness:alpha:| (thing _ saturation brightness alpha)
  (let ((message-lambda 
         (make-message-lambda @(getHue:saturation:brightness:alpha:) (( ( :POINTER :DOUBLE) ( :POINTER :DOUBLE) ( :POINTER :DOUBLE) ( :POINTER :DOUBLE))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id saturation) (objc-object-id brightness) (objc-object-id alpha))))

(defun ns::|patternImage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(patternImage) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|whiteComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(whiteComponent) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|colorUsingColorSpaceName:device:| (thing _ device)
  (let ((message-lambda 
         (make-message-lambda @(colorUsingColorSpaceName:device:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id device))))



(defun ns::|isUniform| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isUniform) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|writeToPasteboard:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(writeToPasteboard:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|drawSwatchInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawSwatchInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|catalogNameComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(catalogNameComponent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|colorNameComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorNameComponent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|localizedCatalogNameComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedCatalogNameComponent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|localizedColorNameComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(localizedColorNameComponent) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|hueComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(hueComponent) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|saturationComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(saturationComponent) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|brightnessComponent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(brightnessComponent) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|highlightWithLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(highlightWithLevel:) (( :DOUBLE)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|shadowWithLevel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(shadowWithLevel:) (( :DOUBLE)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|colorWithSystemEffect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorWithSystemEffect:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|accessibilityName| (thing)
  (let ((message-lambda 
         (make-message-lambda @(accessibilityName) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|scriptingColorDescriptor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(scriptingColorDescriptor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))







(defun ns::|allKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(allKeys) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithName:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun ns::|colorWithKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorWithKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|initWithName:fromFile:| (thing _ from-file)
  (let ((message-lambda 
         (make-message-lambda @(initWithName:fromFile:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id from-file))))

(defun ns::|insertColor:key:atIndex:| (thing _ key at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertColor:key:atIndex:) (( :POINTER :POINTER :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id key) at-index)))

(defun ns::|removeFile| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeFile) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setColor:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(setColor:forKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun ns::|removeColorWithKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeColorWithKey:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|writeToFile:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeToFile:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))


































(defun ns::|attributes| (thing)
  (let ((message-lambda 
         (make-message-lambda @(attributes) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|CGContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CGContext) (()  ( :POINTER ( :STRUCT ns::|CGContext|)))))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|saveGraphicsState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(saveGraphicsState) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|restoreGraphicsState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(restoreGraphicsState) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|patternPhase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(patternPhase) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPatternPhase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPatternPhase:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|flushGraphics| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flushGraphics) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setShouldAntialias:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShouldAntialias:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|shouldAntialias| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldAntialias) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))





(defun ns::|colorRenderingIntent| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorRenderingIntent) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setColorRenderingIntent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setColorRenderingIntent:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|CIContext| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CIContext) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isDrawingToScreen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDrawingToScreen) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|CALayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CALayer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|focusStack| (thing)
  (let ((message-lambda 
         (make-message-lambda @(focusStack) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFocusStack:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFocusStack:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|colorFactory| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorFactory) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))








(defun ns::|setLineWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineWidth:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|lineWidth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineWidth) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|elementCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(elementCount) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|elementAtIndex:associatedPoints:| (thing _ associated-points)
  (let ((message-lambda 
         (make-message-lambda @(elementAtIndex:associatedPoints:) (( :LONG-LONG ( :POINTER ( :STRUCT ns::|CGPoint|)))  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id associated-points))))

(defun ns::|transformUsingAffineTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(transformUsingAffineTransform:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|appendBezierPathWithRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|appendBezierPathWithOvalInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithOvalInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|appendBezierPathWithRoundedRect:xRadius:yRadius:| (thing _ x-radius y-radius)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithRoundedRect:xRadius:yRadius:) (( ( :STRUCT ns::|CGRect|) :DOUBLE :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ x-radius y-radius)))

(defun ns::|appendBezierPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPath:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|windingRule| (thing)
  (let ((message-lambda 
         (make-message-lambda @(windingRule) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setWindingRule:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWindingRule:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|lineCapStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineCapStyle) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setLineCapStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineCapStyle:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|lineJoinStyle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(lineJoinStyle) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setLineJoinStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLineJoinStyle:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|miterLimit| (thing)
  (let ((message-lambda 
         (make-message-lambda @(miterLimit) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setMiterLimit:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMiterLimit:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|flatness| (thing)
  (let ((message-lambda 
         (make-message-lambda @(flatness) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFlatness:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFlatness:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setLineDash:count:phase:| (thing _ count phase)
  (let ((message-lambda 
         (make-message-lambda @(setLineDash:count:phase:) (( ( :POINTER :DOUBLE) :LONG-LONG :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) count phase)))

(defun ns::|currentPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentPoint) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|addClip| (thing)
  (let ((message-lambda 
         (make-message-lambda @(addClip) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|lineToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(lineToPoint:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|moveToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(moveToPoint:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|closePath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(closePath) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|subdivideBezierWithFlatness:startPoint:controlPoint1:controlPoint2:endPoint:| (thing _ start-point control-point1 control-point2 end-point)
  (let ((message-lambda 
         (make-message-lambda @(subdivideBezierWithFlatness:startPoint:controlPoint1:controlPoint2:endPoint:) (( :DOUBLE ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ start-point control-point1 control-point2 end-point)))

(defun ns::|flattenIntoPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(flattenIntoPath:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|curveToPoint:controlPoint1:controlPoint2:| (thing _ control-point1 control-point2)
  (let ((message-lambda 
         (make-message-lambda @(curveToPoint:controlPoint1:controlPoint2:) (( ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ control-point1 control-point2)))

(defun ns::|controlPointBounds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(controlPointBounds) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:| (thing _ radius start-angle end-angle)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:) (( ( :STRUCT ns::|CGPoint|) :DOUBLE :DOUBLE :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ radius start-angle end-angle)))

(defun ns::|appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:| (thing _ radius start-angle end-angle clockwise)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:) (( ( :STRUCT ns::|CGPoint|) :DOUBLE :DOUBLE :DOUBLE :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ radius start-angle end-angle (if clockwise 1 0))))

(defun ns::|appendBezierPathWithNativeGlyphs:advances:count:inFont:| (thing _ advances count in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithNativeGlyphs:advances:count:inFont:) (( ( :POINTER :UNSIGNED-SHORT) ( :POINTER ( :STRUCT ns::|CGSize|)) :UNSIGNED-LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id advances) count (objc-object-id in-font))))

(defun ns::|removeAllPoints| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeAllPoints) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|relativeMoveToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(relativeMoveToPoint:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|relativeLineToPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(relativeLineToPoint:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|relativeCurveToPoint:controlPoint1:controlPoint2:| (thing _ control-point1 control-point2)
  (let ((message-lambda 
         (make-message-lambda @(relativeCurveToPoint:controlPoint1:controlPoint2:) (( ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ control-point1 control-point2)))

(defun ns::|getLineDash:count:phase:| (thing _ count phase)
  (let ((message-lambda 
         (make-message-lambda @(getLineDash:count:phase:) (( ( :POINTER :DOUBLE) ( :POINTER :LONG-LONG) ( :POINTER :DOUBLE))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id count) (objc-object-id phase))))

(defun ns::|CGPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(CGPath) (()  ( :POINTER ( :STRUCT ns::|CGPath|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stroke| (thing)
  (let ((message-lambda 
         (make-message-lambda @(stroke) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|fill| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fill) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setClip| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setClip) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bezierPathByFlatteningPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bezierPathByFlatteningPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|bezierPathByReversingPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(bezierPathByReversingPath) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|elementAtIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(elementAtIndex:) (( :LONG-LONG)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAssociatedPoints:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(setAssociatedPoints:atIndex:) (( ( :POINTER ( :STRUCT ns::|CGPoint|)) :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|appendBezierPathWithPoints:count:| (thing _ count)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithPoints:count:) (( ( :POINTER ( :STRUCT ns::|CGPoint|)) :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) count)))

(defun ns::|appendBezierPathWithArcFromPoint:toPoint:radius:| (thing _ to-point radius)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithArcFromPoint:toPoint:radius:) (( ( :STRUCT ns::|CGPoint|) ( :STRUCT ns::|CGPoint|) :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ to-point radius)))

(defun ns::|appendBezierPathWithCGGlyph:inFont:| (thing _ in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithCGGlyph:inFont:) (( :UNSIGNED-SHORT :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-font))))

(defun ns::|appendBezierPathWithCGGlyphs:count:inFont:| (thing _ count in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithCGGlyphs:count:inFont:) (( ( :POINTER :UNSIGNED-SHORT) :LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) count (objc-object-id in-font))))

(defun ns::|containsPoint:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(containsPoint:) (( ( :STRUCT ns::|CGPoint|))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|cachesBezierPath| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(cachesBezierPath) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setCachesBezierPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCachesBezierPath:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|appendBezierPathWithGlyph:inFont:| (thing _ in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithGlyph:inFont:) (( :UNSIGNED-INT :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-font))))

(defun ns::|appendBezierPathWithGlyphs:count:inFont:| (thing _ count in-font)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithGlyphs:count:inFont:) (( ( :POINTER :UNSIGNED-INT) :LONG-LONG :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) count (objc-object-id in-font))))

(defun ns::|appendBezierPathWithPackedGlyphs:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(appendBezierPathWithPackedGlyphs:) (( :STRING)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|isAfterDate:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isAfterDate:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|isBeforeDate:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isBeforeDate:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|bs_dateByAddingDays:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bs_dateByAddingDays:) (( :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|daysSince1970| (thing)
  (let ((message-lambda 
         (make-message-lambda @(daysSince1970) (()  :INT)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun ns::|dateWithCalendarFormat:timeZone:| (thing _ time-zone)
  (let ((message-lambda 
         (make-message-lambda @(dateWithCalendarFormat:timeZone:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id time-zone))))

(defun ns::|descriptionWithCalendarFormat:timeZone:locale:| (thing _ time-zone locale)
  (let ((message-lambda 
         (make-message-lambda @(descriptionWithCalendarFormat:timeZone:locale:) (( :POINTER :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id time-zone) (objc-object-id locale))))

(defun ns::|timeIntervalSince1970WithBucket:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSince1970WithBucket:) (( :UNSIGNED-INT)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|bucketToRoundingFactor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bucketToRoundingFactor:) (( :UNSIGNED-INT)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))






(defun ns::|timeIntervalSince1970| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSince1970) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))





(defun ns::|timeIntervalSinceReferenceDate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSinceReferenceDate) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithTimeIntervalSinceReferenceDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithTimeIntervalSinceReferenceDate:) (( :DOUBLE)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|isEqualToDate:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqualToDate:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))


(defun ns::|dateByAddingTimeInterval:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dateByAddingTimeInterval:) (( :DOUBLE)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|earlierDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(earlierDate:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|laterDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(laterDate:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|timeIntervalSinceDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSinceDate:) (( :POINTER)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|timeIntervalSinceNow| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeIntervalSinceNow) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|initWithTimeIntervalSinceNow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithTimeIntervalSinceNow:) (( :DOUBLE)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithTimeIntervalSince1970:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithTimeIntervalSince1970:) (( :DOUBLE)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithTimeInterval:sinceDate:| (thing _ since-date)
  (let ((message-lambda 
         (make-message-lambda @(initWithTimeInterval:sinceDate:) (( :DOUBLE :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id since-date))))

(defun ns::|initWithDate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithDate:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|addTimeInterval:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addTimeInterval:) (( :DOUBLE)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|isInToday| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInToday) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isInTomorrow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInTomorrow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isInYesterday| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInYesterday) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isInSameDayAsDate:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isInSameDayAsDate:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|isEqual:toUnitGranularity:| (thing _ to-unit-granularity)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isEqual:toUnitGranularity:) (( :POINTER :UNSIGNED-LONG-LONG)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) to-unit-granularity))) nil t))

(defun ns::|compare:toUnitGranularity:| (thing _ to-unit-granularity)
  (let ((message-lambda 
         (make-message-lambda @(compare:toUnitGranularity:) (( :POINTER :UNSIGNED-LONG-LONG)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) to-unit-granularity)))







(defun ns::|device| (thing)
  (let ((message-lambda 
         (make-message-lambda @(device) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|sampleCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sampleCount) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSampleCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSampleCount:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|framebufferOnly| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(framebufferOnly) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setClearColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setClearColor:) (( ( :ARRAY :CHAR 32))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setClearDepth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setClearDepth:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setClearStencil:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setClearStencil:) (( :UNSIGNED-INT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|clearDepth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clearDepth) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|startTime| (thing)
  (let ((message-lambda 
         (make-message-lambda @(startTime) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|isPaused| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isPaused) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun ns::|clearColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clearColor) (()  ( :ARRAY :CHAR 32))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|draw| (thing)
  (let ((message-lambda 
         (make-message-lambda @(draw) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPaused:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPaused:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))







(defun ns::|displayLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(displayLayer:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|drawableSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawableSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDrawableSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawableSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|preferredDrawableSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredDrawableSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPreferredFramesPerSecond:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreferredFramesPerSecond:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|preferredFramesPerSecond| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredFramesPerSecond) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|presentsWithTransaction| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(presentsWithTransaction) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setPresentsWithTransaction:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPresentsWithTransaction:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setFramebufferOnly:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFramebufferOnly:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|colorspace| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorspace) (()  ( :POINTER ( :STRUCT ns::|CGColorSpace|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDevice:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDevice:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|preferredDevice| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredDevice) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setColorspace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setColorspace:) (( ( :POINTER ( :STRUCT ns::|CGColorSpace|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|clearStencil| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clearStencil) (()  :UNSIGNED-INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|getEnvironmentSettings| (thing)
  (let ((message-lambda 
         (make-message-lambda @(getEnvironmentSettings) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setColorPixelFormat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setColorPixelFormat:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|colorPixelFormat| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorPixelFormat) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setColorPixelFormat:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(setColorPixelFormat:atIndex:) (( :UNSIGNED-LONG-LONG :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _ at-index)))

(defun ns::|createDepthStencilTexture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(createDepthStencilTexture) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|multisampleColorTexturesForceUpdate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(multisampleColorTexturesForceUpdate:) (( :CHAR)  ( :POINTER :POINTER))))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|colorTextures| (thing)
  (let ((message-lambda 
         (make-message-lambda @(colorTextures) (()  ( :POINTER :POINTER))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|colorTexturesForceUpdate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(colorTexturesForceUpdate:) (( :CHAR)  ( :POINTER :POINTER))))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|currentDrawable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentDrawable) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|multisampleColorTextures| (thing)
  (let ((message-lambda 
         (make-message-lambda @(multisampleColorTextures) (()  ( :POINTER :POINTER))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setNominalFramesPerSecond:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNominalFramesPerSecond:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|initWithFrame:device:| (thing _ device)
  (let ((message-lambda 
         (make-message-lambda @(initWithFrame:device:) (( ( :STRUCT ns::|CGRect|) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id device))))

(defun ns::|setDrawableAttachmentIndex:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawableAttachmentIndex:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setDepthStencilPixelFormat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDepthStencilPixelFormat:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setEnableSetNeedsDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEnableSetNeedsDisplay:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setAutoResizeDrawable:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoResizeDrawable:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|drawableAttachmentIndex| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawableAttachmentIndex) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|depthStencilTexture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(depthStencilTexture) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|exportToTargaAtLocation:width:height:size:bytes:| (thing _ width height size bytes)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(exportToTargaAtLocation:width:height:size:bytes:) (( :POINTER :UNSIGNED-LONG-LONG :UNSIGNED-LONG-LONG :UNSIGNED-LONG-LONG ( :POINTER :VOID))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) width height size (objc-object-id bytes)))) nil t))

(defun ns::|drawNumber| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawNumber) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|multisampleColorTexture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(multisampleColorTexture) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|nominalFramesPerSecond| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nominalFramesPerSecond) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|releaseDrawables| (thing)
  (let ((message-lambda 
         (make-message-lambda @(releaseDrawables) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|currentRenderPassDescriptor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentRenderPassDescriptor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDepthStencilAttachmentTextureUsage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDepthStencilAttachmentTextureUsage:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|depthStencilAttachmentTextureUsage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(depthStencilAttachmentTextureUsage) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|depthStencilStorageMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(depthStencilStorageMode) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDepthStencilStorageMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDepthStencilStorageMode:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setMultisampleColorAttachmentTextureUsage:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMultisampleColorAttachmentTextureUsage:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|multisampleColorAttachmentTextureUsage| (thing)
  (let ((message-lambda 
         (make-message-lambda @(multisampleColorAttachmentTextureUsage) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|depthStencilPixelFormat| (thing)
  (let ((message-lambda 
         (make-message-lambda @(depthStencilPixelFormat) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|enableSetNeedsDisplay| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(enableSetNeedsDisplay) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|autoResizeDrawable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoResizeDrawable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))













(defun ns::|setDefaultItemIdentifiers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDefaultItemIdentifiers:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setTemplateItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTemplateItems:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setPrincipalItemIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPrincipalItemIdentifier:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setSuppressesLessFocusedBars:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSuppressesLessFocusedBars:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setSuppressesMoreFocusedBars:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSuppressesMoreFocusedBars:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))



(defun ns::|items| (thing)
  (let ((message-lambda 
         (make-message-lambda @(items) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|escapeKeyReplacementItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(escapeKeyReplacementItem) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDefaultItems:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDefaultItems:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setItemIdentifiers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setItemIdentifiers:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setCustomizationDefaultItemIdentifiers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCustomizationDefaultItemIdentifiers:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|configuration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(configuration) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|customizationIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(customizationIdentifier) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|itemIdentifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(itemIdentifiers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setCustomizationIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCustomizationIdentifier:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setCustomizationAllowedItemIdentifiers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCustomizationAllowedItemIdentifiers:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setSuppressedByMoreFocusedTouchBars:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSuppressedByMoreFocusedTouchBars:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|touchBarLayoutDirection| (thing)
  (let ((message-lambda 
         (make-message-lambda @(touchBarLayoutDirection) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|customizationDefaultItemIdentifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(customizationDefaultItemIdentifiers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|itemForIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(itemForIdentifier:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isSuppressedByMoreFocusedTouchBars| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSuppressedByMoreFocusedTouchBars) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isSuppressedByLessFocusedTouchBars| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSuppressedByLessFocusedTouchBars) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|suppressesLessFocusedBars| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(suppressesLessFocusedBars) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|suppressesMoreFocusedBars| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(suppressesMoreFocusedBars) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|principalItemIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(principalItemIdentifier) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|customizationRequiredItemIdentifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(customizationRequiredItemIdentifiers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|animationDuration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animationDuration) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setEscapeKeyReplacementItemIdentifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEscapeKeyReplacementItemIdentifier:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|customizationAllowedItemIdentifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(customizationAllowedItemIdentifiers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|escapeKeyReplacementItemIdentifier| (thing)
  (let ((message-lambda 
         (make-message-lambda @(escapeKeyReplacementItemIdentifier) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|defaultItemIdentifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(defaultItemIdentifiers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|templateItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(templateItems) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|defaultItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(defaultItems) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|minWidthGivenVisualCenterX:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(minWidthGivenVisualCenterX:) (( :DOUBLE)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|animationTimingFunction| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animationTimingFunction) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setCustomizationRequiredItemIdentifiers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCustomizationRequiredItemIdentifiers:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setTouchBarLayoutDirection:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTouchBarLayoutDirection:) (( :LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setSuppressedByLessFocusedTouchBars:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSuppressedByLessFocusedTouchBars:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setEscapeKeyReplacementItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEscapeKeyReplacementItem:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|changeCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(changeCount) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|types| (thing)
  (let ((message-lambda 
         (make-message-lambda @(types) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|availableTypeFromArray:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(availableTypeFromArray:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|attemptOverwrite:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(attemptOverwrite:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|declareTypes:owner:| (thing _ owner)
  (let ((message-lambda 
         (make-message-lambda @(declareTypes:owner:) (( :POINTER :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id owner))))

(defun ns::|setString:forType:| (thing _ for-type)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setString:forType:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-type)))) nil t))

(defun ns::|dataForType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dataForType:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setData:forType:| (thing _ for-type)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setData:forType:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-type)))) nil t))

(defun ns::|propertyListForType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(propertyListForType:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|readObjectsForClasses:options:| (thing _ options)
  (let ((message-lambda 
         (make-message-lambda @(readObjectsForClasses:options:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id options))))

(defun ns::|clearContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clearContents) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|writeObjects:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeObjects:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|setPropertyList:forType:| (thing _ for-type)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setPropertyList:forType:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-type)))) nil t))

(defun ns::|addTypes:owner:| (thing _ owner)
  (let ((message-lambda 
         (make-message-lambda @(addTypes:owner:) (( :POINTER :POINTER)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id owner))))

(defun ns::|pasteboardItems| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pasteboardItems) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|stringForType:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stringForType:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|releaseGlobally| (thing)
  (let ((message-lambda 
         (make-message-lambda @(releaseGlobally) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|prepareForNewContentsWithOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(prepareForNewContentsWithOptions:) (( :UNSIGNED-LONG-LONG)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|indexOfPasteboardItem:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(indexOfPasteboardItem:) (( :POINTER)  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|canReadItemWithDataConformingToTypes:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canReadItemWithDataConformingToTypes:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|canReadObjectForClasses:options:| (thing _ options)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(canReadObjectForClasses:options:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id options)))) nil t))

(defun ns::|setDataProvider:forTypes:| (thing _ for-types)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(setDataProvider:forTypes:) (( :POINTER :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-types)))) nil t))

(defun ns::|writeFileContents:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeFileContents:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|writeFileWrapper:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(writeFileWrapper:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|readFileContentsType:toFile:| (thing _ to-file)
  (let ((message-lambda 
         (make-message-lambda @(readFileContentsType:toFile:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-file))))

(defun ns::|readFileWrapper| (thing)
  (let ((message-lambda 
         (make-message-lambda @(readFileWrapper) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|NS_managesOpenGLDrawable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_managesOpenGLDrawable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|NS_wantsToPrefetchTiles| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_wantsToPrefetchTiles) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|NS_showPrefetchedContentsIfNecessaryInRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_showPrefetchedContentsIfNecessaryInRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|NS_setPresentationRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_setPresentationRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|NS_suggestedContentsScale| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_suggestedContentsScale) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|NS_suggestedContentsScaleDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_suggestedContentsScaleDidChange) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|NS_invalidatePreparedContentRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_invalidatePreparedContentRect) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|NS_prepareContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_prepareContentRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|NS_convertTriangle:toLayer:| (thing _ to-layer)
  (let ((message-lambda 
         (make-message-lambda @(NS_convertTriangle:toLayer:) (( ( :ARRAY :CHAR 48) :POINTER)  ( :ARRAY :CHAR 48))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-layer))))

(defun ns::|NS_defersTransformInvalidation| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_defersTransformInvalidation) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|NS_setDefersTransformInvalidation:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_setDefersTransformInvalidation:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|NS_contextDefaultContentsScaleDidChange| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_contextDefaultContentsScaleDidChange) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|visualTabPicker_hitTestIgnoringTransformLayers:inRootLayer:| (thing _ in-root-layer)
  (let ((message-lambda 
         (make-message-lambda @(visualTabPicker_hitTestIgnoringTransformLayers:inRootLayer:) (( ( :STRUCT ns::|CGPoint|) :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id in-root-layer))))

(defun ns::|nearestAncestorIgnoringTransformLayers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nearestAncestorIgnoringTransformLayers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|NS_prefetchContentsInRect:scrollVelocity:| (thing _ scroll-velocity)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_prefetchContentsInRect:scrollVelocity:) (( ( :STRUCT ns::|CGRect|) ( :STRUCT ns::|CGPoint|))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _ scroll-velocity))) nil t))

(defun ns::|NS_isDebugOverlay| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_isDebugOverlay) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|NS_setIsScrolling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_setIsScrolling:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|NS_setPreparedContentRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(NS_setPreparedContentRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|NS_renderedRectInRect:scrollVelocity:| (thing _ scroll-velocity)
  (let ((message-lambda 
         (make-message-lambda @(NS_renderedRectInRect:scrollVelocity:) (( ( :STRUCT ns::|CGRect|) ( :STRUCT ns::|CGPoint|))  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ scroll-velocity)))

(defun ns::|NS_activeVisibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_activeVisibleRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|NS_visibleRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_visibleRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|NS_makeContentsLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_makeContentsLayer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|NS_hasPrefetchedContentsForRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_hasPrefetchedContentsForRect:) (( ( :STRUCT ns::|CGRect|))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|NS_hasPrefetchedContents| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_hasPrefetchedContents) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|NS_hasPartialPrefetchedContentsForRect:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(NS_hasPartialPrefetchedContentsForRect:) (( ( :STRUCT ns::|CGRect|))  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  _))) nil t))

(defun ns::|NS_backingLayerContentsClass| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_backingLayerContentsClass) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|NS_dropPrefetchedContentsIfNecessary| (thing)
  (let ((message-lambda 
         (make-message-lambda @(NS_dropPrefetchedContentsIfNecessary) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|PKG_updateLayerKey| (thing)
  (let ((message-lambda 
         (make-message-lambda @(PKG_updateLayerKey) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|PKG_materialLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(PKG_materialLayer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|PKG_setUpdateLayerKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(PKG_setUpdateLayerKey:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|PKG_setMaterialLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(PKG_setMaterialLayer:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


















(defun ns::|hidden| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hidden) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))





(defun ns::|style| (thing)
  (let ((message-lambda 
         (make-message-lambda @(style) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|contents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contents) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|borderColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(borderColor) (()  ( :POINTER ( :STRUCT ns::|CGColor|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|transform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(transform) (()  ( :STRUCT ns::|CATransform3D|))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|position| (thing)
  (let ((message-lambda 
         (make-message-lambda @(position) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))




(defun ns::|duration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(duration) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPosition:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setStyle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setStyle:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setDuration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDuration:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|shadowOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowOffset) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|shadowColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowColor) (()  ( :POINTER ( :STRUCT ns::|CGColor|)))))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|addSublayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addSublayer:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))



(defun ns::|removeFromSuperlayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeFromSuperlayer) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))












(defun ns::|modelLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(modelLayer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|insertSublayer:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertSublayer:atIndex:) (( :POINTER :UNSIGNED-INT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|setFilters:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFilters:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setContentsGravity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsGravity:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContents:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|insertSublayer:below:| (thing _ below)
  (let ((message-lambda 
         (make-message-lambda @(insertSublayer:below:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id below))))

(defun ns::|setSpeed:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSpeed:) (( :FLOAT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAutoreverses:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAutoreverses:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setRepeatCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepeatCount:) (( :FLOAT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|addAnimation:forKey:| (thing _ for-key)
  (let ((message-lambda 
         (make-message-lambda @(addAnimation:forKey:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id for-key))))

(defun ns::|setBorderColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBorderColor:) (( ( :POINTER ( :STRUCT ns::|CGColor|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setContentsScale:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsScale:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|setOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setOpacity:) (( :FLOAT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAnchorPoint:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAnchorPoint:) (( ( :STRUCT ns::|CGPoint|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))



(defun ns::|repeatDuration| (thing)
  (let ((message-lambda 
         (make-message-lambda @(repeatDuration) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|repeatCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(repeatCount) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|beginTime| (thing)
  (let ((message-lambda 
         (make-message-lambda @(beginTime) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|speed| (thing)
  (let ((message-lambda 
         (make-message-lambda @(speed) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|autoreverses| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(autoreverses) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))



(defun ns::|superlayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(superlayer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setMasksToBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMasksToBounds:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))


(defun ns::|anchorPoint| (thing)
  (let ((message-lambda 
         (make-message-lambda @(anchorPoint) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setBorderWidth:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBorderWidth:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|mask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mask) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMask:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|sublayers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sublayers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|opaque| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(opaque) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|borderWidth| (thing)
  (let ((message-lambda 
         (make-message-lambda @(borderWidth) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))






(defun ns::|setFillMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFillMode:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|contentsCenter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsCenter) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentsScale| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsScale) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|sublayerTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sublayerTransform) (()  ( :STRUCT ns::|CATransform3D|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSublayerTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSublayerTransform:) (( ( :STRUCT ns::|CATransform3D|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setBeginTime:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBeginTime:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|insertSublayer:above:| (thing _ above)
  (let ((message-lambda 
         (make-message-lambda @(insertSublayer:above:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id above))))

(defun ns::|convertRect:toLayer:| (thing _ to-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertRect:toLayer:) (( ( :STRUCT ns::|CGRect|) :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-layer))))

(defun ns::|setShadowOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowOpacity:) (( :FLOAT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setShadowRadius:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowRadius:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setShadowColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowColor:) (( ( :POINTER ( :STRUCT ns::|CGColor|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|setMinificationFilter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinificationFilter:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setMinificationFilterBias:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMinificationFilterBias:) (( :FLOAT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|presentationLayer| (thing)
  (let ((message-lambda 
         (make-message-lambda @(presentationLayer) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setShadowOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowOffset:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|shadowOpacity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowOpacity) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|shadowRadius| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowRadius) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|removeAnimationForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeAnimationForKey:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setTimeOffset:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTimeOffset:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setSublayers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSublayers:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))




(defun ns::|setCornerCurve:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerCurve:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setMaskedCorners:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaskedCorners:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setZPosition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setZPosition:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|setContentsCenter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsCenter:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setGeometryFlipped:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGeometryFlipped:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setHitTestsAsOpaque:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHitTestsAsOpaque:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|contentsAreFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsAreFlipped) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|actionForKey:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(actionForKey:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTransform:) (( ( :STRUCT ns::|CATransform3D|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setContentsTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsTransform:) (( ( :STRUCT ns::|CGAffineTransform|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setContentsScaling:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsScaling:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setContentsMultiplyColor:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsMultiplyColor:) (( ( :POINTER ( :STRUCT ns::|CGColor|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setContentsSwizzle:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsSwizzle:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|layoutSublayers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutSublayers) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setLayoutManager:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLayoutManager:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setNeedsLayoutOnGeometryChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsLayoutOnGeometryChange:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setNeedsLayout| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsLayout) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|layerDidBecomeVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(layerDidBecomeVisible:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|initWithLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(initWithLayer:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|drawInContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(drawInContext:) (( ( :POINTER ( :STRUCT ns::|CGContext|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|setContentsRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAffineTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAffineTransform:) (( ( :STRUCT ns::|CGAffineTransform|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|zPosition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(zPosition) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|reloadValueForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(reloadValueForKeyPath:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setWantsExtendedDynamicRangeContent:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setWantsExtendedDynamicRangeContent:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|convertPoint:fromLayer:| (thing _ from-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertPoint:fromLayer:) (( ( :STRUCT ns::|CGPoint|) :POINTER)  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-layer))))

(defun ns::|filters| (thing)
  (let ((message-lambda 
         (make-message-lambda @(filters) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|opacity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(opacity) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|replaceSublayer:with:| (thing _ with)
  (let ((message-lambda 
         (make-message-lambda @(replaceSublayer:with:) (( :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id with))))

(defun ns::|setEdgeAntialiasingMask:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEdgeAntialiasingMask:) (( :UNSIGNED-INT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAllowsGroupBlending:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsGroupBlending:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setShouldRasterize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShouldRasterize:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setRasterizationScale:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRasterizationScale:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setMagnificationFilter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMagnificationFilter:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setActions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setActions:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setAllowsGroupOpacity:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsGroupOpacity:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|animationKeys| (thing)
  (let ((message-lambda 
         (make-message-lambda @(animationKeys) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|hasBeenCommitted| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hasBeenCommitted) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|wantsExtendedDynamicRangeContent| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(wantsExtendedDynamicRangeContent) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setContentsFormat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsFormat:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|layoutBelowIfNeeded| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layoutBelowIfNeeded) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDrawsAsynchronously:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawsAsynchronously:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|clearHasBeenCommitted| (thing)
  (let ((message-lambda 
         (make-message-lambda @(clearHasBeenCommitted) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|renderInContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(renderInContext:) (( ( :POINTER ( :STRUCT ns::|CGContext|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setShadowPathIsBounds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowPathIsBounds:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|removeAllAnimations| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeAllAnimations) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|convertRect:fromLayer:| (thing _ from-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertRect:fromLayer:) (( ( :STRUCT ns::|CGRect|) :POINTER)  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-layer))))

(defun ns::|masksToBounds| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(masksToBounds) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|invalidateContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(invalidateContents) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setLiteralContentsCenter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLiteralContentsCenter:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setFloating:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFloating:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|isFloating| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFloating) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setAllowsHitTesting:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsHitTesting:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|floating| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(floating) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setHitTestsContentsAlphaChannel:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setHitTestsContentsAlphaChannel:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setAllowsEdgeAntialiasing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsEdgeAntialiasing:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|fillMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(fillMode) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setCornerContents:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerContents:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setCornerContentsCenter:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerContentsCenter:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setContentsOpaque:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsOpaque:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setNeedsDisplayOnBoundsChange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNeedsDisplayOnBoundsChange:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|convertPoint:toLayer:| (thing _ to-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertPoint:toLayer:) (( ( :STRUCT ns::|CGPoint|) :POINTER)  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-layer))))

(defun ns::|clearsContext| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(clearsContext) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setClearsContext:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setClearsContext:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|drawsAsynchronously| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsAsynchronously) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|minificationFilter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minificationFilter) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|magnificationFilter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(magnificationFilter) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|layerBeingDrawn| (thing)
  (let ((message-lambda 
         (make-message-lambda @(layerBeingDrawn) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setContentsChanged| (thing)
  (let ((message-lambda 
         (make-message-lambda @(setContentsChanged) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|meshTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(meshTransform) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|affineTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(affineTransform) (()  ( :STRUCT ns::|CGAffineTransform|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setMeshTransform:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMeshTransform:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|isFrozen| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isFrozen) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|CAMLParser:setValue:forKey:| (thing _ set-value for-key)
  (let ((message-lambda 
         (make-message-lambda @(CAMLParser:setValue:forKey:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id set-value) (objc-object-id for-key))))



(defun ns::|implicitAnimationForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(implicitAnimationForKeyPath:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|attributesForKeyPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(attributesForKeyPath:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))


(defun ns::|preferredFrameSize| (thing)
  (let ((message-lambda 
         (make-message-lambda @(preferredFrameSize) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|sublayerEnumerator| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sublayerEnumerator) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|layoutIsActive| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(layoutIsActive) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|shouldArchiveValueForKey:| (thing _)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldArchiveValueForKey:) (( :POINTER)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _)))) nil t))

(defun ns::|setUnsafeUnretainedDelegate:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setUnsafeUnretainedDelegate:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|acceleratesDrawing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(acceleratesDrawing) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setSizeRequisition:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSizeRequisition:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|insertState:atIndex:| (thing _ at-index)
  (let ((message-lambda 
         (make-message-lambda @(insertState:atIndex:) (( :POINTER :UNSIGNED-INT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) at-index)))

(defun ns::|addState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addState:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|removeState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removeState:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stateWithName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(stateWithName:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|dependentStatesOfState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(dependentStatesOfState:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|stateTransitionFrom:to:| (thing _ to)
  (let ((message-lambda 
         (make-message-lambda @(stateTransitionFrom:to:) (( :POINTER :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to))))

(defun ns::|timeOffset| (thing)
  (let ((message-lambda 
         (make-message-lambda @(timeOffset) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|minificationFilterBias| (thing)
  (let ((message-lambda 
         (make-message-lambda @(minificationFilterBias) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentsRect| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsRect) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setRepeatDuration:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRepeatDuration:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|anchorPointZ| (thing)
  (let ((message-lambda 
         (make-message-lambda @(anchorPointZ) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|needsLayoutOnGeometryChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsLayoutOnGeometryChange) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|layerDidChangeDisplay:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(layerDidChangeDisplay:) (( :UNSIGNED-INT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|contentsScaling| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsScaling) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|needsDisplayOnBoundsChange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(needsDisplayOnBoundsChange) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|separatedOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(separatedOptions) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|resizeSublayersWithOldSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(resizeSublayersWithOldSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|ancestorSharedWithLayer:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(ancestorSharedWithLayer:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|ignoresHitTesting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(ignoresHitTesting) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|allowsHitTesting| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsHitTesting) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|isDoubleSided| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDoubleSided) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|sortsSublayers| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(sortsSublayers) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|edgeAntialiasingMask| (thing)
  (let ((message-lambda 
         (make-message-lambda @(edgeAntialiasingMask) (()  :UNSIGNED-INT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentsTransform| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsTransform) (()  ( :STRUCT ns::|CGAffineTransform|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentsMultiplyColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsMultiplyColor) (()  ( :POINTER ( :STRUCT ns::|CGColor|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentsSwizzle| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsSwizzle) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|isSeparated| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isSeparated) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|drawsMipmapLevels| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(drawsMipmapLevels) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|sizeRequisition| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sizeRequisition) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|resizeWithOldSuperlayerSize:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(resizeWithOldSuperlayerSize:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|isGeometryFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isGeometryFlipped) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|convertTime:fromLayer:| (thing _ from-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertTime:fromLayer:) (( :DOUBLE :POINTER)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id from-layer))))

(defun ns::|convertTime:toLayer:| (thing _ to-layer)
  (let ((message-lambda 
         (make-message-lambda @(convertTime:toLayer:) (( :DOUBLE :POINTER)  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing)  _ (objc-object-id to-layer))))

(defun ns::|rasterizationScale| (thing)
  (let ((message-lambda 
         (make-message-lambda @(rasterizationScale) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|securityMode| (thing)
  (let ((message-lambda 
         (make-message-lambda @(securityMode) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setSecurityMode:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSecurityMode:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|contentsFormat| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsFormat) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentsGravity| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsGravity) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|contentsGravityEnum| (thing)
  (let ((message-lambda 
         (make-message-lambda @(contentsGravityEnum) (()  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|unsafeUnretainedDelegate| (thing)
  (let ((message-lambda 
         (make-message-lambda @(unsafeUnretainedDelegate) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|maskedCorners| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maskedCorners) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|cornerCurve| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cornerCurve) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|continuousCorners| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(continuousCorners) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setContinuousCorners:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContinuousCorners:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setAnchorPointZ:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAnchorPointZ:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|cornerContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cornerContents) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDoubleSided:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDoubleSided:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|cornerContentsCenter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(cornerContentsCenter) (()  ( :STRUCT ns::|CGRect|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|cornerContentsMasksEdges| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(cornerContentsMasksEdges) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setCornerContentsMasksEdges:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCornerContentsMasksEdges:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|contentsContainsSubtitles| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsContainsSubtitles) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setContentsContainsSubtitles:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsContainsSubtitles:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|gain| (thing)
  (let ((message-lambda 
         (make-message-lambda @(gain) (()  :FLOAT)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setGain:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setGain:) (( :FLOAT)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|actions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(actions) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setShadowPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setShadowPath:) (( ( :POINTER ( :STRUCT ns::|CGPath|)))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|shadowPath| (thing)
  (let ((message-lambda 
         (make-message-lambda @(shadowPath) (()  ( :POINTER ( :STRUCT ns::|CGPath|)))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|shouldRasterize| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shouldRasterize) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|rasterizationPrefersDisplayCompositing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(rasterizationPrefersDisplayCompositing) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setRasterizationPrefersDisplayCompositing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setRasterizationPrefersDisplayCompositing:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|allowsEdgeAntialiasing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsEdgeAntialiasing) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|allowsGroupOpacity| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsGroupOpacity) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|invertsContentsAreFlipped| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(invertsContentsAreFlipped) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setInvertsContentsAreFlipped:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInvertsContentsAreFlipped:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|doubleSided| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(doubleSided) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|backgroundColorPhase| (thing)
  (let ((message-lambda 
         (make-message-lambda @(backgroundColorPhase) (()  ( :STRUCT ns::|CGSize|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|separatedState| (thing)
  (let ((message-lambda 
         (make-message-lambda @(separatedState) (()  :UNSIGNED-CHAR)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|preloadsCache| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(preloadsCache) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|createsCompositingGroup| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(createsCompositingGroup) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|allowsDisplayCompositing| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsDisplayCompositing) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|toneMapToStandardDynamicRange| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(toneMapToStandardDynamicRange) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|allowsGroupBlending| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsGroupBlending) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|hitTestsContentsAlphaChannel| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hitTestsContentsAlphaChannel) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|hitTestsAsOpaque| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(hitTestsAsOpaque) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|literalContentsCenter| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(literalContentsCenter) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|inheritsTiming| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(inheritsTiming) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|treatRec709AsSRGB| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(treatRec709AsSRGB) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|invertsShadow| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(invertsShadow) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|shadowPathIsBounds| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(shadowPathIsBounds) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setSeparatedState:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSeparatedState:) (( :UNSIGNED-CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|regionBeingDrawn| (thing)
  (let ((message-lambda 
         (make-message-lambda @(regionBeingDrawn) (()  ( :POINTER :VOID))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|layerAtTime:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(layerAtTime:) (( :DOUBLE)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|addPresentationModifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(addPresentationModifier:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|removePresentationModifier:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(removePresentationModifier:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|presentationModifiers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(presentationModifiers) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPresentationModifiers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPresentationModifiers:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setSeparated:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSeparated:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setFrozen:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFrozen:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setSortsSublayers:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSortsSublayers:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|flipsHorizontalAxis| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(flipsHorizontalAxis) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setFlipsHorizontalAxis:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFlipsHorizontalAxis:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setInvertsShadow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInvertsShadow:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|contentsAlignsToPixels| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsAlignsToPixels) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setContentsAlignsToPixels:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsAlignsToPixels:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|contentsDither| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsDither) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setContentsDither:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setContentsDither:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|contentsOpaque| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(contentsOpaque) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setInheritsTiming:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setInheritsTiming:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setPreloadsCache:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPreloadsCache:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setCreatesCompositingGroup:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setCreatesCompositingGroup:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setAllowsDisplayCompositing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsDisplayCompositing:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setToneMapToStandardDynamicRange:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setToneMapToStandardDynamicRange:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setBackgroundColorPhase:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setBackgroundColorPhase:) (( ( :STRUCT ns::|CGSize|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|setAcceleratesDrawing:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAcceleratesDrawing:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setSeparatedOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setSeparatedOptions:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|setTreatRec709AsSRGB:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setTreatRec709AsSRGB:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|motionBlurAmount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(motionBlurAmount) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setMotionBlurAmount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMotionBlurAmount:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|getRendererInfo:size:| (thing _ size)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(getRendererInfo:size:) (( ( :POINTER ( :STRUCT ns::|_CARenderRendererInfo|)) :UNSIGNED-LONG-LONG)  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) size))) nil t))

(defun ns::|optimizationOpportunities:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(optimizationOpportunities:) (( :CHAR)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))





(defun ns::|setProtectionOptions:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setProtectionOptions:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|protectionOptions| (thing)
  (let ((message-lambda 
         (make-message-lambda @(protectionOptions) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setPixelFormat:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setPixelFormat:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|pixelFormat| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pixelFormat) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))






(defun ns::|isDrawableAvailable| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(isDrawableAvailable) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|nextDrawable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(nextDrawable) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|maximumDrawableCount| (thing)
  (let ((message-lambda 
         (make-message-lambda @(maximumDrawableCount) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|discardContents| (thing)
  (let ((message-lambda 
         (make-message-lambda @(discardContents) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setMaximumDrawableCount:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMaximumDrawableCount:) (( :UNSIGNED-LONG-LONG)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|lowLatency| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(lowLatency) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setLowLatency:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setLowLatency:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setDrawableTimeoutSeconds:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDrawableTimeoutSeconds:) (( :DOUBLE)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))

(defun ns::|drawableTimeoutSeconds| (thing)
  (let ((message-lambda 
         (make-message-lambda @(drawableTimeoutSeconds) (()  :DOUBLE)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|allowsNextDrawableTimeout| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(allowsNextDrawableTimeout) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|fenceEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(fenceEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|serverSyncEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(serverSyncEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|displaySyncEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(displaySyncEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))


(defun ns::|nonDefaultColorspace| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(nonDefaultColorspace) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|setColorspace:nonDefault:| (thing _ non-default)
  (let ((message-lambda 
         (make-message-lambda @(setColorspace:nonDefault:) (( ( :POINTER ( :STRUCT ns::|CGColorSpace|)) :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (if non-default 1 0))))

(defun ns::|setNonDefaultColorspace:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setNonDefaultColorspace:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))




(defun ns::|EDRMetadata| (thing)
  (let ((message-lambda 
         (make-message-lambda @(EDRMetadata) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setEDRMetadata:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setEDRMetadata:) (( :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|newDrawable| (thing)
  (let ((message-lambda 
         (make-message-lambda @(newDrawable) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setDisplaySyncEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setDisplaySyncEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setAllowsNextDrawableTimeout:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setAllowsNextDrawableTimeout:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|displayCompositingInternalStatus| (thing)
  (let ((message-lambda 
         (make-message-lambda @(displayCompositingInternalStatus) (()  :UNSIGNED-LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|removeBackBuffers| (thing)
  (let ((message-lambda 
         (make-message-lambda @(removeBackBuffers) (()  :VOID)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setFenceEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setFenceEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setServerSyncEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setServerSyncEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|setMuxLockEnabled:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMuxLockEnabled:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|muxLockEnabled| (thing)
  (if (= 0  (let ((message-lambda 
         (make-message-lambda @(muxLockEnabled) (()  :CHAR)))) 
   (funcall message-lambda (objc-object-id thing) ))) nil t))

(defun ns::|detachNewThreadSelector:toTarget:withObject:| (thing _ to-target with-object)
  (let ((message-lambda 
         (make-message-lambda @(detachNewThreadSelector:toTarget:withObject:) (( :POINTER :POINTER :POINTER)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _) (objc-object-id to-target) (objc-object-id with-object))))

(defun ns::|sharedApplication| (thing)
  (let ((message-lambda 
         (make-message-lambda @(sharedApplication) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|standardUserDefaults| (thing)
  (let ((message-lambda 
         (make-message-lambda @(standardUserDefaults) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|defaultCenter| (thing)
  (let ((message-lambda 
         (make-message-lambda @(defaultCenter) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|currentApplication| (thing)
  (let ((message-lambda 
         (make-message-lambda @(currentApplication) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|strokeRect:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(strokeRect:) (( ( :STRUCT ns::|CGRect|))  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  _)))


(defun ns::|graphicsContextWithWindow:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(graphicsContextWithWindow:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|whiteColor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(whiteColor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))


(defun ns::|distantPast| (thing)
  (let ((message-lambda 
         (make-message-lambda @(distantPast) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|distantFuture| (thing)
  (let ((message-lambda 
         (make-message-lambda @(distantFuture) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:| (thing _ location modifier-flags timestamp window-number context subtype data1 data2)
  (let ((message-lambda 
         (make-message-lambda @(otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:) (( :UNSIGNED-LONG-LONG ( :STRUCT ns::|CGPoint|) :UNSIGNED-LONG-LONG :DOUBLE :LONG-LONG :POINTER :SHORT :LONG-LONG :LONG-LONG)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  _ location modifier-flags timestamp window-number (objc-object-id context) subtype data1 data2)))

(defun ns::|mouseLocation| (thing)
  (let ((message-lambda 
         (make-message-lambda @(mouseLocation) (()  ( :STRUCT ns::|CGPoint|))))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|new| (thing)
  (let ((message-lambda 
         (make-message-lambda @(new) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))



(defun ns::|bundleWithPath:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(bundleWithPath:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))

(defun ns::|screens| (thing)
  (let ((message-lambda 
         (make-message-lambda @(screens) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|windowNumberAtPoint:belowWindowWithWindowNumber:| (thing _ below-window-with-window-number)
  (let ((message-lambda 
         (make-message-lambda @(windowNumberAtPoint:belowWindowWithWindowNumber:) (( ( :STRUCT ns::|CGPoint|) :LONG-LONG)  :LONG-LONG)))) 
   (funcall message-lambda (objc-object-id thing)  _ below-window-with-window-number)))

(defun ns::|separatorItem| (thing)
  (let ((message-lambda 
         (make-message-lambda @(separatorItem) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|setMenuBarVisible:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(setMenuBarVisible:) (( :CHAR)  :VOID)))) 
   (funcall message-lambda (objc-object-id thing)  (if _ 1 0))))

(defun ns::|array| (thing)
  (let ((message-lambda 
         (make-message-lambda @(array) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|arrowCursor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(arrowCursor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|IBeamCursor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(IBeamCursor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|crosshairCursor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(crosshairCursor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pointingHandCursor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(pointingHandCursor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|resizeLeftRightCursor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resizeLeftRightCursor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|resizeUpDownCursor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(resizeUpDownCursor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|closedHandCursor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(closedHandCursor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|operationNotAllowedCursor| (thing)
  (let ((message-lambda 
         (make-message-lambda @(operationNotAllowedCursor) (()  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing) )))

(defun ns::|pasteboardWithName:| (thing _)
  (let ((message-lambda 
         (make-message-lambda @(pasteboardWithName:) (( :POINTER)  :POINTER)))) 
   (funcall message-lambda (objc-object-id thing)  (objc-object-id _))))
(export (list 
          'ns::|pasteboardWithName:|
          'ns::|operationNotAllowedCursor|
          'ns::|closedHandCursor|
          'ns::|resizeUpDownCursor|
          'ns::|resizeLeftRightCursor|
          'ns::|pointingHandCursor|
          'ns::|crosshairCursor|
          'ns::|IBeamCursor|
          'ns::|arrowCursor|
          'ns::|array|
          'ns::|setMenuBarVisible:|
          'ns::|separatorItem|
          'ns::|windowNumberAtPoint:belowWindowWithWindowNumber:|
          'ns::|screens|
          'ns::|bundleWithPath:|
          'ns::|new|
          'ns::|mouseLocation|
          'ns::|otherEventWithType:location:modifierFlags:timestamp:windowNumber:context:subtype:data1:data2:|
          'ns::|distantFuture|
          'ns::|distantPast|
          'ns::|whiteColor|
          'ns::|graphicsContextWithWindow:|
          'ns::|strokeRect:|
          'ns::|currentApplication|
          'ns::|defaultCenter|
          'ns::|standardUserDefaults|
          'ns::|sharedApplication|
          'ns::|detachNewThreadSelector:toTarget:withObject:|
          'ns::|muxLockEnabled|
          'ns::|setMuxLockEnabled:|
          'ns::|setServerSyncEnabled:|
          'ns::|setFenceEnabled:|
          'ns::|removeBackBuffers|
          'ns::|displayCompositingInternalStatus|
          'ns::|setAllowsNextDrawableTimeout:|
          'ns::|setDisplaySyncEnabled:|
          'ns::|newDrawable|
          'ns::|setEDRMetadata:|
          'ns::|EDRMetadata|
          'ns::|setNonDefaultColorspace:|
          'ns::|setColorspace:nonDefault:|
          'ns::|nonDefaultColorspace|
          'ns::|displaySyncEnabled|
          'ns::|serverSyncEnabled|
          'ns::|fenceEnabled|
          'ns::|allowsNextDrawableTimeout|
          'ns::|drawableTimeoutSeconds|
          'ns::|setDrawableTimeoutSeconds:|
          'ns::|setLowLatency:|
          'ns::|lowLatency|
          'ns::|setMaximumDrawableCount:|
          'ns::|discardContents|
          'ns::|maximumDrawableCount|
          'ns::|nextDrawable|
          'ns::|isDrawableAvailable|
          'ns::|pixelFormat|
          'ns::|setPixelFormat:|
          'ns::|protectionOptions|
          'ns::|setProtectionOptions:|
          'ns::|optimizationOpportunities:|
          'ns::|getRendererInfo:size:|
          'ns::|setMotionBlurAmount:|
          'ns::|motionBlurAmount|
          'ns::|setTreatRec709AsSRGB:|
          'ns::|setSeparatedOptions:|
          'ns::|setAcceleratesDrawing:|
          'ns::|setBackgroundColorPhase:|
          'ns::|setToneMapToStandardDynamicRange:|
          'ns::|setAllowsDisplayCompositing:|
          'ns::|setCreatesCompositingGroup:|
          'ns::|setPreloadsCache:|
          'ns::|setInheritsTiming:|
          'ns::|contentsOpaque|
          'ns::|setContentsDither:|
          'ns::|contentsDither|
          'ns::|setContentsAlignsToPixels:|
          'ns::|contentsAlignsToPixels|
          'ns::|setInvertsShadow:|
          'ns::|setFlipsHorizontalAxis:|
          'ns::|flipsHorizontalAxis|
          'ns::|setSortsSublayers:|
          'ns::|setFrozen:|
          'ns::|setSeparated:|
          'ns::|setPresentationModifiers:|
          'ns::|presentationModifiers|
          'ns::|removePresentationModifier:|
          'ns::|addPresentationModifier:|
          'ns::|layerAtTime:|
          'ns::|regionBeingDrawn|
          'ns::|setSeparatedState:|
          'ns::|shadowPathIsBounds|
          'ns::|invertsShadow|
          'ns::|treatRec709AsSRGB|
          'ns::|inheritsTiming|
          'ns::|literalContentsCenter|
          'ns::|hitTestsAsOpaque|
          'ns::|hitTestsContentsAlphaChannel|
          'ns::|allowsGroupBlending|
          'ns::|toneMapToStandardDynamicRange|
          'ns::|allowsDisplayCompositing|
          'ns::|createsCompositingGroup|
          'ns::|preloadsCache|
          'ns::|separatedState|
          'ns::|backgroundColorPhase|
          'ns::|doubleSided|
          'ns::|setInvertsContentsAreFlipped:|
          'ns::|invertsContentsAreFlipped|
          'ns::|allowsGroupOpacity|
          'ns::|allowsEdgeAntialiasing|
          'ns::|setRasterizationPrefersDisplayCompositing:|
          'ns::|rasterizationPrefersDisplayCompositing|
          'ns::|shouldRasterize|
          'ns::|shadowPath|
          'ns::|setShadowPath:|
          'ns::|actions|
          'ns::|setGain:|
          'ns::|gain|
          'ns::|setContentsContainsSubtitles:|
          'ns::|contentsContainsSubtitles|
          'ns::|setCornerContentsMasksEdges:|
          'ns::|cornerContentsMasksEdges|
          'ns::|cornerContentsCenter|
          'ns::|setDoubleSided:|
          'ns::|cornerContents|
          'ns::|setAnchorPointZ:|
          'ns::|setContinuousCorners:|
          'ns::|continuousCorners|
          'ns::|cornerCurve|
          'ns::|maskedCorners|
          'ns::|unsafeUnretainedDelegate|
          'ns::|contentsGravityEnum|
          'ns::|contentsGravity|
          'ns::|contentsFormat|
          'ns::|setSecurityMode:|
          'ns::|securityMode|
          'ns::|rasterizationScale|
          'ns::|convertTime:toLayer:|
          'ns::|convertTime:fromLayer:|
          'ns::|isGeometryFlipped|
          'ns::|resizeWithOldSuperlayerSize:|
          'ns::|sizeRequisition|
          'ns::|drawsMipmapLevels|
          'ns::|isSeparated|
          'ns::|contentsSwizzle|
          'ns::|contentsMultiplyColor|
          'ns::|contentsTransform|
          'ns::|edgeAntialiasingMask|
          'ns::|sortsSublayers|
          'ns::|isDoubleSided|
          'ns::|allowsHitTesting|
          'ns::|ignoresHitTesting|
          'ns::|ancestorSharedWithLayer:|
          'ns::|resizeSublayersWithOldSize:|
          'ns::|separatedOptions|
          'ns::|needsDisplayOnBoundsChange|
          'ns::|contentsScaling|
          'ns::|layerDidChangeDisplay:|
          'ns::|needsLayoutOnGeometryChange|
          'ns::|anchorPointZ|
          'ns::|setRepeatDuration:|
          'ns::|contentsRect|
          'ns::|minificationFilterBias|
          'ns::|timeOffset|
          'ns::|stateTransitionFrom:to:|
          'ns::|dependentStatesOfState:|
          'ns::|stateWithName:|
          'ns::|removeState:|
          'ns::|addState:|
          'ns::|insertState:atIndex:|
          'ns::|setSizeRequisition:|
          'ns::|acceleratesDrawing|
          'ns::|setUnsafeUnretainedDelegate:|
          'ns::|shouldArchiveValueForKey:|
          'ns::|layoutIsActive|
          'ns::|sublayerEnumerator|
          'ns::|preferredFrameSize|
          'ns::|attributesForKeyPath:|
          'ns::|implicitAnimationForKeyPath:|
          'ns::|CAMLParser:setValue:forKey:|
          'ns::|isFrozen|
          'ns::|setMeshTransform:|
          'ns::|affineTransform|
          'ns::|meshTransform|
          'ns::|setContentsChanged|
          'ns::|layerBeingDrawn|
          'ns::|magnificationFilter|
          'ns::|minificationFilter|
          'ns::|drawsAsynchronously|
          'ns::|setClearsContext:|
          'ns::|clearsContext|
          'ns::|convertPoint:toLayer:|
          'ns::|setNeedsDisplayOnBoundsChange:|
          'ns::|setContentsOpaque:|
          'ns::|setCornerContentsCenter:|
          'ns::|setCornerContents:|
          'ns::|fillMode|
          'ns::|setAllowsEdgeAntialiasing:|
          'ns::|setHitTestsContentsAlphaChannel:|
          'ns::|floating|
          'ns::|setAllowsHitTesting:|
          'ns::|isFloating|
          'ns::|setFloating:|
          'ns::|setLiteralContentsCenter:|
          'ns::|invalidateContents|
          'ns::|masksToBounds|
          'ns::|convertRect:fromLayer:|
          'ns::|removeAllAnimations|
          'ns::|setShadowPathIsBounds:|
          'ns::|renderInContext:|
          'ns::|clearHasBeenCommitted|
          'ns::|setDrawsAsynchronously:|
          'ns::|layoutBelowIfNeeded|
          'ns::|setContentsFormat:|
          'ns::|wantsExtendedDynamicRangeContent|
          'ns::|hasBeenCommitted|
          'ns::|animationKeys|
          'ns::|setAllowsGroupOpacity:|
          'ns::|setActions:|
          'ns::|setMagnificationFilter:|
          'ns::|setRasterizationScale:|
          'ns::|setShouldRasterize:|
          'ns::|setAllowsGroupBlending:|
          'ns::|setEdgeAntialiasingMask:|
          'ns::|replaceSublayer:with:|
          'ns::|opacity|
          'ns::|filters|
          'ns::|convertPoint:fromLayer:|
          'ns::|setWantsExtendedDynamicRangeContent:|
          'ns::|reloadValueForKeyPath:|
          'ns::|zPosition|
          'ns::|setAffineTransform:|
          'ns::|setContentsRect:|
          'ns::|drawInContext:|
          'ns::|initWithLayer:|
          'ns::|layerDidBecomeVisible:|
          'ns::|setNeedsLayout|
          'ns::|setNeedsLayoutOnGeometryChange:|
          'ns::|setLayoutManager:|
          'ns::|layoutSublayers|
          'ns::|setContentsSwizzle:|
          'ns::|setContentsMultiplyColor:|
          'ns::|setContentsScaling:|
          'ns::|setContentsTransform:|
          'ns::|setTransform:|
          'ns::|actionForKey:|
          'ns::|contentsAreFlipped|
          'ns::|setHitTestsAsOpaque:|
          'ns::|setGeometryFlipped:|
          'ns::|setContentsCenter:|
          'ns::|setZPosition:|
          'ns::|setMaskedCorners:|
          'ns::|setCornerCurve:|
          'ns::|setSublayers:|
          'ns::|setTimeOffset:|
          'ns::|removeAnimationForKey:|
          'ns::|shadowRadius|
          'ns::|shadowOpacity|
          'ns::|setShadowOffset:|
          'ns::|presentationLayer|
          'ns::|setMinificationFilterBias:|
          'ns::|setMinificationFilter:|
          'ns::|setShadowColor:|
          'ns::|setShadowRadius:|
          'ns::|setShadowOpacity:|
          'ns::|convertRect:toLayer:|
          'ns::|insertSublayer:above:|
          'ns::|setBeginTime:|
          'ns::|setSublayerTransform:|
          'ns::|sublayerTransform|
          'ns::|contentsScale|
          'ns::|contentsCenter|
          'ns::|setFillMode:|
          'ns::|borderWidth|
          'ns::|opaque|
          'ns::|sublayers|
          'ns::|setMask:|
          'ns::|mask|
          'ns::|setBorderWidth:|
          'ns::|anchorPoint|
          'ns::|setMasksToBounds:|
          'ns::|superlayer|
          'ns::|autoreverses|
          'ns::|speed|
          'ns::|beginTime|
          'ns::|repeatCount|
          'ns::|repeatDuration|
          'ns::|setAnchorPoint:|
          'ns::|setOpacity:|
          'ns::|setContentsScale:|
          'ns::|setBorderColor:|
          'ns::|addAnimation:forKey:|
          'ns::|setRepeatCount:|
          'ns::|setAutoreverses:|
          'ns::|setSpeed:|
          'ns::|insertSublayer:below:|
          'ns::|setContents:|
          'ns::|setContentsGravity:|
          'ns::|setFilters:|
          'ns::|insertSublayer:atIndex:|
          'ns::|modelLayer|
          'ns::|removeFromSuperlayer|
          'ns::|addSublayer:|
          'ns::|shadowColor|
          'ns::|shadowOffset|
          'ns::|setDuration:|
          'ns::|setStyle:|
          'ns::|setPosition:|
          'ns::|duration|
          'ns::|position|
          'ns::|transform|
          'ns::|borderColor|
          'ns::|contents|
          'ns::|style|
          'ns::|hidden|
          'ns::|PKG_setMaterialLayer:|
          'ns::|PKG_setUpdateLayerKey:|
          'ns::|PKG_materialLayer|
          'ns::|PKG_updateLayerKey|
          'ns::|NS_dropPrefetchedContentsIfNecessary|
          'ns::|NS_backingLayerContentsClass|
          'ns::|NS_hasPartialPrefetchedContentsForRect:|
          'ns::|NS_hasPrefetchedContents|
          'ns::|NS_hasPrefetchedContentsForRect:|
          'ns::|NS_makeContentsLayer|
          'ns::|NS_visibleRect|
          'ns::|NS_activeVisibleRect|
          'ns::|NS_renderedRectInRect:scrollVelocity:|
          'ns::|NS_setPreparedContentRect:|
          'ns::|NS_setIsScrolling:|
          'ns::|NS_isDebugOverlay|
          'ns::|NS_prefetchContentsInRect:scrollVelocity:|
          'ns::|nearestAncestorIgnoringTransformLayers|
          'ns::|visualTabPicker_hitTestIgnoringTransformLayers:inRootLayer:|
          'ns::|NS_contextDefaultContentsScaleDidChange|
          'ns::|NS_setDefersTransformInvalidation:|
          'ns::|NS_defersTransformInvalidation|
          'ns::|NS_convertTriangle:toLayer:|
          'ns::|NS_prepareContentRect:|
          'ns::|NS_invalidatePreparedContentRect|
          'ns::|NS_suggestedContentsScaleDidChange|
          'ns::|NS_suggestedContentsScale|
          'ns::|NS_setPresentationRect:|
          'ns::|NS_showPrefetchedContentsIfNecessaryInRect:|
          'ns::|NS_wantsToPrefetchTiles|
          'ns::|NS_managesOpenGLDrawable|
          'ns::|readFileWrapper|
          'ns::|readFileContentsType:toFile:|
          'ns::|writeFileWrapper:|
          'ns::|writeFileContents:|
          'ns::|setDataProvider:forTypes:|
          'ns::|canReadObjectForClasses:options:|
          'ns::|canReadItemWithDataConformingToTypes:|
          'ns::|indexOfPasteboardItem:|
          'ns::|prepareForNewContentsWithOptions:|
          'ns::|releaseGlobally|
          'ns::|stringForType:|
          'ns::|pasteboardItems|
          'ns::|addTypes:owner:|
          'ns::|setPropertyList:forType:|
          'ns::|writeObjects:|
          'ns::|clearContents|
          'ns::|readObjectsForClasses:options:|
          'ns::|propertyListForType:|
          'ns::|setData:forType:|
          'ns::|dataForType:|
          'ns::|setString:forType:|
          'ns::|declareTypes:owner:|
          'ns::|attemptOverwrite:|
          'ns::|availableTypeFromArray:|
          'ns::|types|
          'ns::|changeCount|
          'ns::|setEscapeKeyReplacementItem:|
          'ns::|setSuppressedByLessFocusedTouchBars:|
          'ns::|setTouchBarLayoutDirection:|
          'ns::|setCustomizationRequiredItemIdentifiers:|
          'ns::|animationTimingFunction|
          'ns::|minWidthGivenVisualCenterX:|
          'ns::|defaultItems|
          'ns::|templateItems|
          'ns::|defaultItemIdentifiers|
          'ns::|escapeKeyReplacementItemIdentifier|
          'ns::|customizationAllowedItemIdentifiers|
          'ns::|setEscapeKeyReplacementItemIdentifier:|
          'ns::|animationDuration|
          'ns::|customizationRequiredItemIdentifiers|
          'ns::|principalItemIdentifier|
          'ns::|suppressesMoreFocusedBars|
          'ns::|suppressesLessFocusedBars|
          'ns::|isSuppressedByLessFocusedTouchBars|
          'ns::|isSuppressedByMoreFocusedTouchBars|
          'ns::|itemForIdentifier:|
          'ns::|customizationDefaultItemIdentifiers|
          'ns::|touchBarLayoutDirection|
          'ns::|setSuppressedByMoreFocusedTouchBars:|
          'ns::|setCustomizationAllowedItemIdentifiers:|
          'ns::|setCustomizationIdentifier:|
          'ns::|itemIdentifiers|
          'ns::|customizationIdentifier|
          'ns::|configuration|
          'ns::|setCustomizationDefaultItemIdentifiers:|
          'ns::|setItemIdentifiers:|
          'ns::|setDefaultItems:|
          'ns::|escapeKeyReplacementItem|
          'ns::|items|
          'ns::|setSuppressesMoreFocusedBars:|
          'ns::|setSuppressesLessFocusedBars:|
          'ns::|setPrincipalItemIdentifier:|
          'ns::|setTemplateItems:|
          'ns::|setDefaultItemIdentifiers:|
          'ns::|autoResizeDrawable|
          'ns::|enableSetNeedsDisplay|
          'ns::|depthStencilPixelFormat|
          'ns::|multisampleColorAttachmentTextureUsage|
          'ns::|setMultisampleColorAttachmentTextureUsage:|
          'ns::|setDepthStencilStorageMode:|
          'ns::|depthStencilStorageMode|
          'ns::|depthStencilAttachmentTextureUsage|
          'ns::|setDepthStencilAttachmentTextureUsage:|
          'ns::|currentRenderPassDescriptor|
          'ns::|releaseDrawables|
          'ns::|nominalFramesPerSecond|
          'ns::|multisampleColorTexture|
          'ns::|drawNumber|
          'ns::|exportToTargaAtLocation:width:height:size:bytes:|
          'ns::|depthStencilTexture|
          'ns::|drawableAttachmentIndex|
          'ns::|setAutoResizeDrawable:|
          'ns::|setEnableSetNeedsDisplay:|
          'ns::|setDepthStencilPixelFormat:|
          'ns::|setDrawableAttachmentIndex:|
          'ns::|initWithFrame:device:|
          'ns::|setNominalFramesPerSecond:|
          'ns::|multisampleColorTextures|
          'ns::|currentDrawable|
          'ns::|colorTexturesForceUpdate:|
          'ns::|colorTextures|
          'ns::|multisampleColorTexturesForceUpdate:|
          'ns::|createDepthStencilTexture|
          'ns::|setColorPixelFormat:atIndex:|
          'ns::|colorPixelFormat|
          'ns::|setColorPixelFormat:|
          'ns::|getEnvironmentSettings|
          'ns::|clearStencil|
          'ns::|setColorspace:|
          'ns::|preferredDevice|
          'ns::|setDevice:|
          'ns::|colorspace|
          'ns::|setFramebufferOnly:|
          'ns::|setPresentsWithTransaction:|
          'ns::|presentsWithTransaction|
          'ns::|preferredFramesPerSecond|
          'ns::|setPreferredFramesPerSecond:|
          'ns::|preferredDrawableSize|
          'ns::|setDrawableSize:|
          'ns::|drawableSize|
          'ns::|displayLayer:|
          'ns::|setPaused:|
          'ns::|draw|
          'ns::|clearColor|
          'ns::|isPaused|
          'ns::|startTime|
          'ns::|clearDepth|
          'ns::|setClearStencil:|
          'ns::|setClearDepth:|
          'ns::|setClearColor:|
          'ns::|framebufferOnly|
          'ns::|setSampleCount:|
          'ns::|sampleCount|
          'ns::|device|
          'ns::|compare:toUnitGranularity:|
          'ns::|isEqual:toUnitGranularity:|
          'ns::|isInSameDayAsDate:|
          'ns::|isInYesterday|
          'ns::|isInTomorrow|
          'ns::|isInToday|
          'ns::|addTimeInterval:|
          'ns::|initWithDate:|
          'ns::|initWithTimeInterval:sinceDate:|
          'ns::|initWithTimeIntervalSince1970:|
          'ns::|initWithTimeIntervalSinceNow:|
          'ns::|timeIntervalSinceNow|
          'ns::|timeIntervalSinceDate:|
          'ns::|laterDate:|
          'ns::|earlierDate:|
          'ns::|dateByAddingTimeInterval:|
          'ns::|isEqualToDate:|
          'ns::|initWithTimeIntervalSinceReferenceDate:|
          'ns::|timeIntervalSinceReferenceDate|
          'ns::|timeIntervalSince1970|
          'ns::|bucketToRoundingFactor:|
          'ns::|timeIntervalSince1970WithBucket:|
          'ns::|descriptionWithCalendarFormat:timeZone:locale:|
          'ns::|dateWithCalendarFormat:timeZone:|
          'ns::|daysSince1970|
          'ns::|bs_dateByAddingDays:|
          'ns::|isBeforeDate:|
          'ns::|isAfterDate:|
          'ns::|appendBezierPathWithPackedGlyphs:|
          'ns::|appendBezierPathWithGlyphs:count:inFont:|
          'ns::|appendBezierPathWithGlyph:inFont:|
          'ns::|setCachesBezierPath:|
          'ns::|cachesBezierPath|
          'ns::|containsPoint:|
          'ns::|appendBezierPathWithCGGlyphs:count:inFont:|
          'ns::|appendBezierPathWithCGGlyph:inFont:|
          'ns::|appendBezierPathWithArcFromPoint:toPoint:radius:|
          'ns::|appendBezierPathWithPoints:count:|
          'ns::|setAssociatedPoints:atIndex:|
          'ns::|elementAtIndex:|
          'ns::|bezierPathByReversingPath|
          'ns::|bezierPathByFlatteningPath|
          'ns::|setClip|
          'ns::|fill|
          'ns::|stroke|
          'ns::|CGPath|
          'ns::|getLineDash:count:phase:|
          'ns::|relativeCurveToPoint:controlPoint1:controlPoint2:|
          'ns::|relativeLineToPoint:|
          'ns::|relativeMoveToPoint:|
          'ns::|removeAllPoints|
          'ns::|appendBezierPathWithNativeGlyphs:advances:count:inFont:|
          'ns::|appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:clockwise:|
          'ns::|appendBezierPathWithArcWithCenter:radius:startAngle:endAngle:|
          'ns::|controlPointBounds|
          'ns::|curveToPoint:controlPoint1:controlPoint2:|
          'ns::|flattenIntoPath:|
          'ns::|subdivideBezierWithFlatness:startPoint:controlPoint1:controlPoint2:endPoint:|
          'ns::|closePath|
          'ns::|moveToPoint:|
          'ns::|lineToPoint:|
          'ns::|addClip|
          'ns::|currentPoint|
          'ns::|setLineDash:count:phase:|
          'ns::|setFlatness:|
          'ns::|flatness|
          'ns::|setMiterLimit:|
          'ns::|miterLimit|
          'ns::|setLineJoinStyle:|
          'ns::|lineJoinStyle|
          'ns::|setLineCapStyle:|
          'ns::|lineCapStyle|
          'ns::|setWindingRule:|
          'ns::|windingRule|
          'ns::|appendBezierPath:|
          'ns::|appendBezierPathWithRoundedRect:xRadius:yRadius:|
          'ns::|appendBezierPathWithOvalInRect:|
          'ns::|appendBezierPathWithRect:|
          'ns::|transformUsingAffineTransform:|
          'ns::|elementAtIndex:associatedPoints:|
          'ns::|elementCount|
          'ns::|lineWidth|
          'ns::|setLineWidth:|
          'ns::|colorFactory|
          'ns::|setFocusStack:|
          'ns::|focusStack|
          'ns::|CALayer|
          'ns::|isDrawingToScreen|
          'ns::|CIContext|
          'ns::|setColorRenderingIntent:|
          'ns::|colorRenderingIntent|
          'ns::|shouldAntialias|
          'ns::|setShouldAntialias:|
          'ns::|flushGraphics|
          'ns::|setPatternPhase:|
          'ns::|patternPhase|
          'ns::|restoreGraphicsState|
          'ns::|saveGraphicsState|
          'ns::|CGContext|
          'ns::|attributes|
          'ns::|writeToFile:|
          'ns::|removeColorWithKey:|
          'ns::|setColor:forKey:|
          'ns::|removeFile|
          'ns::|insertColor:key:atIndex:|
          'ns::|initWithName:fromFile:|
          'ns::|colorWithKey:|
          'ns::|initWithName:|
          'ns::|allKeys|
          'ns::|scriptingColorDescriptor|
          'ns::|accessibilityName|
          'ns::|colorWithSystemEffect:|
          'ns::|shadowWithLevel:|
          'ns::|highlightWithLevel:|
          'ns::|brightnessComponent|
          'ns::|saturationComponent|
          'ns::|hueComponent|
          'ns::|localizedColorNameComponent|
          'ns::|localizedCatalogNameComponent|
          'ns::|colorNameComponent|
          'ns::|catalogNameComponent|
          'ns::|drawSwatchInRect:|
          'ns::|writeToPasteboard:|
          'ns::|isUniform|
          'ns::|colorUsingColorSpaceName:device:|
          'ns::|whiteComponent|
          'ns::|patternImage|
          'ns::|getHue:saturation:brightness:alpha:|
          'ns::|setFill|
          'ns::|getCyan:magenta:yellow:black:alpha:|
          'ns::|getWhite:alpha:|
          'ns::|blendedColorWithFraction:ofColor:|
          'ns::|colorSpaceName|
          'ns::|getRed:green:blue:alpha:|
          'ns::|colorUsingColorSpaceName:|
          'ns::|getComponents:|
          'ns::|numberOfComponents|
          'ns::|colorUsingType:|
          'ns::|blueComponent|
          'ns::|greenComponent|
          'ns::|redComponent|
          'ns::|colorUsingColorSpace:|
          'ns::|colorWithAlphaComponent:|
          'ns::|alphaComponent|
          'ns::|blackComponent|
          'ns::|yellowComponent|
          'ns::|magentaComponent|
          'ns::|cyanComponent|
          'ns::|setStroke|
          'ns::|CGColor|
          'ns::|setAnchorItem:forOrientation:|
          'ns::|anchorItemForOrientation:|
          'ns::|liveResizeEdges|
          'ns::|setRemoteUIElement:|
          'ns::|accessibilitySendDeferredNotifications|
          'ns::|visualizeConstraints:|
          'ns::|view:acceptsFirstMouseEvent:initialKeyWindow:|
          'ns::|setBoundsAsQDRect:|
          'ns::|boundsAsQDRect|
          'ns::|setOrderedIndex:|
          'ns::|setIsZoomed:|
          'ns::|setIsVisible:|
          'ns::|setIsMiniaturized:|
          'ns::|orderedIndex|
          'ns::|isZoomable|
          'ns::|isModalPanel|
          'ns::|isMiniaturizable|
          'ns::|hasCloseBox|
          'ns::|accessibilityIsSectionsAttributeSettable|
          'ns::|accessibilityIsModalAttributeSettable|
          'ns::|accessibilityModalAttribute|
          'ns::|accessibilityIsDocumentAttributeSettable|
          'ns::|accessibilityDocumentAttribute|
          'ns::|accessibilityIsCancelButtonAttributeSettable|
          'ns::|accessibilityCancelButtonAttribute|
          'ns::|accessibilityIsDefaultButtonAttributeSettable|
          'ns::|accessibilityDefaultButtonAttribute|
          'ns::|accessibilityIsGrowAreaAttributeSettable|
          'ns::|accessibilityIsProxyAttributeSettable|
          'ns::|accessibilityProxyAttribute|
          'ns::|accessibilitySetFullScreenAttribute:|
          'ns::|accessibilityIsFullScreenAttributeSettable|
          'ns::|accessibilityFullScreenAttribute|
          'ns::|accessibilityIsFullScreenButtonAttributeSettable|
          'ns::|accessibilityFullScreenButtonAttribute|
          'ns::|accessibilityIsToolbarButtonAttributeSettable|
          'ns::|accessibilityToolbarButtonAttribute|
          'ns::|accessibilityIsMinimizeButtonAttributeSettable|
          'ns::|accessibilityMinimizeButtonAttribute|
          'ns::|accessibilityIsZoomButtonAttributeSettable|
          'ns::|accessibilityZoomButtonAttribute|
          'ns::|accessibilityIsCloseButtonAttributeSettable|
          'ns::|accessibilityCloseButtonAttribute|
          'ns::|accessibilitySetMinimizedAttribute:|
          'ns::|accessibilityIsMinimizedAttributeSettable|
          'ns::|accessibilityMinimizedAttribute|
          'ns::|accessibilitySetMainAttribute:|
          'ns::|accessibilityIsMainAttributeSettable|
          'ns::|accessibilityMainAttribute|
          'ns::|accessibilitySetPositionAttribute:|
          'ns::|accessibilityAddDeferredNotification:|
          'ns::|accessibilitySubtitleUIElementAttribute|
          'ns::|setCanHostLayersInWindowServer:|
          'ns::|canHostLayersInWindowServer|
          'ns::|hostsLayersInWindowServer|
          'ns::|setTimeMachineDelegate:|
          'ns::|updateInDock|
          'ns::|restoreWindowOnDockReincarnation|
          'ns::|restoreWindowOnDockDeath|
          'ns::|setShadowStyle:|
          'ns::|showDeminiaturizedWindow|
          'ns::|dockTitleIsGuess|
          'ns::|initWithWindowRef:|
          'ns::|windowRefWithCompositedAttribute:andFrameworkScaledAttribute:|
          'ns::|setHasColorSensitiveUI:|
          'ns::|hasColorSensitiveUI|
          'ns::|setStandardWindowButtonGroupOffset:|
          'ns::|standardWindowButtonGroupOffset|
          'ns::|setTitlebarHeight:|
          'ns::|titlebarHeight|
          'ns::|setStandardWindowTitleButtonsAlphaValue:|
          'ns::|standardWindowTitleButtonsAlphaValue|
          'ns::|setCanBeVisibleOnAllSpaces:|
          'ns::|canBeVisibleOnAllSpaces|
          'ns::|addTabbedWindow:ordered:|
          'ns::|setTitlebarHandlesDoubleClickWhenTransparent:|
          'ns::|titlebarHandlesDoubleClickWhenTransparent|
          'ns::|setTitlebarDrawsBottomDividerWhenTransparent:|
          'ns::|titlebarDrawsBottomDividerWhenTransparent|
          'ns::|setTitlebarAppearsTransparentWhenFullscreen:|
          'ns::|titlebarAppearsTransparentWhenFullscreen|
          'ns::|titleMode|
          'ns::|setTitleMode:|
          'ns::|setTitleHidden:|
          'ns::|titleHidden|
          'ns::|appearanceSource|
          'ns::|titlebarTitleFont|
          'ns::|titlebarTitleRect|
          'ns::|maxTitlebarTitleRect|
          'ns::|setAllowsConcurrentViewDrawing:|
          'ns::|backingLocation|
          'ns::|preferredBackingLocation|
          'ns::|setPreferredBackingLocation:|
          'ns::|sharingType|
          'ns::|setSharingType:|
          'ns::|addChildWindow:ordered:shareKey:|
          'ns::|showsResizeIndicator|
          'ns::|setShowsResizeIndicator:|
          'ns::|autofillColor|
          'ns::|setAutofillColor:|
          'ns::|autofill|
          'ns::|setAutofill:|
          'ns::|setMaxFullScreenContentSize:|
          'ns::|setMinFullScreenContentSize:|
          'ns::|canMoveToCurrentSpaceOnScreen:|
          'ns::|invalidateShadow|
          'ns::|setFrameUsingName:force:|
          'ns::|discardCachedImage|
          'ns::|restoreCachedImage|
          'ns::|cacheImageInRect:|
          'ns::|isOneShot|
          'ns::|miniwindowImage|
          'ns::|setMiniwindowTitle:|
          'ns::|setMiniwindowImage:|
          'ns::|orderFrontRegardless|
          'ns::|orderBack:|
          'ns::|setDynamicDepthLimit:|
          'ns::|setShowsContentSeparator:forEdge:|
          'ns::|contentInsetColor|
          'ns::|contentSeparatorColor|
          'ns::|isZoomed|
          'ns::|isReleasedWhenClosed|
          'ns::|setMouseConfinementRect:|
          'ns::|setShowsLockButton:|
          'ns::|runToolbarConfigurationPalette:|
          'ns::|autorecalculatesKeyViewLoop|
          'ns::|setKeyView:|
          'ns::|useOptimizedDrawing:|
          'ns::|shadowOptionsForActiveAppearance:|
          'ns::|contentAspectRatio|
          'ns::|setContentAspectRatio:|
          'ns::|contentResizeIncrements|
          'ns::|setContentResizeIncrements:|
          'ns::|frameTopLeftPoint|
          'ns::|setTitlebarBlurFiltersDisabled:|
          'ns::|titlebarBlurFiltersDisabled|
          'ns::|insertTitlebarAccessoryViewController:atIndex:|
          'ns::|addDocumentIconButton|
          'ns::|setTitleWithRepresentedFilename:|
          'ns::|setContentTitlebarSeparatorStyle:|
          'ns::|contentTitlebarSeparatorStyle|
          'ns::|titlebarSeparatorStyle|
          'ns::|isPreferenceToolbarWindow|
          'ns::|rebuildLayoutFromScratch|
          'ns::|adjustLayoutForResolutionChangeToRetina:|
          'ns::|animationForKeyPath:|
          'ns::|editTitle:|
          'ns::|unregisterScrollViewSeparatorTrackingAdapter:|
          'ns::|registerScrollViewSeparatorTrackingAdapter:|
          'ns::|hasMainAppearance|
          'ns::|miniwindowTitle|
          'ns::|timeMachineDelegate|
          'ns::|cacheMiniwindowTitle:guess:|
          'ns::|isRestorable|
          'ns::|acquireMainAppearance|
          'ns::|resignMainAppearance|
          'ns::|defaultButtonCell|
          'ns::|unsnappedFrame|
          'ns::|setUnsnappedFrame:|
          'ns::|displaysWhenScreenProfileChanges|
          'ns::|mouseConfinementRect|
          'ns::|changeToolBarDisplayModeToDisplayMode:|
          'ns::|viewsNeedDisplay|
          'ns::|shadowParameters|
          'ns::|shadowStyle|
          'ns::|isFlushWindowDisabled|
          'ns::|allowsInteriorShadow|
          'ns::|lockButtonClicked:|
          'ns::|guessDockTitle:|
          'ns::|hasDynamicDepthLimit|
          'ns::|setAutorecalculatesContentBorderThickness:forEdge:|
          'ns::|setDisplaysWhenScreenProfileChanges:|
          'ns::|hasKeyAppearanceIncludingSheets:|
          'ns::|allowsConcurrentViewDrawing|
          'ns::|canStoreColor|
          'ns::|backingType|
          'ns::|changeToolbarDisplayMode:|
          'ns::|changeToolbarDisplayModeToNumber:|
          'ns::|setTitlebarSeparatorStyle:|
          'ns::|toggleUsingSmallToolbarIcons:|
          'ns::|windowSectionController|
          'ns::|resizeFlags|
          'ns::|setToolbarStyle:|
          'ns::|setExcludedFromWindowsMenu:|
          'ns::|cascadeTopLeftFromPoint:|
          'ns::|topLeftPoint|
          'ns::|snapshotFromRect:options:|
          'ns::|enableSnapshotRestoration|
          'ns::|disableSnapshotRestoration|
          'ns::|removeTitlebarAccessoryViewControllerAtIndex:|
          'ns::|titlebarAlphaValue|
          'ns::|titlebarBlendingMode|
          'ns::|setPrefersFullWidthTitlebarWhenAccessoriesVisible:|
          'ns::|addUnderTitlebarView:withAssociatedWithView:|
          'ns::|setBottomCornerRounded:|
          'ns::|toolbarStyle|
          'ns::|windowTitlebarLayoutDirection|
          'ns::|setContentBorderThickness:forEdge:|
          'ns::|contentMaxSize|
          'ns::|contentMinSize|
          'ns::|prefersFullWidthTitlebarWhenAccessoriesVisible|
          'ns::|singleWindowSharingActive|
          'ns::|showsFullScreenButton|
          'ns::|showsLockButton|
          'ns::|showsToolbarButton|
          'ns::|removeUnderTitlebarView:withAssociatedWithView:|
          'ns::|showsContentSeparatorForEdge:|
          'ns::|setInspectorBar:|
          'ns::|disableScreenUpdatesUntilFlush|
          'ns::|autorecalculatesContentBorderThicknessForEdge:|
          'ns::|setAcceptsMouseMovedEvents:|
          'ns::|bottomCornerRounded|
          'ns::|acceptsMouseMovedEvents|
          'ns::|setAllowsToolTipsWhenApplicationIsInactive:|
          'ns::|statusItem|
          'ns::|registerSplitViewItemSeparatorTrackingAdapter:|
          'ns::|unregisterSplitViewItemSeparatorTrackingAdapter:|
          'ns::|setShowsAutosaveButton:|
          'ns::|showsAutosaveButton|
          'ns::|sheetBehavior|
          'ns::|deepestScreen|
          'ns::|titlebarViewController|
          'ns::|setTitlebarAlphaValue:|
          'ns::|setAutorecalculatesKeyViewLoop:|
          'ns::|setContentMaxSize:|
          'ns::|setContentMinSize:|
          'ns::|setShowsToolbarButton:|
          'ns::|flushWindowIfNeeded|
          'ns::|initWithContentRect:styleMask:backing:defer:screen:|
          'ns::|allowsToolTipsWhenApplicationIsInactive|
          'ns::|setPreventsApplicationTerminationWhenModal:|
          'ns::|preventsApplicationTerminationWhenModal|
          'ns::|animationResizeTime:|
          'ns::|setPreservesContentDuringLiveResize:|
          'ns::|contentLayoutGuide|
          'ns::|miniaturize:|
          'ns::|setBackingType:|
          'ns::|addTitlebarAccessoryViewController:|
          'ns::|tabbedWindows|
          'ns::|zoom:|
          'ns::|becomesKeyOnlyIfNeeded|
          'ns::|updateConstraintsIfNeeded|
          'ns::|anchorAttributeForOrientation:|
          'ns::|graphicsContext|
          'ns::|representedFilename|
          'ns::|setRepresentedURL:|
          'ns::|frameRectForContentRect:|
          'ns::|setAppearanceSource:|
          'ns::|inspectorBar|
          'ns::|restorationClass|
          'ns::|childWindows|
          'ns::|isInKeyWindow|
          'ns::|resignKeyAppearance|
          'ns::|acquireKeyAppearance|
          'ns::|accessibilitySetSizeAttribute:|
          'ns::|performWindowDragWithEvent:|
          'ns::|titlebarAccessoryViewControllers|
          'ns::|performMiniaturize:|
          'ns::|performZoom:|
          'ns::|runToolbarCustomizationPalette:|
          'ns::|toggleToolbarShown:|
          'ns::|hideToolbar:|
          'ns::|showToolbar:|
          'ns::|setCanBecomeVisibleWithoutLogin:|
          'ns::|setCanHide:|
          'ns::|setOneShot:|
          'ns::|setParentWindow:|
          'ns::|openDrawers|
          'ns::|drawers|
          'ns::|wantsPeriodicDraggingUpdates|
          'ns::|handleCloseScriptCommand:|
          'ns::|handleSaveScriptCommand:|
          'ns::|contentLayoutRect|
          'ns::|setAllowsCursorRectsWhenInactive:|
          'ns::|GDBDumpCursorRects|
          'ns::|allowsCursorRectsWhenInactive|
          'ns::|isFloatingPanel|
          'ns::|editTitleWithCompletionHandler:|
          'ns::|isDocumentEdited|
          'ns::|setRepresentedFilename:|
          'ns::|selectKeyViewFollowingView:|
          'ns::|selectKeyViewPrecedingView:|
          'ns::|sharingIndicator|
          'ns::|removeChildWindow:|
          'ns::|addChildWindow:ordered:|
          'ns::|hasShadow|
          'ns::|shadowOptions|
          'ns::|canBecomeVisibleWithoutLogin|
          'ns::|setTitleVisibility:|
          'ns::|fieldEditor:forObject:|
          'ns::|endEditingFor:|
          'ns::|convertPointToScreen:|
          'ns::|selectPreviousKeyView:|
          'ns::|selectNextKeyView:|
          'ns::|standardWindowButton:|
          'ns::|setFrameAutosaveName:|
          'ns::|setFrameUsingName:|
          'ns::|saveFrameUsingName:|
          'ns::|frameAutosaveName|
          'ns::|recalculateKeyViewLoop|
          'ns::|setFrame:display:animate:|
          'ns::|setRestorationClass:|
          'ns::|setToolbar:|
          'ns::|contentBorderThicknessForEdge:|
          'ns::|contentRectForFrameRect:|
          'ns::|keyViewSelectionDirection|
          'ns::|isMovableByWindowBackground|
          'ns::|invalidateCursorRectsForView:|
          'ns::|aspectRatio|
          'ns::|setAspectRatio:|
          'ns::|resizeIncrements|
          'ns::|dragRectForFrameRect:|
          'ns::|windowTitleController|
          'ns::|minFrameSizeForMinContentSize:styleMask:|
          'ns::|contentRectForFrameRect:styleMask:|
          'ns::|frameRectForContentRect:styleMask:|
          'ns::|undo:|
          'ns::|redo:|
          'ns::|startRectForSheet:|
          'ns::|setAutodisplay:|
          'ns::|isAutodisplay|
          'ns::|resignMainWindow|
          'ns::|ignoresMouseEvents|
          'ns::|isMainWindow|
          'ns::|isExcludedFromWindowsMenu|
          'ns::|setResizeIncrements:|
          'ns::|depthLimit|
          'ns::|setDepthLimit:|
          'ns::|cancelOperation:|
          'ns::|enableKeyEquivalentForDefaultButtonCell|
          'ns::|disableKeyEquivalentForDefaultButtonCell|
          'ns::|setViewsNeedDisplay:|
          'ns::|draggingEnded:|
          'ns::|enableFlushWindow|
          'ns::|disableFlushWindow|
          'ns::|makeFirstResponder:|
          'ns::|hasKeyAppearance|
          'ns::|accessibilityIsTitleUIElementAttributeSettable|
          'ns::|convertBaseToScreen:|
          'ns::|accessibilityTitleUIElementAttribute|
          'ns::|setTitlePosition:|
          'ns::|titlePosition|
          'ns::|stringWithSavedFrame|
          'ns::|setFrameFromString:|
          'ns::|accessibilityActivationPointAttribute|
          'ns::|setStyleMask:|
          'ns::|setHasShadow:|
          'ns::|maxFullScreenContentSize|
          'ns::|setTitlebarAppearsTransparent:|
          'ns::|collectionBehavior|
          'ns::|toolbar|
          'ns::|representedURL|
          'ns::|constrainFrameRect:toScreen:|
          'ns::|firstResponder|
          'ns::|accessibilityIsChildOfApp|
          'ns::|setWindowController:|
          'ns::|toggleFullScreen:|
          'ns::|makeMainWindow|
          'ns::|sheets|
          'ns::|attachedSheet|
          'ns::|hidesOnDeactivate|
          'ns::|deminiaturize:|
          'ns::|setFrameTopLeftPoint:|
          'ns::|center|
          'ns::|makeKeyWindow|
          'ns::|canHide|
          'ns::|setAnchorAttribute:forOrientation:|
          'ns::|layoutIfNeeded|
          'ns::|initialFirstResponder|
          'ns::|setInitialFirstResponder:|
          'ns::|isSheet|
          'ns::|beginSheet:completionHandler:|
          'ns::|beginCriticalSheet:completionHandler:|
          'ns::|setAnimationBehavior:|
          'ns::|animationBehavior|
          'ns::|setDefaultButtonCell:|
          'ns::|setMovableByWindowBackground:|
          'ns::|setRestorable:|
          'ns::|mouseLocationOutsideOfEventStream|
          'ns::|graphicsPort|
          'ns::|canBecomeMainWindow|
          'ns::|canBecomeKeyWindow|
          'ns::|setIgnoresMouseEvents:|
          'ns::|setHidesOnDeactivate:|
          'ns::|setLevel:|
          'ns::|setCollectionBehavior:|
          'ns::|convertPointFromScreen:|
          'ns::|convertRectFromScreen:|
          'ns::|accessibilityIsSubroleAttributeSettable|
          'ns::|accessibilitySubroleAttribute|
          'ns::|flushWindow|
          'ns::|orderFront:|
          'ns::|initWithContentRect:styleMask:backing:defer:|
          'ns::|orderOut:|
          'ns::|orderWindow:relativeTo:|
          'ns::|setReleasedWhenClosed:|
          'ns::|set_beforeTabPickerResponder:|
          'ns::|windowDidBecomeTabbed|
          'ns::|orderOutTabbedWindowGroup:|
          'ns::|setTabOverviewVisible:|
          'ns::|tabGroup|
          'ns::|unpinTab:|
          'ns::|pinTab:|
          'ns::|performCloseTabbedWindowGroup:|
          'ns::|isTabbed|
          'ns::|performClose:|
          'ns::|performCloseOtherTabs:|
          'ns::|toggleTabOverview:|
          'ns::|toggleTabBar:|
          'ns::|mergeAllWindows:|
          'ns::|moveTabToNewWindow:|
          'ns::|selectPreviousTab:|
          'ns::|selectNextTab:|
          'ns::|isMiniaturized|
          'ns::|makeKeyAndOrderFront:|
          'ns::|isKeyWindow|
          'ns::|isResizable|
          'ns::|titlebarAppearsTransparent|
          'ns::|sheetParent|
          'ns::|styleMask|
          'ns::|tab|
          'ns::|setTabbingMode:|
          'ns::|tabbingMode|
          'ns::|setTabbingIdentifier:|
          'ns::|windowController|
          'ns::|tabbingIdentifier|
          'ns::|titleVisibility|
          'ns::|isTabOverviewVisible|
          'ns::|accessibilityWindowNumber|
          'ns::|windowRef|
          'ns::|remoteUIElement|
          'ns::|convertRectToScreen:|
          'ns::|accessibilityTopLevelUIElementAttributeValueHelper|
          'ns::|accessibilityWindowAttributeValueHelper|
          'ns::|accessibilityFocusRingBounds|
          'ns::|isOnActiveSpace|
          'ns::|setColorSpace:|
          'ns::|isVisible|
          'ns::|gestureRecognizer:shouldAttemptToRecognizeWithEvent:|
          'ns::|convertScreenToBase:|
          'ns::|minFullScreenContentSize|
          'ns::|setFrame:display:|
          'ns::|setSubtitle:|
          'ns::|subtitle|
          'ns::|level|
          'ns::|hasTitleBar|
          'ns::|parentWindow|
          'ns::|orderFrontSharingServicePicker:|
          'ns::|previewPanel:transitionImageForPreviewItem:contentRect:|
          'ns::|previewPanel:sourceFrameOnScreenForPreviewItem:|
          'ns::|previewPanel:previewItemAtIndex:|
          'ns::|numberOfPreviewItemsInPreviewPanel:|
          'ns::|endPreviewPanelControl:|
          'ns::|beginPreviewPanelControl:|
          'ns::|acceptsPreviewPanelControl:|
          'ns::|quickLookPreviewableItemsInRanges:|
          'ns::|functionBar:makeItemForIdentifier:|
          'ns::|changeAttributesWithModifier:|
          'ns::|touchBarItemController|
          'ns::|immediateActionRecognizerDidCompleteAnimation:|
          'ns::|immediateActionRecognizerDidCancelAnimation:|
          'ns::|immediateActionRecognizerDidUpdateAnimation:|
          'ns::|immediateActionRecognizerWillBeginAnimation:|
          'ns::|immediateActionRecognizerWillPrepare:|
          'ns::|showDefinitionFromMenu:|
          'ns::|applyActionForRanges:block:|
          'ns::|invokeImmediateActionMenuItem:|
          'ns::|candidateListTouchBarItem:changedCandidateListVisibility:|
          'ns::|insertCandidateTextCheckingResult:|
          'ns::|insertCandidateString:replacementRange:fromTextCheckingResult:|
          'ns::|setEnabledTextCheckingTypes:|
          'ns::|toggleAutomaticTextCompletion:|
          'ns::|toggleAutomaticLanguageIdentification:|
          'ns::|toggleUsesAdaptiveColorMappingForDarkAppearance:|
          'ns::|usesColorsWithInvertedLightness|
          'ns::|setUsesColorsWithInvertedLightness:|
          'ns::|setUsesFindPanel:|
          'ns::|setAllowsImageEditing:|
          'ns::|allowsImageEditing|
          'ns::|isCoalescingUndo|
          'ns::|markedTextAttributes|
          'ns::|centersOnScroll|
          'ns::|setCentersOnScroll:|
          'ns::|setDisplaysLinkToolTips:|
          'ns::|setAutomaticLanguageIdentificationEnabled:|
          'ns::|isAutomaticLanguageIdentificationEnabled|
          'ns::|smartInsertAfterStringForString:replacingRange:|
          'ns::|smartInsertBeforeStringForString:replacingRange:|
          'ns::|resignKeyFocus|
          'ns::|acquireKeyFocus|
          'ns::|pendingCandidateUpdate|
          'ns::|performPendingTextChecking|
          'ns::|showFindIndicatorForRange:fade:|
          'ns::|updateTouchBarItemIdentifiers|
          'ns::|updateQuickLookPreviewPanel|
          'ns::|layoutManager:effectiveCUICatalogForTextEffect:|
          'ns::|revealContext:stopHighlightingItem:|
          'ns::|revealContext:startHighlightingItem:|
          'ns::|revealContext:drawRectsForItem:|
          'ns::|revealContext:shouldUseDefaultHighlightForItem:|
          'ns::|menuItemsForTextCheckingResult:range:contextual:event:|
          'ns::|highlightBoundingRectForCharacterRange:highlightStyle:|
          'ns::|attributedSubstringForMarkedRange|
          'ns::|hideHighlight|
          'ns::|highlightRectsForCharacterRange:highlightStyle:|
          'ns::|showHighlightWithCharacterRange:highlightStyle:|
          'ns::|switchBlinkTimersIfNecessaryWithSharedData:|
          'ns::|readSelectionFromPasteboard:type:|
          'ns::|rangesForUserParagraphAttributeChange|
          'ns::|smartInsertForString:replacingRange:beforeString:afterString:|
          'ns::|readablePasteboardTypes|
          'ns::|tokenizingCharacterSet|
          'ns::|yankAndSelect:|
          'ns::|insertCompletion:forPartialWordRange:movement:isFinal:|
          'ns::|insertRightToLeftSlash:|
          'ns::|completionsForPartialWordRange:indexOfSelectedItem:|
          'ns::|rangeForUserCompletion|
          'ns::|showFindIndicatorForRange:|
          'ns::|drawDragInsertionIndicatorWithRect:|
          'ns::|dragImageForSelectionWithEvent:origin:|
          'ns::|smartDeleteRangeForProposedRange:|
          'ns::|cleanUpAfterDragOperation|
          'ns::|dragOperationForDraggingInfo:type:|
          'ns::|setAcceptsGlyphInfo:|
          'ns::|setMarkedTextAttributes:|
          'ns::|setLinkTextAttributes:|
          'ns::|accessibilityIsTextInputMarkedRangeAttributeSettable|
          'ns::|accessibilityTextInputMarkedRangeAttribute|
          'ns::|accessibilitySharedTextElementForIndexAttributeForParameter:|
          'ns::|accessibilityIsSharedCharacterRangeAttributeSettable|
          'ns::|accessibilitySharedCharacterRangeAttribute|
          'ns::|accessibilityIsSharedTextUIElementsAttributeSettable|
          'ns::|accessibilitySharedTextUIElementsAttribute|
          'ns::|accessibilitySetSelectedTextRangesAttribute:|
          'ns::|accessibilityIsSelectedTextRangesAttributeSettable|
          'ns::|accessibilitySelectedTextRangesAttribute|
          'ns::|setUsesFindBar:|
          'ns::|setAllowsDocumentBackgroundColorChange:|
          'ns::|setUsesInspectorBar:|
          'ns::|set_inLayout:|
          'ns::|drawCharactersInRange:forContentView:|
          'ns::|rectsForCharacterRange:|
          'ns::|characterIndexForInsertionAtPoint:|
          'ns::|unlockDocument|
          'ns::|lockDocument|
          'ns::|mouseCancelled:|
          'ns::|locationForPositionInViewport:offset:|
          'ns::|viewportAnchor|
          'ns::|viewportBounds|
          'ns::|performValidatedReplacementInRange:withAttributedString:|
          'ns::|updateSpellingPanel|
          'ns::|shouldDrawInsertionPoint|
          'ns::|inspectorBarItemIdentifiers|
          'ns::|textContentStorage|
          'ns::|textContainerInsets|
          'ns::|setTextContainerInset:|
          'ns::|replaceTextContainer:|
          'ns::|swapWithMark:|
          'ns::|selectToMark:|
          'ns::|deleteToMark:|
          'ns::|setMark:|
          'ns::|yank:|
          'ns::|deleteToEndOfParagraph:|
          'ns::|deleteToBeginningOfParagraph:|
          'ns::|deleteToEndOfLine:|
          'ns::|deleteToBeginningOfLine:|
          'ns::|deleteWordBackward:|
          'ns::|deleteWordForward:|
          'ns::|deleteBackwardByDecomposingPreviousCharacter:|
          'ns::|deleteBackward:|
          'ns::|deleteForward:|
          'ns::|insertDoubleQuoteIgnoringSubstitution:|
          'ns::|insertSingleQuoteIgnoringSubstitution:|
          'ns::|insertTabIgnoringFieldEditor:|
          'ns::|selectWord:|
          'ns::|selectLine:|
          'ns::|selectParagraph:|
          'ns::|transpose:|
          'ns::|scrollLineDown:|
          'ns::|scrollLineUp:|
          'ns::|scrollPageDown:|
          'ns::|scrollPageUp:|
          'ns::|moveWordLeftAndModifySelection:|
          'ns::|moveWordRightAndModifySelection:|
          'ns::|moveLeftAndModifySelection:|
          'ns::|moveRightAndModifySelection:|
          'ns::|moveWordLeft:|
          'ns::|moveWordRight:|
          'ns::|moveParagraphBackwardAndModifySelection:|
          'ns::|moveParagraphForwardAndModifySelection:|
          'ns::|pageUpAndModifySelection:|
          'ns::|pageDownAndModifySelection:|
          'ns::|moveToBeginningOfDocumentAndModifySelection:|
          'ns::|moveToEndOfDocumentAndModifySelection:|
          'ns::|moveToEndOfParagraphAndModifySelection:|
          'ns::|moveToBeginningOfParagraphAndModifySelection:|
          'ns::|moveDownAndModifySelection:|
          'ns::|moveUpAndModifySelection:|
          'ns::|moveWordBackwardAndModifySelection:|
          'ns::|moveWordForwardAndModifySelection:|
          'ns::|moveForwardAndModifySelection:|
          'ns::|moveBackwardAndModifySelection:|
          'ns::|moveToBeginningOfDocument:|
          'ns::|moveToEndOfParagraph:|
          'ns::|moveToBeginningOfParagraph:|
          'ns::|moveWordBackward:|
          'ns::|moveWordForward:|
          'ns::|moveBackward:|
          'ns::|moveForward:|
          'ns::|textViewportLayoutControllerDidLayout:|
          'ns::|textViewportLayoutControllerWillLayout:|
          'ns::|textViewportLayoutController:configureRenderingSurfaceForTextLayoutFragment:|
          'ns::|viewportBoundsForTextViewportLayoutController:|
          'ns::|setLayoutOrientation:|
          'ns::|drawCharactersInTextRange:atPoint:|
          'ns::|usesFindPanel|
          'ns::|usesFindBar|
          'ns::|shouldRemoveTransformationAction:|
          'ns::|convertToHalfWidth:|
          'ns::|convertToFullWidth:|
          'ns::|convertToTraditionalChinese:|
          'ns::|convertToSimplifiedChinese:|
          'ns::|shouldRemoveCaseTransformations|
          'ns::|setSelectionGranularity:|
          'ns::|setSelectedRanges:affinity:stillSelecting:|
          'ns::|selectionGranularity|
          'ns::|selectionRangeForProposedRange:granularity:|
          'ns::|usesRolloverButtonForSelection|
          'ns::|linkTextAttributes|
          'ns::|displaysLinkToolTips|
          'ns::|characterRangeForRect:|
          'ns::|toggleQuickLookPreviewPanel:|
          'ns::|changeLayoutOrientation:|
          'ns::|changeBaseWritingDirection:|
          'ns::|addLinksInSelection:|
          'ns::|orderFrontTablePanel:|
          'ns::|orderFrontListPanel:|
          'ns::|orderFrontLinkPanel:|
          'ns::|insertTable:|
          'ns::|orderFrontSpacingPanel:|
          'ns::|alignJustified:|
          'ns::|copyLink:|
          'ns::|toggleTraditionalCharacterShape:|
          'ns::|spotlight:|
          'ns::|preferredPasteboardTypeFromArray:restrictedToTypesFromArray:|
          'ns::|pasteAsRichText:|
          'ns::|pasteAsPlainText:|
          'ns::|centerSelectionInVisibleArea:|
          'ns::|removeAccents:|
          'ns::|transliterateToLatin:|
          'ns::|replaceTextInSelection:|
          'ns::|replaceDashesInSelection:|
          'ns::|replaceQuotesInSelection:|
          'ns::|insertContainerBreak:|
          'ns::|insertPageBreak:|
          'ns::|makeTextWritingDirectionRightToLeft:|
          'ns::|makeTextWritingDirectionLeftToRight:|
          'ns::|makeTextWritingDirectionNatural:|
          'ns::|makeBaseWritingDirectionRightToLeft:|
          'ns::|makeBaseWritingDirectionLeftToRight:|
          'ns::|makeBaseWritingDirectionNatural:|
          'ns::|capitalizeWord:|
          'ns::|lowercaseWord:|
          'ns::|uppercaseWord:|
          'ns::|insertLineSeparator:|
          'ns::|insertLineBreak:|
          'ns::|insertParagraphSeparator:|
          'ns::|insertNewlineIgnoringFieldEditor:|
          'ns::|toggleBaseWritingDirection:|
          'ns::|shouldRenderPlaceholder|
          'ns::|drawPlaceholderInRect:|
          'ns::|drawViewBackgroundInRect:|
          'ns::|usesAdaptiveColorMappingForDarkAppearance|
          'ns::|setRulerVisible:|
          'ns::|writeSelectionToPasteboard:types:|
          'ns::|documentColorForRenderingColor:|
          'ns::|rangesForUserTextChange|
          'ns::|setConstrainedFrameSize:|
          'ns::|setDefaultParagraphStyle:|
          'ns::|updateFontPanel|
          'ns::|updateDragTypeRegistration|
          'ns::|acceptableDragTypes|
          'ns::|allowsDocumentBackgroundColorChange|
          'ns::|renderingColorForDocumentColor:|
          'ns::|updateTextTouchBarItems|
          'ns::|updateInspectorBar|
          'ns::|usesRuler|
          'ns::|usesInspectorBar|
          'ns::|rangesForUserCharacterAttributeChange|
          'ns::|setBaseWritingDirection:range:|
          'ns::|setAlignment:range:|
          'ns::|breakUndoCoalescing|
          'ns::|updateRuler|
          'ns::|acceptsGlyphInfo|
          'ns::|rangeForUserTextChange|
          'ns::|handleTextCheckingResults:forRange:types:options:orthography:wordCount:|
          'ns::|checkTextInDocumentUsingTypes:options:restrictToSelection:|
          'ns::|checkTextInRange:types:options:|
          'ns::|textContainerInset|
          'ns::|setNeedsDisplayInRect:avoidAdditionalLayout:|
          'ns::|updateInsertionPointStateAndRestartTimer:|
          'ns::|invalidateTextContainerOrigin|
          'ns::|setInsertionPointColor:|
          'ns::|insertionPointColor|
          'ns::|drawInsertionPointInRect:color:turnedOn:|
          'ns::|inputContextAllowingInitialization:|
          'ns::|initWithFrame:textContainer:|
          'ns::|setUsesRolloverButtonForSelection:|
          'ns::|selectedTextAttributes|
          'ns::|allowedInputSourceLocales|
          'ns::|allowsCharacterPickerTouchBarItem|
          'ns::|sharingService:containerFrameOnScreenForShareItem:|
          'ns::|sharingServicePicker:sharingServicesForItems:mask:proposedSharingServices:|
          'ns::|dragSelectionWithEvent:offset:slideBack:|
          'ns::|layoutOrientation|
          'ns::|selectionAffinity|
          'ns::|clickedOnLink:atIndex:|
          'ns::|accessibilityElementForAttachment:|
          'ns::|isRulerVisible|
          'ns::|toggleRuler:|
          'ns::|alignCenter:|
          'ns::|alignRight:|
          'ns::|alignLeft:|
          'ns::|pasteRuler:|
          'ns::|copyRuler:|
          'ns::|isVerticallyResizable|
          'ns::|isHorizontallyResizable|
          'ns::|usesFontPanel|
          'ns::|setFont:range:|
          'ns::|setTextColor:range:|
          'ns::|readRTFDFromFile:|
          'ns::|writeRTFDToFile:atomically:|
          'ns::|replaceCharactersInRange:withRTFD:|
          'ns::|replaceCharactersInRange:withRTF:|
          'ns::|RTFDFromRange:|
          'ns::|RTFFromRange:|
          'ns::|scrollToEndOfDocument:|
          'ns::|scrollToBeginningOfDocument:|
          'ns::|setUsesAdaptiveColorMappingForDarkAppearance:|
          'ns::|checkTextInSelection:|
          'ns::|toggleSmartInsertDelete:|
          'ns::|setAllowedInputSourceLocales:|
          'ns::|updateCandidates|
          'ns::|enabledTextCheckingTypes|
          'ns::|itemsForSharingServiceInRanges:|
          'ns::|writeSelectionToPasteboard:type:|
          'ns::|writablePasteboardTypes|
          'ns::|toggleAutomaticDataDetection:|
          'ns::|checkTextInDocument:|
          'ns::|orderFrontSubstitutionsPanel:|
          'ns::|moveToEndOfDocument:|
          'ns::|readSelectionFromPasteboard:|
          'ns::|shouldChangeTextInRanges:replacementStrings:|
          'ns::|setFieldEditor:|
          'ns::|rulerView:handleMouseDown:|
          'ns::|rulerView:handleMouseDown:forMarker:|
          'ns::|rulerView:willSetClientView:|
          'ns::|rulerView:didRemoveMarker:|
          'ns::|rulerView:didMoveMarker:|
          'ns::|rulerView:didAddMarker:|
          'ns::|rulerView:locationForPoint:|
          'ns::|rulerView:shouldRemoveMarker:|
          'ns::|rulerView:willMoveMarker:toLocation:|
          'ns::|rulerView:willAddMarker:atLocation:|
          'ns::|rulerView:shouldMoveMarker:|
          'ns::|rulerView:shouldAddMarker:|
          'ns::|rulerView:pointForLocation:|
          'ns::|quickLookWithEvent:|
          'ns::|moveToEndOfLineAndModifySelection:|
          'ns::|moveToBeginningOfLineAndModifySelection:|
          'ns::|moveToEndOfLine:|
          'ns::|moveToBeginningOfLine:|
          'ns::|moveToRightEndOfLineAndModifySelection:|
          'ns::|moveToLeftEndOfLineAndModifySelection:|
          'ns::|moveToRightEndOfLine:|
          'ns::|moveToLeftEndOfLine:|
          'ns::|toggleAutomaticTextReplacement:|
          'ns::|toggleAutomaticLinkDetection:|
          'ns::|toggleAutomaticDashSubstitution:|
          'ns::|toggleAutomaticQuoteSubstitution:|
          'ns::|ignoreSpelling:|
          'ns::|changeSpelling:|
          'ns::|toggleAutomaticSpellingCorrection:|
          'ns::|toggleGrammarChecking:|
          'ns::|toggleContinuousSpellChecking:|
          'ns::|checkSpelling:|
          'ns::|candidateListTouchBarItem:endSelectingCandidateAtIndex:|
          'ns::|touchBar:makeItemForIdentifier:|
          'ns::|invokeExtensionService:|
          'ns::|layoutSublayersOfLayer:|
          'ns::|spellCheckerDidChangeDashSubstitution:|
          'ns::|spellCheckerDidChangeQuoteSubstitution:|
          'ns::|spellCheckerDidChangeReplacement:|
          'ns::|spellCheckerDidChangeCorrection:|
          'ns::|spellCheckerDidChangeLanguage:|
          'ns::|spellCheckerDidUnlearnWord:|
          'ns::|spellCheckerDidLearnWord:|
          'ns::|setMarkedText:selectedRange:|
          'ns::|conversationIdentifier|
          'ns::|firstRectForCharacterRange:|
          'ns::|getMarkedText:selectedRange:|
          'ns::|delete:|
          'ns::|placeholderAttributedString|
          'ns::|setPlaceholderAttributedString:|
          'ns::|placeholderString|
          'ns::|rangeForUserParagraphAttributeChange|
          'ns::|isRichText|
          'ns::|setUndoActionName:|
          'ns::|rangeForUserCharacterAttributeChange|
          'ns::|pasteFont:|
          'ns::|copyFont:|
          'ns::|lowerBaseline:|
          'ns::|raiseBaseline:|
          'ns::|subscript:|
          'ns::|superscript:|
          'ns::|unscript:|
          'ns::|useAllLigatures:|
          'ns::|turnOffLigatures:|
          'ns::|useStandardLigatures:|
          'ns::|loosenKerning:|
          'ns::|tightenKerning:|
          'ns::|turnOffKerning:|
          'ns::|useStandardKerning:|
          'ns::|outline:|
          'ns::|underline:|
          'ns::|changeFont:|
          'ns::|changeAttributes:|
          'ns::|changeDocumentBackgroundColor:|
          'ns::|visibleCharacterRanges|
          'ns::|didReplaceCharacters|
          'ns::|shouldReplaceCharactersInRanges:withStrings:|
          'ns::|setSelectedRanges:|
          'ns::|contentViewAtIndex:effectiveCharacterRange:|
          'ns::|firstSelectedRange|
          'ns::|setIncrementalSearchingEnabled:|
          'ns::|isIncrementalSearchingEnabled|
          'ns::|setPreferredTextFinderStyle:|
          'ns::|performFindPanelAction:|
          'ns::|performTextFinderAction:|
          'ns::|preferredTextFinderStyle|
          'ns::|canReadSelectionFromItems|
          'ns::|selectionItems|
          'ns::|readSelectionFromItems:|
          'ns::|insertText:|
          'ns::|draggingSession:endedAtPoint:operation:|
          'ns::|draggingSession:sourceOperationMaskForDraggingContext:|
          'ns::|updateDraggingItemsForDrag:|
          'ns::|sharingService:didShareItems:|
          'ns::|sharingService:transitionImageForShareItem:contentRect:|
          'ns::|sharingService:sourceFrameOnScreenForShareItem:|
          'ns::|sharingService:sourceWindowForShareItems:sharingContentScope:|
          'ns::|flagsChanged:|
          'ns::|sharingServicePicker:delegateForSharingService:|
          'ns::|rightMouseUp:|
          'ns::|drawsVerticallyForCharacterAtIndex:|
          'ns::|windowLevel|
          'ns::|baselineDeltaForCharacterAtIndex:|
          'ns::|fractionOfDistanceThroughGlyphForPoint:|
          'ns::|attributedString|
          'ns::|characterIndexForPoint:|
          'ns::|firstRectForCharacterRange:actualRange:|
          'ns::|validAttributesForMarkedText|
          'ns::|attributedSubstringForProposedRange:actualRange:|
          'ns::|markedRange|
          'ns::|unmarkText|
          'ns::|setMarkedText:selectedRange:replacementRange:|
          'ns::|viewForRange:firstRect:actualRange:|
          'ns::|selectAndShowRange:|
          'ns::|replaceCharactersInRange:withAnnotatedString:|
          'ns::|removeAnnotation:range:|
          'ns::|addAnnotations:range:|
          'ns::|setAnnotations:range:|
          'ns::|annotatedSubstringForProposedRange:actualRange:|
          'ns::|setTextCompletionType:|
          'ns::|textCompletionType|
          'ns::|setLinkDetectionType:|
          'ns::|linkDetectionType|
          'ns::|setDataDetectionType:|
          'ns::|dataDetectionType|
          'ns::|setTextReplacementType:|
          'ns::|textReplacementType|
          'ns::|setSmartInsertDeleteType:|
          'ns::|smartInsertDeleteType|
          'ns::|setSmartDashesType:|
          'ns::|smartDashesType|
          'ns::|setSmartQuotesType:|
          'ns::|smartQuotesType|
          'ns::|setGrammarCheckingType:|
          'ns::|grammarCheckingType|
          'ns::|setSpellCheckingType:|
          'ns::|spellCheckingType|
          'ns::|setAutocorrectionType:|
          'ns::|autocorrectionType|
          'ns::|textContainerOrigin|
          'ns::|scrollRangeToVisible:|
          'ns::|setSelectedRange:affinity:stillSelecting:|
          'ns::|selectedRanges|
          'ns::|setSpellingState:range:|
          'ns::|isAutomaticTextCompletionEnabled|
          'ns::|setAutomaticLinkDetectionEnabled:|
          'ns::|isAutomaticLinkDetectionEnabled|
          'ns::|setAutomaticDataDetectionEnabled:|
          'ns::|isAutomaticDataDetectionEnabled|
          'ns::|setAutomaticTextReplacementEnabled:|
          'ns::|isAutomaticTextReplacementEnabled|
          'ns::|setSmartInsertDeleteEnabled:|
          'ns::|smartInsertDeleteEnabled|
          'ns::|setAutomaticDashSubstitutionEnabled:|
          'ns::|isAutomaticDashSubstitutionEnabled|
          'ns::|setAutomaticQuoteSubstitutionEnabled:|
          'ns::|isAutomaticQuoteSubstitutionEnabled|
          'ns::|setGrammarCheckingEnabled:|
          'ns::|isGrammarCheckingEnabled|
          'ns::|setContinuousSpellCheckingEnabled:|
          'ns::|isContinuousSpellCheckingEnabled|
          'ns::|setAutomaticSpellingCorrectionEnabled:|
          'ns::|isAutomaticSpellingCorrectionEnabled|
          'ns::|textCheckingControllerUsesStringAnnotations|
          'ns::|spellCheckerDocumentTag|
          'ns::|textCheckingController|
          'ns::|setPlaceholderString:|
          'ns::|insertBacktab:|
          'ns::|insertTab:|
          'ns::|makeTouchBar|
          'ns::|complete:|
          'ns::|insertNewline:|
          'ns::|changeColor:|
          'ns::|isCompatibleWithResponsiveScrolling|
          'ns::|drawBackgroundOverhangInRect:|
          'ns::|setTypingAttributes:|
          'ns::|setRichText:|
          'ns::|setVerticallyResizable:|
          'ns::|setHorizontallyResizable:|
          'ns::|setMaxSize:|
          'ns::|setMinSize:|
          'ns::|setUsesRuler:|
          'ns::|setWantsNotificationForMarkedText:|
          'ns::|setUsesFontPanel:|
          'ns::|setSelectedTextAttributes:|
          'ns::|selectedRange|
          'ns::|textContainer|
          'ns::|setTextContainer:|
          'ns::|setAutomaticTextCompletionEnabled:|
          'ns::|setAllowsCharacterPickerTouchBarItem:|
          'ns::|isFieldEditor|
          'ns::|textLayoutManager|
          'ns::|setSelectedRange:|
          'ns::|didChangeText|
          'ns::|typingAttributes|
          'ns::|shouldChangeTextInRange:replacementString:|
          'ns::|textStorage|
          'ns::|hasMarkedText|
          'ns::|undoManager|
          'ns::|paste:|
          'ns::|cut:|
          'ns::|becomeMainWindow|
          'ns::|draggedImage:endedAt:operation:|
          'ns::|draggingSourceOperationMaskForLocal:|
          'ns::|allowsMultipleSelection|
          'ns::|selectAll:|
          'ns::|setTextColor:|
          'ns::|layoutManager|
          'ns::|copy:|
          'ns::|textColor|
          'ns::|startSpeaking:|
          'ns::|setTouchBar:|
          'ns::|insertText:replacementRange:|
          'ns::|accessibilityFocusRingBoundsForBounds:|
          'ns::|maxSize|
          'ns::|minSize|
          'ns::|setContentType:|
          'ns::|contentType|
          'ns::|defaultParagraphStyle|
          'ns::|trackMouse:adding:|
          'ns::|thicknessRequiredInRuler|
          'ns::|setRemovable:|
          'ns::|imageOrigin|
          'ns::|setImageOrigin:|
          'ns::|markerLocation|
          'ns::|setMarkerLocation:|
          'ns::|ruler|
          'ns::|imageRectInRuler|
          'ns::|isDragging|
          'ns::|initWithRulerView:markerLocation:image:imageOrigin:|
          'ns::|isMovable|
          'ns::|setMovable:|
          'ns::|isRemovable|
          'ns::|accessibilityIsMarkerUIElementsAttributeSettable|
          'ns::|accessibilityMarkerUIElementsAttribute|
          'ns::|accessibilityIsUnitDescriptionAttributeSettable|
          'ns::|accessibilityUnitDescriptionAttribute|
          'ns::|accessibilityIsUnitsAttributeSettable|
          'ns::|accessibilityUnitsAttribute|
          'ns::|setDisplaysTooltips:|
          'ns::|moveRulerlineFromLocation:toLocation:|
          'ns::|trackMarker:withMouseEvent:|
          'ns::|markers|
          'ns::|setClientView:|
          'ns::|originOffset|
          'ns::|setOriginOffset:|
          'ns::|setMeasurementUnits:|
          'ns::|reservedThicknessForAccessoryView|
          'ns::|reservedThicknessForMarkers|
          'ns::|ruleThickness|
          'ns::|setRuleThickness:|
          'ns::|requiredThickness|
          'ns::|setScrollView:|
          'ns::|drawMarkersInRect:|
          'ns::|drawRulerLines|
          'ns::|drawHashMarksAndLabelsInRect:|
          'ns::|drawSeparatorInRect:|
          'ns::|setLabelString:forValue:|
          'ns::|labelStringForValue:|
          'ns::|setReservedThicknessForAccessoryView:|
          'ns::|setReservedThicknessForMarkers:|
          'ns::|setMarkers:|
          'ns::|invalidateHashMarks|
          'ns::|initWithScrollView:orientation:|
          'ns::|removeMarker:|
          'ns::|addMarker:|
          'ns::|displaysTooltips|
          'ns::|measurementUnits|
          'ns::|baselineLocation|
          'ns::|clientView|
          'ns::|accessibilityMaxValueAttribute|
          'ns::|accessibilityMinValueAttribute|
          'ns::|accessoryView|
          'ns::|scrollView|
          'ns::|setAccessoryView:|
          'ns::|copiesOnScroll|
          'ns::|setAutomaticallyCalculatesContentSize:|
          'ns::|setScrollVelocity:|
          'ns::|scrollVelocity|
          'ns::|constrainScrollPoint:|
          'ns::|constrainBoundsRect:|
          'ns::|automaticallyCalculatesContentSize|
          'ns::|viewBoundsChanged:|
          'ns::|viewFrameChanged:|
          'ns::|documentRect|
          'ns::|setCopiesOnScroll:|
          'ns::|scrollToPoint:|
          'ns::|setContentSize:|
          'ns::|screen|
          'ns::|scrollerImp|
          'ns::|layer:shouldInheritContentsScale:fromWindow:|
          'ns::|hitPart|
          'ns::|arrowsPosition|
          'ns::|drawParts|
          'ns::|knobStyle|
          'ns::|shouldUseLayerPerPartForScrollerImp:|
          'ns::|mouseLocationInScrollerForScrollerImp:|
          'ns::|scrollerImp:animateExpansionTransitionWithDuration:|
          'ns::|scrollerImp:animateUIStateTransitionWithDuration:|
          'ns::|scrollerImp:overlayScrollerStateChangedTo:|
          'ns::|scrollerImp:animateTrackAlphaTo:duration:|
          'ns::|scrollerImp:animateKnobAlphaTo:duration:|
          'ns::|setUsePresentationValue:|
          'ns::|setPresentationValue:|
          'ns::|setOverlayScrollerTrackAlpha:|
          'ns::|setOverlayScrollerKnobAlpha:|
          'ns::|setExpansionTransitionProgress:|
          'ns::|setUiStateTransitionProgress:|
          'ns::|knobProportion|
          'ns::|setKnobProportion:|
          'ns::|trackScrollButtons:|
          'ns::|trackPagingArea:|
          'ns::|trackKnob:|
          'ns::|overlayScrollerTrackAlpha|
          'ns::|drawKnob|
          'ns::|drawArrow:highlightPart:|
          'ns::|drawKnobSlotInRect:highlight:|
          'ns::|drawArrow:highlight:|
          'ns::|usableParts|
          'ns::|setKnobStyle:|
          'ns::|setFloatValue:knobProportion:|
          'ns::|testPart:|
          'ns::|highlight:|
          'ns::|rectForPart:|
          'ns::|overlayScrollerKnobAlpha|
          'ns::|checkSpaceForParts|
          'ns::|setArrowsPosition:|
          'ns::|accessibilityIsOrientationAttributeSettable|
          'ns::|accessibilityOrientationAttribute|
          'ns::|rulerStateDescription|
          'ns::|setVerticalRulerView:|
          'ns::|setHorizontalRulerView:|
          'ns::|computed_contentExtendsPastContentInsets|
          'ns::|setAutomaticallyAdjustsContentViewInsets:|
          'ns::|automaticallyAdjustsContentViewInsets|
          'ns::|autoforwardsScrollWheelEvents|
          'ns::|removeFloatingHeaderView:|
          'ns::|addFloatingHeaderView:forAxis:|
          'ns::|setMagnification:centeredAtPoint:|
          'ns::|magnifyToFitRect:|
          'ns::|setMinMagnification:|
          'ns::|setMaxMagnification:|
          'ns::|setAllowsMagnification:|
          'ns::|setFindBarPosition:|
          'ns::|setUsesPredominantAxisScrolling:|
          'ns::|pageScroll|
          'ns::|setPageScroll:|
          'ns::|lineScroll|
          'ns::|hasBottomShadow|
          'ns::|topShadowMinimumRequiredContentYOffset|
          'ns::|setTopShadowMinimumRequiredContentYOffset:|
          'ns::|topShadowTopInset|
          'ns::|setTopShadowTopInset:|
          'ns::|hasTopShadow|
          'ns::|scrollsDynamically|
          'ns::|setScrollsDynamically:|
          'ns::|computed_distancesScrolledFromDocumentEdges|
          'ns::|computedHasScrolledContentsUnderTitlebar|
          'ns::|computedScrollViewFrame|
          'ns::|setFindBarVisible:|
          'ns::|setFindBarView:|
          'ns::|findBarViewDidChangeHeight|
          'ns::|scrollerImpPair:isContentPointVisible:|
          'ns::|scrollerImpPair:updateScrollerStyleForNewRecommendedScrollerStyle:|
          'ns::|scrollerImpPair:convertContentPoint:toScrollerImp:|
          'ns::|mouseLocationInContentAreaForScrollerImpPair:|
          'ns::|inLiveResizeForScrollerImpPair:|
          'ns::|contentAreaRectForScrollerImpPair:|
          'ns::|separatorOffset|
          'ns::|minMagnification|
          'ns::|maxMagnification|
          'ns::|allowsMagnification|
          'ns::|horizontalScrollElasticity|
          'ns::|verticalScrollElasticity|
          'ns::|setVerticalPageScroll:|
          'ns::|setHorizontalPageScroll:|
          'ns::|setVerticalLineScroll:|
          'ns::|setScrollerKnobStyle:|
          'ns::|scrollerKnobStyle|
          'ns::|scrollerInsets|
          'ns::|isFindBarVisible|
          'ns::|findBarPosition|
          'ns::|setVerticalScrollDecelerationFactor:|
          'ns::|verticalScrollDecelerationFactor|
          'ns::|setHorizontalScrollDecelerationFactor:|
          'ns::|horizontalScrollDecelerationFactor|
          'ns::|setDecelerationRate:|
          'ns::|setHasVerticalRuler:|
          'ns::|setHasHorizontalRuler:|
          'ns::|addFloatingSubview:forAxis:|
          'ns::|usesPredominantAxisScrolling|
          'ns::|accessibilityIsVerticalScrollBarAttributeSettable|
          'ns::|verticalPageScroll|
          'ns::|horizontalPageScroll|
          'ns::|hasVerticalRuler|
          'ns::|hasHorizontalRuler|
          'ns::|accessibilityVerticalScrollBarAttribute|
          'ns::|verticalRulerView|
          'ns::|horizontalRulerView|
          'ns::|setRulersVisible:|
          'ns::|rulersVisible|
          'ns::|endGestureWithEvent:|
          'ns::|beginGestureWithEvent:|
          'ns::|smartMagnifyWithEvent:|
          'ns::|accessibilityScrollToShowDescendantAttributeForParameter:|
          'ns::|setHorizontalScroller:|
          'ns::|findBarView|
          'ns::|decelerationRate|
          'ns::|setMagnification:|
          'ns::|magnifyWithEvent:|
          'ns::|pageUp:|
          'ns::|pageDown:|
          'ns::|setVerticalScroller:|
          'ns::|documentCursor|
          'ns::|setContentInset:|
          'ns::|contentInset|
          'ns::|setDrawsContentShadow:|
          'ns::|drawsContentShadow|
          'ns::|setDocumentCursor:|
          'ns::|flashScrollers|
          'ns::|verticalLineScroll|
          'ns::|scrollClipView:toPoint:|
          'ns::|accessibilityIsHorizontalScrollBarAttributeSettable|
          'ns::|accessibilityHorizontalScrollBarAttribute|
          'ns::|hasVerticalScroller|
          'ns::|setLineScroll:|
          'ns::|scrollerImpPair|
          'ns::|setScrollerStyle:|
          'ns::|automaticallyAdjustsContentInsets|
          'ns::|horizontalLineScroll|
          'ns::|contentInsets|
          'ns::|scrollerStyle|
          'ns::|setScrollerInsets:|
          'ns::|setHorizontalLineScroll:|
          'ns::|contentSize|
          'ns::|setAutoforwardsScrollWheelEvents:|
          'ns::|documentVisibleRect|
          'ns::|autohidesScrollers|
          'ns::|setAutohidesScrollers:|
          'ns::|tile|
          'ns::|hasHorizontalScroller|
          'ns::|borderType|
          'ns::|verticalScroller|
          'ns::|reflectScrolledClipView:|
          'ns::|setHasBottomShadow:|
          'ns::|setHasTopShadow:|
          'ns::|setContentView:|
          'ns::|gestureRecognizer:shouldReceiveTouch:|
          'ns::|documentView|
          'ns::|contentView|
          'ns::|hasHorizontalMoreContentIndicators|
          'ns::|setDocumentView:|
          'ns::|setHasHorizontalMoreContentIndicators:|
          'ns::|setContentInsets:|
          'ns::|setAutomaticallyAdjustsContentInsets:|
          'ns::|setHorizontalScrollElasticity:|
          'ns::|horizontalScroller|
          'ns::|setHasHorizontalScroller:|
          'ns::|setVerticalScrollElasticity:|
          'ns::|setHasVerticalScroller:|
          'ns::|setBorderType:|
          'ns::|applicationExtensionSession|
          'ns::|dismissWindowController:|
          'ns::|viewWillTransitionToSize:|
          'ns::|segueForUnwindingToViewController:fromViewController:identifier:|
          'ns::|viewControllerForUnwindSegueAction:fromViewController:withSender:|
          'ns::|transitionFromViewController:toViewController:options:completionHandler:|
          'ns::|objectDidEndEditing:|
          'ns::|objectDidBeginEditing:|
          'ns::|viewDidDisappear|
          'ns::|viewDidAppear|
          'ns::|viewWillDisappear|
          'ns::|viewWillAppear|
          'ns::|endAppearanceTransition|
          'ns::|beginAppearanceTransition:|
          'ns::|presentedViewControllerDidChangePreferredContentSize:|
          'ns::|childViewControllerDidChangePreferredContentSize:|
          'ns::|preferredContentSizeDidChangeForViewController:|
          'ns::|preferredContentSize|
          'ns::|showChildViewController:|
          'ns::|showInParentViewController|
          'ns::|willMoveToParentViewController:|
          'ns::|removeFromParentViewController|
          'ns::|moveChildViewControllerAtIndex:toIndex:|
          'ns::|insertChildViewController:atIndex:|
          'ns::|removeChildViewControllerAtIndex:|
          'ns::|canPerformUnwindSegueAction:fromViewController:withSender:|
          'ns::|presentViewController:animator:|
          'ns::|dismissViewController:|
          'ns::|definesPresentationContext|
          'ns::|presentedWindowControllers|
          'ns::|viewDidLoad|
          'ns::|viewWillLayout|
          'ns::|updateViewConstraints|
          'ns::|setConstrainServiceScreenFrameBlock:|
          'ns::|constrainServiceScreenFrameBlock|
          'ns::|presentedViewControllers|
          'ns::|setChildViewControllers:|
          'ns::|childViewControllers|
          'ns::|isViewLoaded|
          'ns::|didMoveToParentViewController:|
          'ns::|addChildViewController:|
          'ns::|presentWindowControllerAsSheet:|
          'ns::|presentViewControllerAsSheet:|
          'ns::|presentWindowControllerAsModalWindow:|
          'ns::|presentViewControllerAsModalWindow:|
          'ns::|nibBundle|
          'ns::|nibName|
          'ns::|commitEditingAndReturnError:|
          'ns::|discardEditing|
          'ns::|loadView|
          'ns::|commitEditing|
          'ns::|commitEditingWithDelegate:didCommitSelector:contextInfo:|
          'ns::|viewDidLayout|
          'ns::|setPreferredScreenOrigin:|
          'ns::|setSourceItemView:|
          'ns::|sourceItemView|
          'ns::|extensionContext|
          'ns::|maximumSize|
          'ns::|preferredScreenOrigin|
          'ns::|parentViewController|
          'ns::|initWithNibName:bundle:|
          'ns::|setPreferredContentSize:|
          'ns::|preferredMinimumSize|
          'ns::|preferredMaximumSize|
          'ns::|beginRequestWithExtensionContext:|
          'ns::|initWithWindowNibPath:owner:|
          'ns::|windowWillLoad|
          'ns::|windowTitleForDocumentDisplayName:|
          'ns::|loadWindow|
          'ns::|windowNibPath|
          'ns::|windowFrameAutosaveName|
          'ns::|setShouldCloseDocument:|
          'ns::|setWindowFrameAutosaveName:|
          'ns::|setShouldCascadeWindows:|
          'ns::|shouldCascadeWindows|
          'ns::|windowDidLoad|
          'ns::|initWithWindowNibName:|
          'ns::|shouldCloseDocument|
          'ns::|setDocument:|
          'ns::|initWithWindowNibName:owner:|
          'ns::|windowNibName|
          'ns::|setDocumentEdited:|
          'ns::|synchronizeWindowTitleWithDocumentName|
          'ns::|dismissController:|
          'ns::|performSegueWithIdentifier:sender:|
          'ns::|presentingViewController|
          'ns::|presentViewController:asPopoverRelativeToRect:ofView:preferredEdge:behavior:|
          'ns::|contentViewController|
          'ns::|setStoryboard:|
          'ns::|shouldPerformSegueWithIdentifier:sender:|
          'ns::|prepareForSegue:sender:|
          'ns::|initWithWindow:|
          'ns::|setContentViewController:|
          'ns::|isWindowLoaded|
          'ns::|showWindow:|
          'ns::|setWindow:|
          'ns::|document|
          'ns::|close|
          'ns::|accessibilityIsTabsAttributeSettable|
          'ns::|accessibilityTabsAttribute|
          'ns::|selectPreviousTabViewItem:|
          'ns::|selectNextTabViewItem:|
          'ns::|selectLastTabViewItem:|
          'ns::|selectFirstTabViewItem:|
          'ns::|selectTabViewItemWithIdentifier:|
          'ns::|takeSelectedTabViewItemFromSender:|
          'ns::|insertTabViewItem:atIndex:|
          'ns::|setTabViewBorderType:|
          'ns::|setTabPosition:|
          'ns::|setTabViewType:|
          'ns::|setAllowsTruncatedLabels:|
          'ns::|tabViewBorderType|
          'ns::|tabPosition|
          'ns::|setTabViewItems:|
          'ns::|allowsTruncatedLabels|
          'ns::|tabViewItemAtPoint:|
          'ns::|tabViewMinimumSizeConstraint|
          'ns::|indexOfTabViewItemWithIdentifier:|
          'ns::|tabViewItemAtIndex:|
          'ns::|numberOfTabViewItems|
          'ns::|indexOfTabViewItem:|
          'ns::|selectTabViewItemAtIndex:|
          'ns::|tabViewType|
          'ns::|selectTabViewItem:|
          'ns::|addTabViewItem:|
          'ns::|selectedTabViewItem|
          'ns::|setTabViewMinimumSizeConstraint:|
          'ns::|tabViewItems|
          'ns::|removeTabViewItem:|
          'ns::|mouseTracker:didStopTrackingWithEvent:|
          'ns::|mouseTracker:shouldContinueTrackingWithEvent:|
          'ns::|mouseTracker:shouldStartTrackingWithEvent:|
          'ns::|contentRect|
          'ns::|springLoadingExited:|
          'ns::|springLoadingUpdated:|
          'ns::|moveUp:|
          'ns::|moveDown:|
          'ns::|springLoadingActivated:draggingInfo:|
          'ns::|springLoadingHighlightChanged:|
          'ns::|springLoadingEntered:|
          'ns::|moveLeft:|
          'ns::|moveRight:|
          'ns::|accessibilityIsContentsAttributeSettable|
          'ns::|accessibilityContentsAttribute|
          'ns::|minimumSize|
          'ns::|setBaselineRelativeArrangement:|
          'ns::|setArrangedSubviews:|
          'ns::|rightSpacer|
          'ns::|leftSpacer|
          'ns::|bottomSpacer|
          'ns::|topSpacer|
          'ns::|currentSpacers|
          'ns::|currentContainers|
          'ns::|endViewsContainer|
          'ns::|middleViewsContainer|
          'ns::|beginningViewsContainer|
          'ns::|effectiveSpacingAfterView:|
          'ns::|setHasEqualSpacing:|
          'ns::|hasEqualSpacing|
          'ns::|setTransverseAlignmentPriority:|
          'ns::|transverseAlignmentPriority|
          'ns::|setTransverseAlignment:|
          'ns::|transverseAlignment|
          'ns::|setPerpendicularAlignment:|
          'ns::|perpendicularAlignment|
          'ns::|visibilityPriorityForView:|
          'ns::|clippingResistancePriorityForOrientation:|
          'ns::|isBaselineRelativeArrangement|
          'ns::|secondaryAlignmentPriority|
          'ns::|huggingPriorityForOrientation:|
          'ns::|attachedViews|
          'ns::|isViewDetached:|
          'ns::|trailingOrBottomViewsManager|
          'ns::|centerViewsManager|
          'ns::|leadingOrTopViewsManager|
          'ns::|detachedViews|
          'ns::|customSpacingAfterView:|
          'ns::|distribution|
          'ns::|setAlignmentPriority:|
          'ns::|alignmentPriority|
          'ns::|setSecondaryAlignmentPriority:|
          'ns::|setSecondaryAlignment:|
          'ns::|secondaryAlignment|
          'ns::|enumerateViewsIncludingDetached:usingBlock:|
          'ns::|detachesHiddenViews|
          'ns::|viewsInGravity:|
          'ns::|setClippingResistancePriority:forOrientation:|
          'ns::|setVisibilityPriority:forView:|
          'ns::|setViews:inGravity:|
          'ns::|addView:inGravity:|
          'ns::|setHuggingPriority:forOrientation:|
          'ns::|setCustomSpacing:afterView:|
          'ns::|views|
          'ns::|edgeInsets|
          'ns::|insertView:atIndex:inGravity:|
          'ns::|setDistribution:|
          'ns::|removeView:|
          'ns::|setSpacing:|
          'ns::|spacing|
          'ns::|setDetachesHiddenViews:|
          'ns::|setOrientation:|
          'ns::|setEdgeInsets:|
          'ns::|accessibilityIsSplittersAttributeSettable|
          'ns::|accessibilitySplittersAttribute|
          'ns::|debugReasonForLayoutMode|
          'ns::|accessibilityResetChildrenAttribute|
          'ns::|setStayPutPriority:forSubviewAtIndex:|
          'ns::|stayPutPriorityForSubviewAtIndex:|
          'ns::|cursorRectForDividerAtIndex:|
          'ns::|positionOfDividerAtIndex:|
          'ns::|isSubviewCollapsed:|
          'ns::|setDividerColor:|
          'ns::|setIsPaneSplitter:|
          'ns::|setHoldingPriority:forSubviewAtIndex:|
          'ns::|adjustSubviews|
          'ns::|holdingPriorityForSubviewAtIndex:|
          'ns::|drawDividerInRect:|
          'ns::|arrangesAllSubviews|
          'ns::|maxPossiblePositionOfDividerAtIndex:|
          'ns::|minPossiblePositionOfDividerAtIndex:|
          'ns::|isArrangedViewCollapsed:|
          'ns::|dividerColor|
          'ns::|isPaneSplitter|
          'ns::|dividerStyle|
          'ns::|instantiateWithObjectInstantiator:|
          'ns::|validateToolbarItem:|
          'ns::|dividerThickness|
          'ns::|insertArrangedSubview:atIndex:|
          'ns::|removeArrangedSubview:|
          'ns::|setDividerStyle:|
          'ns::|setArrangesAllSubviews:|
          'ns::|setPosition:ofDividerAtIndex:|
          'ns::|setVertical:|
          'ns::|autosaveName|
          'ns::|setAutosaveName:|
          'ns::|toggleSidebar:|
          'ns::|addArrangedSubview:|
          'ns::|setSpringLoaded:|
          'ns::|isSpringLoaded|
          'ns::|isVertical|
          'ns::|orientation|
          'ns::|arrangedSubviews|
          'ns::|setEntryType:|
          'ns::|entryType|
          'ns::|controlTint|
          'ns::|isEntryAcceptable:|
          'ns::|accessibilityStyleRangeForIndexAttributeForParameter:|
          'ns::|accessibilityAttributedStringForRangeAttributeForParameter:|
          'ns::|accessibilityRTFForRangeAttributeForParameter:|
          'ns::|accessibilityBoundsForRangeAttributeForParameter:|
          'ns::|accessibilityRangeForIndexAttributeForParameter:|
          'ns::|accessibilityRangeForPositionAttributeForParameter:|
          'ns::|accessibilityStringForRangeAttributeForParameter:|
          'ns::|accessibilityRangeForLineAttributeForParameter:|
          'ns::|accessibilityLineForIndexAttributeForParameter:|
          'ns::|accessibilityIsInsertionPointLineNumberAttributeSettable|
          'ns::|accessibilityInsertionPointLineNumberAttribute|
          'ns::|accessibilitySetVisibleCharacterRangeAttribute:|
          'ns::|accessibilityIsVisibleCharacterRangeAttributeSettable|
          'ns::|accessibilityVisibleCharacterRangeAttribute|
          'ns::|accessibilityIsNumberOfCharactersAttributeSettable|
          'ns::|accessibilityNumberOfCharactersAttribute|
          'ns::|accessibilitySetSelectedTextRangeAttribute:|
          'ns::|accessibilityIsSelectedTextRangeAttributeSettable|
          'ns::|accessibilitySelectedTextRangeAttribute|
          'ns::|accessibilitySetSelectedTextAttribute:|
          'ns::|accessibilityIsSelectedTextAttributeSettable|
          'ns::|accessibilitySelectedTextAttribute|
          'ns::|accessibilityCurrentEditor|
          'ns::|setFieldEditorTextContainer:|
          'ns::|setTitleTextContainer:|
          'ns::|setStyleEffectConfiguration:|
          'ns::|setAllowsAppearanceTextEffects:|
          'ns::|allowsAppearanceTextEffects|
          'ns::|canSmoothFontsInFrame:forLayerBackedView:|
          'ns::|draggingImageComponentsWithFrame:inView:|
          'ns::|opaqueRectForTitleBounds:|
          'ns::|wantsNotificationForMarkedText|
          'ns::|sendsActionOnEndEditing|
          'ns::|setSendsActionOnEndEditing:|
          'ns::|menuForEvent:inRect:ofView:|
          'ns::|resetCursorRect:inView:|
          'ns::|fieldEditorForView:|
          'ns::|selectWithFrame:inView:editor:delegate:start:length:|
          'ns::|editWithFrame:inView:editor:delegate:event:|
          'ns::|keyUp:inRect:ofView:|
          'ns::|keyDown:inRect:ofView:|
          'ns::|touchCancelledAt:inView:|
          'ns::|touchMovedFrom:to:inView:|
          'ns::|touchBeganAt:inView:|
          'ns::|fontDilationStyle|
          'ns::|setUpFieldEditorAttributes:|
          'ns::|calcDrawInfo:|
          'ns::|textDidChange:|
          'ns::|textView:shouldChangeTextInRange:replacementString:|
          'ns::|setTruncatesLastVisibleLine:|
          'ns::|setAllowsDefaultTighteningForTruncation:|
          'ns::|allowsDefaultTighteningForTruncation|
          'ns::|setImportsGraphics:|
          'ns::|importsGraphics|
          'ns::|showsFirstResponder|
          'ns::|setAllowsUndo:|
          'ns::|hasValidObjectValue|
          'ns::|styleEffectConfiguration|
          'ns::|isSelectable|
          'ns::|fieldEditorTextContainer|
          'ns::|cancelTrackingAt:inView:|
          'ns::|continueTrackingPeriodicEvent:inView:|
          'ns::|cachesLineRef|
          'ns::|titleTextContainer|
          'ns::|isScrollable|
          'ns::|truncatesLastVisibleLine|
          'ns::|allowsUndo|
          'ns::|allowsEditingTokens|
          'ns::|allowsEditingTextAttributes|
          'ns::|wraps|
          'ns::|imageInterpolation|
          'ns::|setImageInterpolation:|
          'ns::|setCellAttribute:to:|
          'ns::|cellAttribute:|
          'ns::|stopTracking:at:inView:mouseIsUp:|
          'ns::|continueTrackingGesture:inView:|
          'ns::|focusRingMaskBoundsForFrame:inView:|
          'ns::|layoutLayerWithFrame:inView:|
          'ns::|updateLayerWithFrame:inView:|
          'ns::|wantsUpdateLayerInView:|
          'ns::|touchEndedAt:inView:|
          'ns::|continueTracking:at:inView:|
          'ns::|startTrackingAt:inView:|
          'ns::|trackMouse:inRect:ofView:untilMouseUp:|
          'ns::|isBezeled|
          'ns::|setScrollable:|
          'ns::|nextState|
          'ns::|drawingRectForBounds:|
          'ns::|updateTrackingAreaWithFrame:inView:|
          'ns::|drawFocusRingMaskWithFrame:inView:|
          'ns::|setShowsFirstResponder:|
          'ns::|setAllowsMixedState:|
          'ns::|allowsMixedState|
          'ns::|expansionFrameWithFrame:inView:|
          'ns::|highlightColorWithFrame:inView:|
          'ns::|imageRectForBounds:|
          'ns::|setBackgroundStyle:|
          'ns::|drawInteriorWithFrame:inView:|
          'ns::|initImageCell:|
          'ns::|setWraps:|
          'ns::|setBezeled:|
          'ns::|drawsBackground|
          'ns::|highlight:withFrame:inView:|
          'ns::|hitTestForEvent:inRect:ofView:|
          'ns::|setSelectable:|
          'ns::|setEditable:|
          'ns::|drawWithFrame:inView:|
          'ns::|cellSize|
          'ns::|initTextCell:|
          'ns::|accessibilitySetValueAttribute:|
          'ns::|accessibilityIsValueAttributeSettable|
          'ns::|accessibilityValueAttribute|
          'ns::|isEditable|
          'ns::|accessibilityPostNotification:|
          'ns::|setAllowsEditingTextAttributes:|
          'ns::|setControlTint:|
          'ns::|cellSizeForBounds:|
          'ns::|setBordered:|
          'ns::|isBordered|
          'ns::|titleRectForBounds:|
          'ns::|textAlignmentPolicy|
          'ns::|interiorBackgroundStyle|
          'ns::|accessibilityElementWithParent:|
          'ns::|setDrawsBackground:|
          'ns::|setType:|
          'ns::|removeTarget:action:forControlEvents:|
          'ns::|addTarget:action:forControlEvents:|
          'ns::|expansionFrameWithFrame:|
          'ns::|drawCellInside:|
          'ns::|calcSize|
          'ns::|textViewDidChangeSelection:|
          'ns::|selectWithFrame:editor:delegate:start:length:|
          'ns::|editWithFrame:editor:delegate:event:|
          'ns::|setSkipEditValidation:|
          'ns::|skipEditValidation|
          'ns::|setIgnoresMultiClick:|
          'ns::|ignoresMultiClick|
          'ns::|sizeThatFits:|
          'ns::|selectedTag|
          'ns::|cellIfExists|
          'ns::|setAllowsLogicalLayoutDirection:|
          'ns::|setFloatingPointFormat:left:right:|
          'ns::|textView:willChangeSelectionFromCharacterRange:toCharacterRange:|
          'ns::|accessibilityPostNotification:context:|
          'ns::|keyUp:|
          'ns::|allowsExpansionToolTips|
          'ns::|allowsLogicalLayoutDirection|
          'ns::|setAllowsExpansionToolTips:|
          'ns::|touchesCancelledWithEvent:|
          'ns::|touchesEndedWithEvent:|
          'ns::|touchesMovedWithEvent:|
          'ns::|touchesBeganWithEvent:|
          'ns::|setNeedsDisplay|
          'ns::|mouseDownFlags|
          'ns::|setUsesSingleLineMode:|
          'ns::|takeObjectValueFrom:|
          'ns::|takeStringValueFrom:|
          'ns::|takeDoubleValueFrom:|
          'ns::|takeFloatValueFrom:|
          'ns::|takeIntegerValueFrom:|
          'ns::|takeIntValueFrom:|
          'ns::|sendActionOn:|
          'ns::|endEditing:|
          'ns::|usesSingleLineMode|
          'ns::|validateEditing|
          'ns::|currentEditor|
          'ns::|drawCell:|
          'ns::|sendActionOnMask|
          'ns::|setNextState|
          'ns::|getPeriodicDelay:interval:|
          'ns::|drawWithExpansionFrame:inView:|
          'ns::|refusesFirstResponder|
          'ns::|becomeFirstResponder|
          'ns::|updateCellInside:|
          'ns::|resignKeyWindow|
          'ns::|selectCell:|
          'ns::|setRefusesFirstResponder:|
          'ns::|resignFirstResponder|
          'ns::|keyDown:|
          'ns::|selectedCell|
          'ns::|updateCell:|
          'ns::|abortEditing|
          'ns::|setCell:|
          'ns::|sendAction:to:|
          'ns::|setFloatValue:|
          'ns::|setIntegerValue:|
          'ns::|setIntValue:|
          'ns::|becomeKeyWindow|
          'ns::|setAttributedStringValue:|
          'ns::|attributedStringValue|
          'ns::|performClick:|
          'ns::|touchBarRestingMitigation|
          'ns::|touchBarInsetMitigation|
          'ns::|setTouchBarRestingMitigation:|
          'ns::|setTouchBarInsetMitigation:|
          'ns::|setDoubleValue:|
          'ns::|cell|
          'ns::|accessibilityIsEnabledAttributeSettable|
          'ns::|accessibilityEnabledAttribute|
          'ns::|accessibilitySizeOfChild:|
          'ns::|accessibilityPositionOfChild:|
          'ns::|accessibilitySetFocus:forChild:|
          'ns::|accessibilityIsChildFocusable:|
          'ns::|accessibilityHelpStringForChild:|
          'ns::|acceptsFirstResponder|
          'ns::|mouseDown:|
          'ns::|isContinuous|
          'ns::|setHighlighted:|
          'ns::|setContinuous:|
          'ns::|setControlSize:|
          'ns::|controlSize|
          'ns::|setLineBreakMode:|
          'ns::|baseWritingDirection|
          'ns::|lineBreakMode|
          'ns::|setStringValue:|
          'ns::|setObjectValue:|
          'ns::|objectValue|
          'ns::|setFormatter:|
          'ns::|formatter|
          'ns::|alignment|
          'ns::|setAlignment:|
          'ns::|setBaseWritingDirection:|
          'ns::|removeConstraintWithIdentifier:|
          'ns::|textLayerShouldEnableFontSmoothing:|
          'ns::|declaredLayoutRules|
          'ns::|recursiveConstraintIdentifierDescription|
          'ns::|recursiveConstraintDescription|
          'ns::|computedSafeAreaRect|
          'ns::|computedSafeAreaInsets|
          'ns::|safeAreaLayoutGuide|
          'ns::|layoutMarginsGuide|
          'ns::|measureMin:max:ideal:|
          'ns::|solutionDidChangeInEngine:|
          'ns::|engine:willBreakConstraint:dueToMutuallyExclusiveConstraints:|
          'ns::|engine:markerForConstraintToBreakAmongConstraints:|
          'ns::|nsli_swapContainerForOutgoingConstraint:toIncomingConstraint:|
          'ns::|nsli_canHostIndependentVariableAnchor|
          'ns::|nsli_layoutAnchorForAttribute:|
          'ns::|nsli_engineToUserScalingCoefficients|
          'ns::|nsli_addConstraint:mutuallyExclusiveConstraints:|
          'ns::|exerciseAmbiguityInLayout|
          'ns::|ns_containerWidgetType|
          'ns::|ns_widgetType|
          'ns::|reuseIdentifier|
          'ns::|exitFullScreenModeWithOptions:|
          'ns::|enterFullScreenMode:withOptions:|
          'ns::|endTrailer|
          'ns::|beginTrailer|
          'ns::|endPageSetup|
          'ns::|addToPageSetup|
          'ns::|beginPageSetupRect:placement:|
          'ns::|beginPage:label:bBox:fonts:|
          'ns::|endSetup|
          'ns::|beginSetup|
          'ns::|endPrologue|
          'ns::|endHeaderComments|
          'ns::|beginPrologueBBox:creationDate:createdBy:fonts:forWhom:pages:title:|
          'ns::|beginPageInRect:atPlacement:|
          'ns::|writeEPSInsideRect:toPasteboard:|
          'ns::|writePDFInsideRect:toPasteboard:|
          'ns::|endPage|
          'ns::|endDocument|
          'ns::|beginDocument|
          'ns::|drawPageBorderWithSize:|
          'ns::|drawSheetBorderWithSize:|
          'ns::|pageHeader|
          'ns::|pageFooter|
          'ns::|heightAdjustLimit|
          'ns::|adjustPageWidthNew:left:right:limit:|
          'ns::|widthAdjustLimit|
          'ns::|nsis_orientationHintForVariable:|
          'ns::|nsis_descriptionOfVariable:|
          'ns::|nsis_valueOfVariableIsUserObservable:|
          'ns::|nsis_shouldIntegralizeVariable:|
          'ns::|nsli_isCollectingConstraintChangesForLaterCoordinatedFlush:|
          'ns::|nsli_setPiercingToken:|
          'ns::|nsli_piercingToken|
          'ns::|nsli_isFlipped|
          'ns::|nsli_autoresizingMask|
          'ns::|nsli_descriptionIncludesPointer|
          'ns::|nsli_resolvedValue:forSymbolicConstant:inConstraint:error:|
          'ns::|nsli_layoutRect|
          'ns::|constraintsAffectingLayoutForOrientation:|
          'ns::|nsli_lowerAttribute:intoExpression:withCoefficient:container:|
          'ns::|nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:|
          'ns::|nsli_description|
          'ns::|nsli_boundsHeightVariable|
          'ns::|nsli_boundsWidthVariable|
          'ns::|nsli_addConstraint:|
          'ns::|nsli_itemDescribingLayoutDirectionForConstraint:toItem:|
          'ns::|nsli_isRTL|
          'ns::|nsli_constraintWithAnchor:relatedBy:toAnchor:withSystemSpacingMultipliedBy:|
          'ns::|nsli_defaultResolvedValue:forSymbolicConstant:inConstraint:error:|
          'ns::|nsli_convertSizeFromEngineSpace:|
          'ns::|nsli_convertSizeToEngineSpace:|
          'ns::|constraintsAffectingLayoutForOrientation:ofItem:|
          'ns::|nsli_removeConstraint:|
          'ns::|nsli_installedConstraints|
          'ns::|nsli_layoutEngine|
          'ns::|nsli_lowersExpressionRelativeToConstraintContainer|
          'ns::|nsli_lowerAttribute:intoExpression:withCoefficient:forConstraint:onBehalfOfLayoutGuide:|
          'ns::|removeLayoutGuide:|
          'ns::|dragPromisedFilesOfTypes:fromRect:source:slideBack:event:|
          'ns::|dragFile:fromRect:slideBack:event:|
          'ns::|dataWithPDFInsideRect:|
          'ns::|dataWithEPSInsideRect:|
          'ns::|nsli_superitem|
          'ns::|nsli_minYVariable|
          'ns::|nsli_minXVariable|
          'ns::|shouldSetFontSmoothingBackgroundColor|
          'ns::|setFontSmoothingBackgroundColor:|
          'ns::|fontSmoothingBackgroundColor|
          'ns::|computed_allowRolloverInToolbarControls|
          'ns::|computed_titlebarIsForcingDisplayOfDividers|
          'ns::|computed_inSelectedTableRow|
          'ns::|contentStyle|
          'ns::|showDefinitionForAttributedString:atPoint:|
          'ns::|activeDrawingRect|
          'ns::|viewDidChangeBackingProperties:|
          'ns::|updateLayerHandler|
          'ns::|willSendMenuNeedsUpdate:withEvent:|
          'ns::|postsBoundsChangedNotifications|
          'ns::|shouldDrawColor|
          'ns::|removeCursorRect:cursor:|
          'ns::|translateRectsNeedingDisplayInRect:by:|
          'ns::|scrollPoint:fromView:|
          'ns::|isVerticalContentSizeConstraintActive|
          'ns::|isHorizontalContentSizeConstraintActive|
          'ns::|setUsesConstraintsInsteadOfAutoresizing:|
          'ns::|usesConstraintsInsteadOfAutoresizing|
          'ns::|displayRectIgnoringOpacity:|
          'ns::|setGesturesEnabled:|
          'ns::|gesturesEnabled|
          'ns::|setWantsRestingTouches:|
          'ns::|setAcceptsTouchEvents:|
          'ns::|lockFocusIfCanDrawInContext:|
          'ns::|releaseGState|
          'ns::|gState|
          'ns::|convertRectFromBase:|
          'ns::|convertRectToBase:|
          'ns::|convertSizeFromBase:|
          'ns::|convertSizeToBase:|
          'ns::|convertPointToBase:|
          'ns::|layerUsesCoreImageFilters|
          'ns::|setLayerUsesCoreImageFilters:|
          'ns::|boundsRotation|
          'ns::|boundsSize|
          'ns::|setWantsExtendedDynamicRange:|
          'ns::|wantsExtendedDynamicRange|
          'ns::|frameSize|
          'ns::|frameOrigin|
          'ns::|frameCenterRotation|
          'ns::|setFrameCenterRotation:|
          'ns::|frameTransform|
          'ns::|enableLayoutFlushing|
          'ns::|disableLayoutFlushing|
          'ns::|nsis_rawAlignmentRect|
          'ns::|nsis_unroundedFrame|
          'ns::|nsis_layoutRectFromHostingViewInEngine:|
          'ns::|computed_effectiveSemanticContext|
          'ns::|maskView|
          'ns::|setMaskView:|
          'ns::|effectiveAppearanceDidChange|
          'ns::|setGestureRecognizers:|
          'ns::|setWantsBestResolutionOpenGLSurface:|
          'ns::|layoutGuides|
          'ns::|cacheDisplayInRect:toBitmapImageRep:includeSubviews:|
          'ns::|displayIfNeededInRectIgnoringOpacity:|
          'ns::|displayIfNeededIgnoringOpacity|
          'ns::|displayIfNeededInRect:|
          'ns::|removeGestureRecognizer:|
          'ns::|convertSizeFromLayer:|
          'ns::|convertSizeToLayer:|
          'ns::|convertPointFromLayer:|
          'ns::|frameRotation|
          'ns::|setFrameTransform:|
          'ns::|boundsOrigin|
          'ns::|setPreparedContentRect:|
          'ns::|nsli_engineToUserScalingCoefficientsInEngine:|
          'ns::|compareGeometry:|
          'ns::|layerContentsPlacement|
          'ns::|hideActiveFirstResponderIndication|
          'ns::|removeAllGestureRecognizers|
          'ns::|setCanDrawConcurrently:|
          'ns::|setCanDrawSubviewsIntoLayer:|
          'ns::|accessibilityPopUpMenuCreated:returningAccessibilityParent:|
          'ns::|nsis_frameInEngine:forLayoutGuide:withRounding:|
          'ns::|view:customToolTip:fadeOutAllowedForToolTipWithDisplayInfo:|
          'ns::|view:customToolTip:frameForToolTipWithDisplayInfo:|
          'ns::|view:customToolTip:drawInView:displayInfo:|
          'ns::|rectPreservedDuringLiveResize|
          'ns::|addLayoutGuide:|
          'ns::|revealContext:rectsForItem:|
          'ns::|knowsPagesFirst:last:|
          'ns::|knowsPageRange:|
          'ns::|adjustPageHeightNew:top:bottom:limit:|
          'ns::|didAddSubview:|
          'ns::|isRotatedFromBase|
          'ns::|rectForSmartMagnificationAtPoint:inRect:|
          'ns::|locationOfPrintRect:|
          'ns::|isInFullScreenMode|
          'ns::|wantsDefaultClipping|
          'ns::|showDefinitionForAttributedString:range:options:baselineOriginProvider:|
          'ns::|isInTouchBar|
          'ns::|displayIgnoringOpacity|
          'ns::|canSmoothFontsInLayer|
          'ns::|accessibilityAuditPotentialChildren|
          'ns::|visibleAccessibleOrLeafSubviews|
          'ns::|drawOverlayRect:|
          'ns::|showActiveFirstResponderIndication|
          'ns::|needsToDrawRect:|
          'ns::|overlayBounds|
          'ns::|preparedContentRect|
          'ns::|convertSizeFromBacking:|
          'ns::|nsis_valueOfVariable:didChangeInEngine:|
          'ns::|canDrawSubviewsIntoLayer|
          'ns::|resizeSubviewsWithOldSize:|
          'ns::|sortSubviewsUsingFunction:context:|
          'ns::|convertPointToLayer:|
          'ns::|accessibilityFocusRingMaskBounds|
          'ns::|inputContext|
          'ns::|removeToolTip:|
          'ns::|isRotatedOrScaledFromBase|
          'ns::|viewDidUnhide|
          'ns::|viewDidHide|
          'ns::|geometryInWindowDidChange|
          'ns::|printJobTitle|
          'ns::|rectForPage:|
          'ns::|setVerticalContentSizeConstraintActive:|
          'ns::|setHorizontalContentSizeConstraintActive:|
          'ns::|prepareContentInRect:|
          'ns::|convertPointFromBase:|
          'ns::|setWantsExtendedDynamicRangeOpenGLSurface:|
          'ns::|wantsExtendedDynamicRangeOpenGLSurface|
          'ns::|addToolTipRect:owner:userData:|
          'ns::|didResignActiveFirstResponder|
          'ns::|didBecomeActiveFirstResponder|
          'ns::|loggingDescription|
          'ns::|needsUpdateConstraints|
          'ns::|needsLayout|
          'ns::|autoresizesSubviews|
          'ns::|canDrawConcurrently|
          'ns::|pressureConfiguration|
          'ns::|setPressureConfiguration:|
          'ns::|renewGState|
          'ns::|wantsBestResolutionOpenGLSurface|
          'ns::|ancestorSharedWithView:|
          'ns::|alignmentLayoutRect|
          'ns::|setUpdateLayerHandler:|
          'ns::|hasAmbiguousLayout|
          'ns::|resizeWithOldSuperviewSize:|
          'ns::|needsDisplay|
          'ns::|functionRow|
          'ns::|actionForLayer:forKey:|
          'ns::|drawLayer:inContext:|
          'ns::|setLayerContentsPlacement:|
          'ns::|nsis_frame|
          'ns::|removeAllToolTips|
          'ns::|isDrawingFindIndicator|
          'ns::|allowedTouchTypes|
          'ns::|wantsRestingTouches|
          'ns::|recursiveDescription|
          'ns::|trackEventsMatchingMask:timeout:mode:handler:|
          'ns::|removeTrackingRect:|
          'ns::|addTrackingRect:owner:userData:assumeInside:|
          'ns::|concludeDragOperation:|
          'ns::|prepareForDragOperation:|
          'ns::|cursorUpdate:|
          'ns::|discardCursorRects|
          'ns::|firstBaselineAnchor|
          'ns::|layoutRect|
          'ns::|contentCompressionResistancePriorityForOrientation:|
          'ns::|contentHuggingPriorityForOrientation:|
          'ns::|clipsToBounds|
          'ns::|setContentFilters:|
          'ns::|contentFilters|
          'ns::|setBackgroundFilters:|
          'ns::|backgroundFilters|
          'ns::|setShadow:|
          'ns::|shadow|
          'ns::|nsli_ancestorSharedWithItem:|
          'ns::|compositingFilter|
          'ns::|accessibilityPopUpMenuParent:|
          'ns::|focusRingMaskBounds|
          'ns::|displayRect:|
          'ns::|shouldBeArchived|
          'ns::|ignoreHitTest|
          'ns::|acceptsTouchEvents|
          'ns::|setNeedsUpdateConstraints:|
          'ns::|replaceSubview:with:options:completionHandler:|
          'ns::|setAutoresizesSubviews:|
          'ns::|viewWillMoveToWindow:|
          'ns::|viewDidChangeBackingProperties|
          'ns::|lastBaselineAnchor|
          'ns::|candidateListTouchBarItem|
          'ns::|interpretKeyEvents:|
          'ns::|convertRectFromLayer:|
          'ns::|updateTrackingAreas|
          'ns::|viewDidEndLiveResize|
          'ns::|viewWillStartLiveResize|
          'ns::|constraints|
          'ns::|beginDraggingSessionWithItems:event:source:|
          'ns::|viewWithTag:|
          'ns::|enclosingMenuItem|
          'ns::|autoscroll:|
          'ns::|rotateByAngle:|
          'ns::|setBoundsRotation:|
          'ns::|setFrameRotation:|
          'ns::|previousValidKeyView|
          'ns::|adjustScroll:|
          'ns::|scaleUnitSquareToSize:|
          'ns::|translateOriginToPoint:|
          'ns::|setBoundsSize:|
          'ns::|viewWillMoveToSuperview:|
          'ns::|allocateGState|
          'ns::|constraintsDidChangeInEngine:|
          'ns::|updateConstraintsForSubtreeIfNeeded|
          'ns::|rightAnchor|
          'ns::|setUpGState|
          'ns::|deepestAccessibilityDescendants|
          'ns::|accessibilityAuditContrast|
          'ns::|accessibilityAuditLabel|
          'ns::|accessibilityAuditHierarchy|
          'ns::|accessibilitySectionsAttribute|
          'ns::|accessibilityDrawFocusRing|
          'ns::|accessibilityAuditParent|
          'ns::|drawFocusRingMask|
          'ns::|accessibilityWindowPointForShowMenu|
          'ns::|opaqueAncestor|
          'ns::|heartBeat:|
          'ns::|canBecomeKeyView|
          'ns::|setAllowsVibrancy:|
          'ns::|convertSizeToBacking:|
          'ns::|focusRingType|
          'ns::|nextValidKeyView|
          'ns::|trackingAreas|
          'ns::|topAnchor|
          'ns::|worksWhenModal|
          'ns::|print:|
          'ns::|accessibilityPopUpMenuClosed:accessibilityParent:|
          'ns::|accessibilityPopUpMenuCreated:forSubview:returningAccessibilityParent:|
          'ns::|prepareForMenu:withEvent:|
          'ns::|prepareMenu:withEvent:|
          'ns::|didCloseMenu:withEvent:|
          'ns::|willOpenMenu:withEvent:|
          'ns::|alphaValue|
          'ns::|setClipsToBounds:|
          'ns::|compositingOperation|
          'ns::|setCompositingOperation:|
          'ns::|constraintForIdentifier:|
          'ns::|effectiveContentStyle|
          'ns::|layerContentsRedrawPolicy|
          'ns::|lastBaselineOffsetFromBottom|
          'ns::|convertPointFromBacking:|
          'ns::|noteFocusRingMaskChanged|
          'ns::|performMnemonic:|
          'ns::|touchBarHitTestInsets|
          'ns::|baselineOffsetFromBottom|
          'ns::|firstBaselineOffsetFromTop|
          'ns::|sortSubviewsUsingBlock:|
          'ns::|frameForAlignmentRect:|
          'ns::|setContentStyle:|
          'ns::|lockFocusIfCanDraw|
          'ns::|invalidateConstraints|
          'ns::|invalidateIntrinsicContentSizeForCell:|
          'ns::|centerScanRect:|
          'ns::|animationForKey:|
          'ns::|setNextResponder:|
          'ns::|translatesAutoresizingMaskIntoConstraints|
          'ns::|headerView|
          'ns::|setFocusRingType:|
          'ns::|registeredDraggedTypes|
          'ns::|setFlipped:|
          'ns::|viewDidMoveToSuperview|
          'ns::|postsFrameChangedNotifications|
          'ns::|cacheDisplayInRect:toBitmapImageRep:|
          'ns::|bitmapImageRepForCachingDisplayInRect:|
          'ns::|removeFromSuperviewWithoutNeedingDisplay|
          'ns::|menuForEvent:|
          'ns::|scrollRect:by:|
          'ns::|scrollWheel:|
          'ns::|performDragOperation:|
          'ns::|draggingExited:|
          'ns::|draggingUpdated:|
          'ns::|draggingEntered:|
          'ns::|needsPanelToBecomeKey|
          'ns::|acceptsFirstMouse:|
          'ns::|unregisterDraggedTypes|
          'ns::|registerForDraggedTypes:|
          'ns::|dragImage:at:offset:event:pasteboard:source:slideBack:|
          'ns::|enclosingScrollView|
          'ns::|canDraw|
          'ns::|getRectsExposedDuringLiveResize:count:|
          'ns::|preservesContentDuringLiveResize|
          'ns::|inLiveResize|
          'ns::|convertPointToBacking:|
          'ns::|getRectsBeingDrawn:count:|
          'ns::|displayRectIgnoringOpacity:inContext:|
          'ns::|scrollPoint:|
          'ns::|setPostsBoundsChangedNotifications:|
          'ns::|setPostsFrameChangedNotifications:|
          'ns::|previousKeyView|
          'ns::|nextKeyView|
          'ns::|isDescendantOf:|
          'ns::|setKeyboardFocusRingNeedsDisplayInRect:|
          'ns::|setNeedsDisplayInRect:|
          'ns::|scrollRectToVisible:|
          'ns::|convertSize:toView:|
          'ns::|mouse:inRect:|
          'ns::|willRemoveSubview:|
          'ns::|viewWillDraw|
          'ns::|nsli_heightVariable|
          'ns::|nsli_widthVariable|
          'ns::|updateConstraints|
          'ns::|replaceSubview:with:|
          'ns::|preferredLayoutAttributesFittingAttributes:|
          'ns::|displayIfNeeded|
          'ns::|setLayerContentsRedrawPolicy:|
          'ns::|wantsLayer|
          'ns::|declaredLayoutConstraints|
          'ns::|centerYAnchor|
          'ns::|trailingAnchor|
          'ns::|leftAnchor|
          'ns::|setSubviews:|
          'ns::|setFrameSize:|
          'ns::|shouldDelayWindowOrderingForEvent:|
          'ns::|convertRectToLayer:|
          'ns::|designatedFocusRingView|
          'ns::|unlockFocus|
          'ns::|lockFocus|
          'ns::|cornerRadius|
          'ns::|animations|
          'ns::|convertSize:fromView:|
          'ns::|mouseDownCanMoveWindow|
          'ns::|drawRect:|
          'ns::|autoresizingMask|
          'ns::|removeConstraints:|
          'ns::|alignmentRectForFrame:|
          'ns::|setFrameOrigin:|
          'ns::|setNextKeyView:|
          'ns::|setAutoresizingMask:|
          'ns::|makeBackingLayer|
          'ns::|setLayer:|
          'ns::|setBounds:|
          'ns::|addTrackingArea:|
          'ns::|removeTrackingArea:|
          'ns::|convertRect:fromView:|
          'ns::|accessibilityVerticalUnitDescriptionAttribute|
          'ns::|accessibilityHorizontalUnitDescriptionAttribute|
          'ns::|accessibilityIsSizeAttributeSettable|
          'ns::|accessibilitySizeAttribute|
          'ns::|accessibilityIsPositionAttributeSettable|
          'ns::|accessibilityPositionAttribute|
          'ns::|accessibilityIsTopLevelUIElementAttributeSettable|
          'ns::|accessibilityTopLevelUIElementAttribute|
          'ns::|accessibilityIsWindowAttributeSettable|
          'ns::|accessibilityWindowAttribute|
          'ns::|accessibilityIsParentAttributeSettable|
          'ns::|accessibilityParentAttribute|
          'ns::|accessibilitySetFocusedAttribute:|
          'ns::|accessibilityIsFocusedAttributeSettable|
          'ns::|accessibilityFocusedAttribute|
          'ns::|accessibilityIsHelpAttributeSettable|
          'ns::|accessibilityHelpAttribute|
          'ns::|display|
          'ns::|setOpaque:|
          'ns::|setAlphaValue:|
          'ns::|layoutSubtreeIfNeeded|
          'ns::|subviews|
          'ns::|gestureRecognizerShouldBegin:|
          'ns::|setAnimations:|
          'ns::|setBoundsOrigin:|
          'ns::|nextEventMatchingMask:|
          'ns::|convertPoint:fromView:|
          'ns::|hitTest:|
          'ns::|alignmentRectInsets|
          'ns::|setCornerRadius:|
          'ns::|backgroundColor|
          'ns::|animator|
          'ns::|removeFromSuperview|
          'ns::|viewDidMoveToWindow|
          'ns::|gestureRecognizers|
          'ns::|setAllowedTouchTypes:|
          'ns::|leadingAnchor|
          'ns::|setIgnoreHitTest:|
          'ns::|addConstraints:|
          'ns::|bottomAnchor|
          'ns::|heightAnchor|
          'ns::|centerXAnchor|
          'ns::|addConstraint:|
          'ns::|addSubview:positioned:relativeTo:|
          'ns::|addSubview:|
          'ns::|setShouldBeArchived:|
          'ns::|setWantsLayer:|
          'ns::|viewDidChangeEffectiveAppearance|
          'ns::|intrinsicContentSize|
          'ns::|setContentHuggingPriority:forOrientation:|
          'ns::|setContentCompressionResistancePriority:forOrientation:|
          'ns::|removeConstraint:|
          'ns::|fittingSize|
          'ns::|addGestureRecognizer:|
          'ns::|setTranslatesAutoresizingMaskIntoConstraints:|
          'ns::|widthAnchor|
          'ns::|initWithFrame:|
          'ns::|convertRect:toView:|
          'ns::|superview|
          'ns::|setNeedsLayout:|
          'ns::|disableGeometryInWindowDidChangeNotification|
          'ns::|enableGeometryInWindowDidChangeNotification|
          'ns::|updateLayer|
          'ns::|wantsUpdateLayer|
          'ns::|isOpaque|
          'ns::|allowsVibrancy|
          'ns::|addCursorRect:cursor:|
          'ns::|isFlipped|
          'ns::|visibleRect|
          'ns::|convertPoint:toView:|
          'ns::|setFrame:|
          'ns::|bounds|
          'ns::|setCompositingFilter:|
          'ns::|setBackgroundColor:|
          'ns::|layer|
          'ns::|invalidateIntrinsicContentSize|
          'ns::|setNeedsDisplay:|
          'ns::|resetCursorRects|
          'ns::|layout|
          'ns::|prepareForReuse|
          'ns::|setGestureBehaviors:|
          'ns::|gestureBehaviors|
          'ns::|pressureConfigurations|
          'ns::|initWithRect:options:pressureConfigurations:owner:userInfo:|
          'ns::|owner|
          'ns::|rect|
          'ns::|mouseMoved:|
          'ns::|initWithRect:options:owner:userInfo:|
          'ns::|options|
          'ns::|userInfo|
          'ns::|removeObserver:name:object:|
          'ns::|postNotificationName:object:userInfo:|
          'ns::|addObserver:selector:name:object:|
          'ns::|postNotification:|
          'ns::|postNotificationName:object:|
          'ns::|removeObserver:|
          'ns::|addObserverForName:object:queue:usingBlock:|
          'ns::|isEmpty|
          'ns::|arrayByExcludingToObjectsInArray:|
          'ns::|arrayByExcludingObjectsInArray:|
          'ns::|arrayByApplyingSelector:|
          'ns::|arrayByAddingObjectsFromArray:|
          'ns::|arrayByAddingObject:|
          'ns::|initWithOrderedSet:copyItems:|
          'ns::|initWithOrderedSet:range:|
          'ns::|initWithSet:|
          'ns::|initWithObjects:|
          'ns::|initWithArray:range:|
          'ns::|subarrayWithRange:|
          'ns::|sortedArrayUsingSelector:|
          'ns::|sortedArrayUsingFunction:context:|
          'ns::|sortedArrayUsingComparator:|
          'ns::|reversedArray|
          'ns::|reverseObjectEnumerator|
          'ns::|objectsPassingTest:|
          'ns::|objectsAtIndexes:options:passingTest:|
          'ns::|objectPassingTest:|
          'ns::|objectAtIndexes:options:passingTest:|
          'ns::|makeObjectsPerformSelector:withObject:|
          'ns::|makeObjectsPerformSelector:|
          'ns::|lastObject|
          'ns::|indexesOfObjectsPassingTest:|
          'ns::|indexOfObject:inSortedRange:options:usingComparator:|
          'ns::|indexesOfObjectIdenticalTo:|
          'ns::|indexesOfObjectIdenticalTo:inRange:|
          'ns::|indexesOfObject:|
          'ns::|indexesOfObject:inRange:|
          'ns::|indexOfObjectIdenticalTo:inRange:|
          'ns::|firstObjectCommonWithArray:|
          'ns::|firstObject|
          'ns::|enumerateObjectsAtIndexes:options:usingBlock:|
          'ns::|countForObject:inRange:|
          'ns::|containsObjectIdenticalTo:|
          'ns::|containsObjectIdenticalTo:inRange:|
          'ns::|containsObject:inRange:|
          'ns::|componentsJoinedByString:|
          'ns::|initWithOrderedSet:range:copyItems:|
          'ns::|sortedArrayWithOptions:usingComparator:|
          'ns::|objectsWithOptions:passingTest:|
          'ns::|objectWithOptions:passingTest:|
          'ns::|indexOfObjectAtIndexes:options:passingTest:|
          'ns::|isEqualToArray:|
          'ns::|indexOfObjectWithOptions:passingTest:|
          'ns::|indexesOfObjectsWithOptions:passingTest:|
          'ns::|indexesOfObjectsAtIndexes:options:passingTest:|
          'ns::|descriptionWithLocale:indent:|
          'ns::|getObjects:|
          'ns::|enumerateObjectsUsingBlock:|
          'ns::|initWithOrderedSet:|
          'ns::|indexOfObjectPassingTest:|
          'ns::|initWithSet:copyItems:|
          'ns::|containsObject:|
          'ns::|initWithObject:|
          'ns::|sortedArrayFromRange:options:usingComparator:|
          'ns::|indexOfObject:inRange:|
          'ns::|objectsAtIndexes:|
          'ns::|initWithArray:|
          'ns::|initWithArray:copyItems:|
          'ns::|initWithArray:range:copyItems:|
          'ns::|objectAtIndexedSubscript:|
          'ns::|indexOfObjectIdenticalTo:|
          'ns::|initWithObjects:count:|
          'ns::|countForObject:|
          'ns::|allObjects|
          'ns::|enumerateObjectsWithOptions:usingBlock:|
          'ns::|countByEnumeratingWithState:objects:count:|
          'ns::|indexOfObject:|
          'ns::|getObjects:range:|
          'ns::|objectEnumerator|
          'ns::|objectAtIndex:|
          'ns::|count|
          'ns::|sortedArrayUsingDescriptors:|
          'ns::|filteredArrayUsingPredicate:|
          'ns::|stringsByAppendingPathComponent:|
          'ns::|pathsMatchingExtensions:|
          'ns::|arrayByApplyingDifference:|
          'ns::|differenceFromArray:|
          'ns::|differenceFromArray:withOptions:|
          'ns::|removeObserver:fromObjectsAtIndexes:forKeyPath:|
          'ns::|removeObserver:fromObjectsAtIndexes:forKeyPath:context:|
          'ns::|addObserver:toObjectsAtIndexes:forKeyPath:options:context:|
          'ns::|differenceFromArray:withOptions:usingEquivalenceTest:|
          'ns::|writeToURL:error:|
          'ns::|sortedArrayUsingSelector:hint:|
          'ns::|sortedArrayHint|
          'ns::|sortedArrayUsingFunction:context:hint:|
          'ns::|initWithContentsOfURL:error:|
          'ns::|bs_flattenedDifferenceWithArray:|
          'ns::|bs_mapNoNulls:|
          'ns::|bs_reverse|
          'ns::|bs_objectsOfClass:|
          'ns::|bs_firstObjectOfClassNamed:|
          'ns::|bs_first:|
          'ns::|bs_enumerateObjectsOfClass:usingBlock:|
          'ns::|bs_differenceWithArray:|
          'ns::|bs_flatten|
          'ns::|bs_firstObjectOfClass:|
          'ns::|bs_dictionaryByPartitioning:|
          'ns::|bs_reduce:block:|
          'ns::|bs_compactMap:|
          'ns::|bs_map:|
          'ns::|bs_containsObjectPassingTest:|
          'ns::|bs_firstObjectPassingTest:|
          'ns::|bs_filter:|
          'ns::|bs_each:|
          'ns::|CI_rect|
          'ns::|CI_affineTransform|
          'ns::|CI_initWithRect:|
          'ns::|CI_initWithAffineTransform:|
          'ns::|subarrayWithObjectsOfKind:|
          'ns::|resourceStack|
          'ns::|ui_arrayByRemovingLastObjectEqualTo:|
          'ns::|NS_containsObjectIdenticalTo:|
          'ns::|NS_isIdenticalToArray:|
          'ns::|lastRange|
          'ns::|maximumRange|
          'ns::|firstRange|
          'ns::|rangesContainLocation:|
          'ns::|indexOfFirstRangeContainingOrFollowing:|
          'ns::|rangeAtIndex:|
          'ns::|applyTransform:reverse:range:updatedRange:|
          'ns::|replaceCharactersInRange:withCString:length:|
          'ns::|replaceCharactersInRange:withCharacters:length:|
          'ns::|appendCharacters:length:|
          'ns::|setString:|
          'ns::|appendFormat:|
          'ns::|deleteCharactersInRange:|
          'ns::|appendString:|
          'ns::|insertString:atIndex:|
          'ns::|replaceOccurrencesOfString:withString:options:range:|
          'ns::|initWithCapacity:|
          'ns::|replaceCharactersInRange:withString:|
          'ns::|appendPrettyBOOL:withName:indent:|
          'ns::|appendPrettyInt:withName:indent:|
          'ns::|appendPrettyObject:withName:indent:showFullContent:|
          'ns::|dd_appendSpaces:|
          'ns::|initWithContentsOfMarkdownFileAtURL:options:baseURL:error:|
          'ns::|initWithMarkdown:options:baseURL:error:|
          'ns::|initWithFormat:options:locale:arguments:|
          'ns::|initWithFormat:options:locale:|
          'ns::|attributedStringByInflectingString|
          'ns::|initWithMarkdownString:options:baseURL:error:|
          'ns::|enumerateAttribute:inRange:options:usingBlock:|
          'ns::|enumerateAttributesInRange:options:usingBlock:|
          'ns::|attributedStringByWeaklyAddingAttributes:|
          'ns::|attributedSubstringFromRange:replacingCharactersInRanges:numberOfRanges:withString:|
          'ns::|isEqualToAttributedString:|
          'ns::|attributedSubstringFromRange:|
          'ns::|attribute:atIndex:longestEffectiveRange:inRange:|
          'ns::|attributesAtIndex:longestEffectiveRange:inRange:|
          'ns::|attribute:atIndex:effectiveRange:|
          'ns::|attributesAtIndex:effectiveRange:|
          'ns::|string|
          'ns::|cs_writeToFileHandle:supportingANSIEscapeCodes:|
          'ns::|cs_rangesMatchingPredicate:|
          'ns::|cs_writeToFileHandle:|
          'ns::|dd_attributedStringByAppendingAttributedString:|
          'ns::|dd_attributedSubstringFromRange:|
          'ns::|initWithHTML:baseURL:documentAttributes:|
          'ns::|initWithURL:documentAttributes:|
          'ns::|initWithFileURL:options:documentAttributes:error:|
          'ns::|initWithDocFormat:documentAttributes:|
          'ns::|defaultLanguage|
          'ns::|initWithHTML:options:documentAttributes:|
          'ns::|containsAttachmentsInRange:|
          'ns::|itemNumberInTextList:atIndex:|
          'ns::|initWithAttachment:attributes:|
          'ns::|drawWithRect:options:|
          'ns::|hasColorGlyphsInRange:|
          'ns::|rulerAttributesInRange:|
          'ns::|fontAttributesInRange:|
          'ns::|rangeOfTextList:atIndex:|
          'ns::|initWithRTFDFileWrapper:documentAttributes:|
          'ns::|initWithPath:documentAttributes:|
          'ns::|initWithURL:options:documentAttributes:error:|
          'ns::|nextWordFromIndex:forward:|
          'ns::|lineBreakByHyphenatingBeforeIndex:withinRange:|
          'ns::|lineBreakBeforeIndex:withinRange:|
          'ns::|stringByStrippingAttachmentCharactersAndConvertingWritingDirectionToBidiControlCharactersFromRange:|
          'ns::|containsAttachments|
          'ns::|initWithHTML:documentAttributes:|
          'ns::|initWithRTF:documentAttributes:|
          'ns::|initWithRTFD:documentAttributes:|
          'ns::|fileWrapperFromRange:documentAttributes:error:|
          'ns::|rangeOfTextBlock:atIndex:|
          'ns::|rangeOfTextTable:atIndex:|
          'ns::|doubleClickAtIndex:|
          'ns::|doubleClickAtIndex:inRange:|
          'ns::|drawWithRect:options:context:|
          'ns::|drawAtPoint:|
          'ns::|drawInRect:|
          'ns::|boundingRectWithSize:options:context:|
          'ns::|boundingRectWithSize:options:|
          'ns::|initWithData:options:documentAttributes:error:|
          'ns::|dataFromRange:documentAttributes:error:|
          'ns::|URLAtIndex:effectiveRange:|
          'ns::|docFormatFromRange:documentAttributes:|
          'ns::|RTFDFileWrapperFromRange:documentAttributes:|
          'ns::|RTFDFromRange:documentAttributes:|
          'ns::|writingOptionsForType:pasteboard:|
          'ns::|RTFFromRange:documentAttributes:|
          'ns::|attachments|
          'ns::|significantText|
          'ns::|enumerateLinguisticTagsInRange:scheme:options:orthography:usingBlock:|
          'ns::|linguisticTagsInRange:scheme:options:orthography:tokenRanges:|
          'ns::|stringMarkingUpcaseTransitionsWithDelimiter2:|
          'ns::|stringByReplacingPercentEscapesUsingEncoding:|
          'ns::|stringByAddingPercentEscapesUsingEncoding:|
          'ns::|stringByRemovingPercentEncoding|
          'ns::|stringByAddingPercentEncodingWithAllowedCharacters:|
          'ns::|stringByRemovingPercentEscapes|
          'ns::|standardizedURLPath|
          'ns::|stringByAddingPercentEscapes|
          'ns::|maximumLengthOfBytesUsingEncoding:|
          'ns::|propertyListFromStringsFileFormat|
          'ns::|initWithData:usedEncoding:|
          'ns::|getExternalRepresentation:extendedAttributes:forWritingToURLOrPath:usingEncoding:error:|
          'ns::|displayableString|
          'ns::|enumerateLinesUsingBlock:|
          'ns::|paragraphRangeForRange:|
          'ns::|lineRangeForRange:|
          'ns::|stringByFoldingWithOptions:locale:|
          'ns::|localizedCapitalizedString|
          'ns::|localizedLowercaseString|
          'ns::|localizedUppercaseString|
          'ns::|localizedStandardRangeOfString:|
          'ns::|localizedStandardContainsString:|
          'ns::|localizedCaseInsensitiveContainsString:|
          'ns::|localizedHasSuffix:|
          'ns::|localizedHasPrefix:|
          'ns::|commonPrefixWithString:options:|
          'ns::|rangeOfComposedCharacterSequencesForRange:|
          'ns::|localizedStandardCompare:|
          'ns::|localizedCaseInsensitiveCompare:|
          'ns::|localizedCompare:|
          'ns::|rangeOfString:options:range:locale:|
          'ns::|initWithContentsOfFile:usedEncoding:error:|
          'ns::|initWithContentsOfURL:usedEncoding:error:|
          'ns::|initWithContentsOfURL:encoding:error:|
          'ns::|initWithValidatedFormat:validFormatSpecifiers:locale:arguments:error:|
          'ns::|initWithCString:|
          'ns::|matchesPattern:|
          'ns::|matchesPattern:caseInsensitive:|
          'ns::|loadDataWithTypeIdentifier:forItemProviderCompletionHandler:|
          'ns::|writableTypeIdentifiersForItemProvider|
          'ns::|stringByConvertingURLToPath|
          'ns::|stringByConvertingPathToURL|
          'ns::|completePathIntoString:caseSensitive:matchesIntoArray:filterTypes:|
          'ns::|stringsByAppendingPaths:|
          'ns::|stringByAbbreviatingWithTildeInPath|
          'ns::|initWithFormat:locale:|
          'ns::|initWithCStringNoCopy:length:freeWhenDone:|
          'ns::|initWithCharactersNoCopy:length:deallocator:|
          'ns::|initWithBytesNoCopy:length:encoding:deallocator:|
          'ns::|initWithCString:length:|
          'ns::|capitalizedStringWithLocale:|
          'ns::|stringByResolvingSymlinksInPath|
          'ns::|isAbsolutePath|
          'ns::|initWithFormat:locale:arguments:|
          'ns::|getCString:|
          'ns::|getCString:maxLength:|
          'ns::|getCString:maxLength:range:remainingRange:|
          'ns::|quotedStringRepresentation|
          'ns::|dataUsingEncoding:allowLossyConversion:|
          'ns::|lossyCString|
          'ns::|canBeConvertedToEncoding:|
          'ns::|precomposedStringWithCompatibilityMapping|
          'ns::|decomposedStringWithCompatibilityMapping|
          'ns::|precomposedStringWithCanonicalMapping|
          'ns::|decomposedStringWithCanonicalMapping|
          'ns::|getBytes:maxLength:filledLength:encoding:allowLossyConversion:range:remainingRange:|
          'ns::|initWithCharactersNoCopy:length:freeWhenDone:|
          'ns::|variantFittingPresentationWidth:|
          'ns::|compare:options:range:|
          'ns::|scriptingContains:|
          'ns::|scriptingEndsWith:|
          'ns::|scriptingBeginsWith:|
          'ns::|scriptingIsGreaterThan:|
          'ns::|scriptingIsGreaterThanOrEqualTo:|
          'ns::|scriptingIsLessThan:|
          'ns::|scriptingIsLessThanOrEqualTo:|
          'ns::|scriptingIsEqualTo:|
          'ns::|writeToURL:atomically:encoding:error:|
          'ns::|writeToURL:atomically:|
          'ns::|writeToFile:atomically:encoding:error:|
          'ns::|getCharacters:|
          'ns::|componentsSeparatedByCharactersInSet:|
          'ns::|initWithContentsOfFile:encoding:error:|
          'ns::|stringByTrimmingCharactersInSet:|
          'ns::|rangeOfCharacterFromSet:options:range:|
          'ns::|uppercaseString|
          'ns::|rangeOfComposedCharacterSequenceAtIndex:|
          'ns::|writeToFile:atomically:|
          'ns::|enumerateSubstringsInRange:options:usingBlock:|
          'ns::|stringByReplacingOccurrencesOfString:withString:options:range:|
          'ns::|initWithUTF8String:|
          'ns::|stringByStandardizingPath|
          'ns::|stringByPaddingToLength:withString:startingAtIndex:|
          'ns::|capitalizedString|
          'ns::|propertyList|
          'ns::|compare:options:|
          'ns::|initWithCString:encoding:|
          'ns::|initWithBytesNoCopy:length:encoding:freeWhenDone:|
          'ns::|rangeOfString:|
          'ns::|stringByApplyingTransform:reverse:|
          'ns::|initWithCharacters:length:|
          'ns::|rangeOfCharacterFromSet:|
          'ns::|rangeOfCharacterFromSet:options:|
          'ns::|componentsSeparatedByString:|
          'ns::|stringByExpandingTildeInPath|
          'ns::|stringByReplacingCharactersInRange:withString:|
          'ns::|pathComponents|
          'ns::|stringByReplacingOccurrencesOfString:withString:|
          'ns::|stringByAppendingString:|
          'ns::|stringByAppendingPathExtension:|
          'ns::|stringByAppendingFormat:|
          'ns::|initWithData:encoding:|
          'ns::|substringToIndex:|
          'ns::|dataUsingEncoding:|
          'ns::|rangeOfString:options:range:|
          'ns::|substringFromIndex:|
          'ns::|initWithFormat:|
          'ns::|containsString:|
          'ns::|rangeOfString:options:|
          'ns::|stringByDeletingLastPathComponent|
          'ns::|getFileSystemRepresentation:maxLength:|
          'ns::|caseInsensitiveCompare:|
          'ns::|lowercaseString|
          'ns::|pathExtension|
          'ns::|stringByDeletingPathExtension|
          'ns::|lastPathComponent|
          'ns::|stringByAppendingPathComponent:|
          'ns::|formatConfiguration|
          'ns::|fileSystemRepresentation|
          'ns::|initWithString:|
          'ns::|getParagraphStart:end:contentsEnd:forRange:|
          'ns::|getLineStart:end:contentsEnd:forRange:|
          'ns::|hasSuffix:|
          'ns::|hasPrefix:|
          'ns::|getCString:maxLength:encoding:|
          'ns::|cStringLength|
          'ns::|initWithContentsOfURL:|
          'ns::|initWithContentsOfFile:|
          'ns::|smallestEncoding|
          'ns::|fastestEncoding|
          'ns::|isEqualToString:|
          'ns::|substringWithRange:|
          'ns::|getCharacters:range:|
          'ns::|characterAtIndex:|
          'ns::|uppercaseStringWithLocale:|
          'ns::|lowercaseStringWithLocale:|
          'ns::|cStringUsingEncoding:|
          'ns::|compare:options:range:locale:|
          'ns::|cString|
          'ns::|mutableCopyWithZone:|
          'ns::|initWithFormat:arguments:|
          'ns::|getBytes:maxLength:usedLength:encoding:options:range:remainingRange:|
          'ns::|length|
          'ns::|lengthOfBytesUsingEncoding:|
          'ns::|UTF8String|
          'ns::|traditionalChineseZhuyinCompare:|
          'ns::|traditionalChinesePinyinCompare:|
          'ns::|simplifiedChineseCompare:|
          'ns::|stringByApplyingPinyinToneMarkToFirstSyllableWithToneNumber:|
          'ns::|strokeStringFromNumberString|
          'ns::|toneFromPinyinSyllableWithNumber|
          'ns::|stringByStrippingDiacritics|
          'ns::|zhuyinSyllableFromPinyinSyllable|
          'ns::|pinyinStringFromPinyinWithToneNumber|
          'ns::|componentsByLanguage:|
          'ns::|firstCharacter|
          'ns::|ls_updatedKey|
          'ns::|ls_isRecursiveKey|
          'ns::|ls_matchesForPluginQuery:|
          'ns::|ls_cleanForPluginQuery|
          'ns::|ls_matchesStringForPluginQuery:|
          'ns::|ls_visuallyOrderCharactersReturningError:|
          'ns::|editDistanceFrom:|
          'ns::|containsSubstring:|
          'ns::|isNaturallyRTL|
          'ns::|looksLikeURL|
          'ns::|looksLikeNumberInput|
          'ns::|looksLikeEmailAddress|
          'ns::|isTripledPunctuation|
          'ns::|isNewlineOrReturn|
          'ns::|isSpaceOrReturn|
          'ns::|isPlainSpace|
          'ns::|isLeftAssociative|
          'ns::|endsSentence|
          'ns::|stringByReplacingCharacter:withCharacter:|
          'ns::|stringByReplacingCharactersInSet:withCharacter:|
          'ns::|stringByTrimmingLastCharacter|
          'ns::|stringByTrimmingCharactersInCFCharacterSet:|
          'ns::|isDelete|
          'ns::|isSpace|
          'ns::|scaleableResourceMetadataFromFileName|
          'ns::|imageMetadataFromFileName|
          'ns::|stringByAppendingPathComponent:conformingToType:|
          'ns::|stringByAppendingPathExtensionForType:|
          'ns::|stringByStrippingLeadingAndTrailingWhitespaceAndQuotes|
          'ns::|hasColorGlyphsInRange:attributes:|
          'ns::|drawWithRect:options:attributes:|
          'ns::|boundingRectWithSize:options:attributes:|
          'ns::|drawWithRect:options:attributes:context:|
          'ns::|drawAtPoint:withAttributes:|
          'ns::|drawInRect:withAttributes:|
          'ns::|boundingRectWithSize:options:attributes:context:|
          'ns::|sizeWithAttributes:|
          'ns::|NS_isSourceOver|
          'ns::|rangeOfGraphicalSegmentAtIndex:|
          'ns::|pasteboardPropertyListForType:|
          'ns::|writableTypesForPasteboard:|
          'ns::|stringWithoutAmpersand|
          'ns::|initWithPasteboardPropertyList:ofType:|
          'ns::|push|
          'ns::|forceSet|
          'ns::|isSetOnMouseEntered|
          'ns::|isSetOnMouseExited|
          'ns::|setOnMouseEntered:|
          'ns::|setOnMouseExited:|
          'ns::|hotSpot|
          'ns::|pop|
          'ns::|initWithImage:foregroundColorHint:backgroundColorHint:hotSpot:|
          'ns::|initWithImage:hotSpot:|
          'ns::|mouseExited:|
          'ns::|mouseEntered:|
          'ns::|set|
          'ns::|shouldMenuItemBeUpdatedDueToNotification|
          'ns::|setActionBlock:|
          'ns::|invokeActionBlock:|
          'ns::|recognizerDidDismissAnimation:|
          'ns::|recognizerDidCompleteAnimation:|
          'ns::|recognizerDidCancelAnimation:|
          'ns::|recognizerDidUpdateAnimation:|
          'ns::|recognizerWillBeginAnimation:|
          'ns::|setIndentationLevel:|
          'ns::|setMixedStateImage:|
          'ns::|setOffStateImage:|
          'ns::|setOnStateImage:|
          'ns::|mnemonicLocation|
          'ns::|setMnemonicLocation:|
          'ns::|setKeyEquivalentSharingMode:|
          'ns::|allowsAutomaticKeyEquivalentMirroring|
          'ns::|setAllowsAutomaticKeyEquivalentMirroring:|
          'ns::|allowsAutomaticKeyEquivalentLocalization|
          'ns::|setAllowsAutomaticKeyEquivalentLocalization:|
          'ns::|setAllowsKeyEquivalentWhenHidden:|
          'ns::|parentItem|
          'ns::|keyEquivalentSharingMode|
          'ns::|userKeyEquivalentModifierMask|
          'ns::|scheduleKeyboardAwareShortcutUpdate|
          'ns::|userKeyEquivalent|
          'ns::|menuItemOrSubmenuNeedsShortcutLocalization|
          'ns::|copyNormalizedTitle:|
          'ns::|mixedStateImage|
          'ns::|offStateImage|
          'ns::|onStateImage|
          'ns::|allowsKeyEquivalentWhenHidden|
          'ns::|setDestructive:|
          'ns::|isDestructive|
          'ns::|mnemonic|
          'ns::|backgroundStyle|
          'ns::|setTitleWithMnemonic:|
          'ns::|representedObject|
          'ns::|hasSubmenu|
          'ns::|setKeyEquivalent:|
          'ns::|setControlView:|
          'ns::|setAlternate:|
          'ns::|setKeyEquivalentModifierMask:|
          'ns::|isSeparatorItem|
          'ns::|isAlternate|
          'ns::|submenu|
          'ns::|setToolTip:|
          'ns::|toolTip|
          'ns::|controlView|
          'ns::|isHiddenOrHasHiddenAncestor|
          'ns::|isHighlighted|
          'ns::|tag|
          'ns::|setView:|
          'ns::|indentationLevel|
          'ns::|attributedTitle|
          'ns::|image|
          'ns::|keyEquivalentModifierMask|
          'ns::|keyEquivalent|
          'ns::|view|
          'ns::|setAction:|
          'ns::|setSubmenu:|
          'ns::|setRepresentedObject:|
          'ns::|setTag:|
          'ns::|setImage:|
          'ns::|setAttributedTitle:|
          'ns::|initWithTitle:action:keyEquivalent:|
          'ns::|action|
          'ns::|setState:|
          'ns::|isEnabled|
          'ns::|target|
          'ns::|setTarget:|
          'ns::|setEnabled:|
          'ns::|state|
          'ns::|setHidden:|
          'ns::|cancelTrackingWithoutAnimation|
          'ns::|highlightedItem|
          'ns::|highlightItem:|
          'ns::|setAllowsContextMenuPlugIns:|
          'ns::|allowsContextMenuPlugIns|
          'ns::|setMinimumWidth:|
          'ns::|isTornOff|
          'ns::|tearOffMenuRepresentation|
          'ns::|setTearOffMenuRepresentation:|
          'ns::|contextMenuRepresentation|
          'ns::|setContextMenuRepresentation:|
          'ns::|menuRepresentation|
          'ns::|propertiesToUpdate|
          'ns::|menuChangedMessagesEnabled|
          'ns::|setMenuChangedMessagesEnabled:|
          'ns::|itemWithTag:|
          'ns::|setItemArray:|
          'ns::|setSupermenu:|
          'ns::|menuBarHeight|
          'ns::|popUpMenuPositioningItem:atLocation:inView:appearance:|
          'ns::|locationForSubmenu:|
          'ns::|isAttached|
          'ns::|attachedMenu|
          'ns::|itemChanged:|
          'ns::|recordKeyboardShortcutEvent:withKeyEquivalent:modifierMask:title:|
          'ns::|setMenuRepresentation:|
          'ns::|setSubmenu:forItem:|
          'ns::|helpRequested:|
          'ns::|setShowsStateColumn:|
          'ns::|cancelTracking|
          'ns::|popUpMenuPositioningItem:atLocation:inView:|
          'ns::|indexOfItemWithTitle:|
          'ns::|setAutoenablesItems:|
          'ns::|indexOfItemWithTag:|
          'ns::|indexOfItemWithRepresentedObject:|
          'ns::|setAccessibilityOverridesAlwaysTakePrecedence:|
          'ns::|accessibilityOverridesAlwaysTakePrecedence|
          'ns::|setAccessibilityChartDescriptor:|
          'ns::|accessibilityChartDescriptor|
          'ns::|setAccessibilityContentSiblingBelow:|
          'ns::|accessibilityContentSiblingBelow|
          'ns::|setAccessibilityContentSiblingAbove:|
          'ns::|accessibilityContentSiblingAbove|
          'ns::|setNextContentSibling:|
          'ns::|accessibilityNextContentSibling|
          'ns::|setPreviousContentSibling:|
          'ns::|accessibilityPreviousContentSibling|
          'ns::|setAccessibilityFrameInParentSpace:|
          'ns::|accessibilityFrameInParentSpace|
          'ns::|setAccessibilityHeaderGroup:|
          'ns::|accessibilityHeaderGroup|
          'ns::|setAccessibilitySections:|
          'ns::|accessibilitySections|
          'ns::|setAccessibilityMimicNativeView:|
          'ns::|isAccessibilityMimicNativeView|
          'ns::|setAccessibilityFunctionRowTopLevelElements:|
          'ns::|accessibilityFunctionRowTopLevelElements|
          'ns::|setAccessibilityEnhancedUserInterface:|
          'ns::|isAccessibilityEnhancedUserInterface|
          'ns::|setAccessibilityEmbeddedImageDescription:|
          'ns::|accessibilityEmbeddedImageDescription|
          'ns::|setAccessibilityCustomChoosers:|
          'ns::|accessibilityCustomChoosers|
          'ns::|setAccessibilityPath:|
          'ns::|accessibilityPath|
          'ns::|setAccessibilityAttributedUserInputLabels:|
          'ns::|accessibilityAttributedUserInputLabels|
          'ns::|setAccessibilityCustomContent:|
          'ns::|accessibilityCustomContent|
          'ns::|setAccessibilityUserInputLabels:|
          'ns::|accessibilityUserInputLabels|
          'ns::|setAccessibilityContainerType:|
          'ns::|accessibilityContainerType|
          'ns::|setAccessibilityAutoInteractable:|
          'ns::|isAccessibilityAutoInteractable|
          'ns::|setAccessibilityAuditIssues:|
          'ns::|accessibilityAuditIssues|
          'ns::|accessibilityHeaderForRowIndex:|
          'ns::|accessibilityHeaderForColumnIndex:|
          'ns::|accessibilityResultsForSearchPredicate:|
          'ns::|presentControllerAsModalWindow:|
          'ns::|storyboard|
          'ns::|setAppearanceParent:|
          'ns::|appearanceParent|
          'ns::|showsStateColumn|
          'ns::|minimumWidth|
          'ns::|addItemWithTitle:action:keyEquivalent:|
          'ns::|indexOfItemWithSubmenu:|
          'ns::|itemWithTitle:|
          'ns::|autoenablesItems|
          'ns::|insertItemWithTitle:action:keyEquivalent:atIndex:|
          'ns::|setAccessibilityCustomActions:|
          'ns::|setAccessibilityMinimized:|
          'ns::|isAccessibilityMinimized|
          'ns::|setAccessibilityMinimizeButton:|
          'ns::|accessibilityMinimizeButton|
          'ns::|setAccessibilityZoomButton:|
          'ns::|accessibilityZoomButton|
          'ns::|setAccessibilityCloseButton:|
          'ns::|accessibilityCloseButton|
          'ns::|setAccessibilityDefaultButton:|
          'ns::|accessibilityDefaultButton|
          'ns::|setAccessibilityDocument:|
          'ns::|accessibilityDocument|
          'ns::|setAccessibilityGrowArea:|
          'ns::|accessibilityGrowArea|
          'ns::|setAccessibilityFullScreenButton:|
          'ns::|accessibilityFullScreenButton|
          'ns::|setAccessibilityMain:|
          'ns::|isAccessibilityMain|
          'ns::|setAccessibilityProxy:|
          'ns::|accessibilityProxy|
          'ns::|setAccessibilityModal:|
          'ns::|isAccessibilityModal|
          'ns::|setAccessibilityToolbarButton:|
          'ns::|accessibilityToolbarButton|
          'ns::|setAccessibilitySelectedTextRanges:|
          'ns::|accessibilitySelectedTextRanges|
          'ns::|setAccessibilitySelectedTextRange:|
          'ns::|accessibilitySelectedTextRange|
          'ns::|setAccessibilitySelectedText:|
          'ns::|accessibilitySelectedText|
          'ns::|setAccessibilityNumberOfCharacters:|
          'ns::|accessibilityNumberOfCharacters|
          'ns::|setAccessibilityVisibleCharacterRange:|
          'ns::|accessibilityVisibleCharacterRange|
          'ns::|setAccessibilitySharedTextUIElements:|
          'ns::|accessibilitySharedTextUIElements|
          'ns::|setAccessibilitySharedCharacterRange:|
          'ns::|accessibilitySharedCharacterRange|
          'ns::|setAccessibilityInsertionPointLineNumber:|
          'ns::|accessibilityInsertionPointLineNumber|
          'ns::|setAccessibilityColumnIndexRange:|
          'ns::|accessibilityColumnIndexRange|
          'ns::|setAccessibilityRowIndexRange:|
          'ns::|accessibilityRowIndexRange|
          'ns::|setAccessibilityColumnHeaderUIElements:|
          'ns::|accessibilityColumnHeaderUIElements|
          'ns::|setAccessibilityVisibleCells:|
          'ns::|accessibilityVisibleCells|
          'ns::|setAccessibilitySelectedCells:|
          'ns::|setAccessibilityRowHeaderUIElements:|
          'ns::|accessibilityRowHeaderUIElements|
          'ns::|setAccessibilitySortDirection:|
          'ns::|accessibilitySortDirection|
          'ns::|setAccessibilitySelectedColumns:|
          'ns::|accessibilitySelectedColumns|
          'ns::|setAccessibilityVisibleColumns:|
          'ns::|accessibilityVisibleColumns|
          'ns::|setAccessibilitySelectedRows:|
          'ns::|accessibilitySelectedRows|
          'ns::|setAccessibilityVisibleRows:|
          'ns::|accessibilityVisibleRows|
          'ns::|setAccessibilityRows:|
          'ns::|accessibilityRows|
          'ns::|setAccessibilityColumns:|
          'ns::|accessibilityColumns|
          'ns::|setAccessibilityIndex:|
          'ns::|setAccessibilityRowCount:|
          'ns::|setAccessibilityColumnCount:|
          'ns::|setAccessibilityHeader:|
          'ns::|accessibilityHeader|
          'ns::|setAccessibilityTabs:|
          'ns::|accessibilityTabs|
          'ns::|setAccessibilityIncrementButton:|
          'ns::|setAccessibilityDecrementButton:|
          'ns::|setAccessibilitySplitters:|
          'ns::|accessibilitySplitters|
          'ns::|setAccessibilityLabelValue:|
          'ns::|accessibilityLabelValue|
          'ns::|setAccessibilityLabelUIElements:|
          'ns::|accessibilityLabelUIElements|
          'ns::|setAccessibilityAllowedValues:|
          'ns::|accessibilityAllowedValues|
          'ns::|setAccessibilityVerticalScrollBar:|
          'ns::|accessibilityVerticalScrollBar|
          'ns::|setAccessibilityHorizontalScrollBar:|
          'ns::|accessibilityHorizontalScrollBar|
          'ns::|setAccessibilityMarkerTypeDescription:|
          'ns::|accessibilityMarkerTypeDescription|
          'ns::|setAccessibilityRulerMarkerType:|
          'ns::|accessibilityRulerMarkerType|
          'ns::|setAccessibilityUnitDescription:|
          'ns::|accessibilityUnitDescription|
          'ns::|setAccessibilityUnits:|
          'ns::|accessibilityUnits|
          'ns::|setAccessibilityMarkerGroupUIElement:|
          'ns::|accessibilityMarkerGroupUIElement|
          'ns::|setAccessibilityMarkerValues:|
          'ns::|accessibilityMarkerValues|
          'ns::|setAccessibilityMarkerUIElements:|
          'ns::|accessibilityMarkerUIElements|
          'ns::|setAccessibilityDisclosureLevel:|
          'ns::|accessibilityDisclosureLevel|
          'ns::|setAccessibilityDisclosedRows:|
          'ns::|accessibilityDisclosedRows|
          'ns::|setAccessibilityDisclosedByRow:|
          'ns::|accessibilityDisclosedByRow|
          'ns::|setAccessibilityDisclosed:|
          'ns::|isAccessibilityDisclosed|
          'ns::|setAccessibilityCriticalValue:|
          'ns::|accessibilityCriticalValue|
          'ns::|setAccessibilityWarningValue:|
          'ns::|accessibilityWarningValue|
          'ns::|setAccessibilityHandles:|
          'ns::|accessibilityHandles|
          'ns::|setAccessibilityVerticalUnitDescription:|
          'ns::|accessibilityVerticalUnitDescription|
          'ns::|setAccessibilityHorizontalUnitDescription:|
          'ns::|accessibilityHorizontalUnitDescription|
          'ns::|setAccessibilityVerticalUnits:|
          'ns::|accessibilityVerticalUnits|
          'ns::|setAccessibilityHorizontalUnits:|
          'ns::|accessibilityHorizontalUnits|
          'ns::|setAccessibilityOrderedByRow:|
          'ns::|isAccessibilityOrderedByRow|
          'ns::|setAccessibilityColumnTitles:|
          'ns::|accessibilityColumnTitles|
          'ns::|setAccessibilityMenuBar:|
          'ns::|accessibilityMenuBar|
          'ns::|setAccessibilityExtrasMenuBar:|
          'ns::|accessibilityExtrasMenuBar|
          'ns::|setAccessibilityWindows:|
          'ns::|accessibilityWindows|
          'ns::|setAccessibilityFocusedWindow:|
          'ns::|accessibilityFocusedWindow|
          'ns::|setAccessibilityFrontmost:|
          'ns::|isAccessibilityFrontmost|
          'ns::|setAccessibilityHidden:|
          'ns::|isAccessibilityHidden|
          'ns::|setAccessibilityMainWindow:|
          'ns::|accessibilityMainWindow|
          'ns::|setAccessibilityApplicationFocusedUIElement:|
          'ns::|accessibilityApplicationFocusedUIElement|
          'ns::|setAccessibilityCustomRotors:|
          'ns::|accessibilityCustomRotors|
          'ns::|setAccessibilityRequired:|
          'ns::|isAccessibilityRequired|
          'ns::|setAccessibilitySharedFocusElements:|
          'ns::|accessibilitySharedFocusElements|
          'ns::|setAccessibilityAlternateUIVisible:|
          'ns::|isAccessibilityAlternateUIVisible|
          'ns::|setAccessibilityContents:|
          'ns::|accessibilityContents|
          'ns::|setAccessibilityProtectedContent:|
          'ns::|isAccessibilityProtectedContent|
          'ns::|setAccessibilityCancelButton:|
          'ns::|accessibilityCancelButton|
          'ns::|setAccessibilityClearButton:|
          'ns::|accessibilityClearButton|
          'ns::|setAccessibilityChildrenInNavigationOrder:|
          'ns::|setAccessibilityChildren:|
          'ns::|setAccessibilityEnabled:|
          'ns::|isAccessibilityEnabled|
          'ns::|setAccessibilityEdited:|
          'ns::|isAccessibilityEdited|
          'ns::|setAccessibilityExpanded:|
          'ns::|isAccessibilityExpanded|
          'ns::|setAccessibilityFilename:|
          'ns::|accessibilityFilename|
          'ns::|setAccessibilityHelp:|
          'ns::|accessibilityHelp|
          'ns::|setAccessibilityIdentifier:|
          'ns::|setAccessibilityWindow:|
          'ns::|accessibilityWindow|
          'ns::|setAccessibilityLinkedUIElements:|
          'ns::|accessibilityLinkedUIElements|
          'ns::|setAccessibilityMaxValue:|
          'ns::|accessibilityMaxValue|
          'ns::|setAccessibilityMinValue:|
          'ns::|accessibilityMinValue|
          'ns::|setAccessibilityShownMenu:|
          'ns::|accessibilityShownMenu|
          'ns::|setAccessibilityServesAsTitleForUIElements:|
          'ns::|accessibilityServesAsTitleForUIElements|
          'ns::|setAccessibilitySelected:|
          'ns::|isAccessibilitySelected|
          'ns::|setAccessibilitySearchMenu:|
          'ns::|accessibilitySearchMenu|
          'ns::|setAccessibilitySearchButton:|
          'ns::|accessibilitySearchButton|
          'ns::|setAccessibilityRoleDescription:|
          'ns::|setAccessibilityRole:|
          'ns::|setAccessibilityPreviousContents:|
          'ns::|accessibilityPreviousContents|
          'ns::|setAccessibilityPlaceholderValue:|
          'ns::|accessibilityPlaceholderValue|
          'ns::|setAccessibilityParent:|
          'ns::|setAccessibilityOverflowButton:|
          'ns::|accessibilityOverflowButton|
          'ns::|setAccessibilityOrientation:|
          'ns::|accessibilityOrientation|
          'ns::|setAccessibilityNextContents:|
          'ns::|accessibilityNextContents|
          'ns::|setAccessibilityTitleUIElement:|
          'ns::|accessibilityTitleUIElement|
          'ns::|setAccessibilityTitle:|
          'ns::|setAccessibilityVisibleChildren:|
          'ns::|setAccessibilityValueDescription:|
          'ns::|accessibilityValueDescription|
          'ns::|setAccessibilityValue:|
          'ns::|accessibilityValue|
          'ns::|setAccessibilityURL:|
          'ns::|accessibilityURL|
          'ns::|setAccessibilityTopLevelUIElement:|
          'ns::|accessibilityTopLevelUIElement|
          'ns::|setAccessibilityActivationPoint:|
          'ns::|accessibilityActivationPoint|
          'ns::|setAccessibilityFocused:|
          'ns::|setAccessibilityFrame:|
          'ns::|setAccessibilityElement:|
          'ns::|isAccessibilitySelectorAllowed:|
          'ns::|accessibilityPerformShowMenu|
          'ns::|accessibilityPerformShowDefaultUI|
          'ns::|accessibilityPerformShowAlternateUI|
          'ns::|accessibilityPerformRaise|
          'ns::|accessibilityPerformPress|
          'ns::|accessibilityPerformPick|
          'ns::|accessibilityPerformIncrement|
          'ns::|accessibilityPerformDelete|
          'ns::|accessibilityPerformDecrement|
          'ns::|accessibilityPerformConfirm|
          'ns::|accessibilityPerformCancel|
          'ns::|accessibilityLineForIndex:|
          'ns::|accessibilityStyleRangeForIndex:|
          'ns::|accessibilityRTFForRange:|
          'ns::|accessibilityFrameForRange:|
          'ns::|accessibilityRangeForIndex:|
          'ns::|accessibilityRangeForPosition:|
          'ns::|accessibilityStringForRange:|
          'ns::|accessibilityRangeForLine:|
          'ns::|accessibilityAttributedStringForRange:|
          'ns::|accessibilityCellForColumn:row:|
          'ns::|accessibilityScreenSizeForLayoutSize:|
          'ns::|accessibilityScreenPointForLayoutPoint:|
          'ns::|accessibilityLayoutSizeForScreenSize:|
          'ns::|accessibilityLayoutPointForScreenPoint:|
          'ns::|accessibilityIdentifier|
          'ns::|isAccessibilityFocused|
          'ns::|performActionForItemAtIndex:|
          'ns::|indexOfItemWithTarget:andAction:|
          'ns::|sizeToFit|
          'ns::|setFont:|
          'ns::|font|
          'ns::|setAccessibilityLabel:|
          'ns::|accessibilityTitle|
          'ns::|accessibilitySelectedCells|
          'ns::|setAccessibilitySelectedChildren:|
          'ns::|accessibilitySelectedChildren|
          'ns::|accessibilityColumnCount|
          'ns::|accessibilityRoleDescription|
          'ns::|accessibilityVisibleChildren|
          'ns::|accessibilityRowCount|
          'ns::|performKeyEquivalent:|
          'ns::|insertItem:atIndex:|
          'ns::|indexOfItem:|
          'ns::|isAccessibilityElement|
          'ns::|accessibilityChildrenInNavigationOrder|
          'ns::|accessibilityCustomActions|
          'ns::|accessibilityIndex|
          'ns::|accessibilityLabel|
          'ns::|accessibilityRole|
          'ns::|accessibilityChildren|
          'ns::|removeItemAtIndex:|
          'ns::|accessibilityIncrementButton|
          'ns::|accessibilityDecrementButton|
          'ns::|accessibilitySubrole|
          'ns::|setUserInterfaceLayoutDirection:|
          'ns::|setAccessibilitySubrole:|
          'ns::|title|
          'ns::|removeAllItems|
          'ns::|removeItem:|
          'ns::|numberOfItems|
          'ns::|supermenu|
          'ns::|setTitle:|
          'ns::|addItem:|
          'ns::|initWithTitle:|
          'ns::|setIdentifier:|
          'ns::|update|
          'ns::|identifier|
          'ns::|itemArray|
          'ns::|itemAtIndex:|
          'ns::|size|
          'ns::|displayLinkWithHandler:|
          'ns::|userSpaceScaleFactor|
          'ns::|auxiliaryTopRightArea|
          'ns::|auxiliaryTopLeftArea|
          'ns::|lastDisplayUpdateTimestamp|
          'ns::|displayUpdateGranularity|
          'ns::|maximumRefreshInterval|
          'ns::|minimumRefreshInterval|
          'ns::|maximumFramesPerSecond|
          'ns::|imageInRect:underWindow:|
          'ns::|imageInRect:|
          'ns::|bezelPath|
          'ns::|supportedWindowDepths|
          'ns::|safeAreaInsets|
          'ns::|maximumReferenceExtendedDynamicRangeColorComponentValue|
          'ns::|maximumPotentialExtendedDynamicRangeColorComponentValue|
          'ns::|maximumExtendedDynamicRangeColorComponentValue|
          'ns::|devicePixelCounts|
          'ns::|canRepresentDisplayGamut:|
          'ns::|deviceDescription|
          'ns::|convertRectFromBacking:|
          'ns::|convertRectToBacking:|
          'ns::|backingAlignedRect:options:|
          'ns::|backingScaleFactor|
          'ns::|colorSpace|
          'ns::|displayLinkWithTarget:selector:|
          'ns::|frame|
          'ns::|visibleFrame|
          'ns::|depth|
          'ns::|objectIsForcedForKey:inDomain:|
          'ns::|objectIsForcedForKey:|
          'ns::|removePersistentDomainForName:|
          'ns::|persistentDomainForName:|
          'ns::|persistentDomainNames|
          'ns::|removeVolatileDomainForName:|
          'ns::|setVolatileDomain:forName:|
          'ns::|volatileDomainForName:|
          'ns::|registerDefaults:|
          'ns::|removeSuiteNamed:|
          'ns::|addSuiteNamed:|
          'ns::|setSearchList:|
          'ns::|searchList|
          'ns::|setURL:forKey:|
          'ns::|setBool:forKey:|
          'ns::|setDouble:forKey:|
          'ns::|setFloat:forKey:|
          'ns::|setLong:forKey:|
          'ns::|setInteger:forKey:|
          'ns::|doubleForKey:|
          'ns::|floatForKey:|
          'ns::|longForKey:|
          'ns::|stringArrayForKey:|
          'ns::|dataForKey:|
          'ns::|removeObjectForKey:inDomain:|
          'ns::|objectForKey:inDomain:|
          'ns::|setPersistentDomain:forName:|
          'ns::|initWithUser:|
          'ns::|initWithSuiteName:|
          'ns::|setObject:forKey:inDomain:|
          'ns::|dictionaryRepresentation|
          'ns::|integerForKey:|
          'ns::|dictionaryForKey:|
          'ns::|arrayForKey:|
          'ns::|stringForKey:|
          'ns::|URLForKey:|
          'ns::|boolForKey:|
          'ns::|volatileDomainNames|
          'ns::|synchronize|
          'ns::|setObject:forKey:|
          'ns::|removeObjectForKey:|
          'ns::|objectForKey:|
          'ns::|bs_defaultExists:|
          'ns::|bs_setDomain:|
          'ns::|command|
          'ns::|coalescedTouchesForTouch:|
          'ns::|touchesForView:|
          'ns::|trackSwipeEventWithOptions:dampenAmountThresholdMin:max:usingHandler:|
          'ns::|stageTransition|
          'ns::|isDirectionInvertedFromDevice|
          'ns::|deviceDeltaZ|
          'ns::|deviceDeltaY|
          'ns::|deviceDeltaX|
          'ns::|isGesture|
          'ns::|charactersByApplyingModifiers:|
          'ns::|eventRef|
          'ns::|isARepeat|
          'ns::|gestureAmount|
          'ns::|deltaZ|
          'ns::|isEnteringProximity|
          'ns::|pointingDeviceType|
          'ns::|capabilityMask|
          'ns::|pointingDeviceSerialNumber|
          'ns::|vendorPointingDeviceType|
          'ns::|systemTabletID|
          'ns::|pointingDeviceID|
          'ns::|tabletID|
          'ns::|vendorID|
          'ns::|tangentialPressure|
          'ns::|tilt|
          'ns::|absoluteZ|
          'ns::|absoluteY|
          'ns::|absoluteX|
          'ns::|vendorDefined|
          'ns::|buttonNumber|
          'ns::|pressureBehavior|
          'ns::|velocity|
          'ns::|hasPreciseScrollingDeltas|
          'ns::|trackingNumber|
          'ns::|buttonMask|
          'ns::|magnification|
          'ns::|trackingArea|
          'ns::|eventNumber|
          'ns::|keyCode|
          'ns::|associatedEventsMask|
          'ns::|gestureAxis|
          'ns::|scrollingDeltaY|
          'ns::|momentumPhase|
          'ns::|clickCount|
          'ns::|scrollingDeltaX|
          'ns::|data2|
          'ns::|data1|
          'ns::|CGEvent|
          'ns::|allTouches|
          'ns::|touchesMatchingPhase:inView:|
          'ns::|modifierFlags|
          'ns::|phase|
          'ns::|locationInWindow|
          'ns::|pressure|
          'ns::|deltaY|
          'ns::|deltaX|
          'ns::|windowNumber|
          'ns::|deviceID|
          'ns::|charactersIgnoringModifiers|
          'ns::|timestamp|
          'ns::|characters|
          'ns::|progress|
          'ns::|uniqueID|
          'ns::|rotation|
          'ns::|stage|
          'ns::|userData|
          'ns::|window|
          'ns::|subtype|
          'ns::|type|
          'ns::|stackSize|
          'ns::|setStackSize:|
          'ns::|isDying|
          'ns::|initWithTarget:selector:object:|
          'ns::|qualityOfService|
          'ns::|setThreadPriority:|
          'ns::|threadPriority|
          'ns::|isExecuting|
          'ns::|isFinished|
          'ns::|initWithBlock:|
          'ns::|main|
          'ns::|isCancelled|
          'ns::|runLoop|
          'ns::|threadDictionary|
          'ns::|cancel|
          'ns::|isMainThread|
          'ns::|start|
          'ns::|setName:|
          'ns::|setQualityOfService:|
          'ns::|name|
          'ns::|executableArchitecture|
          'ns::|ownsMenuBar|
          'ns::|isFinishedLaunching|
          'ns::|isTerminated|
          'ns::|applyPendingPropertyChanges|
          'ns::|forceTerminate|
          'ns::|launchDate|
          'ns::|applicationSerialNumber|
          'ns::|initWithApplicationSerialNumber:|
          'ns::|hide|
          'ns::|activateWithOptions:|
          'ns::|unhide|
          'ns::|icon|
          'ns::|terminate|
          'ns::|processIdentifier|
          'ns::|localizedName|
          'ns::|completeStateRestoration|
          'ns::|extendStateRestoration|
          'ns::|setDefaultHelpBookSearchEnabled:|
          'ns::|isDefaultHelpBookSearchEnabled|
          'ns::|searchString:inUserInterfaceItemString:searchRange:foundRange:|
          'ns::|unregisterUserInterfaceItemSearchHandler:|
          'ns::|registerUserInterfaceItemSearchHandler:|
          'ns::|servicesMenu|
          'ns::|changeWindowsItem:title:filename:|
          'ns::|removeWindowsItem:|
          'ns::|resetAutomaticCustomizeTouchBarMenuItemEnabled|
          'ns::|setAutomaticCustomizeTouchBarMenuItemEnabled:|
          'ns::|isAutomaticCustomizeTouchBarMenuItemEnabled|
          'ns::|updateWindowsItem:|
          'ns::|setValue:forSafeApertureCompatibilityEnvironmentVariable:|
          'ns::|setValue:forSafeApertureCompatibilityConnectionProperty:|
          'ns::|getValue:forSafeApertureCompatibilityDefaultsKey:|
          'ns::|valueForSafeApertureCompatibilityEnvironmentVariable:|
          'ns::|getValue:forSafeApertureCompatibilityURLResourceKey:|
          'ns::|registerServicesMenuSendTypes:returnTypes:|
          'ns::|orderFrontStandardAboutPanel:|
          'ns::|orderFrontStandardAboutPanelWithOptions:|
          'ns::|unregisterServiceProviderNamed:|
          'ns::|registerServiceProvider:withName:|
          'ns::|setServicesProvider:|
          'ns::|servicesProvider|
          'ns::|setGestureEventMask:|
          'ns::|gestureEventMask|
          'ns::|setAppleMenu:|
          'ns::|setWindowsMenu:|
          'ns::|setServicesMenu:|
          'ns::|showHelp:|
          'ns::|activateContextHelpMode:|
          'ns::|orderFrontFontPanel:|
          'ns::|targetForAction:|
          'ns::|tryToPerform:with:|
          'ns::|discardEventsMatchingMask:beforeEvent:|
          'ns::|shouldBeTreatedAsInkEvent:|
          'ns::|orderFrontPreferencesPanel:|
          'ns::|NS_touchBarProvidersKeyPaths|
          'ns::|NS_touchBarProviders|
          'ns::|restoreWindowWithIdentifier:state:completionHandler:|
          'ns::|addWindowsItem:title:filename:|
          'ns::|areCursorRectsEnabled|
          'ns::|setAppearance:|
          'ns::|sendAction:to:from:|
          'ns::|runModalForCarbonWindow:|
          'ns::|handleQuitScriptCommand:|
          'ns::|handlePrintScriptCommand:|
          'ns::|handleOpenScriptCommand:|
          'ns::|valueInOrderedWindowsWithUniqueID:|
          'ns::|orderedWindows|
          'ns::|orderedDocuments|
          'ns::|isAccessibilityMovingFromTable|
          'ns::|isAccessibilityEventProcessedNotificationEnabled|
          'ns::|isAccessibilityEventProcessedNotificationSupported|
          'ns::|isAccessibilityMainThreadIdleNotificationEnabled|
          'ns::|isAccessibilityMainThreadIdleNotificationSupported|
          'ns::|accessibilityFocusChangedToElement:|
          'ns::|setAccessibilityMovingFromTable:|
          'ns::|accessibilityHitTest|
          'ns::|accessibilityAuditIssuesAttribute|
          'ns::|accessibilitySetEnhancedUserInterfaceAttribute:|
          'ns::|accessibilityIsEnhancedUserInterfaceAttributeSettable|
          'ns::|accessibilityEnhancedUserInterfaceAttribute|
          'ns::|accessibilityIsFocusedUIElementAttributeSettable|
          'ns::|accessibilityFocusedUIElementAttribute|
          'ns::|accessibilityIsFocusedWindowAttributeSettable|
          'ns::|accessibilityIsMainWindowAttributeSettable|
          'ns::|accessibilityMainWindowAttribute|
          'ns::|accessibilitySetHiddenAttribute:|
          'ns::|accessibilityIsHiddenAttributeSettable|
          'ns::|accessibilityHiddenAttribute|
          'ns::|accessibilitySetFrontmostAttribute:|
          'ns::|accessibilityIsFrontmostAttributeSettable|
          'ns::|accessibilityFrontmostAttribute|
          'ns::|accessibilityIsChildrenAttributeSettable|
          'ns::|accessibilityChildrenInNavigationOrderAttribute|
          'ns::|accessibilityIsWindowsAttributeSettable|
          'ns::|accessibilityIsMenuBarAttributeSettable|
          'ns::|accessibilityIsTitleAttributeSettable|
          'ns::|accessibilityTitleAttribute|
          'ns::|accessibilityWorkaroundRemoveExtraWindow:|
          'ns::|accessibilityWorkaroundAddExtraWindow:|
          'ns::|set_currentSentenceHighlightInfo:|
          'ns::|set_currentWordHighlightInfo:|
          'ns::|accessibilityFocusedWindowAttribute|
          'ns::|accessibilityFunctionRowTopLevelElementsAttribute|
          'ns::|accessibilityWindowsAttribute|
          'ns::|accessibilityMenuBarAttribute|
          'ns::|accessibilityExtrasMenuBarAttribute|
          'ns::|importFromDevice:|
          'ns::|enableRelaunchOnLogin|
          'ns::|disableRelaunchOnLogin|
          'ns::|isLaunchedForTesting|
          'ns::|performActivateDeactivateTestUsingTestName:completionHandler:|
          'ns::|performResizeTestOnWindow:preTestHandler:postTestHandler:|
          'ns::|performResizeTestOnWindow:usingTestName:completionHandler:|
          'ns::|performScrollTestOnScrollView:usingTestName:completionHandler:|
          'ns::|installCACommitCompletionBlock:|
          'ns::|finishedSubTest:forTest:waitForCommit:withCompletionHandler:|
          'ns::|finishedSubTest:forTest:|
          'ns::|startedSubTest:forTest:withMetrics:|
          'ns::|startedSubTest:forTest:|
          'ns::|failedTest:withFailure:withResults:|
          'ns::|failedTest:withResults:|
          'ns::|failedTest:withFailure:|
          'ns::|failedTest:|
          'ns::|finishedTest:waitForCommit:extraResults:withTeardownBlock:|
          'ns::|finishedTest:waitForCommit:extraResults:|
          'ns::|finishedTest:extraResults:waitForNotification:withTeardownBlock:|
          'ns::|finishedTest:extraResults:waitForNotification:|
          'ns::|finishedTest:extraResults:withTeardownBlock:|
          'ns::|finishedTest:extraResults:|
          'ns::|finishedTest:|
          'ns::|startedTest:|
          'ns::|runTest:options:|
          'ns::|isRunningQuitTest|
          'ns::|isRunningTest:|
          'ns::|isRunningTest|
          'ns::|enabledRemoteNotificationTypes|
          'ns::|isRegisteredForRemoteNotifications|
          'ns::|unregisterForRemoteNotifications|
          'ns::|registerForRemoteNotifications|
          'ns::|registerForRemoteNotificationTypes:|
          'ns::|presentError:modalForWindow:delegate:didPresentSelector:contextInfo:|
          'ns::|willPresentError:|
          'ns::|presentError:|
          'ns::|memoryStatus|
          'ns::|removeIdleMonitor:|
          'ns::|addIdleMonitorUsingHandler:|
          'ns::|removeMemoryPressureMonitor:|
          'ns::|addMemoryPressureMonitorUsingHandler:|
          'ns::|abortAllToolTips|
          'ns::|setCanEnterFullScreenMode:|
          'ns::|exitFullScreenMode:|
          'ns::|setPresentationOptions:|
          'ns::|isFullKeyboardAccessEnabled|
          'ns::|speechSynthesizer:didFinishSpeaking:|
          'ns::|reportException:|
          'ns::|setDockMenu:|
          'ns::|helpMenu|
          'ns::|setHelpMenu:|
          'ns::|setMenu:|
          'ns::|setActivationPolicy:|
          'ns::|applicationIconImage|
          'ns::|frontWindow|
          'ns::|quickLookPreviewItemsAtWindowLocation:|
          'ns::|event:wouldActivateWindow:|
          'ns::|rightMouseDown:|
          'ns::|onFirstEvent|
          'ns::|preventWindowOrdering|
          'ns::|delayWindowOrdering|
          'ns::|runModalSession:|
          'ns::|abortModal|
          'ns::|endSheet:|
          'ns::|stopModal|
          'ns::|stop:|
          'ns::|beginSheet:modalForWindow:modalDelegate:didEndSelector:contextInfo:|
          'ns::|runModalForWindow:relativeToWindow:|
          'ns::|deactivate|
          'ns::|replyToOpenOrPrint:|
          'ns::|openTempFile:ok:|
          'ns::|openFile:ok:|
          'ns::|unhide:|
          'ns::|isProtectedDataAvailable|
          'ns::|occlusionState|
          'ns::|markAppLaunchComplete|
          'ns::|enterFullScreenMode:|
          'ns::|modeAndOptions:forPresentationOptions:usingForFullScreen:|
          'ns::|doCommandBySelector:|
          'ns::|showGuessPanel:|
          'ns::|orderFrontColorPanel:|
          'ns::|toggleTouchBarControlStripCustomizationPalette:|
          'ns::|toggleTouchBarCustomizationPalette:|
          'ns::|hideOtherApplications:|
          'ns::|unhideAllApplications:|
          'ns::|zoomAll:|
          'ns::|miniaturizeAll:|
          'ns::|alternateArrangeInFront:|
          'ns::|arrangeInFront:|
          'ns::|stopDictation:|
          'ns::|startDictation:|
          'ns::|runPageLayout:|
          'ns::|isSpeaking|
          'ns::|stopSpeaking:|
          'ns::|enableCursorRects|
          'ns::|disableCursorRects|
          'ns::|setMainMenu:|
          'ns::|quickLookPreviewItems:|
          'ns::|activeSpaceChanged:|
          'ns::|currentEvent|
          'ns::|restoreStateWithCoder:|
          'ns::|encodeRestorableStateWithCoder:|
          'ns::|shouldRestoreStateOnNextLaunch|
          'ns::|replyToApplicationShouldTerminate:|
          'ns::|cancelUserAttentionRequest:|
          'ns::|dockTile|
          'ns::|requestUserAttention:|
          'ns::|beginModalSessionForWindow:relativeToWindow:|
          'ns::|endModalSession:|
          'ns::|beginModalSessionForWindow:|
          'ns::|finishLaunching|
          'ns::|sendEvent:|
          'ns::|modalWindow|
          'ns::|makeWindowsPerform:inOrder:|
          'ns::|updateWindows|
          'ns::|currentSystemPresentationOptions|
          'ns::|unhideWithoutActivation|
          'ns::|activationPolicy|
          'ns::|validRequestorForSendType:returnType:|
          'ns::|setApplicationIconImage:|
          'ns::|orderFrontCharacterPalette:|
          'ns::|setIsActive:|
          'ns::|hide:|
          'ns::|terminate:|
          'ns::|touchBar|
          'ns::|speakString:|
          'ns::|stopModalWithCode:|
          'ns::|endSheet:returnCode:|
          'ns::|runModalForWindow:|
          'ns::|accessibilityChildrenAttribute|
          'ns::|setAccessibilityEventProcessedNotificationEnabled:|
          'ns::|setAccessibilityMainThreadIdleNotificationEnabled:|
          'ns::|accessibilityPerformAction:|
          'ns::|accessibilityActionDescription:|
          'ns::|accessibilityActionNames|
          'ns::|accessibilitySetValue:forAttribute:|
          'ns::|accessibilityIsAttributeSettable:|
          'ns::|accessibilityIsRoleDescriptionAttributeSettable|
          'ns::|accessibilityRoleDescriptionAttribute|
          'ns::|accessibilityIsRoleAttributeSettable|
          'ns::|accessibilityRoleAttribute|
          'ns::|supplementalTargetForAction:sender:|
          'ns::|closeAll:|
          'ns::|windowsMenu|
          'ns::|validateUserInterfaceItem:|
          'ns::|validateMenuItem:|
          'ns::|enumerateWindowsWithOptions:usingBlock:|
          'ns::|windows|
          'ns::|presentationOptions|
          'ns::|mainWindow|
          'ns::|targetForAction:to:from:|
          'ns::|canEnterFullScreenMode|
          'ns::|accessibilityMayContainProtectedContent|
          'ns::|mainMenu|
          'ns::|accessibilityAttributeValue:|
          'ns::|accessibilityAttributeNames|
          'ns::|accessibilityIsIgnored|
          'ns::|accessibilityFrame|
          'ns::|accessibilityHitTest:|
          'ns::|accessibilityFocusedUIElement|
          'ns::|accessibilitySetMayContainProtectedContent:|
          'ns::|accessibilityParent|
          'ns::|userInterfaceLayoutDirection|
          'ns::|windowWithWindowNumber:|
          'ns::|activateIgnoringOtherApps:|
          'ns::|appearance|
          'ns::|effectiveAppearance|
          'ns::|postEvent:atStart:|
          'ns::|nextEventMatchingMask:untilDate:inMode:dequeue:|
          'ns::|setWindowsNeedUpdate:|
          'ns::|pushRegistrationDidReceiveRemotePush:|
          'ns::|pushRegistrationDidFailToRegister:|
          'ns::|pushRegistrationDidRegisterWithDeviceToken:|
          'ns::|keyWindow|
          'ns::|contextID|
          'ns::|context|
          'ns::|isRunning|
          'ns::|enableAutomaticTermination|
          'ns::|disableAutomaticTermination|
          'ns::|isActive|
          'ns::|menu|
          'ns::|.cxx_destruct|
          'ns::|isHidden|
          'ns::|setDelegate:|
          'ns::|delegate|
          'ns::|run|
          'ns::|initWithFloat:|
          'ns::|initWithUnsignedLong:|
          'ns::|initWithUnsignedInteger:|
          'ns::|initWithInteger:|
          'ns::|initWithBool:|
          'ns::|decimalValue|
          'ns::|unsignedIntegerValue|
          'ns::|integerValue|
          'ns::|stringValue|
          'ns::|descriptionWithLocale:|
          'ns::|isEqualToNumber:|
          'ns::|initWithCoder:|
          'ns::|encodeWithCoder:|
          'ns::|compare:|
          'ns::|boolValue|
          'ns::|redactedDescription|
          'ns::|unsignedLongLongValue|
          'ns::|longLongValue|
          'ns::|doubleValue|
          'ns::|floatValue|
          'ns::|unsignedLongValue|
          'ns::|longValue|
          'ns::|unsignedIntValue|
          'ns::|intValue|
          'ns::|unsignedShortValue|
          'ns::|shortValue|
          'ns::|unsignedCharValue|
          'ns::|charValue|
          'ns::|initWithDouble:|
          'ns::|initWithUnsignedLongLong:|
          'ns::|initWithLongLong:|
          'ns::|initWithLong:|
          'ns::|initWithUnsignedInt:|
          'ns::|initWithInt:|
          'ns::|initWithUnsignedShort:|
          'ns::|initWithShort:|
          'ns::|initWithUnsignedChar:|
          'ns::|initWithChar:|
          'ns::|copyWithZone:|
          'ns::|processPredicate|
          'ns::|rbs_pid|
          'ns::|matchesProcess:|
          'ns::|preservationPriorityForTag:|
          'ns::|setPreservationPriority:forTag:|
          'ns::|setPreservationPriority:forTags:|
          'ns::|localizedAttributedStringForKey:value:table:|
          'ns::|executableArchitectures|
          'ns::|preflightAndReturnError:|
          'ns::|developmentLocalization|
          'ns::|pathsForResourcesOfType:inDirectory:forLanguage:|
          'ns::|pathForResource:ofType:inDirectory:forLanguage:|
          'ns::|invalidateResourceCache|
          'ns::|bundleLanguages|
          'ns::|versionNumber|
          'ns::|builtInPlugInsURL|
          'ns::|builtInPlugInsPath|
          'ns::|sharedSupportURL|
          'ns::|sharedSupportPath|
          'ns::|sharedFrameworksURL|
          'ns::|sharedFrameworksPath|
          'ns::|privateFrameworksURL|
          'ns::|privateFrameworksPath|
          'ns::|URLForAuxiliaryExecutable:|
          'ns::|pathForAuxiliaryExecutable:|
          'ns::|executablePath|
          'ns::|resourcePath|
          'ns::|localizedStringForKey:value:table:localization:|
          'ns::|localizedStringForKey:value:table:|
          'ns::|URLsForResourcesWithExtension:subdirectory:|
          'ns::|URLsForResourcesWithExtension:subdirectory:localization:|
          'ns::|findBundleResourceURLsCallingMethod:passingTest:|
          'ns::|pathsForResourcesOfType:inDirectory:|
          'ns::|pathForResource:ofType:inDirectory:|
          'ns::|localizedAttributedStringForKey:value:table:localization:|
          'ns::|pathsForResourcesOfType:inDirectory:forLocalization:|
          'ns::|pathForResource:ofType:inDirectory:forLocalization:|
          'ns::|isLoaded|
          'ns::|localizedInfoDictionary|
          'ns::|localizations|
          'ns::|initWithPath:|
          'ns::|unload|
          'ns::|URLForResource:withExtension:subdirectory:|
          'ns::|URLForResource:withExtension:subdirectory:localization:|
          'ns::|classNamed:|
          'ns::|URLForResource:withExtension:|
          'ns::|pathForResource:ofType:|
          'ns::|resourceURL|
          'ns::|bundlePath|
          'ns::|principalClass|
          'ns::|loadAndReturnError:|
          'ns::|objectForInfoDictionaryKey:|
          'ns::|executableURL|
          'ns::|appStoreReceiptURL|
          'ns::|bundleURL|
          'ns::|bundleIdentifier|
          'ns::|infoDictionary|
          'ns::|preferredLocalizations|
          'ns::|initWithURL:|
          'ns::|load|
          'ns::|localizedStringInDeviceLanguageForKey:|
          'ns::|loadNibFile:externalNameTable:options:withZone:|
          'ns::|loadNibFile:externalNameTable:withZone:|
          'ns::|pathForImageResource:|
          'ns::|URLForImageResource:|
          'ns::|URLsForImageResource:|
          'ns::|contextHelpForKey:|
          'ns::|pathForSoundResource:|
          'ns::|imageForResource:|
          'ns::|loadNibNamed:owner:topLevelObjects:|
          'ns::|mutableCopy|
          'ns::|forwardingTargetForSelector:|
          'ns::|forwardInvocation:|
          'ns::|methodForSelector:|
          'ns::|isFault|
          'ns::|allowsWeakReference|
          'ns::|retainWeakReference|
          'ns::|init|
          'ns::|debugDescription|
          'ns::|superclass|
          'ns::|hash|
          'ns::|zone|
          'ns::|respondsToSelector:|
          'ns::|conformsToProtocol:|
          'ns::|isMemberOfClass:|
          'ns::|isKindOfClass:|
          'ns::|isProxy|
          'ns::|performSelector:withObject:withObject:|
          'ns::|performSelector:withObject:|
          'ns::|performSelector:|
          'ns::|self|
          'ns::|class|
          'ns::|isEqual:|
          'ns::|dealloc|
          'ns::|finalize|
          'ns::|copy|
          'ns::|autorelease|
          'ns::|retainCount|
          'ns::|release|
          'ns::|retain|
          'ns::|methodSignatureForSelector:|
          'ns::|doesNotRecognizeSelector:|
          'ns::|description|
          'ns::|isNSValue__|
          'ns::|isNSTimeZone__|
          'ns::|isNSOrderedSet__|
          'ns::|isNSObject__|
          'ns::|isNSData__|
          'ns::|isNSSet__|
          'ns::|isNSDictionary__|
          'ns::|isNSArray__|
          'ns::|isNSDate__|
          'ns::|isNSNumber__|
          'ns::|isNSCFConstantString__|
          'ns::|isNSString__|
          'ns::|takeStoredValuesFromDictionary:|
          'ns::|removeObject:fromBothSidesOfRelationshipWithKey:|
          'ns::|flushKeyBindings|
          'ns::|clearProperties|
          'ns::|allPropertyKeys|
          'ns::|addObject:toBothSidesOfRelationshipWithKey:|
          'ns::|validateTakeValue:forKeyPath:|
          'ns::|addObject:toPropertyWithKey:|
          'ns::|removeObject:fromPropertyWithKey:|
          'ns::|isToManyKey:|
          'ns::|validateValue:forKey:|
          'ns::|ownsDestinationObjectsForRelationshipKey:|
          'ns::|entityName|
          'ns::|classDescriptionForDestinationKey:|
          'ns::|performSelectorInBackground:withObject:|
          'ns::|performSelector:onThread:withObject:waitUntilDone:|
          'ns::|performSelectorOnMainThread:withObject:waitUntilDone:|
          'ns::|performSelectorOnMainThread:withObject:waitUntilDone:modes:|
          'ns::|performSelector:onThread:withObject:waitUntilDone:modes:|
          'ns::|isCaseInsensitiveLike:|
          'ns::|isLike:|
          'ns::|doesContain:|
          'ns::|isNotEqualTo:|
          'ns::|isGreaterThan:|
          'ns::|isGreaterThanOrEqualTo:|
          'ns::|isLessThan:|
          'ns::|isLessThanOrEqualTo:|
          'ns::|isEqualTo:|
          'ns::|classCode|
          'ns::|performSelector:object:afterDelay:|
          'ns::|performSelector:withObject:afterDelay:|
          'ns::|performSelector:withObject:afterDelay:inModes:|
          'ns::|classForPortCoder|
          'ns::|removeValueAtIndex:fromPropertyWithKey:|
          'ns::|insertValue:inPropertyWithKey:|
          'ns::|replaceValueAtIndex:inPropertyWithKey:withValue:|
          'ns::|insertValue:atIndex:inPropertyWithKey:|
          'ns::|valueWithUniqueID:inPropertyWithKey:|
          'ns::|valueWithName:inPropertyWithKey:|
          'ns::|valueAtIndex:inPropertyWithKey:|
          'ns::|coerceValueForScriptingProperties:|
          'ns::|scriptingProperties|
          'ns::|scriptingValueForSpecifier:|
          'ns::|setScriptingProperties:|
          'ns::|coerceValue:forKey:|
          'ns::|autoContentAccessingProxy|
          'ns::|removeObserver:forKeyPath:|
          'ns::|observationInfo|
          'ns::|didChangeValueForKey:withSetMutation:usingObjects:|
          'ns::|willChangeValueForKey:withSetMutation:usingObjects:|
          'ns::|didChange:valuesAtIndexes:forKey:|
          'ns::|willChange:valuesAtIndexes:forKey:|
          'ns::|setValuesForKeysWithDictionary:|
          'ns::|mutableSetValueForKey:|
          'ns::|mutableOrderedSetValueForKey:|
          'ns::|mutableArrayValueForKey:|
          'ns::|validateValue:forKey:error:|
          'ns::|setNilValueForKey:|
          'ns::|setValue:forUndefinedKey:|
          'ns::|addObservationTransformer:|
          'ns::|addObserverBlock:|
          'ns::|addChainedObservers:|
          'ns::|className|
          'ns::|removeObservation:forObservableKeyPath:|
          'ns::|removeObserver:forKeyPath:context:|
          'ns::|observeValueForKeyPath:ofObject:change:context:|
          'ns::|addObserver:forKeyPath:options:context:|
          'ns::|setObservation:forObservingKeyPath:|
          'ns::|finishObserving|
          'ns::|receiveObservedError:|
          'ns::|receiveObservedValue:|
          'ns::|removeObservation:|
          'ns::|addObserver:forObservableKeyPath:|
          'ns::|mutableSetValueForKeyPath:|
          'ns::|mutableOrderedSetValueForKeyPath:|
          'ns::|mutableArrayValueForKeyPath:|
          'ns::|setValue:forKeyPath:|
          'ns::|validateValue:forKeyPath:error:|
          'ns::|createKeyValueBindingForKey:typeMask:|
          'ns::|keyValueBindingForKey:typeMask:|
          'ns::|unableToSetNilForKey:|
          'ns::|takeValuesFromDictionary:|
          'ns::|valuesForKeys:|
          'ns::|takeValue:forKeyPath:|
          'ns::|takeValue:forKey:|
          'ns::|takeStoredValue:forKey:|
          'ns::|storedValueForKey:|
          'ns::|handleTakeValue:forUnboundKey:|
          'ns::|handleQueryWithUnboundKey:|
          'ns::|newScriptingObjectOfClass:forValueForKey:withContentsValue:properties:|
          'ns::|methodDescriptionForSelector:|
          'ns::|copyScriptingValue:forKey:withProperties:|
          'ns::|classDescription|
          'ns::|inverseForRelationshipKey:|
          'ns::|toManyRelationshipKeys|
          'ns::|toOneRelationshipKeys|
          'ns::|attributeKeys|
          'ns::|classForArchiver|
          'ns::|replacementObjectForArchiver:|
          'ns::|objectSpecifier|
          'ns::|valueForKeyPath:|
          'ns::|dictionaryWithValuesForKeys:|
          'ns::|replacementObjectForKeyedArchiver:|
          'ns::|classForKeyedArchiver|
          'ns::|addObserver:|
          'ns::|valueForUndefinedKey:|
          'ns::|valueForKey:|
          'ns::|didChangeValueForKey:|
          'ns::|willChangeValueForKey:|
          'ns::|replacementObjectForPortCoder:|
          'ns::|setValue:forKey:|
          'ns::|setObservationInfo:|
          'ns::|implementsSelector:|
          'ns::|awakeAfterUsingCoder:|
          'ns::|replacementObjectForCoder:|
          'ns::|classForCoder|
          'ns::|bs_encoded|
          'ns::|bs_secureEncoded|
          'ns::|bs_isPlistableType|
          'ns::|supportsBSXPCSecureCoding|
          'ns::|NSRepresentation|
          'ns::|RBSIsXPCObject|
          'ns::|supportsRBSXPCSecureCoding|
          'ns::|CA_archivingValueForKey:|
          'ns::|CAMLType|
          'ns::|CA_interpolateValues:::interpolator:|
          'ns::|encodeWithCAMLWriter:|
          'ns::|CA_validateValue:forKey:|
          'ns::|CAMLTypeSupportedForKey:|
          'ns::|CAMLTypeForKey:|
          'ns::|CA_copyNumericValue:|
          'ns::|CA_copyRenderValueWithColorspace:|
          'ns::|CA_copyRenderValue|
          'ns::|CA_prepareRenderValue|
          'ns::|CA_roundToIntegerFromValue:|
          'ns::|CA_distanceToValue:|
          'ns::|CA_interpolateValue:byFraction:|
          'ns::|CA_addValue:multipliedBy:|
          'ns::|NS_removeTiledLayerDescendent:|
          'ns::|NS_addTiledLayerDescendent:|
          'ns::|NS_tiledLayerVisibleRect|
          'ns::|accessibilitySetPresenterProcessIdentifier:|
          'ns::|NSLifeguard_autorelease|
          'ns::|accessibilityRemoveTemporaryChild:|
          'ns::|accessibilityAddTemporaryChild:|
          'ns::|prepareForInterfaceBuilder|
          'ns::|infoForBinding:|
          'ns::|exposedBindings|
          'ns::|optionDescriptionsForBinding:|
          'ns::|NS_observationForKeyPaths:options:block:|
          'ns::|NS_observationForKeyPath:options:block:|
          'ns::|valueClassForBinding:|
          'ns::|unbind:|
          'ns::|setUserInterfaceItemIdentifier:|
          'ns::|userInterfaceItemIdentifier|
          'ns::|awakeFromNib|
          'ns::|bind:toObject:withKeyPath:options:|
          'ns::|accessibilitySupportsCustomElementData|
          'ns::|accessibilityDecodeOverriddenAttributes:|
          'ns::|accessibilityEncodeOverriddenAttributes:|
          'ns::|accessibilitySetOverrideValue:forAttribute:|
          'ns::|accessibilityAllowsOverriddenAttributesWhenIgnored|
          'ns::|accessibilityShouldSendNotification:|
          'ns::|accessibilitySupportsNotifications|
          'ns::|accessibilitySupportsOverriddenAttributes|
          'ns::|accessibilityShouldUseUniqueId|
          'ns::|accessibilityPresenterProcessIdentifier|
          'ns::|accessibilityPerformShowMenuOfChild:|
          'ns::|accessibilityTemporaryChildren|
          'ns::|accessibilityAttributedValueForStringAttributeAttributeForParameter:|
          'ns::|accessibilityIndexForChildUIElementAttributeForParameter:|
          'ns::|accessibilityAttributeValue:forParameter:|
          'ns::|accessibilityParameterizedAttributeNames|
          'ns::|accessibilityArrayAttributeValues:index:maxCount:|
          'ns::|accessibilityIndexOfChild:|
          'ns::|accessibilityArrayAttributeCount:|
          'ns::|accessibilityVisibleArea|
          'ns::|accessibilityReplaceRange:withText:|
          'ns::|accessibilityOverriddenAttributes|) :ns)