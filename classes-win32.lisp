(in-package :silica)

(defclass win32-application-mixin ()
  ((instance)
   (helper-window-handle)
   (helper-window-class)
   (main-window-class :initform nil)
   (device-notification-handle)
   (acquired-monitor-count :initform 0)
   (clipboard-string)
   (keycodes :initform (make-array 512 :element-type '(unsigned-byte 16) :initial-element 0))
   (scancodes)
   (keynames)
   (restore-cursor-pos-x)
   (restore-cursor-pos-y)
   (disabled-cursor-window)
   (captured-cursor-window)
   (raw-input)
   (mouse-trail-size)
   (dinput8-instance)
   (dinput8-create)
   (dinput8-api)
   (xinput-instance)
   (xinput-get-capabilities)
   (xinput-get-state)
   (user32-instance)
   ;;(user32-set-process-dpi-aware)
   ;;(user32-change-window-message-filter-ex)
   ;;(user32-enable-non-client-dpi-scaling)
   ;;(user32-set-process-dpi-awareness-context)
   ;;(user32-get-dpi-for-window)
   ;;(user32-adjust-window-rect-ex-for-dpi)
   ;;(user32-get-system-metrics-for-dpi)
   (dwmapi-instance)
   (dwmapi-is-composition-enabled)
   (dwmapi-flush)
   (dwmapi-enable-blur-behind-window)
   (dwmapi-get-colorization-color)
   (shcore-instance)
   (shcore-set-process-dpi-awareness)
   (shcore-get-dpi-for-monitor)
   (ntdll-instance)
   (ntdll-rtl-verify-version-info)))

(defclass win32-monitor-mixin ()
  ((handle)
   (adapter-name)
   (display-name)
   (public-adapter-name)
   (public-display-name)
   (modes-pruned? :initform nil :type boolean)
   (mode-changed? :initform nil :type boolean)))


(defclass win32-cursor-mixin ()
  ((handle)))

;;
(defclass win32-window-mixin (essential-rect-mixin)
  ((id :initform (gen-window-id))
   (handle :accessor window-handle)
   (big-icon)
   (small-icon)
   (cursor-tracked? :type boolean :initform nil :accessor cursor-tracked?)
   (frame-action? :type boolean :initform nil :accessor frame-action?)
   (iconified? :type boolean :initform nil :accessor iconified?)
   (maximized? :type boolean :initform nil :accessor minimized?)
   (transparent? :type boolean :initform nil :accessor transparent?)
   (scale-to-monitor? :type boolean :initform nil :accessor scale-to-monitor?)
   (key-menu? :type boolean :initform nil :accessor key-menu?)
   (last-cursor-pos-x)
   (last-cursor-pos-y)
   (high-surrogate)))
